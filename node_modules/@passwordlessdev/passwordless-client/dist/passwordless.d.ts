import { AtLeast, PromiseResult, TokenResponse } from './types';
export interface Config {
    apiUrl: string;
    apiKey: string;
    origin: string;
    rpid: string;
}
export declare class Client {
    private config;
    private abortController;
    constructor(config: AtLeast<Config, 'apiKey'>);
    /**
     * Register a new credential to a user
     *
     * @param {string} token Token generated by your backend and the Passwordless API
     */
    register(token: string, credentialNickname: string): PromiseResult<TokenResponse>;
    /**
     * Sign in a user using the userid
     * @param {string} userId
     * @returns
     */
    signinWithId(userId: string): PromiseResult<TokenResponse>;
    /**
     * Sign in a user using an alias
     * @param {string} alias
     * @returns a verify_token
     */
    signinWithAlias(alias: string): PromiseResult<TokenResponse>;
    /**
     * Sign in a user using autofill UI (a.k.a conditional) sign in
     * @returns a verify_token
     */
    signinWithAutofill(): PromiseResult<TokenResponse>;
    /**
     * Sign in a user using discoverable credentials
     * @returns a verify_token
     */
    signinWithDiscoverable(): PromiseResult<TokenResponse>;
    abort(): void;
    isPlatformSupported(): Promise<boolean>;
    isBrowserSupported(): boolean;
    isAutofillSupported(): Promise<boolean>;
    private registerBegin;
    private registerComplete;
    /**
     * Sign in a user
     *
     * @param {SigninMethod} Object containing either UserID or Alias
     * @returns
     */
    private signin;
    private signinBegin;
    private signinComplete;
    private handleAbort;
    private assertBrowserSupported;
    private createHeaders;
}
export declare function isPlatformSupported(): Promise<boolean>;
export declare function isBrowserSupported(): boolean;
export declare function isAutofillSupported(): Promise<boolean>;
