"use strict";Object.defineProperty(exports,"__esModule",{value:!0});async function r(){return!!e()&&PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()}function e(){return void 0!==window.PublicKeyCredential&&"function"==typeof window.PublicKeyCredential}async function t(){const r=window.PublicKeyCredential;return!!r.isConditionalMediationAvailable&&r.isConditionalMediationAvailable()}function i(r){if("string"!=typeof r){const e="Cannot convert from Base64Url to ArrayBuffer: Input was not of type string";throw console.error(e,r),new TypeError(e)}const e=r.replace(/-/g,"+").replace(/_/g,"/");const t=(4-e.length%4)%4,i=e.padEnd(e.length+t,"="),n=window.atob(i),o=new Uint8Array(n.length);for(let r=0;r<n.length;r++)o[r]=n.charCodeAt(r);return o}function n(r){const e=(()=>{if(Array.isArray(r))return Uint8Array.from(r);if(r instanceof ArrayBuffer)return new Uint8Array(r);if(r instanceof Uint8Array)return r;const e="Cannot convert from ArrayBuffer to Base64Url. Input was not of type ArrayBuffer, Uint8Array or Array";throw console.error(e,r),new Error(e)})();let t="";for(let r=0;r<e.byteLength;r++)t+=String.fromCharCode(e[r]);const i=window.btoa(t);return i.replace(/\+/g,"-").replace(/\//g,"_").replace(/=*$/g,"")}function o(r){return function(r){if("object"==typeof(e=r)&&null!==e&&"message"in e&&"string"==typeof e.message)return r;var e;try{return new Error(JSON.stringify(r))}catch(e){return new Error(String(r))}}(r).message}exports.Client=class{constructor(r){this.config={apiUrl:"https://v4.passwordless.dev",apiKey:"",origin:window.location.origin,rpid:window.location.hostname},this.abortController=new AbortController,Object.assign(this.config,r)}async register(r,e){var t;try{this.assertBrowserSupported();const n=await this.registerBegin(r);if(n.error)return console.error(n.error),{error:n.error};n.data.challenge=i(n.data.challenge),n.data.user.id=i(n.data.user.id),null===(t=n.data.excludeCredentials)||void 0===t||t.forEach((r=>{r.id=i(r.id)}));const o=await navigator.credentials.create({publicKey:n.data});if(!o){const r={from:"client",errorCode:"failed_create_credential",title:"Failed to create credential (navigator.credentials.create returned null)"};return console.error(r),{error:r}}return await this.registerComplete(o,n.session,e)}catch(r){const e={from:"client",errorCode:"unknown",title:o(r)};return console.error(r),console.error(e),{error:e}}}async signinWithId(r){return this.signin({userId:r})}async signinWithAlias(r){return this.signin({alias:r})}async signinWithAutofill(){if(!await t())throw new Error("Autofill authentication (conditional meditation) is not supported in this browser");return this.signin({autofill:!0})}async signinWithDiscoverable(){return this.signin({discoverable:!0})}abort(){this.abortController&&this.abortController.abort()}isPlatformSupported(){return r()}isBrowserSupported(){return e()}isAutofillSupported(){return t()}async registerBegin(r){const e=await fetch(`${this.config.apiUrl}/register/begin`,{method:"POST",headers:this.createHeaders(),body:JSON.stringify({token:r,RPID:this.config.rpid,Origin:this.config.origin})}),t=await e.json();return e.ok?t:{error:{...t,from:"server"}}}async registerComplete(r,e,t){const i=r.response,o=await fetch(`${this.config.apiUrl}/register/complete`,{method:"POST",headers:this.createHeaders(),body:JSON.stringify({session:e,response:{id:r.id,rawId:n(r.rawId),type:r.type,extensions:r.getClientExtensionResults(),response:{AttestationObject:n(i.attestationObject),clientDataJson:n(i.clientDataJSON)}},nickname:t,RPID:this.config.rpid,Origin:this.config.origin})}),s=await o.json();return o.ok?s:{error:{...s,from:"server"}}}async signin(r){var e;try{this.assertBrowserSupported(),this.handleAbort(),r||(r={discoverable:!0});const t=await this.signinBegin(r);if(t.error)return t;t.data.challenge=i(t.data.challenge),null===(e=t.data.allowCredentials)||void 0===e||e.forEach((r=>{r.id=i(r.id)}));const n=await navigator.credentials.get({publicKey:t.data,mediation:"autofill"in r?"conditional":void 0,signal:this.abortController.signal});return await this.signinComplete(n,t.session)}catch(r){const e={from:"client",errorCode:"unknown",title:o(r)};return console.error(r),console.error(e),{error:e}}}async signinBegin(r){const e=await fetch(`${this.config.apiUrl}/signin/begin`,{method:"POST",headers:this.createHeaders(),body:JSON.stringify({userId:"userId"in r?r.userId:void 0,alias:"alias"in r?r.alias:void 0,RPID:this.config.rpid,Origin:this.config.origin})}),t=await e.json();return e.ok?t:{error:{...t,from:"server"}}}async signinComplete(r,e){const t=r.response,i=await fetch(`${this.config.apiUrl}/signin/complete`,{method:"POST",headers:this.createHeaders(),body:JSON.stringify({session:e,response:{id:r.id,rawId:n(new Uint8Array(r.rawId)),type:r.type,extensions:r.getClientExtensionResults(),response:{authenticatorData:n(t.authenticatorData),clientDataJson:n(t.clientDataJSON),signature:n(t.signature)}},RPID:this.config.rpid,Origin:this.config.origin})}),o=await i.json();return i.ok?o:{error:{...o,from:"server"}}}handleAbort(){this.abort(),this.abortController=new AbortController}assertBrowserSupported(){if(!e())throw new Error("WebAuthn and PublicKeyCredentials are not supported on this browser/device")}createHeaders(){return{ApiKey:this.config.apiKey,"Content-Type":"application/json","Client-Version":"js-1.1.0"}}},exports.isAutofillSupported=t,exports.isBrowserSupported=e,exports.isPlatformSupported=r;
