export declare type AtLeast<T, K extends keyof T> = Partial<T> & Pick<T, K>;
export declare type SigninMethod = {
    userId: string;
} | {
    alias: string;
} | {
    autofill: boolean;
} | {
    discoverable: boolean;
};
export declare type RegisterBeginResponse = {
    session: string;
    data: PublicKeyCredentialCreationOptions;
};
export declare type Success<T> = {
    [P in keyof T]: T[P];
} & {
    error: undefined;
};
export declare type Error<T> = {
    [P in keyof T]?: undefined;
} & {
    error: ProblemDetails;
};
export declare type Result<T> = Success<T> | Error<T>;
export declare type PromiseResult<T> = Promise<Result<T>>;
export interface TokenResponse {
    token: string;
}
export declare type SigninBeginResponse = {
    data: PublicKeyCredentialRequestOptions;
    session: string;
};
export interface ProblemDetails {
    from: string;
    errorCode: string;
    title: string;
    status?: number;
    detail?: string;
}
