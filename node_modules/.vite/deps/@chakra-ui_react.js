import {
  _objectWithoutPropertiesLoose,
  createPopper,
  index_es_default,
  init_index_es,
  init_is_prop_valid_browser_esm,
  init_lib,
  init_objectWithoutPropertiesLoose,
  is_prop_valid_browser_esm_exports
} from "./chunk-7BTIKZRL.js";
import {
  Icon,
  ariaAttr,
  callAll,
  callAllHandlers,
  createIcon,
  cx,
  dataAttr,
  isObject,
  runIfFn,
  warn
} from "./chunk-TPOLTBQE.js";
import {
  getBox,
  init_css_box_model_esm,
  require_lodash
} from "./chunk-F6FVYPOS.js";
import {
  Combination_default,
  Global,
  ThemeContext,
  ThemeProvider,
  emotion_styled_browser_esm_default,
  keyframes
} from "./chunk-AQW3K2XU.js";
import {
  require_copy_to_clipboard
} from "./chunk-H27PCBDZ.js";
import {
  createMedium,
  createSidecarMedium,
  hideOthers,
  init_es2015,
  init_es20152,
  init_es20153,
  useMergeRefs
} from "./chunk-LJ3QSMXI.js";
import "./chunk-NHM66XNB.js";
import "./chunk-E57KBXQW.js";
import {
  require_prop_types
} from "./chunk-3S4SYJ52.js";
import {
  require_react_dom
} from "./chunk-TRITR2GG.js";
import {
  _extends,
  init_extends
} from "./chunk-PG2UAYX7.js";
import "./chunk-XH7VGOTZ.js";
import "./chunk-QM5JJFV7.js";
import {
  require_jsx_runtime
} from "./chunk-UMZUPRA3.js";
import {
  require_react
} from "./chunk-TUKKSTYG.js";
import {
  import_process,
  init_shim
} from "./chunk-ZGMFR26H.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@chakra-ui/provider/node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/@chakra-ui/provider/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/react/node_modules/react-fast-compare/index.js
var require_react_fast_compare2 = __commonJS({
  "node_modules/@chakra-ui/react/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/spinner/node_modules/react-fast-compare/index.js
var require_react_fast_compare3 = __commonJS({
  "node_modules/@chakra-ui/spinner/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/accordion/node_modules/react-fast-compare/index.js
var require_react_fast_compare4 = __commonJS({
  "node_modules/@chakra-ui/accordion/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/avatar/node_modules/react-fast-compare/index.js
var require_react_fast_compare5 = __commonJS({
  "node_modules/@chakra-ui/avatar/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/breadcrumb/node_modules/react-fast-compare/index.js
var require_react_fast_compare6 = __commonJS({
  "node_modules/@chakra-ui/breadcrumb/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/button/node_modules/react-fast-compare/index.js
var require_react_fast_compare7 = __commonJS({
  "node_modules/@chakra-ui/button/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/card/node_modules/react-fast-compare/index.js
var require_react_fast_compare8 = __commonJS({
  "node_modules/@chakra-ui/card/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/control-box/node_modules/react-fast-compare/index.js
var require_react_fast_compare9 = __commonJS({
  "node_modules/@chakra-ui/control-box/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/editable/node_modules/react-fast-compare/index.js
var require_react_fast_compare10 = __commonJS({
  "node_modules/@chakra-ui/editable/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/input/node_modules/react-fast-compare/index.js
var require_react_fast_compare11 = __commonJS({
  "node_modules/@chakra-ui/input/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/layout/node_modules/react-fast-compare/index.js
var require_react_fast_compare12 = __commonJS({
  "node_modules/@chakra-ui/layout/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/menu/node_modules/react-fast-compare/index.js
var require_react_fast_compare13 = __commonJS({
  "node_modules/@chakra-ui/menu/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/modal/node_modules/react-fast-compare/index.js
var require_react_fast_compare14 = __commonJS({
  "node_modules/@chakra-ui/modal/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/number-input/node_modules/react-fast-compare/index.js
var require_react_fast_compare15 = __commonJS({
  "node_modules/@chakra-ui/number-input/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/pin-input/node_modules/react-fast-compare/index.js
var require_react_fast_compare16 = __commonJS({
  "node_modules/@chakra-ui/pin-input/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/popover/node_modules/react-fast-compare/index.js
var require_react_fast_compare17 = __commonJS({
  "node_modules/@chakra-ui/popover/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/progress/node_modules/react-fast-compare/index.js
var require_react_fast_compare18 = __commonJS({
  "node_modules/@chakra-ui/progress/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/radio/node_modules/react-fast-compare/index.js
var require_react_fast_compare19 = __commonJS({
  "node_modules/@chakra-ui/radio/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/select/node_modules/react-fast-compare/index.js
var require_react_fast_compare20 = __commonJS({
  "node_modules/@chakra-ui/select/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/skeleton/node_modules/react-fast-compare/index.js
var require_react_fast_compare21 = __commonJS({
  "node_modules/@chakra-ui/skeleton/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/slider/node_modules/react-fast-compare/index.js
var require_react_fast_compare22 = __commonJS({
  "node_modules/@chakra-ui/slider/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/stat/node_modules/react-fast-compare/index.js
var require_react_fast_compare23 = __commonJS({
  "node_modules/@chakra-ui/stat/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/switch/node_modules/react-fast-compare/index.js
var require_react_fast_compare24 = __commonJS({
  "node_modules/@chakra-ui/switch/node_modules/react-fast-compare/index.js"(exports, module) {
    init_shim();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual25(a, b) {
      try {
        return equal(a, b);
      } catch (error25) {
        if ((error25.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error25;
      }
    };
  }
});

// node_modules/@chakra-ui/react/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/dist/chunk-DGNA6VRZ.mjs
init_shim();

// node_modules/@chakra-ui/provider/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/provider/dist/chunk-5PBJXT35.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/css-reset/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/css-reset/dist/chunk-ZGCVOC2V.mjs
init_shim();
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var css = String.raw;
var vhPolyfill = css`
  :root,
  :host {
    --chakra-vh: 100vh;
  }

  @supports (height: -webkit-fill-available) {
    :root,
    :host {
      --chakra-vh: -webkit-fill-available;
    }
  }

  @supports (height: -moz-fill-available) {
    :root,
    :host {
      --chakra-vh: -moz-fill-available;
    }
  }

  @supports (height: 100dvh) {
    :root,
    :host {
      --chakra-vh: 100dvh;
    }
  }
`;
var CSSPolyfill = () => (0, import_jsx_runtime.jsx)(Global, { styles: vhPolyfill });
var CSSReset = ({ scope = "" }) => (0, import_jsx_runtime.jsx)(
  Global,
  {
    styles: css`
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        margin: 0;
        font-feature-settings: "kern";
      }

      ${scope} :where(*, *::before, *::after) {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
        word-wrap: break-word;
      }

      main {
        display: block;
      }

      ${scope} hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      ${scope} :where(pre, code, kbd,samp) {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      ${scope} a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      ${scope} abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      ${scope} :where(b, strong) {
        font-weight: bold;
      }

      ${scope} small {
        font-size: 80%;
      }

      ${scope} :where(sub,sup) {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      ${scope} sub {
        bottom: -0.25em;
      }

      ${scope} sup {
        top: -0.5em;
      }

      ${scope} img {
        border-style: none;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      ${scope} :where(button, input) {
        overflow: visible;
      }

      ${scope} :where(button, select) {
        text-transform: none;
      }

      ${scope} :where(
          button::-moz-focus-inner,
          [type="button"]::-moz-focus-inner,
          [type="reset"]::-moz-focus-inner,
          [type="submit"]::-moz-focus-inner
        ) {
        border-style: none;
        padding: 0;
      }

      ${scope} fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      ${scope} legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      ${scope} progress {
        vertical-align: baseline;
      }

      ${scope} textarea {
        overflow: auto;
      }

      ${scope} :where([type="checkbox"], [type="radio"]) {
        box-sizing: border-box;
        padding: 0;
      }

      ${scope} input[type="number"]::-webkit-inner-spin-button,
      ${scope} input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      ${scope} input[type="number"] {
        -moz-appearance: textfield;
      }

      ${scope} input[type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      ${scope} input[type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ${scope} ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      ${scope} details {
        display: block;
      }

      ${scope} summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      ${scope} :where(
          blockquote,
          dl,
          dd,
          h1,
          h2,
          h3,
          h4,
          h5,
          h6,
          hr,
          figure,
          p,
          pre
        ) {
        margin: 0;
      }

      ${scope} button {
        background: transparent;
        padding: 0;
      }

      ${scope} fieldset {
        margin: 0;
        padding: 0;
      }

      ${scope} :where(ol, ul) {
        margin: 0;
        padding: 0;
      }

      ${scope} textarea {
        resize: vertical;
      }

      ${scope} :where(button, [role="button"]) {
        cursor: pointer;
      }

      ${scope} button::-moz-focus-inner {
        border: 0 !important;
      }

      ${scope} table {
        border-collapse: collapse;
      }

      ${scope} :where(h1, h2, h3, h4, h5, h6) {
        font-size: inherit;
        font-weight: inherit;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      ${scope} :where(img, svg, video, canvas, audio, iframe, embed, object) {
        display: block;
      }

      ${scope} :where(img, video) {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible]
        :focus:not([data-focus-visible-added]):not(
          [data-focus-visible-disabled]
        ) {
        outline: none;
        box-shadow: none;
      }

      ${scope} select::-ms-expand {
        display: none;
      }

      ${vhPolyfill}
    `
  }
);

// node_modules/@chakra-ui/portal/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/portal/dist/chunk-YLCZP3C4.mjs
init_shim();

// node_modules/@chakra-ui/portal/dist/chunk-EJ37EVSP.mjs
init_shim();

// node_modules/@chakra-ui/react-context/dist/index.mjs
init_shim();
var import_react2 = __toESM(require_react(), 1);
function getErrorMessage(hook, provider) {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
}
function createContext(options = {}) {
  const {
    name,
    strict = true,
    hookName = "useContext",
    providerName = "Provider",
    errorMessage,
    defaultValue
  } = options;
  const Context = (0, import_react2.createContext)(defaultValue);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react2.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(
        errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName)
      );
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [Context.Provider, useContext44, Context];
}

// node_modules/@chakra-ui/portal/dist/chunk-EJ37EVSP.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var [PortalManagerContextProvider, usePortalManager] = createContext({
  strict: false,
  name: "PortalManagerContext"
});
function PortalManager(props) {
  const { children, zIndex } = props;
  return (0, import_jsx_runtime2.jsx)(PortalManagerContextProvider, { value: { zIndex }, children });
}
PortalManager.displayName = "PortalManager";

// node_modules/@chakra-ui/react-use-safe-layout-effect/dist/index.mjs
init_shim();
var import_react3 = __toESM(require_react(), 1);
var useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? import_react3.useLayoutEffect : import_react3.useEffect;

// node_modules/@chakra-ui/portal/dist/chunk-YLCZP3C4.mjs
var import_react_dom = __toESM(require_react_dom(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var [PortalContextProvider, usePortalContext] = createContext({
  strict: false,
  name: "PortalContext"
});
var PORTAL_CLASSNAME = "chakra-portal";
var PORTAL_SELECTOR = `.chakra-portal`;
var Container = (props) => (0, import_jsx_runtime3.jsx)(
  "div",
  {
    className: "chakra-portal-zIndex",
    style: {
      position: "absolute",
      zIndex: props.zIndex,
      top: 0,
      left: 0,
      right: 0
    },
    children: props.children
  }
);
var DefaultPortal = (props) => {
  const { appendToParentPortal, children } = props;
  const [tempNode, setTempNode] = (0, import_react4.useState)(null);
  const portal = (0, import_react4.useRef)(null);
  const [, forceUpdate] = (0, import_react4.useState)({});
  (0, import_react4.useEffect)(() => forceUpdate({}), []);
  const parentPortal = usePortalContext();
  const manager2 = usePortalManager();
  useSafeLayoutEffect(() => {
    if (!tempNode)
      return;
    const doc = tempNode.ownerDocument;
    const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;
    if (!host)
      return;
    portal.current = doc.createElement("div");
    portal.current.className = PORTAL_CLASSNAME;
    host.appendChild(portal.current);
    forceUpdate({});
    const portalNode = portal.current;
    return () => {
      if (host.contains(portalNode)) {
        host.removeChild(portalNode);
      }
    };
  }, [tempNode]);
  const _children = (manager2 == null ? void 0 : manager2.zIndex) ? (0, import_jsx_runtime3.jsx)(Container, { zIndex: manager2 == null ? void 0 : manager2.zIndex, children }) : children;
  return portal.current ? (0, import_react_dom.createPortal)(
    (0, import_jsx_runtime3.jsx)(PortalContextProvider, { value: portal.current, children: _children }),
    portal.current
  ) : (0, import_jsx_runtime3.jsx)(
    "span",
    {
      ref: (el) => {
        if (el)
          setTempNode(el);
      }
    }
  );
};
var ContainerPortal = (props) => {
  const { children, containerRef, appendToParentPortal } = props;
  const containerEl = containerRef.current;
  const host = containerEl != null ? containerEl : typeof window !== "undefined" ? document.body : void 0;
  const portal = (0, import_react4.useMemo)(() => {
    const node2 = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
    if (node2)
      node2.className = PORTAL_CLASSNAME;
    return node2;
  }, [containerEl]);
  const [, forceUpdate] = (0, import_react4.useState)({});
  useSafeLayoutEffect(() => forceUpdate({}), []);
  useSafeLayoutEffect(() => {
    if (!portal || !host)
      return;
    host.appendChild(portal);
    return () => {
      host.removeChild(portal);
    };
  }, [portal, host]);
  if (host && portal) {
    return (0, import_react_dom.createPortal)(
      (0, import_jsx_runtime3.jsx)(PortalContextProvider, { value: appendToParentPortal ? portal : null, children }),
      portal
    );
  }
  return null;
};
function Portal(props) {
  const portalProps = {
    appendToParentPortal: true,
    ...props
  };
  const { containerRef, ...rest } = portalProps;
  return containerRef ? (0, import_jsx_runtime3.jsx)(ContainerPortal, { containerRef, ...rest }) : (0, import_jsx_runtime3.jsx)(DefaultPortal, { ...rest });
}
Portal.className = PORTAL_CLASSNAME;
Portal.selector = PORTAL_SELECTOR;
Portal.displayName = "Portal";

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react6 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/color-mode/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/color-mode/dist/chunk-4DEUOPYU.mjs
init_shim();

// node_modules/@chakra-ui/color-mode/dist/chunk-7NLW6UB6.mjs
init_shim();
var import_react7 = __toESM(require_react(), 1);
var ColorModeContext = (0, import_react7.createContext)({});
ColorModeContext.displayName = "ColorModeContext";
function useColorMode() {
  const context = (0, import_react7.useContext)(ColorModeContext);
  if (context === void 0) {
    throw new Error("useColorMode must be used within a ColorModeProvider");
  }
  return context;
}
function useColorModeValue(light, dark) {
  const { colorMode } = useColorMode();
  return colorMode === "dark" ? dark : light;
}

// node_modules/@chakra-ui/color-mode/dist/chunk-QTTMAIIW.mjs
init_shim();
var classNames = {
  light: "chakra-ui-light",
  dark: "chakra-ui-dark"
};
function getColorModeUtils(options = {}) {
  const { preventTransition = true } = options;
  const utils = {
    setDataset: (value) => {
      const cleanup = preventTransition ? utils.preventTransition() : void 0;
      document.documentElement.dataset.theme = value;
      document.documentElement.style.colorScheme = value;
      cleanup == null ? void 0 : cleanup();
    },
    setClassName(dark) {
      document.body.classList.add(dark ? classNames.dark : classNames.light);
      document.body.classList.remove(dark ? classNames.light : classNames.dark);
    },
    query() {
      return window.matchMedia("(prefers-color-scheme: dark)");
    },
    getSystemTheme(fallback) {
      var _a40;
      const dark = (_a40 = utils.query().matches) != null ? _a40 : fallback === "dark";
      return dark ? "dark" : "light";
    },
    addListener(fn) {
      const mql = utils.query();
      const listener = (e) => {
        fn(e.matches ? "dark" : "light");
      };
      if (typeof mql.addListener === "function")
        mql.addListener(listener);
      else
        mql.addEventListener("change", listener);
      return () => {
        if (typeof mql.removeListener === "function")
          mql.removeListener(listener);
        else
          mql.removeEventListener("change", listener);
      };
    },
    preventTransition() {
      const css4 = document.createElement("style");
      css4.appendChild(
        document.createTextNode(
          `*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`
        )
      );
      document.head.appendChild(css4);
      return () => {
        ;
        (() => window.getComputedStyle(document.body))();
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            document.head.removeChild(css4);
          });
        });
      };
    }
  };
  return utils;
}

// node_modules/@chakra-ui/color-mode/dist/chunk-BWTZURQV.mjs
init_shim();
var STORAGE_KEY = "chakra-ui-color-mode";
function createLocalStorageManager(key) {
  return {
    ssr: false,
    type: "localStorage",
    get(init) {
      if (!(globalThis == null ? void 0 : globalThis.document))
        return init;
      let value;
      try {
        value = localStorage.getItem(key) || init;
      } catch (e) {
      }
      return value || init;
    },
    set(value) {
      try {
        localStorage.setItem(key, value);
      } catch (e) {
      }
    }
  };
}
var localStorageManager = createLocalStorageManager(STORAGE_KEY);
function parseCookie(cookie, key) {
  const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`));
  return match == null ? void 0 : match[2];
}
function createCookieStorageManager(key, cookie) {
  return {
    ssr: !!cookie,
    type: "cookie",
    get(init) {
      if (cookie)
        return parseCookie(cookie, key);
      if (!(globalThis == null ? void 0 : globalThis.document))
        return init;
      return parseCookie(document.cookie, key) || init;
    },
    set(value) {
      document.cookie = `${key}=${value}; max-age=31536000; path=/`;
    }
  };
}
var cookieStorageManager = createCookieStorageManager(STORAGE_KEY);
var cookieStorageManagerSSR = (cookie) => createCookieStorageManager(STORAGE_KEY, cookie);

// node_modules/@chakra-ui/color-mode/dist/chunk-4DEUOPYU.mjs
var import_react8 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var noop = () => {
};
function getTheme(manager2, fallback) {
  return manager2.type === "cookie" && manager2.ssr ? manager2.get(fallback) : fallback;
}
function ColorModeProvider(props) {
  const {
    value,
    children,
    options: {
      useSystemColorMode,
      initialColorMode,
      disableTransitionOnChange
    } = {},
    colorModeManager = localStorageManager
  } = props;
  const defaultColorMode = initialColorMode === "dark" ? "dark" : "light";
  const [colorMode, rawSetColorMode] = (0, import_react8.useState)(
    () => getTheme(colorModeManager, defaultColorMode)
  );
  const [resolvedColorMode, setResolvedColorMode] = (0, import_react8.useState)(
    () => getTheme(colorModeManager)
  );
  const { getSystemTheme, setClassName, setDataset, addListener } = (0, import_react8.useMemo)(
    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),
    [disableTransitionOnChange]
  );
  const resolvedValue = initialColorMode === "system" && !colorMode ? resolvedColorMode : colorMode;
  const setColorMode = (0, import_react8.useCallback)(
    (value2) => {
      const resolved = value2 === "system" ? getSystemTheme() : value2;
      rawSetColorMode(resolved);
      setClassName(resolved === "dark");
      setDataset(resolved);
      colorModeManager.set(resolved);
    },
    [colorModeManager, getSystemTheme, setClassName, setDataset]
  );
  useSafeLayoutEffect(() => {
    if (initialColorMode === "system") {
      setResolvedColorMode(getSystemTheme());
    }
  }, []);
  (0, import_react8.useEffect)(() => {
    const managerValue = colorModeManager.get();
    if (managerValue) {
      setColorMode(managerValue);
      return;
    }
    if (initialColorMode === "system") {
      setColorMode("system");
      return;
    }
    setColorMode(defaultColorMode);
  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);
  const toggleColorMode = (0, import_react8.useCallback)(() => {
    setColorMode(resolvedValue === "dark" ? "light" : "dark");
  }, [resolvedValue, setColorMode]);
  (0, import_react8.useEffect)(() => {
    if (!useSystemColorMode)
      return;
    return addListener(setColorMode);
  }, [useSystemColorMode, addListener, setColorMode]);
  const context = (0, import_react8.useMemo)(
    () => ({
      colorMode: value != null ? value : resolvedValue,
      toggleColorMode: value ? noop : toggleColorMode,
      setColorMode: value ? noop : setColorMode,
      forced: value !== void 0
    }),
    [resolvedValue, toggleColorMode, setColorMode, value]
  );
  return (0, import_jsx_runtime4.jsx)(ColorModeContext.Provider, { value: context, children });
}
ColorModeProvider.displayName = "ColorModeProvider";
function DarkMode(props) {
  const context = (0, import_react8.useMemo)(
    () => ({
      colorMode: "dark",
      toggleColorMode: noop,
      setColorMode: noop,
      forced: true
    }),
    []
  );
  return (0, import_jsx_runtime4.jsx)(ColorModeContext.Provider, { value: context, ...props });
}
DarkMode.displayName = "DarkMode";
function LightMode(props) {
  const context = (0, import_react8.useMemo)(
    () => ({
      colorMode: "light",
      toggleColorMode: noop,
      setColorMode: noop,
      forced: true
    }),
    []
  );
  return (0, import_jsx_runtime4.jsx)(ColorModeContext.Provider, { value: context, ...props });
}
LightMode.displayName = "LightMode";

// node_modules/@chakra-ui/color-mode/dist/chunk-DCUKMMT3.mjs
init_shim();
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var VALID_VALUES = /* @__PURE__ */ new Set(["dark", "light", "system"]);
function normalize(initialColorMode) {
  let value = initialColorMode;
  if (!VALID_VALUES.has(value))
    value = "light";
  return value;
}
function getScriptSrc(props = {}) {
  const {
    initialColorMode = "light",
    type = "localStorage",
    storageKey: key = "chakra-ui-color-mode"
  } = props;
  const init = normalize(initialColorMode);
  const isCookie = type === "cookie";
  const cookieScript = `(function(){try{var a=function(o){var l="(prefers-color-scheme: dark)",v=window.matchMedia(l).matches?"dark":"light",e=o==="system"?v:o,d=document.documentElement,m=document.body,i="chakra-ui-light",n="chakra-ui-dark",s=e==="dark";return m.classList.add(s?n:i),m.classList.remove(s?i:n),d.style.colorScheme=e,d.dataset.theme=e,e},u=a,h="${init}",r="${key}",t=document.cookie.match(new RegExp("(^| )".concat(r,"=([^;]+)"))),c=t?t[2]:null;c?a(c):document.cookie="".concat(r,"=").concat(a(h),"; max-age=31536000; path=/")}catch(a){}})();
  `;
  const localStorageScript = `(function(){try{var a=function(c){var v="(prefers-color-scheme: dark)",h=window.matchMedia(v).matches?"dark":"light",r=c==="system"?h:c,o=document.documentElement,s=document.body,l="chakra-ui-light",d="chakra-ui-dark",i=r==="dark";return s.classList.add(i?d:l),s.classList.remove(i?l:d),o.style.colorScheme=r,o.dataset.theme=r,r},n=a,m="${init}",e="${key}",t=localStorage.getItem(e);t?a(t):localStorage.setItem(e,a(m))}catch(a){}})();
  `;
  const fn = isCookie ? cookieScript : localStorageScript;
  return `!${fn}`.trim();
}
function ColorModeScript(props = {}) {
  const { nonce } = props;
  return (0, import_jsx_runtime5.jsx)(
    "script",
    {
      id: "chakra-script",
      nonce,
      dangerouslySetInnerHTML: { __html: getScriptSrc(props) }
    }
  );
}

// node_modules/@chakra-ui/styled-system/dist/index.mjs
init_shim();
var import_lodash = __toESM(require_lodash(), 1);
var import_lodash2 = __toESM(require_lodash(), 1);
var import_lodash3 = __toESM(require_lodash(), 1);
var import_lodash4 = __toESM(require_lodash(), 1);
var isImportant = (value) => /!(important)?$/.test(value);
var withoutImportant = (value) => typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
var tokenToCSSVar = (scale3, value) => (theme3) => {
  const valueStr = String(value);
  const important = isImportant(valueStr);
  const valueWithoutImportant = withoutImportant(valueStr);
  const key = scale3 ? `${scale3}.${valueWithoutImportant}` : valueWithoutImportant;
  let transformed = isObject(theme3.__cssMap) && key in theme3.__cssMap ? theme3.__cssMap[key].varRef : value;
  transformed = withoutImportant(transformed);
  return important ? `${transformed} !important` : transformed;
};
function createTransform(options) {
  const { scale: scale3, transform: transform22, compose: compose25 } = options;
  const fn = (value, theme3) => {
    var _a40;
    const _value = tokenToCSSVar(scale3, value)(theme3);
    let result = (_a40 = transform22 == null ? void 0 : transform22(_value, theme3)) != null ? _a40 : _value;
    if (compose25) {
      result = compose25(result, theme3);
    }
    return result;
  };
  return fn;
}
var pipe = (...fns) => (v) => fns.reduce((a, b) => b(a), v);
function toConfig(scale3, transform22) {
  return (property) => {
    const result = { property, scale: scale3 };
    result.transform = createTransform({
      scale: scale3,
      transform: transform22
    });
    return result;
  };
}
var getRtl = ({ rtl, ltr }) => (theme3) => theme3.direction === "rtl" ? rtl : ltr;
function logical(options) {
  const { property, scale: scale3, transform: transform22 } = options;
  return {
    scale: scale3,
    property: getRtl(property),
    transform: scale3 ? createTransform({
      scale: scale3,
      compose: transform22
    }) : transform22
  };
}
var transformTemplate = [
  "rotate(var(--chakra-rotate, 0))",
  "scaleX(var(--chakra-scale-x, 1))",
  "scaleY(var(--chakra-scale-y, 1))",
  "skewX(var(--chakra-skew-x, 0))",
  "skewY(var(--chakra-skew-y, 0))"
];
function getTransformTemplate() {
  return [
    "translateX(var(--chakra-translate-x, 0))",
    "translateY(var(--chakra-translate-y, 0))",
    ...transformTemplate
  ].join(" ");
}
function getTransformGpuTemplate() {
  return [
    "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
    ...transformTemplate
  ].join(" ");
}
var filterTemplate = {
  "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
  filter: [
    "var(--chakra-blur)",
    "var(--chakra-brightness)",
    "var(--chakra-contrast)",
    "var(--chakra-grayscale)",
    "var(--chakra-hue-rotate)",
    "var(--chakra-invert)",
    "var(--chakra-saturate)",
    "var(--chakra-sepia)",
    "var(--chakra-drop-shadow)"
  ].join(" ")
};
var backdropFilterTemplate = {
  backdropFilter: [
    "var(--chakra-backdrop-blur)",
    "var(--chakra-backdrop-brightness)",
    "var(--chakra-backdrop-contrast)",
    "var(--chakra-backdrop-grayscale)",
    "var(--chakra-backdrop-hue-rotate)",
    "var(--chakra-backdrop-invert)",
    "var(--chakra-backdrop-opacity)",
    "var(--chakra-backdrop-saturate)",
    "var(--chakra-backdrop-sepia)"
  ].join(" "),
  "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
};
function getRingTemplate(value) {
  return {
    "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
    "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
    "--chakra-ring-width": value,
    boxShadow: [
      `var(--chakra-ring-offset-shadow)`,
      `var(--chakra-ring-shadow)`,
      `var(--chakra-shadow, 0 0 #0000)`
    ].join(", ")
  };
}
var flexDirectionTemplate = {
  "row-reverse": {
    space: "--chakra-space-x-reverse",
    divide: "--chakra-divide-x-reverse"
  },
  "column-reverse": {
    space: "--chakra-space-y-reverse",
    divide: "--chakra-divide-y-reverse"
  }
};
var directionMap = {
  "to-t": "to top",
  "to-tr": "to top right",
  "to-r": "to right",
  "to-br": "to bottom right",
  "to-b": "to bottom",
  "to-bl": "to bottom left",
  "to-l": "to left",
  "to-tl": "to top left"
};
var valueSet = new Set(Object.values(directionMap));
var globalSet = /* @__PURE__ */ new Set([
  "none",
  "-moz-initial",
  "inherit",
  "initial",
  "revert",
  "unset"
]);
var trimSpace = (str) => str.trim();
function parseGradient(value, theme3) {
  if (value == null || globalSet.has(value))
    return value;
  const prevent = isCSSFunction(value) || globalSet.has(value);
  if (!prevent)
    return `url('${value}')`;
  const regex = /(^[a-z-A-Z]+)\((.*)\)/g;
  const results2 = regex.exec(value);
  const type = results2 == null ? void 0 : results2[1];
  const values = results2 == null ? void 0 : results2[2];
  if (!type || !values)
    return value;
  const _type = type.includes("-gradient") ? type : `${type}-gradient`;
  const [maybeDirection, ...stops] = values.split(",").map(trimSpace).filter(Boolean);
  if ((stops == null ? void 0 : stops.length) === 0)
    return value;
  const direction3 = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
  stops.unshift(direction3);
  const _values = stops.map((stop) => {
    if (valueSet.has(stop))
      return stop;
    const firstStop = stop.indexOf(" ");
    const [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];
    const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(" ");
    const key = `colors.${_color}`;
    const color22 = key in theme3.__cssMap ? theme3.__cssMap[key].varRef : _color;
    return _stopOrFunc ? [
      color22,
      ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]
    ].join(" ") : color22;
  });
  return `${_type}(${_values.join(", ")})`;
}
var isCSSFunction = (value) => {
  return typeof value === "string" && value.includes("(") && value.includes(")");
};
var gradientTransform = (value, theme3) => parseGradient(value, theme3 != null ? theme3 : {});
function isCssVar(value) {
  return /^var\(--.+\)$/.test(value);
}
var analyzeCSSValue = (value) => {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
};
var wrap = (str) => (value) => `${str}(${value})`;
var transformFunctions = {
  filter(value) {
    return value !== "auto" ? value : filterTemplate;
  },
  backdropFilter(value) {
    return value !== "auto" ? value : backdropFilterTemplate;
  },
  ring(value) {
    return getRingTemplate(transformFunctions.px(value));
  },
  bgClip(value) {
    return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
  },
  transform(value) {
    if (value === "auto")
      return getTransformTemplate();
    if (value === "auto-gpu")
      return getTransformGpuTemplate();
    return value;
  },
  vh(value) {
    return value === "$100vh" ? "var(--chakra-vh)" : value;
  },
  px(value) {
    if (value == null)
      return value;
    const { unitless } = analyzeCSSValue(value);
    return unitless || typeof value === "number" ? `${value}px` : value;
  },
  fraction(value) {
    return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
  },
  float(value, theme3) {
    const map = { left: "right", right: "left" };
    return theme3.direction === "rtl" ? map[value] : value;
  },
  degree(value) {
    if (isCssVar(value) || value == null)
      return value;
    const unitless = typeof value === "string" && !value.endsWith("deg");
    return typeof value === "number" || unitless ? `${value}deg` : value;
  },
  gradient: gradientTransform,
  blur: wrap("blur"),
  opacity: wrap("opacity"),
  brightness: wrap("brightness"),
  contrast: wrap("contrast"),
  dropShadow: wrap("drop-shadow"),
  grayscale: wrap("grayscale"),
  hueRotate: wrap("hue-rotate"),
  invert: wrap("invert"),
  saturate: wrap("saturate"),
  sepia: wrap("sepia"),
  bgImage(value) {
    if (value == null)
      return value;
    const prevent = isCSSFunction(value) || globalSet.has(value);
    return !prevent ? `url(${value})` : value;
  },
  outline(value) {
    const isNoneOrZero = String(value) === "0" || String(value) === "none";
    return value !== null && isNoneOrZero ? { outline: "2px solid transparent", outlineOffset: "2px" } : { outline: value };
  },
  flexDirection(value) {
    var _a40;
    const { space: space2, divide: divide22 } = (_a40 = flexDirectionTemplate[value]) != null ? _a40 : {};
    const result = { flexDirection: value };
    if (space2)
      result[space2] = 1;
    if (divide22)
      result[divide22] = 1;
    return result;
  }
};
var t = {
  borderWidths: toConfig("borderWidths"),
  borderStyles: toConfig("borderStyles"),
  colors: toConfig("colors"),
  borders: toConfig("borders"),
  gradients: toConfig("gradients", transformFunctions.gradient),
  radii: toConfig("radii", transformFunctions.px),
  space: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
  spaceT: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
  degreeT(property) {
    return { property, transform: transformFunctions.degree };
  },
  prop(property, scale3, transform22) {
    return {
      property,
      scale: scale3,
      ...scale3 && {
        transform: createTransform({ scale: scale3, transform: transform22 })
      }
    };
  },
  propT(property, transform22) {
    return { property, transform: transform22 };
  },
  sizes: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.px)),
  sizesT: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.fraction)),
  shadows: toConfig("shadows"),
  logical,
  blur: toConfig("blur", transformFunctions.blur)
};
var background = {
  background: t.colors("background"),
  backgroundColor: t.colors("backgroundColor"),
  backgroundImage: t.gradients("backgroundImage"),
  backgroundSize: true,
  backgroundPosition: true,
  backgroundRepeat: true,
  backgroundAttachment: true,
  backgroundClip: { transform: transformFunctions.bgClip },
  bgSize: t.prop("backgroundSize"),
  bgPosition: t.prop("backgroundPosition"),
  bg: t.colors("background"),
  bgColor: t.colors("backgroundColor"),
  bgPos: t.prop("backgroundPosition"),
  bgRepeat: t.prop("backgroundRepeat"),
  bgAttachment: t.prop("backgroundAttachment"),
  bgGradient: t.gradients("backgroundImage"),
  bgClip: { transform: transformFunctions.bgClip }
};
Object.assign(background, {
  bgImage: background.backgroundImage,
  bgImg: background.backgroundImage
});
var border = {
  border: t.borders("border"),
  borderWidth: t.borderWidths("borderWidth"),
  borderStyle: t.borderStyles("borderStyle"),
  borderColor: t.colors("borderColor"),
  borderRadius: t.radii("borderRadius"),
  borderTop: t.borders("borderTop"),
  borderBlockStart: t.borders("borderBlockStart"),
  borderTopLeftRadius: t.radii("borderTopLeftRadius"),
  borderStartStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderTopLeftRadius",
      rtl: "borderTopRightRadius"
    }
  }),
  borderEndStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomLeftRadius",
      rtl: "borderBottomRightRadius"
    }
  }),
  borderTopRightRadius: t.radii("borderTopRightRadius"),
  borderStartEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderTopRightRadius",
      rtl: "borderTopLeftRadius"
    }
  }),
  borderEndEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomRightRadius",
      rtl: "borderBottomLeftRadius"
    }
  }),
  borderRight: t.borders("borderRight"),
  borderInlineEnd: t.borders("borderInlineEnd"),
  borderBottom: t.borders("borderBottom"),
  borderBlockEnd: t.borders("borderBlockEnd"),
  borderBottomLeftRadius: t.radii("borderBottomLeftRadius"),
  borderBottomRightRadius: t.radii("borderBottomRightRadius"),
  borderLeft: t.borders("borderLeft"),
  borderInlineStart: {
    property: "borderInlineStart",
    scale: "borders"
  },
  borderInlineStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
      rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
    }
  }),
  borderInlineEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
      rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
    }
  }),
  borderX: t.borders(["borderLeft", "borderRight"]),
  borderInline: t.borders("borderInline"),
  borderY: t.borders(["borderTop", "borderBottom"]),
  borderBlock: t.borders("borderBlock"),
  borderTopWidth: t.borderWidths("borderTopWidth"),
  borderBlockStartWidth: t.borderWidths("borderBlockStartWidth"),
  borderTopColor: t.colors("borderTopColor"),
  borderBlockStartColor: t.colors("borderBlockStartColor"),
  borderTopStyle: t.borderStyles("borderTopStyle"),
  borderBlockStartStyle: t.borderStyles("borderBlockStartStyle"),
  borderBottomWidth: t.borderWidths("borderBottomWidth"),
  borderBlockEndWidth: t.borderWidths("borderBlockEndWidth"),
  borderBottomColor: t.colors("borderBottomColor"),
  borderBlockEndColor: t.colors("borderBlockEndColor"),
  borderBottomStyle: t.borderStyles("borderBottomStyle"),
  borderBlockEndStyle: t.borderStyles("borderBlockEndStyle"),
  borderLeftWidth: t.borderWidths("borderLeftWidth"),
  borderInlineStartWidth: t.borderWidths("borderInlineStartWidth"),
  borderLeftColor: t.colors("borderLeftColor"),
  borderInlineStartColor: t.colors("borderInlineStartColor"),
  borderLeftStyle: t.borderStyles("borderLeftStyle"),
  borderInlineStartStyle: t.borderStyles("borderInlineStartStyle"),
  borderRightWidth: t.borderWidths("borderRightWidth"),
  borderInlineEndWidth: t.borderWidths("borderInlineEndWidth"),
  borderRightColor: t.colors("borderRightColor"),
  borderInlineEndColor: t.colors("borderInlineEndColor"),
  borderRightStyle: t.borderStyles("borderRightStyle"),
  borderInlineEndStyle: t.borderStyles("borderInlineEndStyle"),
  borderTopRadius: t.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
  borderBottomRadius: t.radii([
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ]),
  borderLeftRadius: t.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
  borderRightRadius: t.radii([
    "borderTopRightRadius",
    "borderBottomRightRadius"
  ])
};
Object.assign(border, {
  rounded: border.borderRadius,
  roundedTop: border.borderTopRadius,
  roundedTopLeft: border.borderTopLeftRadius,
  roundedTopRight: border.borderTopRightRadius,
  roundedTopStart: border.borderStartStartRadius,
  roundedTopEnd: border.borderStartEndRadius,
  roundedBottom: border.borderBottomRadius,
  roundedBottomLeft: border.borderBottomLeftRadius,
  roundedBottomRight: border.borderBottomRightRadius,
  roundedBottomStart: border.borderEndStartRadius,
  roundedBottomEnd: border.borderEndEndRadius,
  roundedLeft: border.borderLeftRadius,
  roundedRight: border.borderRightRadius,
  roundedStart: border.borderInlineStartRadius,
  roundedEnd: border.borderInlineEndRadius,
  borderStart: border.borderInlineStart,
  borderEnd: border.borderInlineEnd,
  borderTopStartRadius: border.borderStartStartRadius,
  borderTopEndRadius: border.borderStartEndRadius,
  borderBottomStartRadius: border.borderEndStartRadius,
  borderBottomEndRadius: border.borderEndEndRadius,
  borderStartRadius: border.borderInlineStartRadius,
  borderEndRadius: border.borderInlineEndRadius,
  borderStartWidth: border.borderInlineStartWidth,
  borderEndWidth: border.borderInlineEndWidth,
  borderStartColor: border.borderInlineStartColor,
  borderEndColor: border.borderInlineEndColor,
  borderStartStyle: border.borderInlineStartStyle,
  borderEndStyle: border.borderInlineEndStyle
});
var color = {
  color: t.colors("color"),
  textColor: t.colors("color"),
  fill: t.colors("fill"),
  stroke: t.colors("stroke")
};
var effect = {
  boxShadow: t.shadows("boxShadow"),
  mixBlendMode: true,
  blendMode: t.prop("mixBlendMode"),
  backgroundBlendMode: true,
  bgBlendMode: t.prop("backgroundBlendMode"),
  opacity: true
};
Object.assign(effect, {
  shadow: effect.boxShadow
});
var filter = {
  filter: { transform: transformFunctions.filter },
  blur: t.blur("--chakra-blur"),
  brightness: t.propT("--chakra-brightness", transformFunctions.brightness),
  contrast: t.propT("--chakra-contrast", transformFunctions.contrast),
  hueRotate: t.degreeT("--chakra-hue-rotate"),
  invert: t.propT("--chakra-invert", transformFunctions.invert),
  saturate: t.propT("--chakra-saturate", transformFunctions.saturate),
  dropShadow: t.propT("--chakra-drop-shadow", transformFunctions.dropShadow),
  backdropFilter: { transform: transformFunctions.backdropFilter },
  backdropBlur: t.blur("--chakra-backdrop-blur"),
  backdropBrightness: t.propT(
    "--chakra-backdrop-brightness",
    transformFunctions.brightness
  ),
  backdropContrast: t.propT("--chakra-backdrop-contrast", transformFunctions.contrast),
  backdropHueRotate: t.degreeT("--chakra-backdrop-hue-rotate"),
  backdropInvert: t.propT("--chakra-backdrop-invert", transformFunctions.invert),
  backdropSaturate: t.propT("--chakra-backdrop-saturate", transformFunctions.saturate)
};
var flexbox = {
  alignItems: true,
  alignContent: true,
  justifyItems: true,
  justifyContent: true,
  flexWrap: true,
  flexDirection: { transform: transformFunctions.flexDirection },
  flex: true,
  flexFlow: true,
  flexGrow: true,
  flexShrink: true,
  flexBasis: t.sizes("flexBasis"),
  justifySelf: true,
  alignSelf: true,
  order: true,
  placeItems: true,
  placeContent: true,
  placeSelf: true,
  gap: t.space("gap"),
  rowGap: t.space("rowGap"),
  columnGap: t.space("columnGap")
};
Object.assign(flexbox, {
  flexDir: flexbox.flexDirection
});
var grid = {
  gridGap: t.space("gridGap"),
  gridColumnGap: t.space("gridColumnGap"),
  gridRowGap: t.space("gridRowGap"),
  gridColumn: true,
  gridRow: true,
  gridAutoFlow: true,
  gridAutoColumns: true,
  gridColumnStart: true,
  gridColumnEnd: true,
  gridRowStart: true,
  gridRowEnd: true,
  gridAutoRows: true,
  gridTemplate: true,
  gridTemplateColumns: true,
  gridTemplateRows: true,
  gridTemplateAreas: true,
  gridArea: true
};
var interactivity = {
  appearance: true,
  cursor: true,
  resize: true,
  userSelect: true,
  pointerEvents: true,
  outline: { transform: transformFunctions.outline },
  outlineOffset: true,
  outlineColor: t.colors("outlineColor")
};
var layout = {
  width: t.sizesT("width"),
  inlineSize: t.sizesT("inlineSize"),
  height: t.sizes("height"),
  blockSize: t.sizes("blockSize"),
  boxSize: t.sizes(["width", "height"]),
  minWidth: t.sizes("minWidth"),
  minInlineSize: t.sizes("minInlineSize"),
  minHeight: t.sizes("minHeight"),
  minBlockSize: t.sizes("minBlockSize"),
  maxWidth: t.sizes("maxWidth"),
  maxInlineSize: t.sizes("maxInlineSize"),
  maxHeight: t.sizes("maxHeight"),
  maxBlockSize: t.sizes("maxBlockSize"),
  overflow: true,
  overflowX: true,
  overflowY: true,
  overscrollBehavior: true,
  overscrollBehaviorX: true,
  overscrollBehaviorY: true,
  display: true,
  hideFrom: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a40, _b8, _c5;
      const breakpoint = (_c5 = (_b8 = (_a40 = theme3.__breakpoints) == null ? void 0 : _a40.get(value)) == null ? void 0 : _b8.minW) != null ? _c5 : value;
      const mq = `@media screen and (min-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  hideBelow: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a40, _b8, _c5;
      const breakpoint = (_c5 = (_b8 = (_a40 = theme3.__breakpoints) == null ? void 0 : _a40.get(value)) == null ? void 0 : _b8._minW) != null ? _c5 : value;
      const mq = `@media screen and (max-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  verticalAlign: true,
  boxSizing: true,
  boxDecorationBreak: true,
  float: t.propT("float", transformFunctions.float),
  objectFit: true,
  objectPosition: true,
  visibility: true,
  isolation: true
};
Object.assign(layout, {
  w: layout.width,
  h: layout.height,
  minW: layout.minWidth,
  maxW: layout.maxWidth,
  minH: layout.minHeight,
  maxH: layout.maxHeight,
  overscroll: layout.overscrollBehavior,
  overscrollX: layout.overscrollBehaviorX,
  overscrollY: layout.overscrollBehaviorY
});
var list = {
  listStyleType: true,
  listStylePosition: true,
  listStylePos: t.prop("listStylePosition"),
  listStyleImage: true,
  listStyleImg: t.prop("listStyleImage")
};
function get(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet = memoize(get);
var srOnly = {
  border: "0px",
  clip: "rect(0, 0, 0, 0)",
  width: "1px",
  height: "1px",
  margin: "-1px",
  padding: "0px",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};
var srFocusable = {
  position: "static",
  width: "auto",
  height: "auto",
  clip: "auto",
  padding: "0",
  margin: "0",
  overflow: "visible",
  whiteSpace: "normal"
};
var getWithPriority = (theme3, key, styles3) => {
  const result = {};
  const obj = memoizedGet(theme3, key, {});
  for (const prop in obj) {
    const isInStyles = prop in styles3 && styles3[prop] != null;
    if (!isInStyles)
      result[prop] = obj[prop];
  }
  return result;
};
var others = {
  srOnly: {
    transform(value) {
      if (value === true)
        return srOnly;
      if (value === "focusable")
        return srFocusable;
      return {};
    }
  },
  layerStyle: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority(theme3, `layerStyles.${value}`, styles3)
  },
  textStyle: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority(theme3, `textStyles.${value}`, styles3)
  },
  apply: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority(theme3, value, styles3)
  }
};
var position = {
  position: true,
  pos: t.prop("position"),
  zIndex: t.prop("zIndex", "zIndices"),
  inset: t.spaceT("inset"),
  insetX: t.spaceT(["left", "right"]),
  insetInline: t.spaceT("insetInline"),
  insetY: t.spaceT(["top", "bottom"]),
  insetBlock: t.spaceT("insetBlock"),
  top: t.spaceT("top"),
  insetBlockStart: t.spaceT("insetBlockStart"),
  bottom: t.spaceT("bottom"),
  insetBlockEnd: t.spaceT("insetBlockEnd"),
  left: t.spaceT("left"),
  insetInlineStart: t.logical({
    scale: "space",
    property: { ltr: "left", rtl: "right" }
  }),
  right: t.spaceT("right"),
  insetInlineEnd: t.logical({
    scale: "space",
    property: { ltr: "right", rtl: "left" }
  })
};
Object.assign(position, {
  insetStart: position.insetInlineStart,
  insetEnd: position.insetInlineEnd
});
var ring = {
  ring: { transform: transformFunctions.ring },
  ringColor: t.colors("--chakra-ring-color"),
  ringOffset: t.prop("--chakra-ring-offset-width"),
  ringOffsetColor: t.colors("--chakra-ring-offset-color"),
  ringInset: t.prop("--chakra-ring-inset")
};
var space = {
  margin: t.spaceT("margin"),
  marginTop: t.spaceT("marginTop"),
  marginBlockStart: t.spaceT("marginBlockStart"),
  marginRight: t.spaceT("marginRight"),
  marginInlineEnd: t.spaceT("marginInlineEnd"),
  marginBottom: t.spaceT("marginBottom"),
  marginBlockEnd: t.spaceT("marginBlockEnd"),
  marginLeft: t.spaceT("marginLeft"),
  marginInlineStart: t.spaceT("marginInlineStart"),
  marginX: t.spaceT(["marginInlineStart", "marginInlineEnd"]),
  marginInline: t.spaceT("marginInline"),
  marginY: t.spaceT(["marginTop", "marginBottom"]),
  marginBlock: t.spaceT("marginBlock"),
  padding: t.space("padding"),
  paddingTop: t.space("paddingTop"),
  paddingBlockStart: t.space("paddingBlockStart"),
  paddingRight: t.space("paddingRight"),
  paddingBottom: t.space("paddingBottom"),
  paddingBlockEnd: t.space("paddingBlockEnd"),
  paddingLeft: t.space("paddingLeft"),
  paddingInlineStart: t.space("paddingInlineStart"),
  paddingInlineEnd: t.space("paddingInlineEnd"),
  paddingX: t.space(["paddingInlineStart", "paddingInlineEnd"]),
  paddingInline: t.space("paddingInline"),
  paddingY: t.space(["paddingTop", "paddingBottom"]),
  paddingBlock: t.space("paddingBlock")
};
Object.assign(space, {
  m: space.margin,
  mt: space.marginTop,
  mr: space.marginRight,
  me: space.marginInlineEnd,
  marginEnd: space.marginInlineEnd,
  mb: space.marginBottom,
  ml: space.marginLeft,
  ms: space.marginInlineStart,
  marginStart: space.marginInlineStart,
  mx: space.marginX,
  my: space.marginY,
  p: space.padding,
  pt: space.paddingTop,
  py: space.paddingY,
  px: space.paddingX,
  pb: space.paddingBottom,
  pl: space.paddingLeft,
  ps: space.paddingInlineStart,
  paddingStart: space.paddingInlineStart,
  pr: space.paddingRight,
  pe: space.paddingInlineEnd,
  paddingEnd: space.paddingInlineEnd
});
var textDecoration = {
  textDecorationColor: t.colors("textDecorationColor"),
  textDecoration: true,
  textDecor: { property: "textDecoration" },
  textDecorationLine: true,
  textDecorationStyle: true,
  textDecorationThickness: true,
  textUnderlineOffset: true,
  textShadow: t.shadows("textShadow")
};
var transform = {
  clipPath: true,
  transform: t.propT("transform", transformFunctions.transform),
  transformOrigin: true,
  translateX: t.spaceT("--chakra-translate-x"),
  translateY: t.spaceT("--chakra-translate-y"),
  skewX: t.degreeT("--chakra-skew-x"),
  skewY: t.degreeT("--chakra-skew-y"),
  scaleX: t.prop("--chakra-scale-x"),
  scaleY: t.prop("--chakra-scale-y"),
  scale: t.prop(["--chakra-scale-x", "--chakra-scale-y"]),
  rotate: t.degreeT("--chakra-rotate")
};
var transition = {
  transition: true,
  transitionDelay: true,
  animation: true,
  willChange: true,
  transitionDuration: t.prop("transitionDuration", "transition.duration"),
  transitionProperty: t.prop("transitionProperty", "transition.property"),
  transitionTimingFunction: t.prop(
    "transitionTimingFunction",
    "transition.easing"
  )
};
var typography = {
  fontFamily: t.prop("fontFamily", "fonts"),
  fontSize: t.prop("fontSize", "fontSizes", transformFunctions.px),
  fontWeight: t.prop("fontWeight", "fontWeights"),
  lineHeight: t.prop("lineHeight", "lineHeights"),
  letterSpacing: t.prop("letterSpacing", "letterSpacings"),
  textAlign: true,
  fontStyle: true,
  textIndent: true,
  wordBreak: true,
  overflowWrap: true,
  textOverflow: true,
  textTransform: true,
  whiteSpace: true,
  isTruncated: {
    transform(value) {
      if (value === true) {
        return {
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        };
      }
    }
  },
  noOfLines: {
    static: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      display: "-webkit-box",
      WebkitBoxOrient: "vertical",
      WebkitLineClamp: "var(--chakra-line-clamp)"
    },
    property: "--chakra-line-clamp"
  }
};
var scroll = {
  scrollBehavior: true,
  scrollSnapAlign: true,
  scrollSnapStop: true,
  scrollSnapType: true,
  scrollMargin: t.spaceT("scrollMargin"),
  scrollMarginTop: t.spaceT("scrollMarginTop"),
  scrollMarginBottom: t.spaceT("scrollMarginBottom"),
  scrollMarginLeft: t.spaceT("scrollMarginLeft"),
  scrollMarginRight: t.spaceT("scrollMarginRight"),
  scrollMarginX: t.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
  scrollMarginY: t.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
  scrollPadding: t.spaceT("scrollPadding"),
  scrollPaddingTop: t.spaceT("scrollPaddingTop"),
  scrollPaddingBottom: t.spaceT("scrollPaddingBottom"),
  scrollPaddingLeft: t.spaceT("scrollPaddingLeft"),
  scrollPaddingRight: t.spaceT("scrollPaddingRight"),
  scrollPaddingX: t.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
  scrollPaddingY: t.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
};
function resolveReference(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpression = (operator, ...operands) => operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, "");
var add = (...operands) => `calc(${toExpression("+", ...operands)})`;
var subtract = (...operands) => `calc(${toExpression("-", ...operands)})`;
var multiply = (...operands) => `calc(${toExpression("*", ...operands)})`;
var divide = (...operands) => `calc(${toExpression("/", ...operands)})`;
var negate = (x) => {
  const value = resolveReference(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply(value, -1);
};
var calc = Object.assign(
  (x) => ({
    add: (...operands) => calc(add(x, ...operands)),
    subtract: (...operands) => calc(subtract(x, ...operands)),
    multiply: (...operands) => calc(multiply(x, ...operands)),
    divide: (...operands) => calc(divide(x, ...operands)),
    negate: () => calc(negate(x)),
    toString: () => x.toString()
  }),
  {
    add,
    subtract,
    multiply,
    divide,
    negate
  }
);
function replaceWhiteSpace(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape(value) {
  const valueStr = replaceWhiteSpace(value.toString());
  return escapeSymbol(escapeDot(valueStr));
}
function escapeDot(value) {
  if (value.includes("\\."))
    return value;
  const isDecimal3 = !Number.isInteger(parseFloat(value.toString()));
  return isDecimal3 ? value.replace(".", `\\.`) : value;
}
function escapeSymbol(value) {
  return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
}
function addPrefix(value, prefix = "") {
  return [prefix, value].filter(Boolean).join("-");
}
function toVarReference(name, fallback) {
  return `var(${name}${fallback ? `, ${fallback}` : ""})`;
}
function toVarDefinition(value, prefix = "") {
  return escape(`--${addPrefix(value, prefix)}`);
}
function cssVar(name, fallback, cssVarPrefix) {
  const cssVariable = toVarDefinition(name, cssVarPrefix);
  return {
    variable: cssVariable,
    reference: toVarReference(cssVariable, fallback)
  };
}
function defineCssVars(scope, keys2) {
  const vars3 = {};
  for (const key of keys2) {
    if (Array.isArray(key)) {
      const [name, fallback] = key;
      vars3[name] = cssVar(`${scope}-${name}`, fallback);
      continue;
    }
    vars3[key] = cssVar(`${scope}-${key}`);
  }
  return vars3;
}
function getLastItem(array) {
  const length = array == null ? 0 : array.length;
  return length ? array[length - 1] : void 0;
}
function analyzeCSSValue2(value) {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
}
function px(value) {
  if (value == null)
    return value;
  const { unitless } = analyzeCSSValue2(value);
  return unitless || typeof value === "number" ? `${value}px` : value;
}
var sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;
var sortBps = (breakpoints28) => Object.fromEntries(Object.entries(breakpoints28).sort(sortByBreakpointValue));
function normalize2(breakpoints28) {
  const sorted = sortBps(breakpoints28);
  return Object.assign(Object.values(sorted), sorted);
}
function keys(breakpoints28) {
  const value = Object.keys(sortBps(breakpoints28));
  return new Set(value);
}
function subtract2(value) {
  var _a40;
  if (!value)
    return value;
  value = (_a40 = px(value)) != null ? _a40 : value;
  const OFFSET = -0.02;
  return typeof value === "number" ? `${value + OFFSET}` : value.replace(/(\d+\.?\d*)/u, (m2) => `${parseFloat(m2) + OFFSET}`);
}
function toMediaQueryString(min, max) {
  const query = ["@media screen"];
  if (min)
    query.push("and", `(min-width: ${px(min)})`);
  if (max)
    query.push("and", `(max-width: ${px(max)})`);
  return query.join(" ");
}
function analyzeBreakpoints(breakpoints28) {
  var _a40;
  if (!breakpoints28)
    return null;
  breakpoints28.base = (_a40 = breakpoints28.base) != null ? _a40 : "0px";
  const normalized = normalize2(breakpoints28);
  const queries = Object.entries(breakpoints28).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry) => {
    var _a210;
    let [, maxW] = (_a210 = entry[index + 1]) != null ? _a210 : [];
    maxW = parseFloat(maxW) > 0 ? subtract2(maxW) : void 0;
    return {
      _minW: subtract2(minW),
      breakpoint,
      minW,
      maxW,
      maxWQuery: toMediaQueryString(null, maxW),
      minWQuery: toMediaQueryString(minW),
      minMaxQuery: toMediaQueryString(minW, maxW)
    };
  });
  const _keys = keys(breakpoints28);
  const _keysArr = Array.from(_keys.values());
  return {
    keys: _keys,
    normalized,
    isResponsive(test2) {
      const keys2 = Object.keys(test2);
      return keys2.length > 0 && keys2.every((key) => _keys.has(key));
    },
    asObject: sortBps(breakpoints28),
    asArray: normalize2(breakpoints28),
    details: queries,
    get(key) {
      return queries.find((q) => q.breakpoint === key);
    },
    media: [
      null,
      ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)
    ],
    toArrayValue(test2) {
      if (!isObject(test2)) {
        throw new Error("toArrayValue: value must be an object");
      }
      const result = _keysArr.map((bp) => {
        var _a210;
        return (_a210 = test2[bp]) != null ? _a210 : null;
      });
      while (getLastItem(result) === null) {
        result.pop();
      }
      return result;
    },
    toObjectValue(test2) {
      if (!Array.isArray(test2)) {
        throw new Error("toObjectValue: value must be an array");
      }
      return test2.reduce((acc, value, index) => {
        const key = _keysArr[index];
        if (key != null && value != null)
          acc[key] = value;
        return acc;
      }, {});
    }
  };
}
var state = {
  hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,
  focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,
  focusVisible: (str, post) => `${str}:focus-visible ${post}`,
  focusWithin: (str, post) => `${str}:focus-within ${post}`,
  active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,
  disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
  invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
  checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,
  indeterminate: (str, post) => `${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,
  readOnly: (str, post) => `${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,
  expanded: (str, post) => `${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,
  placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`
};
var toGroup = (fn) => merge((v) => fn(v, "&"), "[role=group]", "[data-group]", ".group");
var toPeer = (fn) => merge((v) => fn(v, "~ &"), "[data-peer]", ".peer");
var merge = (fn, ...selectors) => selectors.map(fn).join(", ");
var pseudoSelectors = {
  _hover: "&:hover, &[data-hover]",
  _active: "&:active, &[data-active]",
  _focus: "&:focus, &[data-focus]",
  _highlighted: "&[data-highlighted]",
  _focusWithin: "&:focus-within",
  _focusVisible: "&:focus-visible, &[data-focus-visible]",
  _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",
  _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
  _before: "&::before",
  _after: "&::after",
  _empty: "&:empty",
  _expanded: "&[aria-expanded=true], &[data-expanded]",
  _checked: "&[aria-checked=true], &[data-checked]",
  _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
  _pressed: "&[aria-pressed=true], &[data-pressed]",
  _invalid: "&[aria-invalid=true], &[data-invalid]",
  _valid: "&[data-valid], &[data-state=valid]",
  _loading: "&[data-loading], &[aria-busy=true]",
  _selected: "&[aria-selected=true], &[data-selected]",
  _hidden: "&[hidden], &[data-hidden]",
  _autofill: "&:-webkit-autofill",
  _even: "&:nth-of-type(even)",
  _odd: "&:nth-of-type(odd)",
  _first: "&:first-of-type",
  _firstLetter: "&::first-letter",
  _last: "&:last-of-type",
  _notFirst: "&:not(:first-of-type)",
  _notLast: "&:not(:last-of-type)",
  _visited: "&:visited",
  _activeLink: "&[aria-current=page]",
  _activeStep: "&[aria-current=step]",
  _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
  _groupHover: toGroup(state.hover),
  _peerHover: toPeer(state.hover),
  _groupFocus: toGroup(state.focus),
  _peerFocus: toPeer(state.focus),
  _groupFocusVisible: toGroup(state.focusVisible),
  _peerFocusVisible: toPeer(state.focusVisible),
  _groupActive: toGroup(state.active),
  _peerActive: toPeer(state.active),
  _groupDisabled: toGroup(state.disabled),
  _peerDisabled: toPeer(state.disabled),
  _groupInvalid: toGroup(state.invalid),
  _peerInvalid: toPeer(state.invalid),
  _groupChecked: toGroup(state.checked),
  _peerChecked: toPeer(state.checked),
  _groupFocusWithin: toGroup(state.focusWithin),
  _peerFocusWithin: toPeer(state.focusWithin),
  _peerPlaceholderShown: toPeer(state.placeholderShown),
  _placeholder: "&::placeholder",
  _placeholderShown: "&:placeholder-shown",
  _fullScreen: "&:fullscreen",
  _selection: "&::selection",
  _rtl: "[dir=rtl] &, &[dir=rtl]",
  _ltr: "[dir=ltr] &, &[dir=ltr]",
  _mediaDark: "@media (prefers-color-scheme: dark)",
  _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
  _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
  _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]"
};
var pseudoPropNames = Object.keys(
  pseudoSelectors
);
function tokenToCssVar(token, prefix) {
  return cssVar(String(token).replace(/\./g, "-"), void 0, prefix);
}
function createThemeVars(flatTokens, options) {
  let cssVars4 = {};
  const cssMap = {};
  for (const [token, tokenValue] of Object.entries(flatTokens)) {
    const { isSemantic, value } = tokenValue;
    const { variable, reference } = tokenToCssVar(token, options == null ? void 0 : options.cssVarPrefix);
    if (!isSemantic) {
      if (token.startsWith("space")) {
        const keys2 = token.split(".");
        const [firstKey, ...referenceKeys] = keys2;
        const negativeLookupKey = `${firstKey}.-${referenceKeys.join(".")}`;
        const negativeValue = calc.negate(value);
        const negatedReference = calc.negate(reference);
        cssMap[negativeLookupKey] = {
          value: negativeValue,
          var: variable,
          varRef: negatedReference
        };
      }
      cssVars4[variable] = value;
      cssMap[token] = {
        value,
        var: variable,
        varRef: reference
      };
      continue;
    }
    const lookupToken = (maybeToken) => {
      const scale3 = String(token).split(".")[0];
      const withScale = [scale3, maybeToken].join(".");
      const resolvedTokenValue = flatTokens[withScale];
      if (!resolvedTokenValue)
        return maybeToken;
      const { reference: reference2 } = tokenToCssVar(withScale, options == null ? void 0 : options.cssVarPrefix);
      return reference2;
    };
    const normalizedValue = isObject(value) ? value : { default: value };
    cssVars4 = (0, import_lodash.default)(
      cssVars4,
      Object.entries(normalizedValue).reduce(
        (acc, [conditionAlias, conditionValue]) => {
          var _a40, _b8;
          const maybeReference = lookupToken(conditionValue.toString());
          if (conditionAlias === "default") {
            acc[variable] = maybeReference;
            return acc;
          }
          const conditionSelector = (_b8 = (_a40 = pseudoSelectors) == null ? void 0 : _a40[conditionAlias]) != null ? _b8 : conditionAlias;
          acc[conditionSelector] = { [variable]: maybeReference };
          return acc;
        },
        {}
      )
    );
    cssMap[token] = {
      value: reference,
      var: variable,
      varRef: reference
    };
  }
  return {
    cssVars: cssVars4,
    cssMap
  };
}
function omit(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key of keysToOmit) {
    if (key in clone) {
      delete clone[key];
    }
  }
  return clone;
}
function pick(object2, keysToPick) {
  const result = {};
  for (const key of keysToPick) {
    if (key in object2) {
      result[key] = object2[key];
    }
  }
  return result;
}
var tokens = [
  "colors",
  "borders",
  "borderWidths",
  "borderStyles",
  "fonts",
  "fontSizes",
  "fontWeights",
  "gradients",
  "letterSpacings",
  "lineHeights",
  "radii",
  "space",
  "shadows",
  "sizes",
  "zIndices",
  "transition",
  "blur",
  "breakpoints"
];
function extractTokens(theme3) {
  const _tokens = tokens;
  return pick(theme3, _tokens);
}
function extractSemanticTokens(theme3) {
  return theme3.semanticTokens;
}
function omitVars(rawTheme) {
  const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme;
  return cleanTheme;
}
function flattenTokens({
  tokens: tokens2,
  semanticTokens: semanticTokens3
}) {
  var _a40, _b8;
  const tokenEntries = Object.entries((_a40 = flatten(tokens2)) != null ? _a40 : {}).map(
    ([token, value]) => {
      const enhancedToken = { isSemantic: false, value };
      return [token, enhancedToken];
    }
  );
  const semanticTokenEntries = Object.entries(
    (_b8 = flatten(semanticTokens3, 1)) != null ? _b8 : {}
  ).map(([token, value]) => {
    const enhancedToken = { isSemantic: true, value };
    return [token, enhancedToken];
  });
  return Object.fromEntries([
    ...tokenEntries,
    ...semanticTokenEntries
  ]);
}
function flatten(target, maxDepth2 = Infinity) {
  if (!isObject(target) && !Array.isArray(target) || !maxDepth2) {
    return target;
  }
  return Object.entries(target).reduce((result, [key, value]) => {
    if (isObject(value) || Array.isArray(value)) {
      Object.entries(flatten(value, maxDepth2 - 1)).forEach(
        ([childKey, childValue]) => {
          result[`${key}.${childKey}`] = childValue;
        }
      );
    } else {
      result[key] = value;
    }
    return result;
  }, {});
}
function toCSSVar(rawTheme) {
  var _a40;
  const theme3 = omitVars(rawTheme);
  const tokens2 = extractTokens(theme3);
  const semanticTokens3 = extractSemanticTokens(theme3);
  const flatTokens = flattenTokens({ tokens: tokens2, semanticTokens: semanticTokens3 });
  const cssVarPrefix = (_a40 = theme3.config) == null ? void 0 : _a40.cssVarPrefix;
  const {
    cssMap,
    cssVars: cssVars4
  } = createThemeVars(flatTokens, { cssVarPrefix });
  const defaultCssVars = {
    "--chakra-ring-inset": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-ring-offset-width": "0px",
    "--chakra-ring-offset-color": "#fff",
    "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
    "--chakra-ring-offset-shadow": "0 0 #0000",
    "--chakra-ring-shadow": "0 0 #0000",
    "--chakra-space-x-reverse": "0",
    "--chakra-space-y-reverse": "0"
  };
  Object.assign(theme3, {
    __cssVars: { ...defaultCssVars, ...cssVars4 },
    __cssMap: cssMap,
    __breakpoints: analyzeBreakpoints(theme3.breakpoints)
  });
  return theme3;
}
var systemProps = (0, import_lodash3.default)(
  {},
  background,
  border,
  color,
  flexbox,
  layout,
  filter,
  ring,
  interactivity,
  grid,
  others,
  position,
  effect,
  space,
  scroll,
  typography,
  textDecoration,
  transform,
  list,
  transition
);
var layoutSystem = Object.assign({}, space, layout, flexbox, grid, position);
var layoutPropNames = Object.keys(
  layoutSystem
);
var propNames = [...Object.keys(systemProps), ...pseudoPropNames];
var styleProps = { ...systemProps, ...pseudoSelectors };
var isStyleProp = (prop) => prop in styleProps;
var expandResponsive = (styles3) => (theme3) => {
  if (!theme3.__breakpoints)
    return styles3;
  const { isResponsive, toArrayValue, media: medias } = theme3.__breakpoints;
  const computedStyles = {};
  for (const key in styles3) {
    let value = runIfFn(styles3[key], theme3);
    if (value == null)
      continue;
    value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;
    if (!Array.isArray(value)) {
      computedStyles[key] = value;
      continue;
    }
    const queries = value.slice(0, medias.length).length;
    for (let index = 0; index < queries; index += 1) {
      const media = medias == null ? void 0 : medias[index];
      if (!media) {
        computedStyles[key] = value[index];
        continue;
      }
      computedStyles[media] = computedStyles[media] || {};
      if (value[index] == null) {
        continue;
      }
      computedStyles[media][key] = value[index];
    }
  }
  return computedStyles;
};
function splitByComma(value) {
  const chunks = [];
  let chunk25 = "";
  let inParens = false;
  for (let i = 0; i < value.length; i++) {
    const char = value[i];
    if (char === "(") {
      inParens = true;
      chunk25 += char;
    } else if (char === ")") {
      inParens = false;
      chunk25 += char;
    } else if (char === "," && !inParens) {
      chunks.push(chunk25);
      chunk25 = "";
    } else {
      chunk25 += char;
    }
  }
  chunk25 = chunk25.trim();
  if (chunk25) {
    chunks.push(chunk25);
  }
  return chunks;
}
function isCssVar2(value) {
  return /^var\(--.+\)$/.test(value);
}
var isCSSVariableTokenValue = (key, value) => key.startsWith("--") && typeof value === "string" && !isCssVar2(value);
var resolveTokenValue = (theme3, value) => {
  var _a40, _b8;
  if (value == null)
    return value;
  const getVar = (val) => {
    var _a210, _b23;
    return (_b23 = (_a210 = theme3.__cssMap) == null ? void 0 : _a210[val]) == null ? void 0 : _b23.varRef;
  };
  const getValue2 = (val) => {
    var _a210;
    return (_a210 = getVar(val)) != null ? _a210 : val;
  };
  const [tokenValue, fallbackValue] = splitByComma(value);
  value = (_b8 = (_a40 = getVar(tokenValue)) != null ? _a40 : getValue2(fallbackValue)) != null ? _b8 : getValue2(value);
  return value;
};
function getCss(options) {
  const { configs = {}, pseudos = {}, theme: theme3 } = options;
  const css22 = (stylesOrFn, nested = false) => {
    var _a40, _b8, _c5;
    const _styles = runIfFn(stylesOrFn, theme3);
    const styles3 = expandResponsive(_styles)(theme3);
    let computedStyles = {};
    for (let key in styles3) {
      const valueOrFn = styles3[key];
      let value = runIfFn(valueOrFn, theme3);
      if (key in pseudos) {
        key = pseudos[key];
      }
      if (isCSSVariableTokenValue(key, value)) {
        value = resolveTokenValue(theme3, value);
      }
      let config3 = configs[key];
      if (config3 === true) {
        config3 = { property: key };
      }
      if (isObject(value)) {
        computedStyles[key] = (_a40 = computedStyles[key]) != null ? _a40 : {};
        computedStyles[key] = (0, import_lodash2.default)(
          {},
          computedStyles[key],
          css22(value, true)
        );
        continue;
      }
      let rawValue = (_c5 = (_b8 = config3 == null ? void 0 : config3.transform) == null ? void 0 : _b8.call(config3, value, theme3, _styles)) != null ? _c5 : value;
      rawValue = (config3 == null ? void 0 : config3.processResult) ? css22(rawValue, true) : rawValue;
      const configProperty = runIfFn(config3 == null ? void 0 : config3.property, theme3);
      if (!nested && (config3 == null ? void 0 : config3.static)) {
        const staticStyles = runIfFn(config3.static, theme3);
        computedStyles = (0, import_lodash2.default)({}, computedStyles, staticStyles);
      }
      if (configProperty && Array.isArray(configProperty)) {
        for (const property of configProperty) {
          computedStyles[property] = rawValue;
        }
        continue;
      }
      if (configProperty) {
        if (configProperty === "&" && isObject(rawValue)) {
          computedStyles = (0, import_lodash2.default)({}, computedStyles, rawValue);
        } else {
          computedStyles[configProperty] = rawValue;
        }
        continue;
      }
      if (isObject(rawValue)) {
        computedStyles = (0, import_lodash2.default)({}, computedStyles, rawValue);
        continue;
      }
      computedStyles[key] = rawValue;
    }
    return computedStyles;
  };
  return css22;
}
var css2 = (styles3) => (theme3) => {
  const cssFn = getCss({
    theme: theme3,
    pseudos: pseudoSelectors,
    configs: systemProps
  });
  return cssFn(styles3);
};
function defineStyle(styles3) {
  return styles3;
}
function defineStyleConfig(config3) {
  return config3;
}
function createMultiStyleConfigHelpers(parts) {
  return {
    definePartsStyle(config3) {
      return config3;
    },
    defineMultiStyleConfig(config3) {
      return { parts, ...config3 };
    }
  };
}
function normalize22(value, toArray3) {
  if (Array.isArray(value))
    return value;
  if (isObject(value))
    return toArray3(value);
  if (value != null)
    return [value];
}
function getNextIndex(values, i) {
  for (let j = i + 1; j < values.length; j++) {
    if (values[j] != null)
      return j;
  }
  return -1;
}
function createResolver(theme3) {
  const breakpointUtil = theme3.__breakpoints;
  return function resolver(config3, prop, value, props) {
    var _a40, _b8;
    if (!breakpointUtil)
      return;
    const result = {};
    const normalized = normalize22(value, breakpointUtil.toArrayValue);
    if (!normalized)
      return result;
    const len = normalized.length;
    const isSingle = len === 1;
    const isMultipart = !!config3.parts;
    for (let i = 0; i < len; i++) {
      const key = breakpointUtil.details[i];
      const nextKey = breakpointUtil.details[getNextIndex(normalized, i)];
      const query = toMediaQueryString(key.minW, nextKey == null ? void 0 : nextKey._minW);
      const styles3 = runIfFn((_a40 = config3[prop]) == null ? void 0 : _a40[normalized[i]], props);
      if (!styles3)
        continue;
      if (isMultipart) {
        (_b8 = config3.parts) == null ? void 0 : _b8.forEach((part) => {
          (0, import_lodash4.default)(result, {
            [part]: isSingle ? styles3[part] : { [query]: styles3[part] }
          });
        });
        continue;
      }
      if (!isMultipart) {
        if (isSingle)
          (0, import_lodash4.default)(result, styles3);
        else
          result[query] = styles3;
        continue;
      }
      result[query] = styles3;
    }
    return result;
  };
}
function resolveStyleConfig(config3) {
  return (props) => {
    var _a40;
    const { variant, size: size3, theme: theme3 } = props;
    const recipe = createResolver(theme3);
    return (0, import_lodash4.default)(
      {},
      runIfFn((_a40 = config3.baseStyle) != null ? _a40 : {}, props),
      recipe(config3, "sizes", size3, props),
      recipe(config3, "variants", variant, props)
    );
  };
}
function getCSSVar(theme3, scale3, value) {
  var _a40, _b8, _c5;
  return (_c5 = (_b8 = (_a40 = theme3.__cssMap) == null ? void 0 : _a40[`${scale3}.${value}`]) == null ? void 0 : _b8.varRef) != null ? _c5 : value;
}
function omitThemingProps(props) {
  return omit(props, ["styleConfig", "size", "variant", "colorScheme"]);
}

// node_modules/@chakra-ui/theme-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/dist/chunk-SUJGGKVT.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/dist/chunk-UONXFRGI.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/dist/chunk-DFL6DXJX.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/dist/chunk-AQYX3YP4.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-A6NK776R.mjs
init_shim();
var requiredChakraThemeKeys = [
  "borders",
  "breakpoints",
  "colors",
  "components",
  "config",
  "direction",
  "fonts",
  "fontSizes",
  "fontWeights",
  "letterSpacings",
  "lineHeights",
  "radii",
  "shadows",
  "sizes",
  "space",
  "styles",
  "transition",
  "zIndices"
];
function isChakraTheme(unit) {
  if (!isObject(unit)) {
    return false;
  }
  return requiredChakraThemeKeys.every(
    (propertyName) => Object.prototype.hasOwnProperty.call(unit, propertyName)
  );
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-6S44RLTW.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-7OKLMD4V.mjs
init_shim();
var zIndices = {
  hide: -1,
  auto: "auto",
  base: 0,
  docked: 10,
  dropdown: 1e3,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800
};
var z_index_default = zIndices;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-DDAHWWWN.mjs
init_shim();
var breakpoints = {
  base: "0em",
  sm: "30em",
  md: "48em",
  lg: "62em",
  xl: "80em",
  "2xl": "96em"
};
var breakpoints_default = breakpoints;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-C7H5GWRZ.mjs
init_shim();
var colors = {
  transparent: "transparent",
  current: "currentColor",
  black: "#000000",
  white: "#FFFFFF",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)"
  },
  gray: {
    50: "#F7FAFC",
    100: "#EDF2F7",
    200: "#E2E8F0",
    300: "#CBD5E0",
    400: "#A0AEC0",
    500: "#718096",
    600: "#4A5568",
    700: "#2D3748",
    800: "#1A202C",
    900: "#171923"
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E",
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B"
  },
  orange: {
    50: "#FFFAF0",
    100: "#FEEBC8",
    200: "#FBD38D",
    300: "#F6AD55",
    400: "#ED8936",
    500: "#DD6B20",
    600: "#C05621",
    700: "#9C4221",
    800: "#7B341E",
    900: "#652B19"
  },
  yellow: {
    50: "#FFFFF0",
    100: "#FEFCBF",
    200: "#FAF089",
    300: "#F6E05E",
    400: "#ECC94B",
    500: "#D69E2E",
    600: "#B7791F",
    700: "#975A16",
    800: "#744210",
    900: "#5F370E"
  },
  green: {
    50: "#F0FFF4",
    100: "#C6F6D5",
    200: "#9AE6B4",
    300: "#68D391",
    400: "#48BB78",
    500: "#38A169",
    600: "#2F855A",
    700: "#276749",
    800: "#22543D",
    900: "#1C4532"
  },
  teal: {
    50: "#E6FFFA",
    100: "#B2F5EA",
    200: "#81E6D9",
    300: "#4FD1C5",
    400: "#38B2AC",
    500: "#319795",
    600: "#2C7A7B",
    700: "#285E61",
    800: "#234E52",
    900: "#1D4044"
  },
  blue: {
    50: "#ebf8ff",
    100: "#bee3f8",
    200: "#90cdf4",
    300: "#63b3ed",
    400: "#4299e1",
    500: "#3182ce",
    600: "#2b6cb0",
    700: "#2c5282",
    800: "#2a4365",
    900: "#1A365D"
  },
  cyan: {
    50: "#EDFDFD",
    100: "#C4F1F9",
    200: "#9DECF9",
    300: "#76E4F7",
    400: "#0BC5EA",
    500: "#00B5D8",
    600: "#00A3C4",
    700: "#0987A0",
    800: "#086F83",
    900: "#065666"
  },
  purple: {
    50: "#FAF5FF",
    100: "#E9D8FD",
    200: "#D6BCFA",
    300: "#B794F4",
    400: "#9F7AEA",
    500: "#805AD5",
    600: "#6B46C1",
    700: "#553C9A",
    800: "#44337A",
    900: "#322659"
  },
  pink: {
    50: "#FFF5F7",
    100: "#FED7E2",
    200: "#FBB6CE",
    300: "#F687B3",
    400: "#ED64A6",
    500: "#D53F8C",
    600: "#B83280",
    700: "#97266D",
    800: "#702459",
    900: "#521B41"
  },
  linkedin: {
    50: "#E8F4F9",
    100: "#CFEDFB",
    200: "#9BDAF3",
    300: "#68C7EC",
    400: "#34B3E4",
    500: "#00A0DC",
    600: "#008CC9",
    700: "#0077B5",
    800: "#005E93",
    900: "#004471"
  },
  facebook: {
    50: "#E8F4F9",
    100: "#D9DEE9",
    200: "#B7C2DA",
    300: "#6482C0",
    400: "#4267B2",
    500: "#385898",
    600: "#314E89",
    700: "#29487D",
    800: "#223B67",
    900: "#1E355B"
  },
  messenger: {
    50: "#D0E6FF",
    100: "#B9DAFF",
    200: "#A2CDFF",
    300: "#7AB8FF",
    400: "#2E90FF",
    500: "#0078FF",
    600: "#0063D1",
    700: "#0052AC",
    800: "#003C7E",
    900: "#002C5C"
  },
  whatsapp: {
    50: "#dffeec",
    100: "#b9f5d0",
    200: "#90edb3",
    300: "#65e495",
    400: "#3cdd78",
    500: "#22c35e",
    600: "#179848",
    700: "#0c6c33",
    800: "#01421c",
    900: "#001803"
  },
  twitter: {
    50: "#E5F4FD",
    100: "#C8E9FB",
    200: "#A8DCFA",
    300: "#83CDF7",
    400: "#57BBF5",
    500: "#1DA1F2",
    600: "#1A94DA",
    700: "#1681BF",
    800: "#136B9E",
    900: "#0D4D71"
  },
  telegram: {
    50: "#E3F2F9",
    100: "#C5E4F3",
    200: "#A2D4EC",
    300: "#7AC1E4",
    400: "#47A9DA",
    500: "#0088CC",
    600: "#007AB8",
    700: "#006BA1",
    800: "#005885",
    900: "#003F5E"
  }
};
var colors_default = colors;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-4REDROSM.mjs
init_shim();
var radii = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};
var radius_default = radii;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-DJNGX4VH.mjs
init_shim();
var shadows = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
var shadows_default = shadows;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-AU77DZXY.mjs
init_shim();
var transitionProperty = {
  common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
  colors: "background-color, border-color, color, fill, stroke",
  dimensions: "width, height",
  position: "left, right, top, bottom",
  background: "background-color, background-image, background-position"
};
var transitionTimingFunction = {
  "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
  "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration = {
  "ultra-fast": "50ms",
  faster: "100ms",
  fast: "150ms",
  normal: "200ms",
  slow: "300ms",
  slower: "400ms",
  "ultra-slow": "500ms"
};
var transition2 = {
  property: transitionProperty,
  easing: transitionTimingFunction,
  duration: transitionDuration
};
var transition_default = transition2;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-OLDNEXT6.mjs
init_shim();
var blur = {
  none: 0,
  sm: "4px",
  base: "8px",
  md: "12px",
  lg: "16px",
  xl: "24px",
  "2xl": "40px",
  "3xl": "64px"
};
var blur_default = blur;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-ZV5E32CG.mjs
init_shim();
var borders = {
  none: 0,
  "1px": "1px solid",
  "2px": "2px solid",
  "4px": "4px solid",
  "8px": "8px solid"
};
var borders_default = borders;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-HOOF7HHD.mjs
init_shim();
var typography2 = {
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeights: {
    normal: "normal",
    none: 1,
    shorter: 1.25,
    short: 1.375,
    base: 1.5,
    tall: 1.625,
    taller: "2",
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  fonts: {
    heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
  },
  fontSizes: {
    "3xs": "0.45rem",
    "2xs": "0.625rem",
    xs: "0.75rem",
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  }
};
var typography_default = typography2;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-X4JBRTE2.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-G3IFUAY5.mjs
init_shim();
var spacing = {
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-X4JBRTE2.mjs
var largeSizes = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem",
  prose: "60ch"
};
var container = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes = {
  ...spacing,
  ...largeSizes,
  container
};
var sizes_default = sizes;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-6S44RLTW.mjs
var foundations = {
  breakpoints: breakpoints_default,
  zIndices: z_index_default,
  radii: radius_default,
  blur: blur_default,
  colors: colors_default,
  ...typography_default,
  sizes: sizes_default,
  shadows: shadows_default,
  space: spacing,
  borders: borders_default,
  transition: transition_default
};

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-EO2YJNI2.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-KGFPXNP4.mjs
init_shim();

// node_modules/@chakra-ui/anatomy/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/anatomy/dist/chunk-HAKT6JCA.mjs
init_shim();

// node_modules/@chakra-ui/anatomy/dist/chunk-ZN6IUO2A.mjs
init_shim();
function anatomy(name, map = {}) {
  let called = false;
  function assert() {
    if (!called) {
      called = true;
      return;
    }
    throw new Error(
      "[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?"
    );
  }
  function parts(...values) {
    assert();
    for (const part of values) {
      ;
      map[part] = toPart(part);
    }
    return anatomy(name, map);
  }
  function extend(...parts2) {
    for (const part of parts2) {
      if (part in map)
        continue;
      map[part] = toPart(part);
    }
    return anatomy(name, map);
  }
  function selectors() {
    const value = Object.fromEntries(
      Object.entries(map).map(([key, part]) => [key, part.selector])
    );
    return value;
  }
  function classnames() {
    const value = Object.fromEntries(
      Object.entries(map).map(([key, part]) => [key, part.className])
    );
    return value;
  }
  function toPart(part) {
    const el = ["container", "root"].includes(part != null ? part : "") ? [name] : [name, part];
    const attr = el.filter(Boolean).join("__");
    const className = `chakra-${attr}`;
    const partObj = {
      className,
      selector: `.${className}`,
      toString: () => part
    };
    return partObj;
  }
  const __type = {};
  return {
    parts,
    toPart,
    extend,
    selectors,
    classnames,
    get keys() {
      return Object.keys(map);
    },
    __type
  };
}

// node_modules/@chakra-ui/anatomy/dist/chunk-HAKT6JCA.mjs
var accordionAnatomy = anatomy("accordion").parts("root", "container", "button", "panel").extend("icon");
var alertAnatomy = anatomy("alert").parts("title", "description", "container").extend("icon", "spinner");
var avatarAnatomy = anatomy("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
var breadcrumbAnatomy = anatomy("breadcrumb").parts("link", "item", "container").extend("separator");
var buttonAnatomy = anatomy("button").parts();
var checkboxAnatomy = anatomy("checkbox").parts("control", "icon", "container").extend("label");
var circularProgressAnatomy = anatomy("progress").parts("track", "filledTrack").extend("label");
var drawerAnatomy = anatomy("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var editableAnatomy = anatomy("editable").parts(
  "preview",
  "input",
  "textarea"
);
var formAnatomy = anatomy("form").parts(
  "container",
  "requiredIndicator",
  "helperText"
);
var formErrorAnatomy = anatomy("formError").parts("text", "icon");
var inputAnatomy = anatomy("input").parts("addon", "field", "element");
var listAnatomy = anatomy("list").parts("container", "item", "icon");
var menuAnatomy = anatomy("menu").parts("button", "list", "item").extend("groupTitle", "command", "divider");
var modalAnatomy = anatomy("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var numberInputAnatomy = anatomy("numberinput").parts(
  "root",
  "field",
  "stepperGroup",
  "stepper"
);
var pinInputAnatomy = anatomy("pininput").parts("field");
var popoverAnatomy = anatomy("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
var progressAnatomy = anatomy("progress").parts(
  "label",
  "filledTrack",
  "track"
);
var radioAnatomy = anatomy("radio").parts(
  "container",
  "control",
  "label"
);
var selectAnatomy = anatomy("select").parts("field", "icon");
var sliderAnatomy = anatomy("slider").parts(
  "container",
  "track",
  "thumb",
  "filledTrack",
  "mark"
);
var statAnatomy = anatomy("stat").parts(
  "container",
  "label",
  "helpText",
  "number",
  "icon"
);
var switchAnatomy = anatomy("switch").parts(
  "container",
  "track",
  "thumb"
);
var tableAnatomy = anatomy("table").parts(
  "table",
  "thead",
  "tbody",
  "tr",
  "th",
  "td",
  "tfoot",
  "caption"
);
var tabsAnatomy = anatomy("tabs").parts(
  "root",
  "tab",
  "tablist",
  "tabpanel",
  "tabpanels",
  "indicator"
);
var tagAnatomy = anatomy("tag").parts(
  "container",
  "label",
  "closeButton"
);
var cardAnatomy = anatomy("card").parts(
  "container",
  "header",
  "body",
  "footer"
);

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/chunk-H4E5VM26.mjs
init_shim();

// node_modules/color2k/dist/index.module.es.js
init_shim();
function guard(low, high, value) {
  return Math.min(Math.max(low, value), high);
}
var ColorError = class extends Error {
  constructor(color3) {
    super(`Failed to parse color: "${color3}"`);
  }
};
var ColorError$1 = ColorError;
function parseToRgba(color3) {
  if (typeof color3 !== "string")
    throw new ColorError$1(color3);
  if (color3.trim().toLowerCase() === "transparent")
    return [0, 0, 0, 0];
  let normalizedColor = color3.trim();
  normalizedColor = namedColorRegex.test(color3) ? nameToHex(color3) : color3;
  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);
  if (reducedHexMatch) {
    const arr = Array.from(reducedHexMatch).slice(1);
    return [...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)), parseInt(r(arr[3] || "f", 2), 16) / 255];
  }
  const hexMatch = hexRegex.exec(normalizedColor);
  if (hexMatch) {
    const arr = Array.from(hexMatch).slice(1);
    return [...arr.slice(0, 3).map((x) => parseInt(x, 16)), parseInt(arr[3] || "ff", 16) / 255];
  }
  const rgbaMatch = rgbaRegex.exec(normalizedColor);
  if (rgbaMatch) {
    const arr = Array.from(rgbaMatch).slice(1);
    return [...arr.slice(0, 3).map((x) => parseInt(x, 10)), parseFloat(arr[3] || "1")];
  }
  const hslaMatch = hslaRegex.exec(normalizedColor);
  if (hslaMatch) {
    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);
    if (guard(0, 100, s) !== s)
      throw new ColorError$1(color3);
    if (guard(0, 100, l) !== l)
      throw new ColorError$1(color3);
    return [...hslToRgb(h, s, l), Number.isNaN(a) ? 1 : a];
  }
  throw new ColorError$1(color3);
}
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i) {
    hash2 = hash2 * 33 ^ str.charCodeAt(--i);
  }
  return (hash2 >>> 0) % 2341;
}
var colorToInt = (x) => parseInt(x.replace(/_/g, ""), 36);
var compressedColorMap = "1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm".split(" ").reduce((acc, next) => {
  const key = colorToInt(next.substring(0, 3));
  const hex2 = colorToInt(next.substring(3)).toString(16);
  let prefix = "";
  for (let i = 0; i < 6 - hex2.length; i++) {
    prefix += "0";
  }
  acc[key] = `${prefix}${hex2}`;
  return acc;
}, {});
function nameToHex(color3) {
  const normalizedColorName = color3.toLowerCase().trim();
  const result = compressedColorMap[hash(normalizedColorName)];
  if (!result)
    throw new ColorError$1(color3);
  return `#${result}`;
}
var r = (str, amount) => Array.from(Array(amount)).map(() => str).join("");
var reducedHexRegex = new RegExp(`^#${r("([a-f0-9])", 3)}([a-f0-9])?$`, "i");
var hexRegex = new RegExp(`^#${r("([a-f0-9]{2})", 3)}([a-f0-9]{2})?$`, "i");
var rgbaRegex = new RegExp(`^rgba?\\(\\s*(\\d+)\\s*${r(",\\s*(\\d+)\\s*", 2)}(?:,\\s*([\\d.]+))?\\s*\\)$`, "i");
var hslaRegex = /^hsla?\(\s*([\d.]+)\s*,\s*([\d.]+)%\s*,\s*([\d.]+)%(?:\s*,\s*([\d.]+))?\s*\)$/i;
var namedColorRegex = /^[a-z]+$/i;
var roundColor = (color3) => {
  return Math.round(color3 * 255);
};
var hslToRgb = (hue, saturation, lightness) => {
  let l = lightness / 100;
  if (saturation === 0) {
    return [l, l, l].map(roundColor);
  }
  const huePrime = (hue % 360 + 360) % 360 / 60;
  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);
  const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
  let red = 0;
  let green = 0;
  let blue = 0;
  if (huePrime >= 0 && huePrime < 1) {
    red = chroma;
    green = secondComponent;
  } else if (huePrime >= 1 && huePrime < 2) {
    red = secondComponent;
    green = chroma;
  } else if (huePrime >= 2 && huePrime < 3) {
    green = chroma;
    blue = secondComponent;
  } else if (huePrime >= 3 && huePrime < 4) {
    green = secondComponent;
    blue = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    red = secondComponent;
    blue = chroma;
  } else if (huePrime >= 5 && huePrime < 6) {
    red = chroma;
    blue = secondComponent;
  }
  const lightnessModification = l - chroma / 2;
  const finalRed = red + lightnessModification;
  const finalGreen = green + lightnessModification;
  const finalBlue = blue + lightnessModification;
  return [finalRed, finalGreen, finalBlue].map(roundColor);
};
function rgba(red, green, blue, alpha2) {
  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha2).toFixed(3))})`;
}
function transparentize(color3, amount) {
  const [r2, g, b, a] = parseToRgba(color3);
  return rgba(r2, g, b, a - amount);
}
function toHex(color3) {
  const [r2, g, b, a] = parseToRgba(color3);
  let hex2 = (x) => {
    const h = guard(0, 255, x).toString(16);
    return h.length === 1 ? `0${h}` : h;
  };
  return `#${hex2(r2)}${hex2(g)}${hex2(b)}${a < 1 ? hex2(Math.round(a * 255)) : ""}`;
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/chunk-H4E5VM26.mjs
function dlv_es_default(t2, e, l, n, r2) {
  for (e = e.split ? e.split(".") : e, n = 0; n < e.length; n++)
    t2 = t2 ? t2[e[n]] : r2;
  return t2 === r2 ? l : t2;
}
var isEmptyObject = (obj) => Object.keys(obj).length === 0;
var getColor = (theme3, color3, fallback) => {
  const hex2 = dlv_es_default(theme3, `colors.${color3}`, color3);
  try {
    toHex(hex2);
    return hex2;
  } catch {
    return fallback != null ? fallback : "#000000";
  }
};
var getBrightness = (color3) => {
  const [r2, g, b] = parseToRgba(color3);
  return (r2 * 299 + g * 587 + b * 114) / 1e3;
};
var tone = (color3) => (theme3) => {
  const hex2 = getColor(theme3, color3);
  const brightness = getBrightness(hex2);
  const isDark22 = brightness < 128;
  return isDark22 ? "dark" : "light";
};
var isDark = (color3) => (theme3) => tone(color3)(theme3) === "dark";
var transparentize2 = (color3, opacity) => (theme3) => {
  const raw = getColor(theme3, color3);
  return transparentize(raw, 1 - opacity);
};
function generateStripe(size3 = "1rem", color3 = "rgba(255, 255, 255, 0.15)") {
  return {
    backgroundImage: `linear-gradient(
    45deg,
    ${color3} 25%,
    transparent 25%,
    transparent 50%,
    ${color3} 50%,
    ${color3} 75%,
    transparent 75%,
    transparent
  )`,
    backgroundSize: `${size3} ${size3}`
  };
}
var randomHex = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, "0")}`;
function randomColor(opts) {
  const fallback = randomHex();
  if (!opts || isEmptyObject(opts)) {
    return fallback;
  }
  if (opts.string && opts.colors) {
    return randomColorFromList(opts.string, opts.colors);
  }
  if (opts.string && !opts.colors) {
    return randomColorFromString(opts.string);
  }
  if (opts.colors && !opts.string) {
    return randomFromList(opts.colors);
  }
  return fallback;
}
function randomColorFromString(str) {
  let hash2 = 0;
  if (str.length === 0)
    return hash2.toString();
  for (let i = 0; i < str.length; i += 1) {
    hash2 = str.charCodeAt(i) + ((hash2 << 5) - hash2);
    hash2 = hash2 & hash2;
  }
  let color3 = "#";
  for (let j = 0; j < 3; j += 1) {
    const value = hash2 >> j * 8 & 255;
    color3 += `00${value.toString(16)}`.substr(-2);
  }
  return color3;
}
function randomColorFromList(str, list2) {
  let index = 0;
  if (str.length === 0)
    return list2[0];
  for (let i = 0; i < str.length; i += 1) {
    index = str.charCodeAt(i) + ((index << 5) - index);
    index = index & index;
  }
  index = (index % list2.length + list2.length) % list2.length;
  return list2[index];
}
function randomFromList(list2) {
  return list2[Math.floor(Math.random() * list2.length)];
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/chunk-7P3W45AB.mjs
init_shim();
function mode(light, dark) {
  return (props) => props.colorMode === "dark" ? dark : light;
}
function orient(options) {
  const { orientation, vertical, horizontal } = options;
  if (!orientation)
    return {};
  return orientation === "vertical" ? vertical : horizontal;
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/chunk-4T5CIMY5.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/chunk-E3OBLH5E.mjs
init_shim();
function toRef(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, "");
var add2 = (...operands) => `calc(${toExpr("+", ...operands)})`;
var subtract3 = (...operands) => `calc(${toExpr("-", ...operands)})`;
var multiply2 = (...operands) => `calc(${toExpr("*", ...operands)})`;
var divide2 = (...operands) => `calc(${toExpr("/", ...operands)})`;
var negate2 = (x) => {
  const value = toRef(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply2(value, -1);
};
var calc2 = Object.assign(
  (x) => ({
    add: (...operands) => calc2(add2(x, ...operands)),
    subtract: (...operands) => calc2(subtract3(x, ...operands)),
    multiply: (...operands) => calc2(multiply2(x, ...operands)),
    divide: (...operands) => calc2(divide2(x, ...operands)),
    negate: () => calc2(negate2(x)),
    toString: () => x.toString()
  }),
  {
    add: add2,
    subtract: subtract3,
    multiply: multiply2,
    divide: divide2,
    negate: negate2
  }
);

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/chunk-7SOXEYKO.mjs
init_shim();
function isDecimal(value) {
  return !Number.isInteger(parseFloat(value.toString()));
}
function replaceWhiteSpace2(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape2(value) {
  const valueStr = replaceWhiteSpace2(value.toString());
  if (valueStr.includes("\\."))
    return value;
  return isDecimal(value) ? valueStr.replace(".", `\\.`) : value;
}
function addPrefix2(value, prefix = "") {
  return [prefix, escape2(value)].filter(Boolean).join("-");
}
function toVarRef(name, fallback) {
  return `var(${escape2(name)}${fallback ? `, ${fallback}` : ""})`;
}
function toVar(value, prefix = "") {
  return `--${addPrefix2(value, prefix)}`;
}
function cssVar2(name, options) {
  const cssVariable = toVar(name, options == null ? void 0 : options.prefix);
  return {
    variable: cssVariable,
    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))
  };
}
function getFallback(fallback) {
  if (typeof fallback === "string")
    return fallback;
  return fallback == null ? void 0 : fallback.reference;
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-KGFPXNP4.mjs
var { defineMultiStyleConfig, definePartsStyle } = createMultiStyleConfigHelpers(switchAnatomy.keys);
var $width = cssVar2("switch-track-width");
var $height = cssVar2("switch-track-height");
var $diff = cssVar2("switch-track-diff");
var diffValue = calc2.subtract($width, $height);
var $translateX = cssVar2("switch-thumb-x");
var $bg = cssVar2("switch-bg");
var baseStyleTrack = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    borderRadius: "full",
    p: "0.5",
    width: [$width.reference],
    height: [$height.reference],
    transitionProperty: "common",
    transitionDuration: "fast",
    [$bg.variable]: "colors.gray.300",
    _dark: {
      [$bg.variable]: "colors.whiteAlpha.400"
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    _checked: {
      [$bg.variable]: `colors.${c}.500`,
      _dark: {
        [$bg.variable]: `colors.${c}.200`
      }
    },
    bg: $bg.reference
  };
});
var baseStyleThumb = defineStyle({
  bg: "white",
  transitionProperty: "transform",
  transitionDuration: "normal",
  borderRadius: "inherit",
  width: [$height.reference],
  height: [$height.reference],
  _checked: {
    transform: `translateX(${$translateX.reference})`
  }
});
var baseStyle = definePartsStyle((props) => ({
  container: {
    [$diff.variable]: diffValue,
    [$translateX.variable]: $diff.reference,
    _rtl: {
      [$translateX.variable]: calc2($diff).negate().toString()
    }
  },
  track: baseStyleTrack(props),
  thumb: baseStyleThumb
}));
var sizes2 = {
  sm: definePartsStyle({
    container: {
      [$width.variable]: "1.375rem",
      [$height.variable]: "sizes.3"
    }
  }),
  md: definePartsStyle({
    container: {
      [$width.variable]: "1.875rem",
      [$height.variable]: "sizes.4"
    }
  }),
  lg: definePartsStyle({
    container: {
      [$width.variable]: "2.875rem",
      [$height.variable]: "sizes.6"
    }
  })
};
var switchTheme = defineMultiStyleConfig({
  baseStyle,
  sizes: sizes2,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-WHSEAAWU.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig2, definePartsStyle: definePartsStyle2 } = createMultiStyleConfigHelpers(tableAnatomy.keys);
var baseStyle2 = definePartsStyle2({
  table: {
    fontVariantNumeric: "lining-nums tabular-nums",
    borderCollapse: "collapse",
    width: "full"
  },
  th: {
    fontFamily: "heading",
    fontWeight: "bold",
    textTransform: "uppercase",
    letterSpacing: "wider",
    textAlign: "start"
  },
  td: {
    textAlign: "start"
  },
  caption: {
    mt: 4,
    fontFamily: "heading",
    textAlign: "center",
    fontWeight: "medium"
  }
});
var numericStyles = defineStyle({
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
});
var variantSimple = definePartsStyle2((props) => {
  const { colorScheme: c } = props;
  return {
    th: {
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    td: {
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variantStripe = definePartsStyle2((props) => {
  const { colorScheme: c } = props;
  return {
    th: {
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    td: {
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tbody: {
      tr: {
        "&:nth-of-type(odd)": {
          "th, td": {
            borderBottomWidth: "1px",
            borderColor: mode(`${c}.100`, `${c}.700`)(props)
          },
          td: {
            background: mode(`${c}.100`, `${c}.700`)(props)
          }
        }
      }
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variants = {
  simple: variantSimple,
  striped: variantStripe,
  unstyled: defineStyle({})
};
var sizes3 = {
  sm: definePartsStyle2({
    th: {
      px: "4",
      py: "1",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "4",
      py: "2",
      fontSize: "sm",
      lineHeight: "4"
    },
    caption: {
      px: "4",
      py: "2",
      fontSize: "xs"
    }
  }),
  md: definePartsStyle2({
    th: {
      px: "6",
      py: "3",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "6",
      py: "4",
      lineHeight: "5"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "sm"
    }
  }),
  lg: definePartsStyle2({
    th: {
      px: "8",
      py: "4",
      lineHeight: "5",
      fontSize: "sm"
    },
    td: {
      px: "8",
      py: "5",
      lineHeight: "6"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "md"
    }
  })
};
var tableTheme = defineMultiStyleConfig2({
  baseStyle: baseStyle2,
  variants,
  sizes: sizes3,
  defaultProps: {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-RBQSCDLK.mjs
init_shim();
var $fg = cssVar("tabs-color");
var $bg2 = cssVar("tabs-bg");
var $border = cssVar("tabs-border-color");
var { defineMultiStyleConfig: defineMultiStyleConfig3, definePartsStyle: definePartsStyle3 } = createMultiStyleConfigHelpers(tabsAnatomy.keys);
var baseStyleRoot = defineStyle((props) => {
  const { orientation } = props;
  return {
    display: orientation === "vertical" ? "flex" : "block"
  };
});
var baseStyleTab = defineStyle((props) => {
  const { isFitted } = props;
  return {
    flex: isFitted ? 1 : void 0,
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
      zIndex: 1,
      boxShadow: "outline"
    },
    _disabled: {
      cursor: "not-allowed",
      opacity: 0.4
    }
  };
});
var baseStyleTablist = defineStyle((props) => {
  const { align = "start", orientation } = props;
  const alignments = {
    end: "flex-end",
    center: "center",
    start: "flex-start"
  };
  return {
    justifyContent: alignments[align],
    flexDirection: orientation === "vertical" ? "column" : "row"
  };
});
var baseStyleTabpanel = defineStyle({
  p: 4
});
var baseStyle3 = definePartsStyle3((props) => ({
  root: baseStyleRoot(props),
  tab: baseStyleTab(props),
  tablist: baseStyleTablist(props),
  tabpanel: baseStyleTabpanel
}));
var sizes4 = {
  sm: definePartsStyle3({
    tab: {
      py: 1,
      px: 4,
      fontSize: "sm"
    }
  }),
  md: definePartsStyle3({
    tab: {
      fontSize: "md",
      py: 2,
      px: 4
    }
  }),
  lg: definePartsStyle3({
    tab: {
      fontSize: "lg",
      py: 3,
      px: 4
    }
  })
};
var variantLine = definePartsStyle3((props) => {
  const { colorScheme: c, orientation } = props;
  const isVertical = orientation === "vertical";
  const borderProp = orientation === "vertical" ? "borderStart" : "borderBottom";
  const marginProp = isVertical ? "marginStart" : "marginBottom";
  return {
    tablist: {
      [borderProp]: "2px solid",
      borderColor: "inherit"
    },
    tab: {
      [borderProp]: "2px solid",
      borderColor: "transparent",
      [marginProp]: "-2px",
      _selected: {
        [$fg.variable]: `colors.${c}.600`,
        _dark: {
          [$fg.variable]: `colors.${c}.300`
        },
        borderColor: "currentColor"
      },
      _active: {
        [$bg2.variable]: "colors.gray.200",
        _dark: {
          [$bg2.variable]: "colors.whiteAlpha.300"
        }
      },
      _disabled: {
        _active: { bg: "none" }
      },
      color: $fg.reference,
      bg: $bg2.reference
    }
  };
});
var variantEnclosed = definePartsStyle3((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      borderTopRadius: "md",
      border: "1px solid",
      borderColor: "transparent",
      mb: "-1px",
      [$border.variable]: "transparent",
      _selected: {
        [$fg.variable]: `colors.${c}.600`,
        [$border.variable]: `colors.white`,
        _dark: {
          [$fg.variable]: `colors.${c}.300`,
          [$border.variable]: `colors.gray.800`
        },
        borderColor: "inherit",
        borderBottomColor: $border.reference
      },
      color: $fg.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantEnclosedColored = definePartsStyle3((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      border: "1px solid",
      borderColor: "inherit",
      [$bg2.variable]: "colors.gray.50",
      _dark: {
        [$bg2.variable]: "colors.whiteAlpha.50"
      },
      mb: "-1px",
      _notLast: {
        marginEnd: "-1px"
      },
      _selected: {
        [$bg2.variable]: "colors.white",
        [$fg.variable]: `colors.${c}.600`,
        _dark: {
          [$bg2.variable]: "colors.gray.800",
          [$fg.variable]: `colors.${c}.300`
        },
        borderColor: "inherit",
        borderTopColor: "currentColor",
        borderBottomColor: "transparent"
      },
      color: $fg.reference,
      bg: $bg2.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantSoftRounded = definePartsStyle3((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: "gray.600",
      _selected: {
        color: getColor(theme3, `${c}.700`),
        bg: getColor(theme3, `${c}.100`)
      }
    }
  };
});
var variantSolidRounded = definePartsStyle3((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      [$fg.variable]: "colors.gray.600",
      _dark: {
        [$fg.variable]: "inherit"
      },
      _selected: {
        [$fg.variable]: "colors.white",
        [$bg2.variable]: `colors.${c}.600`,
        _dark: {
          [$fg.variable]: "colors.gray.800",
          [$bg2.variable]: `colors.${c}.300`
        }
      },
      color: $fg.reference,
      bg: $bg2.reference
    }
  };
});
var variantUnstyled = definePartsStyle3({});
var variants2 = {
  line: variantLine,
  enclosed: variantEnclosed,
  "enclosed-colored": variantEnclosedColored,
  "soft-rounded": variantSoftRounded,
  "solid-rounded": variantSolidRounded,
  unstyled: variantUnstyled
};
var tabsTheme = defineMultiStyleConfig3({
  baseStyle: baseStyle3,
  sizes: sizes4,
  variants: variants2,
  defaultProps: {
    size: "md",
    variant: "line",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-CZP5TVGH.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-IBJP6BGU.mjs
init_shim();
var vars = defineCssVars("badge", ["bg", "color", "shadow"]);
var baseStyle4 = defineStyle({
  px: 1,
  textTransform: "uppercase",
  fontSize: "xs",
  borderRadius: "sm",
  fontWeight: "bold",
  bg: vars.bg.reference,
  color: vars.color.reference,
  boxShadow: vars.shadow.reference
});
var variantSolid = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const dark = transparentize2(`${c}.500`, 0.6)(theme3);
  return {
    [vars.bg.variable]: `colors.${c}.500`,
    [vars.color.variable]: `colors.white`,
    _dark: {
      [vars.bg.variable]: dark,
      [vars.color.variable]: `colors.whiteAlpha.800`
    }
  };
});
var variantSubtle = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const darkBg = transparentize2(`${c}.200`, 0.16)(theme3);
  return {
    [vars.bg.variable]: `colors.${c}.100`,
    [vars.color.variable]: `colors.${c}.800`,
    _dark: {
      [vars.bg.variable]: darkBg,
      [vars.color.variable]: `colors.${c}.200`
    }
  };
});
var variantOutline = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const darkColor = transparentize2(`${c}.200`, 0.8)(theme3);
  return {
    [vars.color.variable]: `colors.${c}.500`,
    _dark: {
      [vars.color.variable]: darkColor
    },
    [vars.shadow.variable]: `inset 0 0 0px 1px ${vars.color.reference}`
  };
});
var variants3 = {
  solid: variantSolid,
  subtle: variantSubtle,
  outline: variantOutline
};
var badgeTheme = defineStyleConfig({
  baseStyle: baseStyle4,
  variants: variants3,
  defaultProps: {
    variant: "subtle",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-CZP5TVGH.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig4, definePartsStyle: definePartsStyle4 } = createMultiStyleConfigHelpers(tagAnatomy.keys);
var baseStyleContainer = defineStyle({
  fontWeight: "medium",
  lineHeight: 1.2,
  outline: 0,
  color: vars.color.reference,
  bg: vars.bg.reference,
  boxShadow: vars.shadow.reference,
  borderRadius: "md",
  _focusVisible: {
    boxShadow: "outline"
  }
});
var baseStyleLabel = defineStyle({
  lineHeight: 1.2,
  overflow: "visible"
});
var baseStyleCloseButton = defineStyle({
  fontSize: "lg",
  w: "5",
  h: "5",
  transitionProperty: "common",
  transitionDuration: "normal",
  borderRadius: "full",
  marginStart: "1.5",
  marginEnd: "-1",
  opacity: 0.5,
  _disabled: {
    opacity: 0.4
  },
  _focusVisible: {
    boxShadow: "outline",
    bg: "rgba(0, 0, 0, 0.14)"
  },
  _hover: {
    opacity: 0.8
  },
  _active: {
    opacity: 1
  }
});
var baseStyle5 = definePartsStyle4({
  container: baseStyleContainer,
  label: baseStyleLabel,
  closeButton: baseStyleCloseButton
});
var sizes5 = {
  sm: definePartsStyle4({
    container: {
      minH: "5",
      minW: "5",
      fontSize: "xs",
      px: "2"
    },
    closeButton: {
      marginEnd: "-2px",
      marginStart: "0.35rem"
    }
  }),
  md: definePartsStyle4({
    container: {
      minH: "6",
      minW: "6",
      fontSize: "sm",
      px: "2"
    }
  }),
  lg: definePartsStyle4({
    container: {
      minH: "8",
      minW: "8",
      fontSize: "md",
      px: "3"
    }
  })
};
var variants4 = {
  subtle: definePartsStyle4((props) => {
    var _a40;
    return {
      container: (_a40 = badgeTheme.variants) == null ? void 0 : _a40.subtle(props)
    };
  }),
  solid: definePartsStyle4((props) => {
    var _a40;
    return {
      container: (_a40 = badgeTheme.variants) == null ? void 0 : _a40.solid(props)
    };
  }),
  outline: definePartsStyle4((props) => {
    var _a40;
    return {
      container: (_a40 = badgeTheme.variants) == null ? void 0 : _a40.outline(props)
    };
  })
};
var tagTheme = defineMultiStyleConfig4({
  variants: variants4,
  baseStyle: baseStyle5,
  sizes: sizes5,
  defaultProps: {
    size: "md",
    variant: "subtle",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-OIGZPHLT.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-WFLWAEKG.mjs
init_shim();
var { definePartsStyle: definePartsStyle5, defineMultiStyleConfig: defineMultiStyleConfig5 } = createMultiStyleConfigHelpers(inputAnatomy.keys);
var baseStyle6 = definePartsStyle5({
  field: {
    width: "100%",
    minWidth: 0,
    outline: 0,
    position: "relative",
    appearance: "none",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  }
});
var size = {
  lg: defineStyle({
    fontSize: "lg",
    px: "4",
    h: "12",
    borderRadius: "md"
  }),
  md: defineStyle({
    fontSize: "md",
    px: "4",
    h: "10",
    borderRadius: "md"
  }),
  sm: defineStyle({
    fontSize: "sm",
    px: "3",
    h: "8",
    borderRadius: "sm"
  }),
  xs: defineStyle({
    fontSize: "xs",
    px: "2",
    h: "6",
    borderRadius: "sm"
  })
};
var sizes6 = {
  lg: definePartsStyle5({
    field: size.lg,
    addon: size.lg
  }),
  md: definePartsStyle5({
    field: size.md,
    addon: size.md
  }),
  sm: definePartsStyle5({
    field: size.sm,
    addon: size.sm
  }),
  xs: definePartsStyle5({
    field: size.xs,
    addon: size.xs
  })
};
function getDefaults(props) {
  const { focusBorderColor: fc, errorBorderColor: ec } = props;
  return {
    focusBorderColor: fc || mode("blue.500", "blue.300")(props),
    errorBorderColor: ec || mode("red.500", "red.300")(props)
  };
}
var variantOutline2 = definePartsStyle5((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      border: "1px solid",
      borderColor: "inherit",
      bg: "inherit",
      _hover: {
        borderColor: mode("gray.300", "whiteAlpha.400")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec),
        boxShadow: `0 0 0 1px ${getColor(theme3, ec)}`
      },
      _focusVisible: {
        zIndex: 1,
        borderColor: getColor(theme3, fc),
        boxShadow: `0 0 0 1px ${getColor(theme3, fc)}`
      }
    },
    addon: {
      border: "1px solid",
      borderColor: mode("inherit", "whiteAlpha.50")(props),
      bg: mode("gray.100", "whiteAlpha.300")(props)
    }
  };
});
var variantFilled = definePartsStyle5((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props),
      _hover: {
        bg: mode("gray.200", "whiteAlpha.100")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec)
      },
      _focusVisible: {
        bg: "transparent",
        borderColor: getColor(theme3, fc)
      }
    },
    addon: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props)
    }
  };
});
var variantFlushed = definePartsStyle5((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      borderBottom: "1px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent",
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec),
        boxShadow: `0px 1px 0px 0px ${getColor(theme3, ec)}`
      },
      _focusVisible: {
        borderColor: getColor(theme3, fc),
        boxShadow: `0px 1px 0px 0px ${getColor(theme3, fc)}`
      }
    },
    addon: {
      borderBottom: "2px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent"
    }
  };
});
var variantUnstyled2 = definePartsStyle5({
  field: {
    bg: "transparent",
    px: "0",
    height: "auto"
  },
  addon: {
    bg: "transparent",
    px: "0",
    height: "auto"
  }
});
var variants5 = {
  outline: variantOutline2,
  filled: variantFilled,
  flushed: variantFlushed,
  unstyled: variantUnstyled2
};
var inputTheme = defineMultiStyleConfig5({
  baseStyle: baseStyle6,
  sizes: sizes6,
  variants: variants5,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-OIGZPHLT.mjs
var _a;
var baseStyle7 = defineStyle({
  ...(_a = inputTheme.baseStyle) == null ? void 0 : _a.field,
  paddingY: "2",
  minHeight: "20",
  lineHeight: "short",
  verticalAlign: "top"
});
var _a2;
var _b;
var variants6 = {
  outline: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.outline(props).field) != null ? _b32 : {};
    }
  ),
  flushed: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.flushed(props).field) != null ? _b32 : {};
    }
  ),
  filled: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.filled(props).field) != null ? _b32 : {};
    }
  ),
  unstyled: (_b = (_a2 = inputTheme.variants) == null ? void 0 : _a2.unstyled.field) != null ? _b : {}
};
var _a3;
var _b2;
var _c;
var _d;
var _e;
var _f;
var _g;
var _h;
var sizes7 = {
  xs: (_b2 = (_a3 = inputTheme.sizes) == null ? void 0 : _a3.xs.field) != null ? _b2 : {},
  sm: (_d = (_c = inputTheme.sizes) == null ? void 0 : _c.sm.field) != null ? _d : {},
  md: (_f = (_e = inputTheme.sizes) == null ? void 0 : _e.md.field) != null ? _f : {},
  lg: (_h = (_g = inputTheme.sizes) == null ? void 0 : _g.lg.field) != null ? _h : {}
};
var textareaTheme = defineStyleConfig({
  baseStyle: baseStyle7,
  sizes: sizes7,
  variants: variants6,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-6Y3UQESG.mjs
init_shim();
var $bg3 = cssVar2("tooltip-bg");
var $fg2 = cssVar2("tooltip-fg");
var $arrowBg = cssVar2("popper-arrow-bg");
var baseStyle8 = defineStyle({
  bg: $bg3.reference,
  color: $fg2.reference,
  [$bg3.variable]: "colors.gray.700",
  [$fg2.variable]: "colors.whiteAlpha.900",
  _dark: {
    [$bg3.variable]: "colors.gray.300",
    [$fg2.variable]: "colors.gray.900"
  },
  [$arrowBg.variable]: $bg3.reference,
  px: "2",
  py: "0.5",
  borderRadius: "sm",
  fontWeight: "medium",
  fontSize: "sm",
  boxShadow: "md",
  maxW: "xs",
  zIndex: "tooltip"
});
var tooltipTheme = defineStyleConfig({
  baseStyle: baseStyle8
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-VGCCECBM.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig6, definePartsStyle: definePartsStyle6 } = createMultiStyleConfigHelpers(progressAnatomy.keys);
var filledStyle = defineStyle((props) => {
  const { colorScheme: c, theme: t2, isIndeterminate, hasStripe } = props;
  const stripeStyle = mode(
    generateStripe(),
    generateStripe("1rem", "rgba(0,0,0,0.1)")
  )(props);
  const bgColor = mode(`${c}.500`, `${c}.200`)(props);
  const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${getColor(t2, bgColor)} 50%,
    transparent 100%
  )`;
  const addStripe = !isIndeterminate && hasStripe;
  return {
    ...addStripe && stripeStyle,
    ...isIndeterminate ? { bgImage: gradient } : { bgColor }
  };
});
var baseStyleLabel2 = defineStyle({
  lineHeight: "1",
  fontSize: "0.25em",
  fontWeight: "bold",
  color: "white"
});
var baseStyleTrack2 = defineStyle((props) => {
  return {
    bg: mode("gray.100", "whiteAlpha.300")(props)
  };
});
var baseStyleFilledTrack = defineStyle((props) => {
  return {
    transitionProperty: "common",
    transitionDuration: "slow",
    ...filledStyle(props)
  };
});
var baseStyle9 = definePartsStyle6((props) => ({
  label: baseStyleLabel2,
  filledTrack: baseStyleFilledTrack(props),
  track: baseStyleTrack2(props)
}));
var sizes8 = {
  xs: definePartsStyle6({
    track: { h: "1" }
  }),
  sm: definePartsStyle6({
    track: { h: "2" }
  }),
  md: definePartsStyle6({
    track: { h: "3" }
  }),
  lg: definePartsStyle6({
    track: { h: "4" }
  })
};
var progressTheme = defineMultiStyleConfig6({
  sizes: sizes8,
  baseStyle: baseStyle9,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-JDPWIQ7H.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-3XG4KRSA.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-EBS47JIL.mjs
init_shim();
var isFunction = (value) => typeof value === "function";
function runIfFn2(valueOrFn, ...args) {
  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-3XG4KRSA.mjs
var { definePartsStyle: definePartsStyle7, defineMultiStyleConfig: defineMultiStyleConfig7 } = createMultiStyleConfigHelpers(checkboxAnatomy.keys);
var $size = cssVar("checkbox-size");
var baseStyleControl = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    w: $size.reference,
    h: $size.reference,
    transitionProperty: "box-shadow",
    transitionDuration: "normal",
    border: "2px solid",
    borderRadius: "sm",
    borderColor: "inherit",
    color: "white",
    _checked: {
      bg: mode(`${c}.500`, `${c}.200`)(props),
      borderColor: mode(`${c}.500`, `${c}.200`)(props),
      color: mode("white", "gray.900")(props),
      _hover: {
        bg: mode(`${c}.600`, `${c}.300`)(props),
        borderColor: mode(`${c}.600`, `${c}.300`)(props)
      },
      _disabled: {
        borderColor: mode("gray.200", "transparent")(props),
        bg: mode("gray.200", "whiteAlpha.300")(props),
        color: mode("gray.500", "whiteAlpha.500")(props)
      }
    },
    _indeterminate: {
      bg: mode(`${c}.500`, `${c}.200`)(props),
      borderColor: mode(`${c}.500`, `${c}.200`)(props),
      color: mode("white", "gray.900")(props)
    },
    _disabled: {
      bg: mode("gray.100", "whiteAlpha.100")(props),
      borderColor: mode("gray.100", "transparent")(props)
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _invalid: {
      borderColor: mode("red.500", "red.300")(props)
    }
  };
});
var baseStyleContainer2 = defineStyle({
  _disabled: { cursor: "not-allowed" }
});
var baseStyleLabel3 = defineStyle({
  userSelect: "none",
  _disabled: { opacity: 0.4 }
});
var baseStyleIcon = defineStyle({
  transitionProperty: "transform",
  transitionDuration: "normal"
});
var baseStyle10 = definePartsStyle7((props) => ({
  icon: baseStyleIcon,
  container: baseStyleContainer2,
  control: runIfFn2(baseStyleControl, props),
  label: baseStyleLabel3
}));
var sizes9 = {
  sm: definePartsStyle7({
    control: { [$size.variable]: "sizes.3" },
    label: { fontSize: "sm" },
    icon: { fontSize: "3xs" }
  }),
  md: definePartsStyle7({
    control: { [$size.variable]: "sizes.4" },
    label: { fontSize: "md" },
    icon: { fontSize: "2xs" }
  }),
  lg: definePartsStyle7({
    control: { [$size.variable]: "sizes.5" },
    label: { fontSize: "lg" },
    icon: { fontSize: "2xs" }
  })
};
var checkboxTheme = defineMultiStyleConfig7({
  baseStyle: baseStyle10,
  sizes: sizes9,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-JDPWIQ7H.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig8, definePartsStyle: definePartsStyle8 } = createMultiStyleConfigHelpers(radioAnatomy.keys);
var baseStyleControl2 = defineStyle((props) => {
  var _a40;
  const controlStyle = (_a40 = runIfFn2(checkboxTheme.baseStyle, props)) == null ? void 0 : _a40.control;
  return {
    ...controlStyle,
    borderRadius: "full",
    _checked: {
      ...controlStyle == null ? void 0 : controlStyle["_checked"],
      _before: {
        content: `""`,
        display: "inline-block",
        pos: "relative",
        w: "50%",
        h: "50%",
        borderRadius: "50%",
        bg: "currentColor"
      }
    }
  };
});
var baseStyle11 = definePartsStyle8((props) => {
  var _a40, _b8, _c5, _d5;
  return {
    label: (_b8 = (_a40 = checkboxTheme).baseStyle) == null ? void 0 : _b8.call(_a40, props).label,
    container: (_d5 = (_c5 = checkboxTheme).baseStyle) == null ? void 0 : _d5.call(_c5, props).container,
    control: baseStyleControl2(props)
  };
});
var sizes10 = {
  md: definePartsStyle8({
    control: { w: "4", h: "4" },
    label: { fontSize: "md" }
  }),
  lg: definePartsStyle8({
    control: { w: "5", h: "5" },
    label: { fontSize: "lg" }
  }),
  sm: definePartsStyle8({
    control: { width: "3", height: "3" },
    label: { fontSize: "sm" }
  })
};
var radioTheme = defineMultiStyleConfig8({
  baseStyle: baseStyle11,
  sizes: sizes10,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-V3RHVDKJ.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig9, definePartsStyle: definePartsStyle9 } = createMultiStyleConfigHelpers(selectAnatomy.keys);
var $bg4 = cssVar("select-bg");
var _a4;
var baseStyleField = defineStyle({
  ...(_a4 = inputTheme.baseStyle) == null ? void 0 : _a4.field,
  appearance: "none",
  paddingBottom: "1px",
  lineHeight: "normal",
  bg: $bg4.reference,
  [$bg4.variable]: "colors.white",
  _dark: {
    [$bg4.variable]: "colors.gray.700"
  },
  "> option, > optgroup": {
    bg: $bg4.reference
  }
});
var baseStyleIcon2 = defineStyle({
  width: "6",
  height: "100%",
  insetEnd: "2",
  position: "relative",
  color: "currentColor",
  fontSize: "xl",
  _disabled: {
    opacity: 0.5
  }
});
var baseStyle12 = definePartsStyle9({
  field: baseStyleField,
  icon: baseStyleIcon2
});
var iconSpacing = defineStyle({
  paddingInlineEnd: "8"
});
var _a22;
var _b3;
var _c2;
var _d2;
var _e2;
var _f2;
var _g2;
var _h2;
var sizes11 = {
  lg: {
    ...(_a22 = inputTheme.sizes) == null ? void 0 : _a22.lg,
    field: {
      ...(_b3 = inputTheme.sizes) == null ? void 0 : _b3.lg.field,
      ...iconSpacing
    }
  },
  md: {
    ...(_c2 = inputTheme.sizes) == null ? void 0 : _c2.md,
    field: {
      ...(_d2 = inputTheme.sizes) == null ? void 0 : _d2.md.field,
      ...iconSpacing
    }
  },
  sm: {
    ...(_e2 = inputTheme.sizes) == null ? void 0 : _e2.sm,
    field: {
      ...(_f2 = inputTheme.sizes) == null ? void 0 : _f2.sm.field,
      ...iconSpacing
    }
  },
  xs: {
    ...(_g2 = inputTheme.sizes) == null ? void 0 : _g2.xs,
    field: {
      ...(_h2 = inputTheme.sizes) == null ? void 0 : _h2.xs.field,
      ...iconSpacing
    },
    icon: {
      insetEnd: "1"
    }
  }
};
var selectTheme = defineMultiStyleConfig9({
  baseStyle: baseStyle12,
  sizes: sizes11,
  variants: inputTheme.variants,
  defaultProps: inputTheme.defaultProps
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-YSULOCDF.mjs
init_shim();
var $startColor = cssVar("skeleton-start-color");
var $endColor = cssVar("skeleton-end-color");
var baseStyle13 = defineStyle({
  [$startColor.variable]: "colors.gray.100",
  [$endColor.variable]: "colors.gray.400",
  _dark: {
    [$startColor.variable]: "colors.gray.800",
    [$endColor.variable]: "colors.gray.600"
  },
  background: $startColor.reference,
  borderColor: $endColor.reference,
  opacity: 0.7,
  borderRadius: "sm"
});
var skeletonTheme = defineStyleConfig({
  baseStyle: baseStyle13
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-RSEFU3LC.mjs
init_shim();
var $bg5 = cssVar("skip-link-bg");
var baseStyle14 = defineStyle({
  borderRadius: "md",
  fontWeight: "semibold",
  _focusVisible: {
    boxShadow: "outline",
    padding: "4",
    position: "fixed",
    top: "6",
    insetStart: "6",
    [$bg5.variable]: "colors.white",
    _dark: {
      [$bg5.variable]: "colors.gray.700"
    },
    bg: $bg5.reference
  }
});
var skipLinkTheme = defineStyleConfig({
  baseStyle: baseStyle14
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-IBL46MNN.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig10, definePartsStyle: definePartsStyle10 } = createMultiStyleConfigHelpers(sliderAnatomy.keys);
var $thumbSize = cssVar("slider-thumb-size");
var $trackSize = cssVar("slider-track-size");
var $bg6 = cssVar("slider-bg");
var baseStyleContainer3 = defineStyle((props) => {
  const { orientation } = props;
  return {
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    _disabled: {
      opacity: 0.6,
      cursor: "default",
      pointerEvents: "none"
    },
    ...orient({
      orientation,
      vertical: { h: "100%" },
      horizontal: { w: "100%" }
    })
  };
});
var baseStyleTrack3 = defineStyle((props) => {
  const orientationStyles = orient({
    orientation: props.orientation,
    horizontal: { h: $trackSize.reference },
    vertical: { w: $trackSize.reference }
  });
  return {
    ...orientationStyles,
    overflow: "hidden",
    borderRadius: "sm",
    [$bg6.variable]: "colors.gray.200",
    _dark: {
      [$bg6.variable]: "colors.whiteAlpha.200"
    },
    _disabled: {
      [$bg6.variable]: "colors.gray.300",
      _dark: {
        [$bg6.variable]: "colors.whiteAlpha.300"
      }
    },
    bg: $bg6.reference
  };
});
var baseStyleThumb2 = defineStyle((props) => {
  const { orientation } = props;
  const orientationStyle = orient({
    orientation,
    vertical: {
      left: "50%",
      transform: `translateX(-50%)`,
      _active: {
        transform: `translateX(-50%) scale(1.15)`
      }
    },
    horizontal: {
      top: "50%",
      transform: `translateY(-50%)`,
      _active: {
        transform: `translateY(-50%) scale(1.15)`
      }
    }
  });
  return {
    ...orientationStyle,
    w: $thumbSize.reference,
    h: $thumbSize.reference,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    outline: 0,
    zIndex: 1,
    borderRadius: "full",
    bg: "white",
    boxShadow: "base",
    border: "1px solid",
    borderColor: "transparent",
    transitionProperty: "transform",
    transitionDuration: "normal",
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      bg: "gray.300"
    }
  };
});
var baseStyleFilledTrack2 = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    width: "inherit",
    height: "inherit",
    [$bg6.variable]: `colors.${c}.500`,
    _dark: {
      [$bg6.variable]: `colors.${c}.200`
    },
    bg: $bg6.reference
  };
});
var baseStyle15 = definePartsStyle10((props) => ({
  container: baseStyleContainer3(props),
  track: baseStyleTrack3(props),
  thumb: baseStyleThumb2(props),
  filledTrack: baseStyleFilledTrack2(props)
}));
var sizeLg = definePartsStyle10({
  container: {
    [$thumbSize.variable]: `sizes.4`,
    [$trackSize.variable]: `sizes.1`
  }
});
var sizeMd = definePartsStyle10({
  container: {
    [$thumbSize.variable]: `sizes.3.5`,
    [$trackSize.variable]: `sizes.1`
  }
});
var sizeSm = definePartsStyle10({
  container: {
    [$thumbSize.variable]: `sizes.2.5`,
    [$trackSize.variable]: `sizes.0.5`
  }
});
var sizes12 = {
  lg: sizeLg,
  md: sizeMd,
  sm: sizeSm
};
var sliderTheme = defineMultiStyleConfig10({
  baseStyle: baseStyle15,
  sizes: sizes12,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-Y6RR3LE6.mjs
init_shim();
var $size2 = cssVar2("spinner-size");
var baseStyle16 = defineStyle({
  width: [$size2.reference],
  height: [$size2.reference]
});
var sizes13 = {
  xs: defineStyle({
    [$size2.variable]: "sizes.3"
  }),
  sm: defineStyle({
    [$size2.variable]: "sizes.4"
  }),
  md: defineStyle({
    [$size2.variable]: "sizes.6"
  }),
  lg: defineStyle({
    [$size2.variable]: "sizes.8"
  }),
  xl: defineStyle({
    [$size2.variable]: "sizes.12"
  })
};
var spinnerTheme = defineStyleConfig({
  baseStyle: baseStyle16,
  sizes: sizes13,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-EY6ACYQS.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig11, definePartsStyle: definePartsStyle11 } = createMultiStyleConfigHelpers(statAnatomy.keys);
var baseStyleLabel4 = defineStyle({
  fontWeight: "medium"
});
var baseStyleHelpText = defineStyle({
  opacity: 0.8,
  marginBottom: "2"
});
var baseStyleNumber = defineStyle({
  verticalAlign: "baseline",
  fontWeight: "semibold"
});
var baseStyleIcon3 = defineStyle({
  marginEnd: 1,
  w: "3.5",
  h: "3.5",
  verticalAlign: "middle"
});
var baseStyle17 = definePartsStyle11({
  container: {},
  label: baseStyleLabel4,
  helpText: baseStyleHelpText,
  number: baseStyleNumber,
  icon: baseStyleIcon3
});
var sizes14 = {
  md: definePartsStyle11({
    label: { fontSize: "sm" },
    helpText: { fontSize: "sm" },
    number: { fontSize: "2xl" }
  })
};
var statTheme = defineMultiStyleConfig11({
  baseStyle: baseStyle17,
  sizes: sizes14,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-VQ2DUS6J.mjs
init_shim();
var $bg7 = cssVar("kbd-bg");
var baseStyle18 = defineStyle({
  [$bg7.variable]: "colors.gray.100",
  _dark: {
    [$bg7.variable]: "colors.whiteAlpha.100"
  },
  bg: $bg7.reference,
  borderRadius: "md",
  borderWidth: "1px",
  borderBottomWidth: "3px",
  fontSize: "0.8em",
  fontWeight: "bold",
  lineHeight: "normal",
  px: "0.4em",
  whiteSpace: "nowrap"
});
var kbdTheme = defineStyleConfig({
  baseStyle: baseStyle18
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-2T5TO72C.mjs
init_shim();
var baseStyle19 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
});
var linkTheme = defineStyleConfig({
  baseStyle: baseStyle19
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-AQJ6AIMN.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig12, definePartsStyle: definePartsStyle12 } = createMultiStyleConfigHelpers(listAnatomy.keys);
var baseStyleIcon4 = defineStyle({
  marginEnd: "2",
  display: "inline",
  verticalAlign: "text-bottom"
});
var baseStyle20 = definePartsStyle12({
  icon: baseStyleIcon4
});
var listTheme = defineMultiStyleConfig12({
  baseStyle: baseStyle20
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-FIWRYWVW.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig13, definePartsStyle: definePartsStyle13 } = createMultiStyleConfigHelpers(menuAnatomy.keys);
var $bg8 = cssVar("menu-bg");
var $shadow = cssVar("menu-shadow");
var baseStyleList = defineStyle({
  [$bg8.variable]: "#fff",
  [$shadow.variable]: "shadows.sm",
  _dark: {
    [$bg8.variable]: "colors.gray.700",
    [$shadow.variable]: "shadows.dark-lg"
  },
  color: "inherit",
  minW: "3xs",
  py: "2",
  zIndex: 1,
  borderRadius: "md",
  borderWidth: "1px",
  bg: $bg8.reference,
  boxShadow: $shadow.reference
});
var baseStyleItem = defineStyle({
  py: "1.5",
  px: "3",
  transitionProperty: "background",
  transitionDuration: "ultra-fast",
  transitionTimingFunction: "ease-in",
  _focus: {
    [$bg8.variable]: "colors.gray.100",
    _dark: {
      [$bg8.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg8.variable]: "colors.gray.200",
    _dark: {
      [$bg8.variable]: "colors.whiteAlpha.200"
    }
  },
  _expanded: {
    [$bg8.variable]: "colors.gray.100",
    _dark: {
      [$bg8.variable]: "colors.whiteAlpha.100"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  bg: $bg8.reference
});
var baseStyleGroupTitle = defineStyle({
  mx: 4,
  my: 2,
  fontWeight: "semibold",
  fontSize: "sm"
});
var baseStyleCommand = defineStyle({
  opacity: 0.6
});
var baseStyleDivider = defineStyle({
  border: 0,
  borderBottom: "1px solid",
  borderColor: "inherit",
  my: "2",
  opacity: 0.6
});
var baseStyleButton = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyle21 = definePartsStyle13({
  button: baseStyleButton,
  list: baseStyleList,
  item: baseStyleItem,
  groupTitle: baseStyleGroupTitle,
  command: baseStyleCommand,
  divider: baseStyleDivider
});
var menuTheme = defineMultiStyleConfig13({
  baseStyle: baseStyle21
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-LYECXC4E.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig14, definePartsStyle: definePartsStyle14 } = createMultiStyleConfigHelpers(modalAnatomy.keys);
var $bg9 = cssVar("modal-bg");
var $shadow2 = cssVar("modal-shadow");
var baseStyleOverlay = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer = defineStyle((props) => {
  const { isCentered, scrollBehavior } = props;
  return {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center",
    alignItems: isCentered ? "center" : "flex-start",
    overflow: scrollBehavior === "inside" ? "hidden" : "auto",
    overscrollBehaviorY: "none"
  };
});
var baseStyleDialog = defineStyle((props) => {
  const { scrollBehavior } = props;
  return {
    borderRadius: "md",
    color: "inherit",
    my: "16",
    zIndex: "modal",
    maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
    [$bg9.variable]: "colors.white",
    [$shadow2.variable]: "shadows.lg",
    _dark: {
      [$bg9.variable]: "colors.gray.700",
      [$shadow2.variable]: "shadows.dark-lg"
    },
    bg: $bg9.reference,
    boxShadow: $shadow2.reference
  };
});
var baseStyleHeader = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton2 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody = defineStyle((props) => {
  const { scrollBehavior } = props;
  return {
    px: "6",
    py: "2",
    flex: "1",
    overflow: scrollBehavior === "inside" ? "auto" : void 0
  };
});
var baseStyleFooter = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle22 = definePartsStyle14((props) => ({
  overlay: baseStyleOverlay,
  dialogContainer: runIfFn2(baseStyleDialogContainer, props),
  dialog: runIfFn2(baseStyleDialog, props),
  header: baseStyleHeader,
  closeButton: baseStyleCloseButton2,
  body: runIfFn2(baseStyleBody, props),
  footer: baseStyleFooter
}));
function getSize(value) {
  if (value === "full") {
    return definePartsStyle14({
      dialog: {
        maxW: "100vw",
        minH: "$100vh",
        my: "0",
        borderRadius: "0"
      }
    });
  }
  return definePartsStyle14({
    dialog: { maxW: value }
  });
}
var sizes15 = {
  xs: getSize("xs"),
  sm: getSize("sm"),
  md: getSize("md"),
  lg: getSize("lg"),
  xl: getSize("xl"),
  "2xl": getSize("2xl"),
  "3xl": getSize("3xl"),
  "4xl": getSize("4xl"),
  "5xl": getSize("5xl"),
  "6xl": getSize("6xl"),
  full: getSize("full")
};
var modalTheme = defineMultiStyleConfig14({
  baseStyle: baseStyle22,
  sizes: sizes15,
  defaultProps: { size: "md" }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-XNRZTTJ2.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig15, definePartsStyle: definePartsStyle15 } = createMultiStyleConfigHelpers(numberInputAnatomy.keys);
var $stepperWidth = cssVar2("number-input-stepper-width");
var $inputPadding = cssVar2("number-input-input-padding");
var inputPaddingValue = calc2($stepperWidth).add("0.5rem").toString();
var $bg10 = cssVar2("number-input-bg");
var $fg3 = cssVar2("number-input-color");
var $border2 = cssVar2("number-input-border-color");
var baseStyleRoot2 = defineStyle({
  [$stepperWidth.variable]: "sizes.6",
  [$inputPadding.variable]: inputPaddingValue
});
var baseStyleField2 = defineStyle(
  (props) => {
    var _a40, _b8;
    return (_b8 = (_a40 = runIfFn2(inputTheme.baseStyle, props)) == null ? void 0 : _a40.field) != null ? _b8 : {};
  }
);
var baseStyleStepperGroup = defineStyle({
  width: $stepperWidth.reference
});
var baseStyleStepper = defineStyle({
  borderStart: "1px solid",
  borderStartColor: $border2.reference,
  color: $fg3.reference,
  bg: $bg10.reference,
  [$fg3.variable]: "colors.chakra-body-text",
  [$border2.variable]: "colors.chakra-border-color",
  _dark: {
    [$fg3.variable]: "colors.whiteAlpha.800",
    [$border2.variable]: "colors.whiteAlpha.300"
  },
  _active: {
    [$bg10.variable]: "colors.gray.200",
    _dark: {
      [$bg10.variable]: "colors.whiteAlpha.300"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  }
});
var baseStyle23 = definePartsStyle15((props) => {
  var _a40;
  return {
    root: baseStyleRoot2,
    field: (_a40 = runIfFn2(baseStyleField2, props)) != null ? _a40 : {},
    stepperGroup: baseStyleStepperGroup,
    stepper: baseStyleStepper
  };
});
function getSize2(size3) {
  var _a40, _b8, _c5;
  const sizeStyle = (_a40 = inputTheme.sizes) == null ? void 0 : _a40[size3];
  const radius = {
    lg: "md",
    md: "md",
    sm: "sm",
    xs: "sm"
  };
  const _fontSize = (_c5 = (_b8 = sizeStyle.field) == null ? void 0 : _b8.fontSize) != null ? _c5 : "md";
  const fontSize = typography_default.fontSizes[_fontSize];
  return definePartsStyle15({
    field: {
      ...sizeStyle.field,
      paddingInlineEnd: $inputPadding.reference,
      verticalAlign: "top"
    },
    stepper: {
      fontSize: calc2(fontSize).multiply(0.75).toString(),
      _first: {
        borderTopEndRadius: radius[size3]
      },
      _last: {
        borderBottomEndRadius: radius[size3],
        mt: "-1px",
        borderTopWidth: 1
      }
    }
  });
}
var sizes16 = {
  xs: getSize2("xs"),
  sm: getSize2("sm"),
  md: getSize2("md"),
  lg: getSize2("lg")
};
var numberInputTheme = defineMultiStyleConfig15({
  baseStyle: baseStyle23,
  sizes: sizes16,
  variants: inputTheme.variants,
  defaultProps: inputTheme.defaultProps
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-QW3Z4V42.mjs
init_shim();
var _a5;
var baseStyle24 = defineStyle({
  ...(_a5 = inputTheme.baseStyle) == null ? void 0 : _a5.field,
  textAlign: "center"
});
var sizes17 = {
  lg: defineStyle({
    fontSize: "lg",
    w: 12,
    h: 12,
    borderRadius: "md"
  }),
  md: defineStyle({
    fontSize: "md",
    w: 10,
    h: 10,
    borderRadius: "md"
  }),
  sm: defineStyle({
    fontSize: "sm",
    w: 8,
    h: 8,
    borderRadius: "sm"
  }),
  xs: defineStyle({
    fontSize: "xs",
    w: 6,
    h: 6,
    borderRadius: "sm"
  })
};
var _a23;
var _b4;
var variants7 = {
  outline: defineStyle(
    (props) => {
      var _a310, _b23, _c5;
      return (_c5 = (_b23 = runIfFn2((_a310 = inputTheme.variants) == null ? void 0 : _a310.outline, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  flushed: defineStyle(
    (props) => {
      var _a310, _b23, _c5;
      return (_c5 = (_b23 = runIfFn2((_a310 = inputTheme.variants) == null ? void 0 : _a310.flushed, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  filled: defineStyle(
    (props) => {
      var _a310, _b23, _c5;
      return (_c5 = (_b23 = runIfFn2((_a310 = inputTheme.variants) == null ? void 0 : _a310.filled, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  unstyled: (_b4 = (_a23 = inputTheme.variants) == null ? void 0 : _a23.unstyled.field) != null ? _b4 : {}
};
var pinInputTheme = defineStyleConfig({
  baseStyle: baseStyle24,
  sizes: sizes17,
  variants: variants7,
  defaultProps: inputTheme.defaultProps
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-YJYMWHG4.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig16, definePartsStyle: definePartsStyle16 } = createMultiStyleConfigHelpers(popoverAnatomy.keys);
var $popperBg = cssVar2("popper-bg");
var $arrowBg2 = cssVar2("popper-arrow-bg");
var $arrowShadowColor = cssVar2("popper-arrow-shadow-color");
var baseStylePopper = defineStyle({ zIndex: 10 });
var baseStyleContent = defineStyle({
  [$popperBg.variable]: `colors.white`,
  bg: $popperBg.reference,
  [$arrowBg2.variable]: $popperBg.reference,
  [$arrowShadowColor.variable]: `colors.gray.200`,
  _dark: {
    [$popperBg.variable]: `colors.gray.700`,
    [$arrowShadowColor.variable]: `colors.whiteAlpha.300`
  },
  width: "xs",
  border: "1px solid",
  borderColor: "inherit",
  borderRadius: "md",
  boxShadow: "sm",
  zIndex: "inherit",
  _focusVisible: {
    outline: 0,
    boxShadow: "outline"
  }
});
var baseStyleHeader2 = defineStyle({
  px: 3,
  py: 2,
  borderBottomWidth: "1px"
});
var baseStyleBody2 = defineStyle({
  px: 3,
  py: 2
});
var baseStyleFooter2 = defineStyle({
  px: 3,
  py: 2,
  borderTopWidth: "1px"
});
var baseStyleCloseButton3 = defineStyle({
  position: "absolute",
  borderRadius: "md",
  top: 1,
  insetEnd: 2,
  padding: 2
});
var baseStyle25 = definePartsStyle16({
  popper: baseStylePopper,
  content: baseStyleContent,
  header: baseStyleHeader2,
  body: baseStyleBody2,
  footer: baseStyleFooter2,
  closeButton: baseStyleCloseButton3
});
var popoverTheme = defineMultiStyleConfig16({
  baseStyle: baseStyle25
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-PQSF5PVS.mjs
init_shim();
var { definePartsStyle: definePartsStyle17, defineMultiStyleConfig: defineMultiStyleConfig17 } = createMultiStyleConfigHelpers(drawerAnatomy.keys);
var $bg11 = cssVar("drawer-bg");
var $bs = cssVar("drawer-box-shadow");
function getSize3(value) {
  if (value === "full") {
    return definePartsStyle17({
      dialog: { maxW: "100vw", h: "100vh" }
    });
  }
  return definePartsStyle17({
    dialog: { maxW: value }
  });
}
var baseStyleOverlay2 = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "overlay"
});
var baseStyleDialogContainer2 = defineStyle({
  display: "flex",
  zIndex: "modal",
  justifyContent: "center"
});
var baseStyleDialog2 = defineStyle((props) => {
  const { isFullHeight } = props;
  return {
    ...isFullHeight && { height: "100vh" },
    zIndex: "modal",
    maxH: "100vh",
    color: "inherit",
    [$bg11.variable]: "colors.white",
    [$bs.variable]: "shadows.lg",
    _dark: {
      [$bg11.variable]: "colors.gray.700",
      [$bs.variable]: "shadows.dark-lg"
    },
    bg: $bg11.reference,
    boxShadow: $bs.reference
  };
});
var baseStyleHeader3 = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton4 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody3 = defineStyle({
  px: "6",
  py: "2",
  flex: "1",
  overflow: "auto"
});
var baseStyleFooter3 = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle26 = definePartsStyle17((props) => ({
  overlay: baseStyleOverlay2,
  dialogContainer: baseStyleDialogContainer2,
  dialog: runIfFn2(baseStyleDialog2, props),
  header: baseStyleHeader3,
  closeButton: baseStyleCloseButton4,
  body: baseStyleBody3,
  footer: baseStyleFooter3
}));
var sizes18 = {
  xs: getSize3("xs"),
  sm: getSize3("md"),
  md: getSize3("lg"),
  lg: getSize3("2xl"),
  xl: getSize3("4xl"),
  full: getSize3("full")
};
var drawerTheme = defineMultiStyleConfig17({
  baseStyle: baseStyle26,
  sizes: sizes18,
  defaultProps: {
    size: "xs"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-YZVOF4MP.mjs
init_shim();
var { definePartsStyle: definePartsStyle18, defineMultiStyleConfig: defineMultiStyleConfig18 } = createMultiStyleConfigHelpers(editableAnatomy.keys);
var baseStylePreview = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyleInput = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyleTextarea = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyle27 = definePartsStyle18({
  preview: baseStylePreview,
  input: baseStyleInput,
  textarea: baseStyleTextarea
});
var editableTheme = defineMultiStyleConfig18({
  baseStyle: baseStyle27
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-RUW3STUO.mjs
init_shim();
var { definePartsStyle: definePartsStyle19, defineMultiStyleConfig: defineMultiStyleConfig19 } = createMultiStyleConfigHelpers(formAnatomy.keys);
var $fg4 = cssVar("form-control-color");
var baseStyleRequiredIndicator = defineStyle({
  marginStart: "1",
  [$fg4.variable]: "colors.red.500",
  _dark: {
    [$fg4.variable]: "colors.red.300"
  },
  color: $fg4.reference
});
var baseStyleHelperText = defineStyle({
  mt: "2",
  [$fg4.variable]: "colors.gray.600",
  _dark: {
    [$fg4.variable]: "colors.whiteAlpha.600"
  },
  color: $fg4.reference,
  lineHeight: "normal",
  fontSize: "sm"
});
var baseStyle28 = definePartsStyle19({
  container: {
    width: "100%",
    position: "relative"
  },
  requiredIndicator: baseStyleRequiredIndicator,
  helperText: baseStyleHelperText
});
var formTheme = defineMultiStyleConfig19({
  baseStyle: baseStyle28
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-D55YRTLZ.mjs
init_shim();
var { definePartsStyle: definePartsStyle20, defineMultiStyleConfig: defineMultiStyleConfig20 } = createMultiStyleConfigHelpers(formErrorAnatomy.keys);
var $fg5 = cssVar("form-error-color");
var baseStyleText = defineStyle({
  [$fg5.variable]: `colors.red.500`,
  _dark: {
    [$fg5.variable]: `colors.red.300`
  },
  color: $fg5.reference,
  mt: "2",
  fontSize: "sm",
  lineHeight: "normal"
});
var baseStyleIcon5 = defineStyle({
  marginEnd: "0.5em",
  [$fg5.variable]: `colors.red.500`,
  _dark: {
    [$fg5.variable]: `colors.red.300`
  },
  color: $fg5.reference
});
var baseStyle29 = definePartsStyle20({
  text: baseStyleText,
  icon: baseStyleIcon5
});
var formErrorTheme = defineMultiStyleConfig20({
  baseStyle: baseStyle29
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-OYCZTG3L.mjs
init_shim();
var baseStyle30 = defineStyle({
  fontSize: "md",
  marginEnd: "3",
  mb: "2",
  fontWeight: "medium",
  transitionProperty: "common",
  transitionDuration: "normal",
  opacity: 1,
  _disabled: {
    opacity: 0.4
  }
});
var formLabelTheme = defineStyleConfig({
  baseStyle: baseStyle30
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-X4O3JXYB.mjs
init_shim();
var baseStyle31 = defineStyle({
  fontFamily: "heading",
  fontWeight: "bold"
});
var sizes19 = {
  "4xl": defineStyle({
    fontSize: ["6xl", null, "7xl"],
    lineHeight: 1
  }),
  "3xl": defineStyle({
    fontSize: ["5xl", null, "6xl"],
    lineHeight: 1
  }),
  "2xl": defineStyle({
    fontSize: ["4xl", null, "5xl"],
    lineHeight: [1.2, null, 1]
  }),
  xl: defineStyle({
    fontSize: ["3xl", null, "4xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  lg: defineStyle({
    fontSize: ["2xl", null, "3xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  md: defineStyle({
    fontSize: "xl",
    lineHeight: 1.2
  }),
  sm: defineStyle({
    fontSize: "md",
    lineHeight: 1.2
  }),
  xs: defineStyle({
    fontSize: "sm",
    lineHeight: 1.2
  })
};
var headingTheme = defineStyleConfig({
  baseStyle: baseStyle31,
  sizes: sizes19,
  defaultProps: {
    size: "xl"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-GLS227WS.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig21, definePartsStyle: definePartsStyle21 } = createMultiStyleConfigHelpers(breadcrumbAnatomy.keys);
var baseStyleLink = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
});
var baseStyle32 = definePartsStyle21({
  link: baseStyleLink
});
var breadcrumbTheme = defineMultiStyleConfig21({
  baseStyle: baseStyle32
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-AP3MTUHH.mjs
init_shim();
var baseStyle33 = defineStyle({
  lineHeight: "1.2",
  borderRadius: "md",
  fontWeight: "semibold",
  transitionProperty: "common",
  transitionDuration: "normal",
  _focusVisible: {
    boxShadow: "outline"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    _disabled: {
      bg: "initial"
    }
  }
});
var variantGhost = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  if (c === "gray") {
    return {
      color: mode(`inherit`, `whiteAlpha.900`)(props),
      _hover: {
        bg: mode(`gray.100`, `whiteAlpha.200`)(props)
      },
      _active: { bg: mode(`gray.200`, `whiteAlpha.300`)(props) }
    };
  }
  const darkHoverBg = transparentize2(`${c}.200`, 0.12)(theme3);
  const darkActiveBg = transparentize2(`${c}.200`, 0.24)(theme3);
  return {
    color: mode(`${c}.600`, `${c}.200`)(props),
    bg: "transparent",
    _hover: {
      bg: mode(`${c}.50`, darkHoverBg)(props)
    },
    _active: {
      bg: mode(`${c}.100`, darkActiveBg)(props)
    }
  };
});
var variantOutline3 = defineStyle((props) => {
  const { colorScheme: c } = props;
  const borderColor = mode(`gray.200`, `whiteAlpha.300`)(props);
  return {
    border: "1px solid",
    borderColor: c === "gray" ? borderColor : "currentColor",
    ".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)": { marginEnd: "-1px" },
    ".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)": { marginBottom: "-1px" },
    ...runIfFn2(variantGhost, props)
  };
});
var accessibleColorMap = {
  yellow: {
    bg: "yellow.400",
    color: "black",
    hoverBg: "yellow.500",
    activeBg: "yellow.600"
  },
  cyan: {
    bg: "cyan.400",
    color: "black",
    hoverBg: "cyan.500",
    activeBg: "cyan.600"
  }
};
var variantSolid2 = defineStyle((props) => {
  var _a40;
  const { colorScheme: c } = props;
  if (c === "gray") {
    const bg2 = mode(`gray.100`, `whiteAlpha.200`)(props);
    return {
      bg: bg2,
      _hover: {
        bg: mode(`gray.200`, `whiteAlpha.300`)(props),
        _disabled: {
          bg: bg2
        }
      },
      _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props) }
    };
  }
  const {
    bg = `${c}.500`,
    color: color3 = "white",
    hoverBg = `${c}.600`,
    activeBg = `${c}.700`
  } = (_a40 = accessibleColorMap[c]) != null ? _a40 : {};
  const background2 = mode(bg, `${c}.200`)(props);
  return {
    bg: background2,
    color: mode(color3, `gray.800`)(props),
    _hover: {
      bg: mode(hoverBg, `${c}.300`)(props),
      _disabled: {
        bg: background2
      }
    },
    _active: { bg: mode(activeBg, `${c}.400`)(props) }
  };
});
var variantLink = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    padding: 0,
    height: "auto",
    lineHeight: "normal",
    verticalAlign: "baseline",
    color: mode(`${c}.500`, `${c}.200`)(props),
    _hover: {
      textDecoration: "underline",
      _disabled: {
        textDecoration: "none"
      }
    },
    _active: {
      color: mode(`${c}.700`, `${c}.500`)(props)
    }
  };
});
var variantUnstyled3 = defineStyle({
  bg: "none",
  color: "inherit",
  display: "inline",
  lineHeight: "inherit",
  m: "0",
  p: "0"
});
var variants8 = {
  ghost: variantGhost,
  outline: variantOutline3,
  solid: variantSolid2,
  link: variantLink,
  unstyled: variantUnstyled3
};
var sizes20 = {
  lg: defineStyle({
    h: "12",
    minW: "12",
    fontSize: "lg",
    px: "6"
  }),
  md: defineStyle({
    h: "10",
    minW: "10",
    fontSize: "md",
    px: "4"
  }),
  sm: defineStyle({
    h: "8",
    minW: "8",
    fontSize: "sm",
    px: "3"
  }),
  xs: defineStyle({
    h: "6",
    minW: "6",
    fontSize: "xs",
    px: "2"
  })
};
var buttonTheme = defineStyleConfig({
  baseStyle: baseStyle33,
  variants: variants8,
  sizes: sizes20,
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-PZHBQTKY.mjs
init_shim();
var { definePartsStyle: definePartsStyle22, defineMultiStyleConfig: defineMultiStyleConfig22 } = createMultiStyleConfigHelpers(cardAnatomy.keys);
var $bg12 = cssVar("card-bg");
var $padding = cssVar("card-padding");
var $shadow3 = cssVar("card-shadow");
var $radius = cssVar("card-radius");
var $border3 = cssVar("card-border-width", "0");
var $borderColor = cssVar("card-border-color");
var baseStyle34 = definePartsStyle22({
  container: {
    [$bg12.variable]: "colors.chakra-body-bg",
    backgroundColor: $bg12.reference,
    boxShadow: $shadow3.reference,
    borderRadius: $radius.reference,
    color: "chakra-body-text",
    borderWidth: $border3.reference,
    borderColor: $borderColor.reference
  },
  body: {
    padding: $padding.reference,
    flex: "1 1 0%"
  },
  header: {
    padding: $padding.reference
  },
  footer: {
    padding: $padding.reference
  }
});
var sizes21 = {
  sm: definePartsStyle22({
    container: {
      [$radius.variable]: "radii.base",
      [$padding.variable]: "space.3"
    }
  }),
  md: definePartsStyle22({
    container: {
      [$radius.variable]: "radii.md",
      [$padding.variable]: "space.5"
    }
  }),
  lg: definePartsStyle22({
    container: {
      [$radius.variable]: "radii.xl",
      [$padding.variable]: "space.7"
    }
  })
};
var variants9 = {
  elevated: definePartsStyle22({
    container: {
      [$shadow3.variable]: "shadows.base",
      _dark: {
        [$bg12.variable]: "colors.gray.700"
      }
    }
  }),
  outline: definePartsStyle22({
    container: {
      [$border3.variable]: "1px",
      [$borderColor.variable]: "colors.chakra-border-color"
    }
  }),
  filled: definePartsStyle22({
    container: {
      [$bg12.variable]: "colors.chakra-subtle-bg"
    }
  }),
  unstyled: {
    body: {
      [$padding.variable]: 0
    },
    header: {
      [$padding.variable]: 0
    },
    footer: {
      [$padding.variable]: 0
    }
  }
};
var cardTheme = defineMultiStyleConfig22({
  baseStyle: baseStyle34,
  variants: variants9,
  sizes: sizes21,
  defaultProps: {
    variant: "elevated",
    size: "md"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-C4P5PUHY.mjs
init_shim();
var $size3 = cssVar2("close-button-size");
var $bg13 = cssVar2("close-button-bg");
var baseStyle35 = defineStyle({
  w: [$size3.reference],
  h: [$size3.reference],
  borderRadius: "md",
  transitionProperty: "common",
  transitionDuration: "normal",
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    [$bg13.variable]: "colors.blackAlpha.100",
    _dark: {
      [$bg13.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg13.variable]: "colors.blackAlpha.200",
    _dark: {
      [$bg13.variable]: "colors.whiteAlpha.200"
    }
  },
  _focusVisible: {
    boxShadow: "outline"
  },
  bg: $bg13.reference
});
var sizes22 = {
  lg: defineStyle({
    [$size3.variable]: "sizes.10",
    fontSize: "md"
  }),
  md: defineStyle({
    [$size3.variable]: "sizes.8",
    fontSize: "xs"
  }),
  sm: defineStyle({
    [$size3.variable]: "sizes.6",
    fontSize: "2xs"
  })
};
var closeButtonTheme = defineStyleConfig({
  baseStyle: baseStyle35,
  sizes: sizes22,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-CAKKPKRW.mjs
init_shim();
var { variants: variants10, defaultProps } = badgeTheme;
var baseStyle36 = defineStyle({
  fontFamily: "mono",
  fontSize: "sm",
  px: "0.2em",
  borderRadius: "sm",
  bg: vars.bg.reference,
  color: vars.color.reference,
  boxShadow: vars.shadow.reference
});
var codeTheme = defineStyleConfig({
  baseStyle: baseStyle36,
  variants: variants10,
  defaultProps
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-NDGGJV23.mjs
init_shim();
var baseStyle37 = defineStyle({
  w: "100%",
  mx: "auto",
  maxW: "prose",
  px: "4"
});
var containerTheme = defineStyleConfig({
  baseStyle: baseStyle37
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-5Z4IVOU3.mjs
init_shim();
var baseStyle38 = defineStyle({
  opacity: 0.6,
  borderColor: "inherit"
});
var variantSolid3 = defineStyle({
  borderStyle: "solid"
});
var variantDashed = defineStyle({
  borderStyle: "dashed"
});
var variants11 = {
  solid: variantSolid3,
  dashed: variantDashed
};
var dividerTheme = defineStyleConfig({
  baseStyle: baseStyle38,
  variants: variants11,
  defaultProps: {
    variant: "solid"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-T276HDLM.mjs
init_shim();
var { definePartsStyle: definePartsStyle23, defineMultiStyleConfig: defineMultiStyleConfig23 } = createMultiStyleConfigHelpers(accordionAnatomy.keys);
var baseStyleContainer4 = defineStyle({
  borderTopWidth: "1px",
  borderColor: "inherit",
  _last: {
    borderBottomWidth: "1px"
  }
});
var baseStyleButton2 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal",
  fontSize: "md",
  _focusVisible: {
    boxShadow: "outline"
  },
  _hover: {
    bg: "blackAlpha.50"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  px: "4",
  py: "2"
});
var baseStylePanel = defineStyle({
  pt: "2",
  px: "4",
  pb: "5"
});
var baseStyleIcon6 = defineStyle({
  fontSize: "1.25em"
});
var baseStyle39 = definePartsStyle23({
  container: baseStyleContainer4,
  button: baseStyleButton2,
  panel: baseStylePanel,
  icon: baseStyleIcon6
});
var accordionTheme = defineMultiStyleConfig23({ baseStyle: baseStyle39 });

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-YOXAUO7A.mjs
init_shim();
var { definePartsStyle: definePartsStyle24, defineMultiStyleConfig: defineMultiStyleConfig24 } = createMultiStyleConfigHelpers(alertAnatomy.keys);
var $fg6 = cssVar("alert-fg");
var $bg14 = cssVar("alert-bg");
var baseStyle40 = definePartsStyle24({
  container: {
    bg: $bg14.reference,
    px: "4",
    py: "3"
  },
  title: {
    fontWeight: "bold",
    lineHeight: "6",
    marginEnd: "2"
  },
  description: {
    lineHeight: "6"
  },
  icon: {
    color: $fg6.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "6"
  },
  spinner: {
    color: $fg6.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "5"
  }
});
function getBg(props) {
  const { theme: theme3, colorScheme: c } = props;
  const darkBg = transparentize2(`${c}.200`, 0.16)(theme3);
  return {
    light: `colors.${c}.100`,
    dark: darkBg
  };
}
var variantSubtle2 = definePartsStyle24((props) => {
  const { colorScheme: c } = props;
  const bg = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c}.500`,
      [$bg14.variable]: bg.light,
      _dark: {
        [$fg6.variable]: `colors.${c}.200`,
        [$bg14.variable]: bg.dark
      }
    }
  };
});
var variantLeftAccent = definePartsStyle24((props) => {
  const { colorScheme: c } = props;
  const bg = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c}.500`,
      [$bg14.variable]: bg.light,
      _dark: {
        [$fg6.variable]: `colors.${c}.200`,
        [$bg14.variable]: bg.dark
      },
      paddingStart: "3",
      borderStartWidth: "4px",
      borderStartColor: $fg6.reference
    }
  };
});
var variantTopAccent = definePartsStyle24((props) => {
  const { colorScheme: c } = props;
  const bg = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c}.500`,
      [$bg14.variable]: bg.light,
      _dark: {
        [$fg6.variable]: `colors.${c}.200`,
        [$bg14.variable]: bg.dark
      },
      pt: "2",
      borderTopWidth: "4px",
      borderTopColor: $fg6.reference
    }
  };
});
var variantSolid4 = definePartsStyle24((props) => {
  const { colorScheme: c } = props;
  return {
    container: {
      [$fg6.variable]: `colors.white`,
      [$bg14.variable]: `colors.${c}.500`,
      _dark: {
        [$fg6.variable]: `colors.gray.900`,
        [$bg14.variable]: `colors.${c}.200`
      },
      color: $fg6.reference
    }
  };
});
var variants12 = {
  subtle: variantSubtle2,
  "left-accent": variantLeftAccent,
  "top-accent": variantTopAccent,
  solid: variantSolid4
};
var alertTheme = defineMultiStyleConfig24({
  baseStyle: baseStyle40,
  variants: variants12,
  defaultProps: {
    variant: "subtle",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-O7XTKHT6.mjs
init_shim();
var { definePartsStyle: definePartsStyle25, defineMultiStyleConfig: defineMultiStyleConfig25 } = createMultiStyleConfigHelpers(avatarAnatomy.keys);
var $border4 = cssVar("avatar-border-color");
var $bg15 = cssVar("avatar-bg");
var baseStyleBadge = defineStyle({
  borderRadius: "full",
  border: "0.2em solid",
  [$border4.variable]: "white",
  _dark: {
    [$border4.variable]: "colors.gray.800"
  },
  borderColor: $border4.reference
});
var baseStyleExcessLabel = defineStyle({
  [$bg15.variable]: "colors.gray.200",
  _dark: {
    [$bg15.variable]: "colors.whiteAlpha.400"
  },
  bgColor: $bg15.reference
});
var $avatarBg = cssVar("avatar-background");
var baseStyleContainer5 = defineStyle((props) => {
  const { name, theme: theme3 } = props;
  const bg = name ? randomColor({ string: name }) : "colors.gray.400";
  const isBgDark = isDark(bg)(theme3);
  let color3 = "white";
  if (!isBgDark)
    color3 = "gray.800";
  return {
    bg: $avatarBg.reference,
    "&:not([data-loaded])": {
      [$avatarBg.variable]: bg
    },
    color: color3,
    [$border4.variable]: "colors.white",
    _dark: {
      [$border4.variable]: "colors.gray.800"
    },
    borderColor: $border4.reference,
    verticalAlign: "top"
  };
});
var baseStyle41 = definePartsStyle25((props) => ({
  badge: runIfFn2(baseStyleBadge, props),
  excessLabel: runIfFn2(baseStyleExcessLabel, props),
  container: runIfFn2(baseStyleContainer5, props)
}));
function getSize4(size3) {
  const themeSize = size3 !== "100%" ? sizes_default[size3] : void 0;
  return definePartsStyle25({
    container: {
      width: size3,
      height: size3,
      fontSize: `calc(${themeSize != null ? themeSize : size3} / 2.5)`
    },
    excessLabel: {
      width: size3,
      height: size3
    },
    label: {
      fontSize: `calc(${themeSize != null ? themeSize : size3} / 2.5)`,
      lineHeight: size3 !== "100%" ? themeSize != null ? themeSize : size3 : void 0
    }
  });
}
var sizes23 = {
  "2xs": getSize4(4),
  xs: getSize4(6),
  sm: getSize4(8),
  md: getSize4(12),
  lg: getSize4(16),
  xl: getSize4(24),
  "2xl": getSize4(32),
  full: getSize4("100%")
};
var avatarTheme = defineMultiStyleConfig25({
  baseStyle: baseStyle41,
  sizes: sizes23,
  defaultProps: { size: "md" }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-EO2YJNI2.mjs
var components = {
  Accordion: accordionTheme,
  Alert: alertTheme,
  Avatar: avatarTheme,
  Badge: badgeTheme,
  Breadcrumb: breadcrumbTheme,
  Button: buttonTheme,
  Checkbox: checkboxTheme,
  CloseButton: closeButtonTheme,
  Code: codeTheme,
  Container: containerTheme,
  Divider: dividerTheme,
  Drawer: drawerTheme,
  Editable: editableTheme,
  Form: formTheme,
  FormError: formErrorTheme,
  FormLabel: formLabelTheme,
  Heading: headingTheme,
  Input: inputTheme,
  Kbd: kbdTheme,
  Link: linkTheme,
  List: listTheme,
  Menu: menuTheme,
  Modal: modalTheme,
  NumberInput: numberInputTheme,
  PinInput: pinInputTheme,
  Popover: popoverTheme,
  Progress: progressTheme,
  Radio: radioTheme,
  Select: selectTheme,
  Skeleton: skeletonTheme,
  SkipLink: skipLinkTheme,
  Slider: sliderTheme,
  Spinner: spinnerTheme,
  Stat: statTheme,
  Switch: switchTheme,
  Table: tableTheme,
  Tabs: tabsTheme,
  Tag: tagTheme,
  Textarea: textareaTheme,
  Tooltip: tooltipTheme,
  Card: cardTheme
};

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-HZX2OI7F.mjs
init_shim();
var semanticTokens = {
  colors: {
    "chakra-body-text": { _light: "gray.800", _dark: "whiteAlpha.900" },
    "chakra-body-bg": { _light: "white", _dark: "gray.800" },
    "chakra-border-color": { _light: "gray.200", _dark: "whiteAlpha.300" },
    "chakra-subtle-bg": { _light: "gray.100", _dark: "gray.700" },
    "chakra-placeholder-color": { _light: "gray.500", _dark: "whiteAlpha.400" }
  }
};

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-VHIIIDDT.mjs
init_shim();
var styles = {
  global: {
    body: {
      fontFamily: "body",
      color: "chakra-body-text",
      bg: "chakra-body-bg",
      transitionProperty: "background-color",
      transitionDuration: "normal",
      lineHeight: "base"
    },
    "*::placeholder": {
      color: "chakra-placeholder-color"
    },
    "*, *::before, &::after": {
      borderColor: "chakra-border-color"
    }
  }
};

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-RT7D5LFX.mjs
init_shim();

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/index.mjs
var direction = "ltr";
var config = {
  useSystemColorMode: false,
  initialColorMode: "light",
  cssVarPrefix: "chakra"
};
var theme = {
  semanticTokens,
  direction,
  ...foundations,
  components,
  styles,
  config
};
var baseTheme = {
  semanticTokens,
  direction,
  components: {},
  ...foundations,
  styles,
  config
};

// node_modules/@chakra-ui/theme-utils/dist/chunk-AQYX3YP4.mjs
var import_lodash5 = __toESM(require_lodash(), 1);
function isFunction2(value) {
  return typeof value === "function";
}
function pipe2(...fns) {
  return (v) => fns.reduce((a, b) => b(a), v);
}
var createExtendTheme = (theme22) => {
  return function extendTheme2(...extensions) {
    let overrides = [...extensions];
    let activeTheme = extensions[extensions.length - 1];
    if (isChakraTheme(activeTheme) && overrides.length > 1) {
      overrides = overrides.slice(0, overrides.length - 1);
    } else {
      activeTheme = theme22;
    }
    return pipe2(
      ...overrides.map(
        (extension) => (prevTheme) => isFunction2(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)
      )
    )(activeTheme);
  };
};
var extendTheme = createExtendTheme(theme);
var extendBaseTheme = createExtendTheme(baseTheme);
function mergeThemeOverride(...overrides) {
  return (0, import_lodash5.default)({}, ...overrides, mergeThemeCustomizer);
}
function mergeThemeCustomizer(source, override, key, object2) {
  if ((isFunction2(source) || isFunction2(override)) && Object.prototype.hasOwnProperty.call(object2, key)) {
    return (...args) => {
      const sourceValue = isFunction2(source) ? source(...args) : source;
      const overrideValue = isFunction2(override) ? override(...args) : override;
      return (0, import_lodash5.default)({}, sourceValue, overrideValue, mergeThemeCustomizer);
    };
  }
  return void 0;
}

// node_modules/@chakra-ui/theme-utils/dist/chunk-DFL6DXJX.mjs
function withDefaultColorScheme({
  colorScheme,
  components: components3
}) {
  return (theme3) => {
    let names = Object.keys(theme3.components || {});
    if (Array.isArray(components3)) {
      names = components3;
    } else if (isObject(components3)) {
      names = Object.keys(components3);
    }
    return mergeThemeOverride(theme3, {
      components: Object.fromEntries(
        names.map((componentName) => {
          const withColorScheme = {
            defaultProps: {
              colorScheme
            }
          };
          return [componentName, withColorScheme];
        })
      )
    });
  };
}

// node_modules/@chakra-ui/theme-utils/dist/chunk-YKDMERD6.mjs
init_shim();
function withDefaultSize({
  size: size3,
  components: components3
}) {
  return (theme3) => {
    let names = Object.keys(theme3.components || {});
    if (Array.isArray(components3)) {
      names = components3;
    } else if (isObject(components3)) {
      names = Object.keys(components3);
    }
    return mergeThemeOverride(theme3, {
      components: Object.fromEntries(
        names.map((componentName) => {
          const withSize = {
            defaultProps: {
              size: size3
            }
          };
          return [componentName, withSize];
        })
      )
    });
  };
}

// node_modules/@chakra-ui/theme-utils/dist/chunk-HA5PBA4B.mjs
init_shim();
function withDefaultVariant({
  variant,
  components: components3
}) {
  return (theme3) => {
    let names = Object.keys(theme3.components || {});
    if (Array.isArray(components3)) {
      names = components3;
    } else if (isObject(components3)) {
      names = Object.keys(components3);
    }
    return mergeThemeOverride(theme3, {
      components: Object.fromEntries(
        names.map((componentName) => {
          const withVariant = {
            defaultProps: {
              variant
            }
          };
          return [componentName, withVariant];
        })
      )
    });
  };
}

// node_modules/@chakra-ui/theme-utils/dist/chunk-UONXFRGI.mjs
function pipe3(...fns) {
  return (v) => fns.reduce((a, b) => b(a), v);
}
function withDefaultProps({
  defaultProps: { colorScheme, variant, size: size3 },
  components: components3
}) {
  const identity = (t2) => t2;
  const fns = [
    colorScheme ? withDefaultColorScheme({ colorScheme, components: components3 }) : identity,
    size3 ? withDefaultSize({ size: size3, components: components3 }) : identity,
    variant ? withDefaultVariant({ variant, components: components3 }) : identity
  ];
  return (theme3) => mergeThemeOverride(pipe3(...fns)(theme3));
}

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser = canUseDOM();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash6 = __toESM(require_lodash(), 1);
function get2(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize2 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet2 = memoize2(get2);
function objectFilter(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined = (object2) => objectFilter(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction3(value) {
  return typeof value === "function";
}
var __DEV__ = import_process.default.env.NODE_ENV !== "production";
var __TEST__ = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn3(valueOrFn, ...args) {
  return isFunction3(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn2 = once((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__) {
    console.warn(message);
  }
});
var error = once((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep = 1 / 60 * 1e3;
var getCurrentTime = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep);

// node_modules/@chakra-ui/provider/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/provider/node_modules/framesync/dist/es/index.mjs
var maxElapsed = 40;
var useDefaultElapsed = true;
var runNextFrame = false;
var isProcessing = false;
var frame = {
  delta: 0,
  timestamp: 0
};
var stepsOrder = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps = stepsOrder.reduce((acc, key) => {
  acc[key] = createRenderStep(() => runNextFrame = true);
  return acc;
}, {});
var sync = stepsOrder.reduce((acc, key) => {
  const step = steps[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame)
      startLoop();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync = stepsOrder.reduce((acc, key) => {
  acc[key] = steps[key].cancel;
  return acc;
}, {});
var flushSync = stepsOrder.reduce((acc, key) => {
  acc[key] = () => steps[key].process(frame);
  return acc;
}, {});
var processStep = (stepId) => steps[stepId].process(frame);
var processFrame = (timestamp) => {
  runNextFrame = false;
  frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
  frame.timestamp = timestamp;
  isProcessing = true;
  stepsOrder.forEach(processStep);
  isProcessing = false;
  if (runNextFrame) {
    useDefaultElapsed = false;
    onNextFrame(processFrame);
  }
};
var startLoop = () => {
  runNextFrame = true;
  useDefaultElapsed = true;
  if (!isProcessing)
    onNextFrame(processFrame);
};

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints2 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector = focusableElList.join();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react9 = __toESM(require_react(), 1);
var import_react_fast_compare = __toESM(require_react_fast_compare(), 1);

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp(prop) {
  return validHTMLProps.has(prop) || !allPropNames.has(prop);
}

// node_modules/@chakra-ui/object-utils/dist/index.mjs
init_shim();
function compact(object2) {
  const clone = Object.assign({}, object2);
  for (let key in clone) {
    if (clone[key] === void 0)
      delete clone[key];
  }
  return clone;
}
function assignAfter(target, ...sources) {
  if (target == null) {
    throw new TypeError("Cannot convert undefined or null to object");
  }
  const result = { ...target };
  for (const nextSource of sources) {
    if (nextSource == null)
      continue;
    for (const nextKey in nextSource) {
      if (!Object.prototype.hasOwnProperty.call(nextSource, nextKey))
        continue;
      if (nextKey in result)
        delete result[nextKey];
      result[nextKey] = nextSource[nextKey];
    }
  }
  return result;
}

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react10 = __toESM(require_react(), 1);
var _a6;
var emotion_styled = (_a6 = emotion_styled_browser_esm_default.default) != null ? _a6 : emotion_styled_browser_esm_default;
var toCSSObject = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn3(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp;
  }
  const styleObject = toCSSObject({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react10.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react10.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled, {
    apply(target, thisArg, argArray) {
      return styled(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled(element));
      }
      return cache.get(element);
    }
  });
}
var chakra = factory();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react11 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react12 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react13 = __toESM(require_react(), 1);
function createContext3(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react13.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react13.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react15 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
function ThemeProvider2(props) {
  const { cssVarsRoot, theme: theme3, children } = props;
  const computedTheme = (0, import_react15.useMemo)(() => toCSSVar(theme3), [theme3]);
  return (0, import_jsx_runtime6.jsxs)(ThemeProvider, { theme: computedTheme, children: [
    (0, import_jsx_runtime6.jsx)(CSSVars, { root: cssVarsRoot }),
    children
  ] });
}
function CSSVars({ root = ":host, :root" }) {
  const selector2 = [root, `[data-theme]`].join(",");
  return (0, import_jsx_runtime6.jsx)(Global, { styles: (theme3) => ({ [selector2]: theme3.__cssVars }) });
}
var [StylesProvider, useStyles] = createContext3({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});
function GlobalStyle() {
  const { colorMode } = useColorMode();
  return (0, import_jsx_runtime6.jsx)(
    Global,
    {
      styles: (theme3) => {
        const styleObjectOrFn = memoizedGet2(theme3, "styles.global");
        const globalStyles = runIfFn3(styleObjectOrFn, { theme: theme3, colorMode });
        if (!globalStyles)
          return void 0;
        const styles3 = css2(globalStyles)(theme3);
        return styles3;
      }
    }
  );
}

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/react-env/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/provider/node_modules/@chakra-ui/react-env/dist/chunk-23XYWYLU.mjs
init_shim();
var import_react17 = __toESM(require_react(), 1);
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var EnvironmentContext = (0, import_react17.createContext)({
  getDocument() {
    return document;
  },
  getWindow() {
    return window;
  }
});
EnvironmentContext.displayName = "EnvironmentContext";
function EnvironmentProvider(props) {
  const { children, environment: environmentProp, disabled } = props;
  const ref = (0, import_react17.useRef)(null);
  const context = (0, import_react17.useMemo)(() => {
    if (environmentProp)
      return environmentProp;
    return {
      getDocument: () => {
        var _a40, _b8;
        return (_b8 = (_a40 = ref.current) == null ? void 0 : _a40.ownerDocument) != null ? _b8 : document;
      },
      getWindow: () => {
        var _a40, _b8;
        return (_b8 = (_a40 = ref.current) == null ? void 0 : _a40.ownerDocument.defaultView) != null ? _b8 : window;
      }
    };
  }, [environmentProp]);
  const showSpan = !disabled || !environmentProp;
  return (0, import_jsx_runtime7.jsxs)(EnvironmentContext.Provider, { value: context, children: [
    children,
    showSpan && (0, import_jsx_runtime7.jsx)("span", { id: "__chakra_env", hidden: true, ref })
  ] });
}
EnvironmentProvider.displayName = "EnvironmentProvider";

// node_modules/@chakra-ui/provider/dist/chunk-5PBJXT35.mjs
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var ChakraProvider = (props) => {
  const {
    children,
    colorModeManager,
    portalZIndex,
    resetScope,
    resetCSS = true,
    theme: theme3 = {},
    environment,
    cssVarsRoot,
    disableEnvironment
  } = props;
  const _children = (0, import_jsx_runtime8.jsx)(
    EnvironmentProvider,
    {
      environment,
      disabled: disableEnvironment,
      children
    }
  );
  return (0, import_jsx_runtime8.jsx)(ThemeProvider2, { theme: theme3, cssVarsRoot, children: (0, import_jsx_runtime8.jsxs)(
    ColorModeProvider,
    {
      colorModeManager,
      options: theme3.config,
      children: [
        resetCSS ? (0, import_jsx_runtime8.jsx)(CSSReset, { scope: resetScope }) : (0, import_jsx_runtime8.jsx)(CSSPolyfill, {}),
        (0, import_jsx_runtime8.jsx)(GlobalStyle, {}),
        portalZIndex ? (0, import_jsx_runtime8.jsx)(PortalManager, { zIndex: portalZIndex, children: _children }) : _children
      ]
    }
  ) });
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-A6NK776R.mjs
init_shim();
var requiredChakraThemeKeys2 = [
  "borders",
  "breakpoints",
  "colors",
  "components",
  "config",
  "direction",
  "fonts",
  "fontSizes",
  "fontWeights",
  "letterSpacings",
  "lineHeights",
  "radii",
  "shadows",
  "sizes",
  "space",
  "styles",
  "transition",
  "zIndices"
];
function isChakraTheme2(unit) {
  if (!isObject(unit)) {
    return false;
  }
  return requiredChakraThemeKeys2.every(
    (propertyName) => Object.prototype.hasOwnProperty.call(unit, propertyName)
  );
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-6S44RLTW.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-7OKLMD4V.mjs
init_shim();
var zIndices2 = {
  hide: -1,
  auto: "auto",
  base: 0,
  docked: 10,
  dropdown: 1e3,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800
};
var z_index_default2 = zIndices2;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-DDAHWWWN.mjs
init_shim();
var breakpoints3 = {
  base: "0em",
  sm: "30em",
  md: "48em",
  lg: "62em",
  xl: "80em",
  "2xl": "96em"
};
var breakpoints_default2 = breakpoints3;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-C7H5GWRZ.mjs
init_shim();
var colors2 = {
  transparent: "transparent",
  current: "currentColor",
  black: "#000000",
  white: "#FFFFFF",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)"
  },
  gray: {
    50: "#F7FAFC",
    100: "#EDF2F7",
    200: "#E2E8F0",
    300: "#CBD5E0",
    400: "#A0AEC0",
    500: "#718096",
    600: "#4A5568",
    700: "#2D3748",
    800: "#1A202C",
    900: "#171923"
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E",
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B"
  },
  orange: {
    50: "#FFFAF0",
    100: "#FEEBC8",
    200: "#FBD38D",
    300: "#F6AD55",
    400: "#ED8936",
    500: "#DD6B20",
    600: "#C05621",
    700: "#9C4221",
    800: "#7B341E",
    900: "#652B19"
  },
  yellow: {
    50: "#FFFFF0",
    100: "#FEFCBF",
    200: "#FAF089",
    300: "#F6E05E",
    400: "#ECC94B",
    500: "#D69E2E",
    600: "#B7791F",
    700: "#975A16",
    800: "#744210",
    900: "#5F370E"
  },
  green: {
    50: "#F0FFF4",
    100: "#C6F6D5",
    200: "#9AE6B4",
    300: "#68D391",
    400: "#48BB78",
    500: "#38A169",
    600: "#2F855A",
    700: "#276749",
    800: "#22543D",
    900: "#1C4532"
  },
  teal: {
    50: "#E6FFFA",
    100: "#B2F5EA",
    200: "#81E6D9",
    300: "#4FD1C5",
    400: "#38B2AC",
    500: "#319795",
    600: "#2C7A7B",
    700: "#285E61",
    800: "#234E52",
    900: "#1D4044"
  },
  blue: {
    50: "#ebf8ff",
    100: "#bee3f8",
    200: "#90cdf4",
    300: "#63b3ed",
    400: "#4299e1",
    500: "#3182ce",
    600: "#2b6cb0",
    700: "#2c5282",
    800: "#2a4365",
    900: "#1A365D"
  },
  cyan: {
    50: "#EDFDFD",
    100: "#C4F1F9",
    200: "#9DECF9",
    300: "#76E4F7",
    400: "#0BC5EA",
    500: "#00B5D8",
    600: "#00A3C4",
    700: "#0987A0",
    800: "#086F83",
    900: "#065666"
  },
  purple: {
    50: "#FAF5FF",
    100: "#E9D8FD",
    200: "#D6BCFA",
    300: "#B794F4",
    400: "#9F7AEA",
    500: "#805AD5",
    600: "#6B46C1",
    700: "#553C9A",
    800: "#44337A",
    900: "#322659"
  },
  pink: {
    50: "#FFF5F7",
    100: "#FED7E2",
    200: "#FBB6CE",
    300: "#F687B3",
    400: "#ED64A6",
    500: "#D53F8C",
    600: "#B83280",
    700: "#97266D",
    800: "#702459",
    900: "#521B41"
  },
  linkedin: {
    50: "#E8F4F9",
    100: "#CFEDFB",
    200: "#9BDAF3",
    300: "#68C7EC",
    400: "#34B3E4",
    500: "#00A0DC",
    600: "#008CC9",
    700: "#0077B5",
    800: "#005E93",
    900: "#004471"
  },
  facebook: {
    50: "#E8F4F9",
    100: "#D9DEE9",
    200: "#B7C2DA",
    300: "#6482C0",
    400: "#4267B2",
    500: "#385898",
    600: "#314E89",
    700: "#29487D",
    800: "#223B67",
    900: "#1E355B"
  },
  messenger: {
    50: "#D0E6FF",
    100: "#B9DAFF",
    200: "#A2CDFF",
    300: "#7AB8FF",
    400: "#2E90FF",
    500: "#0078FF",
    600: "#0063D1",
    700: "#0052AC",
    800: "#003C7E",
    900: "#002C5C"
  },
  whatsapp: {
    50: "#dffeec",
    100: "#b9f5d0",
    200: "#90edb3",
    300: "#65e495",
    400: "#3cdd78",
    500: "#22c35e",
    600: "#179848",
    700: "#0c6c33",
    800: "#01421c",
    900: "#001803"
  },
  twitter: {
    50: "#E5F4FD",
    100: "#C8E9FB",
    200: "#A8DCFA",
    300: "#83CDF7",
    400: "#57BBF5",
    500: "#1DA1F2",
    600: "#1A94DA",
    700: "#1681BF",
    800: "#136B9E",
    900: "#0D4D71"
  },
  telegram: {
    50: "#E3F2F9",
    100: "#C5E4F3",
    200: "#A2D4EC",
    300: "#7AC1E4",
    400: "#47A9DA",
    500: "#0088CC",
    600: "#007AB8",
    700: "#006BA1",
    800: "#005885",
    900: "#003F5E"
  }
};
var colors_default2 = colors2;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-4REDROSM.mjs
init_shim();
var radii2 = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};
var radius_default2 = radii2;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-DJNGX4VH.mjs
init_shim();
var shadows2 = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
var shadows_default2 = shadows2;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-AU77DZXY.mjs
init_shim();
var transitionProperty2 = {
  common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
  colors: "background-color, border-color, color, fill, stroke",
  dimensions: "width, height",
  position: "left, right, top, bottom",
  background: "background-color, background-image, background-position"
};
var transitionTimingFunction2 = {
  "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
  "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration2 = {
  "ultra-fast": "50ms",
  faster: "100ms",
  fast: "150ms",
  normal: "200ms",
  slow: "300ms",
  slower: "400ms",
  "ultra-slow": "500ms"
};
var transition3 = {
  property: transitionProperty2,
  easing: transitionTimingFunction2,
  duration: transitionDuration2
};
var transition_default2 = transition3;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-OLDNEXT6.mjs
init_shim();
var blur2 = {
  none: 0,
  sm: "4px",
  base: "8px",
  md: "12px",
  lg: "16px",
  xl: "24px",
  "2xl": "40px",
  "3xl": "64px"
};
var blur_default2 = blur2;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-ZV5E32CG.mjs
init_shim();
var borders2 = {
  none: 0,
  "1px": "1px solid",
  "2px": "2px solid",
  "4px": "4px solid",
  "8px": "8px solid"
};
var borders_default2 = borders2;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-HOOF7HHD.mjs
init_shim();
var typography3 = {
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeights: {
    normal: "normal",
    none: 1,
    shorter: 1.25,
    short: 1.375,
    base: 1.5,
    tall: 1.625,
    taller: "2",
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  fonts: {
    heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
  },
  fontSizes: {
    "3xs": "0.45rem",
    "2xs": "0.625rem",
    xs: "0.75rem",
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  }
};
var typography_default2 = typography3;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-X4JBRTE2.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-G3IFUAY5.mjs
init_shim();
var spacing2 = {
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-X4JBRTE2.mjs
var largeSizes2 = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem",
  prose: "60ch"
};
var container2 = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes24 = {
  ...spacing2,
  ...largeSizes2,
  container: container2
};
var sizes_default2 = sizes24;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-6S44RLTW.mjs
var foundations2 = {
  breakpoints: breakpoints_default2,
  zIndices: z_index_default2,
  radii: radius_default2,
  blur: blur_default2,
  colors: colors_default2,
  ...typography_default2,
  sizes: sizes_default2,
  shadows: shadows_default2,
  space: spacing2,
  borders: borders_default2,
  transition: transition_default2
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-EO2YJNI2.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-KGFPXNP4.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme-tools/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme-tools/dist/chunk-H4E5VM26.mjs
init_shim();
function dlv_es_default2(t2, e, l, n, r2) {
  for (e = e.split ? e.split(".") : e, n = 0; n < e.length; n++)
    t2 = t2 ? t2[e[n]] : r2;
  return t2 === r2 ? l : t2;
}
var isEmptyObject3 = (obj) => Object.keys(obj).length === 0;
var getColor2 = (theme3, color3, fallback) => {
  const hex2 = dlv_es_default2(theme3, `colors.${color3}`, color3);
  try {
    toHex(hex2);
    return hex2;
  } catch {
    return fallback != null ? fallback : "#000000";
  }
};
var getBrightness2 = (color3) => {
  const [r2, g, b] = parseToRgba(color3);
  return (r2 * 299 + g * 587 + b * 114) / 1e3;
};
var tone2 = (color3) => (theme3) => {
  const hex2 = getColor2(theme3, color3);
  const brightness = getBrightness2(hex2);
  const isDark22 = brightness < 128;
  return isDark22 ? "dark" : "light";
};
var isDark2 = (color3) => (theme3) => tone2(color3)(theme3) === "dark";
var transparentize3 = (color3, opacity) => (theme3) => {
  const raw = getColor2(theme3, color3);
  return transparentize(raw, 1 - opacity);
};
function generateStripe2(size3 = "1rem", color3 = "rgba(255, 255, 255, 0.15)") {
  return {
    backgroundImage: `linear-gradient(
    45deg,
    ${color3} 25%,
    transparent 25%,
    transparent 50%,
    ${color3} 50%,
    ${color3} 75%,
    transparent 75%,
    transparent
  )`,
    backgroundSize: `${size3} ${size3}`
  };
}
var randomHex2 = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, "0")}`;
function randomColor2(opts) {
  const fallback = randomHex2();
  if (!opts || isEmptyObject3(opts)) {
    return fallback;
  }
  if (opts.string && opts.colors) {
    return randomColorFromList2(opts.string, opts.colors);
  }
  if (opts.string && !opts.colors) {
    return randomColorFromString2(opts.string);
  }
  if (opts.colors && !opts.string) {
    return randomFromList2(opts.colors);
  }
  return fallback;
}
function randomColorFromString2(str) {
  let hash2 = 0;
  if (str.length === 0)
    return hash2.toString();
  for (let i = 0; i < str.length; i += 1) {
    hash2 = str.charCodeAt(i) + ((hash2 << 5) - hash2);
    hash2 = hash2 & hash2;
  }
  let color3 = "#";
  for (let j = 0; j < 3; j += 1) {
    const value = hash2 >> j * 8 & 255;
    color3 += `00${value.toString(16)}`.substr(-2);
  }
  return color3;
}
function randomColorFromList2(str, list2) {
  let index = 0;
  if (str.length === 0)
    return list2[0];
  for (let i = 0; i < str.length; i += 1) {
    index = str.charCodeAt(i) + ((index << 5) - index);
    index = index & index;
  }
  index = (index % list2.length + list2.length) % list2.length;
  return list2[index];
}
function randomFromList2(list2) {
  return list2[Math.floor(Math.random() * list2.length)];
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme-tools/dist/chunk-7P3W45AB.mjs
init_shim();
function mode2(light, dark) {
  return (props) => props.colorMode === "dark" ? dark : light;
}
function orient2(options) {
  const { orientation, vertical, horizontal } = options;
  if (!orientation)
    return {};
  return orientation === "vertical" ? vertical : horizontal;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme-tools/dist/chunk-4T5CIMY5.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme-tools/dist/chunk-E3OBLH5E.mjs
init_shim();
function toRef2(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpr2 = (operator, ...operands) => operands.map(toRef2).join(` ${operator} `).replace(/calc/g, "");
var add3 = (...operands) => `calc(${toExpr2("+", ...operands)})`;
var subtract4 = (...operands) => `calc(${toExpr2("-", ...operands)})`;
var multiply3 = (...operands) => `calc(${toExpr2("*", ...operands)})`;
var divide3 = (...operands) => `calc(${toExpr2("/", ...operands)})`;
var negate3 = (x) => {
  const value = toRef2(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply3(value, -1);
};
var calc3 = Object.assign(
  (x) => ({
    add: (...operands) => calc3(add3(x, ...operands)),
    subtract: (...operands) => calc3(subtract4(x, ...operands)),
    multiply: (...operands) => calc3(multiply3(x, ...operands)),
    divide: (...operands) => calc3(divide3(x, ...operands)),
    negate: () => calc3(negate3(x)),
    toString: () => x.toString()
  }),
  {
    add: add3,
    subtract: subtract4,
    multiply: multiply3,
    divide: divide3,
    negate: negate3
  }
);

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme-tools/dist/chunk-7SOXEYKO.mjs
init_shim();
function isDecimal2(value) {
  return !Number.isInteger(parseFloat(value.toString()));
}
function replaceWhiteSpace3(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape3(value) {
  const valueStr = replaceWhiteSpace3(value.toString());
  if (valueStr.includes("\\."))
    return value;
  return isDecimal2(value) ? valueStr.replace(".", `\\.`) : value;
}
function addPrefix3(value, prefix = "") {
  return [prefix, escape3(value)].filter(Boolean).join("-");
}
function toVarRef2(name, fallback) {
  return `var(${escape3(name)}${fallback ? `, ${fallback}` : ""})`;
}
function toVar2(value, prefix = "") {
  return `--${addPrefix3(value, prefix)}`;
}
function cssVar3(name, options) {
  const cssVariable = toVar2(name, options == null ? void 0 : options.prefix);
  return {
    variable: cssVariable,
    reference: toVarRef2(cssVariable, getFallback2(options == null ? void 0 : options.fallback))
  };
}
function getFallback2(fallback) {
  if (typeof fallback === "string")
    return fallback;
  return fallback == null ? void 0 : fallback.reference;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-KGFPXNP4.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig26, definePartsStyle: definePartsStyle26 } = createMultiStyleConfigHelpers(switchAnatomy.keys);
var $width2 = cssVar3("switch-track-width");
var $height2 = cssVar3("switch-track-height");
var $diff2 = cssVar3("switch-track-diff");
var diffValue2 = calc3.subtract($width2, $height2);
var $translateX2 = cssVar3("switch-thumb-x");
var $bg16 = cssVar3("switch-bg");
var baseStyleTrack4 = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    borderRadius: "full",
    p: "0.5",
    width: [$width2.reference],
    height: [$height2.reference],
    transitionProperty: "common",
    transitionDuration: "fast",
    [$bg16.variable]: "colors.gray.300",
    _dark: {
      [$bg16.variable]: "colors.whiteAlpha.400"
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    _checked: {
      [$bg16.variable]: `colors.${c}.500`,
      _dark: {
        [$bg16.variable]: `colors.${c}.200`
      }
    },
    bg: $bg16.reference
  };
});
var baseStyleThumb3 = defineStyle({
  bg: "white",
  transitionProperty: "transform",
  transitionDuration: "normal",
  borderRadius: "inherit",
  width: [$height2.reference],
  height: [$height2.reference],
  _checked: {
    transform: `translateX(${$translateX2.reference})`
  }
});
var baseStyle42 = definePartsStyle26((props) => ({
  container: {
    [$diff2.variable]: diffValue2,
    [$translateX2.variable]: $diff2.reference,
    _rtl: {
      [$translateX2.variable]: calc3($diff2).negate().toString()
    }
  },
  track: baseStyleTrack4(props),
  thumb: baseStyleThumb3
}));
var sizes25 = {
  sm: definePartsStyle26({
    container: {
      [$width2.variable]: "1.375rem",
      [$height2.variable]: "sizes.3"
    }
  }),
  md: definePartsStyle26({
    container: {
      [$width2.variable]: "1.875rem",
      [$height2.variable]: "sizes.4"
    }
  }),
  lg: definePartsStyle26({
    container: {
      [$width2.variable]: "2.875rem",
      [$height2.variable]: "sizes.6"
    }
  })
};
var switchTheme2 = defineMultiStyleConfig26({
  baseStyle: baseStyle42,
  sizes: sizes25,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-WHSEAAWU.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig27, definePartsStyle: definePartsStyle27 } = createMultiStyleConfigHelpers(tableAnatomy.keys);
var baseStyle43 = definePartsStyle27({
  table: {
    fontVariantNumeric: "lining-nums tabular-nums",
    borderCollapse: "collapse",
    width: "full"
  },
  th: {
    fontFamily: "heading",
    fontWeight: "bold",
    textTransform: "uppercase",
    letterSpacing: "wider",
    textAlign: "start"
  },
  td: {
    textAlign: "start"
  },
  caption: {
    mt: 4,
    fontFamily: "heading",
    textAlign: "center",
    fontWeight: "medium"
  }
});
var numericStyles2 = defineStyle({
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
});
var variantSimple2 = definePartsStyle27((props) => {
  const { colorScheme: c } = props;
  return {
    th: {
      color: mode2("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode2(`${c}.100`, `${c}.700`)(props),
      ...numericStyles2
    },
    td: {
      borderBottom: "1px",
      borderColor: mode2(`${c}.100`, `${c}.700`)(props),
      ...numericStyles2
    },
    caption: {
      color: mode2("gray.600", "gray.100")(props)
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variantStripe2 = definePartsStyle27((props) => {
  const { colorScheme: c } = props;
  return {
    th: {
      color: mode2("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode2(`${c}.100`, `${c}.700`)(props),
      ...numericStyles2
    },
    td: {
      borderBottom: "1px",
      borderColor: mode2(`${c}.100`, `${c}.700`)(props),
      ...numericStyles2
    },
    caption: {
      color: mode2("gray.600", "gray.100")(props)
    },
    tbody: {
      tr: {
        "&:nth-of-type(odd)": {
          "th, td": {
            borderBottomWidth: "1px",
            borderColor: mode2(`${c}.100`, `${c}.700`)(props)
          },
          td: {
            background: mode2(`${c}.100`, `${c}.700`)(props)
          }
        }
      }
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variants13 = {
  simple: variantSimple2,
  striped: variantStripe2,
  unstyled: defineStyle({})
};
var sizes26 = {
  sm: definePartsStyle27({
    th: {
      px: "4",
      py: "1",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "4",
      py: "2",
      fontSize: "sm",
      lineHeight: "4"
    },
    caption: {
      px: "4",
      py: "2",
      fontSize: "xs"
    }
  }),
  md: definePartsStyle27({
    th: {
      px: "6",
      py: "3",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "6",
      py: "4",
      lineHeight: "5"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "sm"
    }
  }),
  lg: definePartsStyle27({
    th: {
      px: "8",
      py: "4",
      lineHeight: "5",
      fontSize: "sm"
    },
    td: {
      px: "8",
      py: "5",
      lineHeight: "6"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "md"
    }
  })
};
var tableTheme2 = defineMultiStyleConfig27({
  baseStyle: baseStyle43,
  variants: variants13,
  sizes: sizes26,
  defaultProps: {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-RBQSCDLK.mjs
init_shim();
var $fg7 = cssVar("tabs-color");
var $bg17 = cssVar("tabs-bg");
var $border5 = cssVar("tabs-border-color");
var { defineMultiStyleConfig: defineMultiStyleConfig28, definePartsStyle: definePartsStyle28 } = createMultiStyleConfigHelpers(tabsAnatomy.keys);
var baseStyleRoot3 = defineStyle((props) => {
  const { orientation } = props;
  return {
    display: orientation === "vertical" ? "flex" : "block"
  };
});
var baseStyleTab2 = defineStyle((props) => {
  const { isFitted } = props;
  return {
    flex: isFitted ? 1 : void 0,
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
      zIndex: 1,
      boxShadow: "outline"
    },
    _disabled: {
      cursor: "not-allowed",
      opacity: 0.4
    }
  };
});
var baseStyleTablist2 = defineStyle((props) => {
  const { align = "start", orientation } = props;
  const alignments = {
    end: "flex-end",
    center: "center",
    start: "flex-start"
  };
  return {
    justifyContent: alignments[align],
    flexDirection: orientation === "vertical" ? "column" : "row"
  };
});
var baseStyleTabpanel2 = defineStyle({
  p: 4
});
var baseStyle44 = definePartsStyle28((props) => ({
  root: baseStyleRoot3(props),
  tab: baseStyleTab2(props),
  tablist: baseStyleTablist2(props),
  tabpanel: baseStyleTabpanel2
}));
var sizes27 = {
  sm: definePartsStyle28({
    tab: {
      py: 1,
      px: 4,
      fontSize: "sm"
    }
  }),
  md: definePartsStyle28({
    tab: {
      fontSize: "md",
      py: 2,
      px: 4
    }
  }),
  lg: definePartsStyle28({
    tab: {
      fontSize: "lg",
      py: 3,
      px: 4
    }
  })
};
var variantLine2 = definePartsStyle28((props) => {
  const { colorScheme: c, orientation } = props;
  const isVertical = orientation === "vertical";
  const borderProp = orientation === "vertical" ? "borderStart" : "borderBottom";
  const marginProp = isVertical ? "marginStart" : "marginBottom";
  return {
    tablist: {
      [borderProp]: "2px solid",
      borderColor: "inherit"
    },
    tab: {
      [borderProp]: "2px solid",
      borderColor: "transparent",
      [marginProp]: "-2px",
      _selected: {
        [$fg7.variable]: `colors.${c}.600`,
        _dark: {
          [$fg7.variable]: `colors.${c}.300`
        },
        borderColor: "currentColor"
      },
      _active: {
        [$bg17.variable]: "colors.gray.200",
        _dark: {
          [$bg17.variable]: "colors.whiteAlpha.300"
        }
      },
      _disabled: {
        _active: { bg: "none" }
      },
      color: $fg7.reference,
      bg: $bg17.reference
    }
  };
});
var variantEnclosed2 = definePartsStyle28((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      borderTopRadius: "md",
      border: "1px solid",
      borderColor: "transparent",
      mb: "-1px",
      [$border5.variable]: "transparent",
      _selected: {
        [$fg7.variable]: `colors.${c}.600`,
        [$border5.variable]: `colors.white`,
        _dark: {
          [$fg7.variable]: `colors.${c}.300`,
          [$border5.variable]: `colors.gray.800`
        },
        borderColor: "inherit",
        borderBottomColor: $border5.reference
      },
      color: $fg7.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantEnclosedColored2 = definePartsStyle28((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      border: "1px solid",
      borderColor: "inherit",
      [$bg17.variable]: "colors.gray.50",
      _dark: {
        [$bg17.variable]: "colors.whiteAlpha.50"
      },
      mb: "-1px",
      _notLast: {
        marginEnd: "-1px"
      },
      _selected: {
        [$bg17.variable]: "colors.white",
        [$fg7.variable]: `colors.${c}.600`,
        _dark: {
          [$bg17.variable]: "colors.gray.800",
          [$fg7.variable]: `colors.${c}.300`
        },
        borderColor: "inherit",
        borderTopColor: "currentColor",
        borderBottomColor: "transparent"
      },
      color: $fg7.reference,
      bg: $bg17.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantSoftRounded2 = definePartsStyle28((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: "gray.600",
      _selected: {
        color: getColor2(theme3, `${c}.700`),
        bg: getColor2(theme3, `${c}.100`)
      }
    }
  };
});
var variantSolidRounded2 = definePartsStyle28((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      [$fg7.variable]: "colors.gray.600",
      _dark: {
        [$fg7.variable]: "inherit"
      },
      _selected: {
        [$fg7.variable]: "colors.white",
        [$bg17.variable]: `colors.${c}.600`,
        _dark: {
          [$fg7.variable]: "colors.gray.800",
          [$bg17.variable]: `colors.${c}.300`
        }
      },
      color: $fg7.reference,
      bg: $bg17.reference
    }
  };
});
var variantUnstyled4 = definePartsStyle28({});
var variants14 = {
  line: variantLine2,
  enclosed: variantEnclosed2,
  "enclosed-colored": variantEnclosedColored2,
  "soft-rounded": variantSoftRounded2,
  "solid-rounded": variantSolidRounded2,
  unstyled: variantUnstyled4
};
var tabsTheme2 = defineMultiStyleConfig28({
  baseStyle: baseStyle44,
  sizes: sizes27,
  variants: variants14,
  defaultProps: {
    size: "md",
    variant: "line",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-CZP5TVGH.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-IBJP6BGU.mjs
init_shim();
var vars2 = defineCssVars("badge", ["bg", "color", "shadow"]);
var baseStyle45 = defineStyle({
  px: 1,
  textTransform: "uppercase",
  fontSize: "xs",
  borderRadius: "sm",
  fontWeight: "bold",
  bg: vars2.bg.reference,
  color: vars2.color.reference,
  boxShadow: vars2.shadow.reference
});
var variantSolid5 = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const dark = transparentize3(`${c}.500`, 0.6)(theme3);
  return {
    [vars2.bg.variable]: `colors.${c}.500`,
    [vars2.color.variable]: `colors.white`,
    _dark: {
      [vars2.bg.variable]: dark,
      [vars2.color.variable]: `colors.whiteAlpha.800`
    }
  };
});
var variantSubtle3 = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const darkBg = transparentize3(`${c}.200`, 0.16)(theme3);
  return {
    [vars2.bg.variable]: `colors.${c}.100`,
    [vars2.color.variable]: `colors.${c}.800`,
    _dark: {
      [vars2.bg.variable]: darkBg,
      [vars2.color.variable]: `colors.${c}.200`
    }
  };
});
var variantOutline4 = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const darkColor = transparentize3(`${c}.200`, 0.8)(theme3);
  return {
    [vars2.color.variable]: `colors.${c}.500`,
    _dark: {
      [vars2.color.variable]: darkColor
    },
    [vars2.shadow.variable]: `inset 0 0 0px 1px ${vars2.color.reference}`
  };
});
var variants15 = {
  solid: variantSolid5,
  subtle: variantSubtle3,
  outline: variantOutline4
};
var badgeTheme2 = defineStyleConfig({
  baseStyle: baseStyle45,
  variants: variants15,
  defaultProps: {
    variant: "subtle",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-CZP5TVGH.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig29, definePartsStyle: definePartsStyle29 } = createMultiStyleConfigHelpers(tagAnatomy.keys);
var baseStyleContainer6 = defineStyle({
  fontWeight: "medium",
  lineHeight: 1.2,
  outline: 0,
  color: vars2.color.reference,
  bg: vars2.bg.reference,
  boxShadow: vars2.shadow.reference,
  borderRadius: "md",
  _focusVisible: {
    boxShadow: "outline"
  }
});
var baseStyleLabel5 = defineStyle({
  lineHeight: 1.2,
  overflow: "visible"
});
var baseStyleCloseButton5 = defineStyle({
  fontSize: "lg",
  w: "5",
  h: "5",
  transitionProperty: "common",
  transitionDuration: "normal",
  borderRadius: "full",
  marginStart: "1.5",
  marginEnd: "-1",
  opacity: 0.5,
  _disabled: {
    opacity: 0.4
  },
  _focusVisible: {
    boxShadow: "outline",
    bg: "rgba(0, 0, 0, 0.14)"
  },
  _hover: {
    opacity: 0.8
  },
  _active: {
    opacity: 1
  }
});
var baseStyle46 = definePartsStyle29({
  container: baseStyleContainer6,
  label: baseStyleLabel5,
  closeButton: baseStyleCloseButton5
});
var sizes28 = {
  sm: definePartsStyle29({
    container: {
      minH: "5",
      minW: "5",
      fontSize: "xs",
      px: "2"
    },
    closeButton: {
      marginEnd: "-2px",
      marginStart: "0.35rem"
    }
  }),
  md: definePartsStyle29({
    container: {
      minH: "6",
      minW: "6",
      fontSize: "sm",
      px: "2"
    }
  }),
  lg: definePartsStyle29({
    container: {
      minH: "8",
      minW: "8",
      fontSize: "md",
      px: "3"
    }
  })
};
var variants16 = {
  subtle: definePartsStyle29((props) => {
    var _a40;
    return {
      container: (_a40 = badgeTheme2.variants) == null ? void 0 : _a40.subtle(props)
    };
  }),
  solid: definePartsStyle29((props) => {
    var _a40;
    return {
      container: (_a40 = badgeTheme2.variants) == null ? void 0 : _a40.solid(props)
    };
  }),
  outline: definePartsStyle29((props) => {
    var _a40;
    return {
      container: (_a40 = badgeTheme2.variants) == null ? void 0 : _a40.outline(props)
    };
  })
};
var tagTheme2 = defineMultiStyleConfig29({
  variants: variants16,
  baseStyle: baseStyle46,
  sizes: sizes28,
  defaultProps: {
    size: "md",
    variant: "subtle",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-OIGZPHLT.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-WFLWAEKG.mjs
init_shim();
var { definePartsStyle: definePartsStyle30, defineMultiStyleConfig: defineMultiStyleConfig30 } = createMultiStyleConfigHelpers(inputAnatomy.keys);
var baseStyle47 = definePartsStyle30({
  field: {
    width: "100%",
    minWidth: 0,
    outline: 0,
    position: "relative",
    appearance: "none",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  }
});
var size2 = {
  lg: defineStyle({
    fontSize: "lg",
    px: "4",
    h: "12",
    borderRadius: "md"
  }),
  md: defineStyle({
    fontSize: "md",
    px: "4",
    h: "10",
    borderRadius: "md"
  }),
  sm: defineStyle({
    fontSize: "sm",
    px: "3",
    h: "8",
    borderRadius: "sm"
  }),
  xs: defineStyle({
    fontSize: "xs",
    px: "2",
    h: "6",
    borderRadius: "sm"
  })
};
var sizes29 = {
  lg: definePartsStyle30({
    field: size2.lg,
    addon: size2.lg
  }),
  md: definePartsStyle30({
    field: size2.md,
    addon: size2.md
  }),
  sm: definePartsStyle30({
    field: size2.sm,
    addon: size2.sm
  }),
  xs: definePartsStyle30({
    field: size2.xs,
    addon: size2.xs
  })
};
function getDefaults2(props) {
  const { focusBorderColor: fc, errorBorderColor: ec } = props;
  return {
    focusBorderColor: fc || mode2("blue.500", "blue.300")(props),
    errorBorderColor: ec || mode2("red.500", "red.300")(props)
  };
}
var variantOutline5 = definePartsStyle30((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults2(props);
  return {
    field: {
      border: "1px solid",
      borderColor: "inherit",
      bg: "inherit",
      _hover: {
        borderColor: mode2("gray.300", "whiteAlpha.400")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor2(theme3, ec),
        boxShadow: `0 0 0 1px ${getColor2(theme3, ec)}`
      },
      _focusVisible: {
        zIndex: 1,
        borderColor: getColor2(theme3, fc),
        boxShadow: `0 0 0 1px ${getColor2(theme3, fc)}`
      }
    },
    addon: {
      border: "1px solid",
      borderColor: mode2("inherit", "whiteAlpha.50")(props),
      bg: mode2("gray.100", "whiteAlpha.300")(props)
    }
  };
});
var variantFilled2 = definePartsStyle30((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults2(props);
  return {
    field: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode2("gray.100", "whiteAlpha.50")(props),
      _hover: {
        bg: mode2("gray.200", "whiteAlpha.100")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor2(theme3, ec)
      },
      _focusVisible: {
        bg: "transparent",
        borderColor: getColor2(theme3, fc)
      }
    },
    addon: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode2("gray.100", "whiteAlpha.50")(props)
    }
  };
});
var variantFlushed2 = definePartsStyle30((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults2(props);
  return {
    field: {
      borderBottom: "1px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent",
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor2(theme3, ec),
        boxShadow: `0px 1px 0px 0px ${getColor2(theme3, ec)}`
      },
      _focusVisible: {
        borderColor: getColor2(theme3, fc),
        boxShadow: `0px 1px 0px 0px ${getColor2(theme3, fc)}`
      }
    },
    addon: {
      borderBottom: "2px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent"
    }
  };
});
var variantUnstyled5 = definePartsStyle30({
  field: {
    bg: "transparent",
    px: "0",
    height: "auto"
  },
  addon: {
    bg: "transparent",
    px: "0",
    height: "auto"
  }
});
var variants17 = {
  outline: variantOutline5,
  filled: variantFilled2,
  flushed: variantFlushed2,
  unstyled: variantUnstyled5
};
var inputTheme2 = defineMultiStyleConfig30({
  baseStyle: baseStyle47,
  sizes: sizes29,
  variants: variants17,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-OIGZPHLT.mjs
var _a7;
var baseStyle48 = defineStyle({
  ...(_a7 = inputTheme2.baseStyle) == null ? void 0 : _a7.field,
  paddingY: "2",
  minHeight: "20",
  lineHeight: "short",
  verticalAlign: "top"
});
var _a24;
var _b5;
var variants18 = {
  outline: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme2.variants) == null ? void 0 : _a42.outline(props).field) != null ? _b32 : {};
    }
  ),
  flushed: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme2.variants) == null ? void 0 : _a42.flushed(props).field) != null ? _b32 : {};
    }
  ),
  filled: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme2.variants) == null ? void 0 : _a42.filled(props).field) != null ? _b32 : {};
    }
  ),
  unstyled: (_b5 = (_a24 = inputTheme2.variants) == null ? void 0 : _a24.unstyled.field) != null ? _b5 : {}
};
var _a32;
var _b22;
var _c3;
var _d3;
var _e3;
var _f3;
var _g3;
var _h3;
var sizes30 = {
  xs: (_b22 = (_a32 = inputTheme2.sizes) == null ? void 0 : _a32.xs.field) != null ? _b22 : {},
  sm: (_d3 = (_c3 = inputTheme2.sizes) == null ? void 0 : _c3.sm.field) != null ? _d3 : {},
  md: (_f3 = (_e3 = inputTheme2.sizes) == null ? void 0 : _e3.md.field) != null ? _f3 : {},
  lg: (_h3 = (_g3 = inputTheme2.sizes) == null ? void 0 : _g3.lg.field) != null ? _h3 : {}
};
var textareaTheme2 = defineStyleConfig({
  baseStyle: baseStyle48,
  sizes: sizes30,
  variants: variants18,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-6Y3UQESG.mjs
init_shim();
var $bg18 = cssVar3("tooltip-bg");
var $fg8 = cssVar3("tooltip-fg");
var $arrowBg3 = cssVar3("popper-arrow-bg");
var baseStyle49 = defineStyle({
  bg: $bg18.reference,
  color: $fg8.reference,
  [$bg18.variable]: "colors.gray.700",
  [$fg8.variable]: "colors.whiteAlpha.900",
  _dark: {
    [$bg18.variable]: "colors.gray.300",
    [$fg8.variable]: "colors.gray.900"
  },
  [$arrowBg3.variable]: $bg18.reference,
  px: "2",
  py: "0.5",
  borderRadius: "sm",
  fontWeight: "medium",
  fontSize: "sm",
  boxShadow: "md",
  maxW: "xs",
  zIndex: "tooltip"
});
var tooltipTheme2 = defineStyleConfig({
  baseStyle: baseStyle49
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-VGCCECBM.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig31, definePartsStyle: definePartsStyle31 } = createMultiStyleConfigHelpers(progressAnatomy.keys);
var filledStyle2 = defineStyle((props) => {
  const { colorScheme: c, theme: t2, isIndeterminate, hasStripe } = props;
  const stripeStyle = mode2(
    generateStripe2(),
    generateStripe2("1rem", "rgba(0,0,0,0.1)")
  )(props);
  const bgColor = mode2(`${c}.500`, `${c}.200`)(props);
  const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${getColor2(t2, bgColor)} 50%,
    transparent 100%
  )`;
  const addStripe = !isIndeterminate && hasStripe;
  return {
    ...addStripe && stripeStyle,
    ...isIndeterminate ? { bgImage: gradient } : { bgColor }
  };
});
var baseStyleLabel6 = defineStyle({
  lineHeight: "1",
  fontSize: "0.25em",
  fontWeight: "bold",
  color: "white"
});
var baseStyleTrack5 = defineStyle((props) => {
  return {
    bg: mode2("gray.100", "whiteAlpha.300")(props)
  };
});
var baseStyleFilledTrack3 = defineStyle((props) => {
  return {
    transitionProperty: "common",
    transitionDuration: "slow",
    ...filledStyle2(props)
  };
});
var baseStyle50 = definePartsStyle31((props) => ({
  label: baseStyleLabel6,
  filledTrack: baseStyleFilledTrack3(props),
  track: baseStyleTrack5(props)
}));
var sizes31 = {
  xs: definePartsStyle31({
    track: { h: "1" }
  }),
  sm: definePartsStyle31({
    track: { h: "2" }
  }),
  md: definePartsStyle31({
    track: { h: "3" }
  }),
  lg: definePartsStyle31({
    track: { h: "4" }
  })
};
var progressTheme2 = defineMultiStyleConfig31({
  sizes: sizes31,
  baseStyle: baseStyle50,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-JDPWIQ7H.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-3XG4KRSA.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-EBS47JIL.mjs
init_shim();
var isFunction4 = (value) => typeof value === "function";
function runIfFn4(valueOrFn, ...args) {
  return isFunction4(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-3XG4KRSA.mjs
var { definePartsStyle: definePartsStyle32, defineMultiStyleConfig: defineMultiStyleConfig32 } = createMultiStyleConfigHelpers(checkboxAnatomy.keys);
var $size4 = cssVar("checkbox-size");
var baseStyleControl3 = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    w: $size4.reference,
    h: $size4.reference,
    transitionProperty: "box-shadow",
    transitionDuration: "normal",
    border: "2px solid",
    borderRadius: "sm",
    borderColor: "inherit",
    color: "white",
    _checked: {
      bg: mode2(`${c}.500`, `${c}.200`)(props),
      borderColor: mode2(`${c}.500`, `${c}.200`)(props),
      color: mode2("white", "gray.900")(props),
      _hover: {
        bg: mode2(`${c}.600`, `${c}.300`)(props),
        borderColor: mode2(`${c}.600`, `${c}.300`)(props)
      },
      _disabled: {
        borderColor: mode2("gray.200", "transparent")(props),
        bg: mode2("gray.200", "whiteAlpha.300")(props),
        color: mode2("gray.500", "whiteAlpha.500")(props)
      }
    },
    _indeterminate: {
      bg: mode2(`${c}.500`, `${c}.200`)(props),
      borderColor: mode2(`${c}.500`, `${c}.200`)(props),
      color: mode2("white", "gray.900")(props)
    },
    _disabled: {
      bg: mode2("gray.100", "whiteAlpha.100")(props),
      borderColor: mode2("gray.100", "transparent")(props)
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _invalid: {
      borderColor: mode2("red.500", "red.300")(props)
    }
  };
});
var baseStyleContainer7 = defineStyle({
  _disabled: { cursor: "not-allowed" }
});
var baseStyleLabel7 = defineStyle({
  userSelect: "none",
  _disabled: { opacity: 0.4 }
});
var baseStyleIcon7 = defineStyle({
  transitionProperty: "transform",
  transitionDuration: "normal"
});
var baseStyle51 = definePartsStyle32((props) => ({
  icon: baseStyleIcon7,
  container: baseStyleContainer7,
  control: runIfFn4(baseStyleControl3, props),
  label: baseStyleLabel7
}));
var sizes32 = {
  sm: definePartsStyle32({
    control: { [$size4.variable]: "sizes.3" },
    label: { fontSize: "sm" },
    icon: { fontSize: "3xs" }
  }),
  md: definePartsStyle32({
    control: { [$size4.variable]: "sizes.4" },
    label: { fontSize: "md" },
    icon: { fontSize: "2xs" }
  }),
  lg: definePartsStyle32({
    control: { [$size4.variable]: "sizes.5" },
    label: { fontSize: "lg" },
    icon: { fontSize: "2xs" }
  })
};
var checkboxTheme2 = defineMultiStyleConfig32({
  baseStyle: baseStyle51,
  sizes: sizes32,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-JDPWIQ7H.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig33, definePartsStyle: definePartsStyle33 } = createMultiStyleConfigHelpers(radioAnatomy.keys);
var baseStyleControl4 = defineStyle((props) => {
  var _a40;
  const controlStyle = (_a40 = runIfFn4(checkboxTheme2.baseStyle, props)) == null ? void 0 : _a40.control;
  return {
    ...controlStyle,
    borderRadius: "full",
    _checked: {
      ...controlStyle == null ? void 0 : controlStyle["_checked"],
      _before: {
        content: `""`,
        display: "inline-block",
        pos: "relative",
        w: "50%",
        h: "50%",
        borderRadius: "50%",
        bg: "currentColor"
      }
    }
  };
});
var baseStyle52 = definePartsStyle33((props) => {
  var _a40, _b8, _c5, _d5;
  return {
    label: (_b8 = (_a40 = checkboxTheme2).baseStyle) == null ? void 0 : _b8.call(_a40, props).label,
    container: (_d5 = (_c5 = checkboxTheme2).baseStyle) == null ? void 0 : _d5.call(_c5, props).container,
    control: baseStyleControl4(props)
  };
});
var sizes33 = {
  md: definePartsStyle33({
    control: { w: "4", h: "4" },
    label: { fontSize: "md" }
  }),
  lg: definePartsStyle33({
    control: { w: "5", h: "5" },
    label: { fontSize: "lg" }
  }),
  sm: definePartsStyle33({
    control: { width: "3", height: "3" },
    label: { fontSize: "sm" }
  })
};
var radioTheme2 = defineMultiStyleConfig33({
  baseStyle: baseStyle52,
  sizes: sizes33,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-V3RHVDKJ.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig34, definePartsStyle: definePartsStyle34 } = createMultiStyleConfigHelpers(selectAnatomy.keys);
var $bg19 = cssVar("select-bg");
var _a8;
var baseStyleField3 = defineStyle({
  ...(_a8 = inputTheme2.baseStyle) == null ? void 0 : _a8.field,
  appearance: "none",
  paddingBottom: "1px",
  lineHeight: "normal",
  bg: $bg19.reference,
  [$bg19.variable]: "colors.white",
  _dark: {
    [$bg19.variable]: "colors.gray.700"
  },
  "> option, > optgroup": {
    bg: $bg19.reference
  }
});
var baseStyleIcon8 = defineStyle({
  width: "6",
  height: "100%",
  insetEnd: "2",
  position: "relative",
  color: "currentColor",
  fontSize: "xl",
  _disabled: {
    opacity: 0.5
  }
});
var baseStyle53 = definePartsStyle34({
  field: baseStyleField3,
  icon: baseStyleIcon8
});
var iconSpacing2 = defineStyle({
  paddingInlineEnd: "8"
});
var _a25;
var _b6;
var _c4;
var _d4;
var _e4;
var _f4;
var _g4;
var _h4;
var sizes34 = {
  lg: {
    ...(_a25 = inputTheme2.sizes) == null ? void 0 : _a25.lg,
    field: {
      ...(_b6 = inputTheme2.sizes) == null ? void 0 : _b6.lg.field,
      ...iconSpacing2
    }
  },
  md: {
    ...(_c4 = inputTheme2.sizes) == null ? void 0 : _c4.md,
    field: {
      ...(_d4 = inputTheme2.sizes) == null ? void 0 : _d4.md.field,
      ...iconSpacing2
    }
  },
  sm: {
    ...(_e4 = inputTheme2.sizes) == null ? void 0 : _e4.sm,
    field: {
      ...(_f4 = inputTheme2.sizes) == null ? void 0 : _f4.sm.field,
      ...iconSpacing2
    }
  },
  xs: {
    ...(_g4 = inputTheme2.sizes) == null ? void 0 : _g4.xs,
    field: {
      ...(_h4 = inputTheme2.sizes) == null ? void 0 : _h4.xs.field,
      ...iconSpacing2
    },
    icon: {
      insetEnd: "1"
    }
  }
};
var selectTheme2 = defineMultiStyleConfig34({
  baseStyle: baseStyle53,
  sizes: sizes34,
  variants: inputTheme2.variants,
  defaultProps: inputTheme2.defaultProps
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-YSULOCDF.mjs
init_shim();
var $startColor2 = cssVar("skeleton-start-color");
var $endColor2 = cssVar("skeleton-end-color");
var baseStyle54 = defineStyle({
  [$startColor2.variable]: "colors.gray.100",
  [$endColor2.variable]: "colors.gray.400",
  _dark: {
    [$startColor2.variable]: "colors.gray.800",
    [$endColor2.variable]: "colors.gray.600"
  },
  background: $startColor2.reference,
  borderColor: $endColor2.reference,
  opacity: 0.7,
  borderRadius: "sm"
});
var skeletonTheme2 = defineStyleConfig({
  baseStyle: baseStyle54
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-RSEFU3LC.mjs
init_shim();
var $bg20 = cssVar("skip-link-bg");
var baseStyle55 = defineStyle({
  borderRadius: "md",
  fontWeight: "semibold",
  _focusVisible: {
    boxShadow: "outline",
    padding: "4",
    position: "fixed",
    top: "6",
    insetStart: "6",
    [$bg20.variable]: "colors.white",
    _dark: {
      [$bg20.variable]: "colors.gray.700"
    },
    bg: $bg20.reference
  }
});
var skipLinkTheme2 = defineStyleConfig({
  baseStyle: baseStyle55
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-IBL46MNN.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig35, definePartsStyle: definePartsStyle35 } = createMultiStyleConfigHelpers(sliderAnatomy.keys);
var $thumbSize2 = cssVar("slider-thumb-size");
var $trackSize2 = cssVar("slider-track-size");
var $bg21 = cssVar("slider-bg");
var baseStyleContainer8 = defineStyle((props) => {
  const { orientation } = props;
  return {
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    _disabled: {
      opacity: 0.6,
      cursor: "default",
      pointerEvents: "none"
    },
    ...orient2({
      orientation,
      vertical: { h: "100%" },
      horizontal: { w: "100%" }
    })
  };
});
var baseStyleTrack6 = defineStyle((props) => {
  const orientationStyles = orient2({
    orientation: props.orientation,
    horizontal: { h: $trackSize2.reference },
    vertical: { w: $trackSize2.reference }
  });
  return {
    ...orientationStyles,
    overflow: "hidden",
    borderRadius: "sm",
    [$bg21.variable]: "colors.gray.200",
    _dark: {
      [$bg21.variable]: "colors.whiteAlpha.200"
    },
    _disabled: {
      [$bg21.variable]: "colors.gray.300",
      _dark: {
        [$bg21.variable]: "colors.whiteAlpha.300"
      }
    },
    bg: $bg21.reference
  };
});
var baseStyleThumb4 = defineStyle((props) => {
  const { orientation } = props;
  const orientationStyle = orient2({
    orientation,
    vertical: {
      left: "50%",
      transform: `translateX(-50%)`,
      _active: {
        transform: `translateX(-50%) scale(1.15)`
      }
    },
    horizontal: {
      top: "50%",
      transform: `translateY(-50%)`,
      _active: {
        transform: `translateY(-50%) scale(1.15)`
      }
    }
  });
  return {
    ...orientationStyle,
    w: $thumbSize2.reference,
    h: $thumbSize2.reference,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    outline: 0,
    zIndex: 1,
    borderRadius: "full",
    bg: "white",
    boxShadow: "base",
    border: "1px solid",
    borderColor: "transparent",
    transitionProperty: "transform",
    transitionDuration: "normal",
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      bg: "gray.300"
    }
  };
});
var baseStyleFilledTrack4 = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    width: "inherit",
    height: "inherit",
    [$bg21.variable]: `colors.${c}.500`,
    _dark: {
      [$bg21.variable]: `colors.${c}.200`
    },
    bg: $bg21.reference
  };
});
var baseStyle56 = definePartsStyle35((props) => ({
  container: baseStyleContainer8(props),
  track: baseStyleTrack6(props),
  thumb: baseStyleThumb4(props),
  filledTrack: baseStyleFilledTrack4(props)
}));
var sizeLg2 = definePartsStyle35({
  container: {
    [$thumbSize2.variable]: `sizes.4`,
    [$trackSize2.variable]: `sizes.1`
  }
});
var sizeMd2 = definePartsStyle35({
  container: {
    [$thumbSize2.variable]: `sizes.3.5`,
    [$trackSize2.variable]: `sizes.1`
  }
});
var sizeSm2 = definePartsStyle35({
  container: {
    [$thumbSize2.variable]: `sizes.2.5`,
    [$trackSize2.variable]: `sizes.0.5`
  }
});
var sizes35 = {
  lg: sizeLg2,
  md: sizeMd2,
  sm: sizeSm2
};
var sliderTheme2 = defineMultiStyleConfig35({
  baseStyle: baseStyle56,
  sizes: sizes35,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-Y6RR3LE6.mjs
init_shim();
var $size5 = cssVar3("spinner-size");
var baseStyle57 = defineStyle({
  width: [$size5.reference],
  height: [$size5.reference]
});
var sizes36 = {
  xs: defineStyle({
    [$size5.variable]: "sizes.3"
  }),
  sm: defineStyle({
    [$size5.variable]: "sizes.4"
  }),
  md: defineStyle({
    [$size5.variable]: "sizes.6"
  }),
  lg: defineStyle({
    [$size5.variable]: "sizes.8"
  }),
  xl: defineStyle({
    [$size5.variable]: "sizes.12"
  })
};
var spinnerTheme2 = defineStyleConfig({
  baseStyle: baseStyle57,
  sizes: sizes36,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-EY6ACYQS.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig36, definePartsStyle: definePartsStyle36 } = createMultiStyleConfigHelpers(statAnatomy.keys);
var baseStyleLabel8 = defineStyle({
  fontWeight: "medium"
});
var baseStyleHelpText2 = defineStyle({
  opacity: 0.8,
  marginBottom: "2"
});
var baseStyleNumber2 = defineStyle({
  verticalAlign: "baseline",
  fontWeight: "semibold"
});
var baseStyleIcon9 = defineStyle({
  marginEnd: 1,
  w: "3.5",
  h: "3.5",
  verticalAlign: "middle"
});
var baseStyle58 = definePartsStyle36({
  container: {},
  label: baseStyleLabel8,
  helpText: baseStyleHelpText2,
  number: baseStyleNumber2,
  icon: baseStyleIcon9
});
var sizes37 = {
  md: definePartsStyle36({
    label: { fontSize: "sm" },
    helpText: { fontSize: "sm" },
    number: { fontSize: "2xl" }
  })
};
var statTheme2 = defineMultiStyleConfig36({
  baseStyle: baseStyle58,
  sizes: sizes37,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-VQ2DUS6J.mjs
init_shim();
var $bg22 = cssVar("kbd-bg");
var baseStyle59 = defineStyle({
  [$bg22.variable]: "colors.gray.100",
  _dark: {
    [$bg22.variable]: "colors.whiteAlpha.100"
  },
  bg: $bg22.reference,
  borderRadius: "md",
  borderWidth: "1px",
  borderBottomWidth: "3px",
  fontSize: "0.8em",
  fontWeight: "bold",
  lineHeight: "normal",
  px: "0.4em",
  whiteSpace: "nowrap"
});
var kbdTheme2 = defineStyleConfig({
  baseStyle: baseStyle59
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-2T5TO72C.mjs
init_shim();
var baseStyle60 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
});
var linkTheme2 = defineStyleConfig({
  baseStyle: baseStyle60
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-AQJ6AIMN.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig37, definePartsStyle: definePartsStyle37 } = createMultiStyleConfigHelpers(listAnatomy.keys);
var baseStyleIcon10 = defineStyle({
  marginEnd: "2",
  display: "inline",
  verticalAlign: "text-bottom"
});
var baseStyle61 = definePartsStyle37({
  icon: baseStyleIcon10
});
var listTheme2 = defineMultiStyleConfig37({
  baseStyle: baseStyle61
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-FIWRYWVW.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig38, definePartsStyle: definePartsStyle38 } = createMultiStyleConfigHelpers(menuAnatomy.keys);
var $bg23 = cssVar("menu-bg");
var $shadow4 = cssVar("menu-shadow");
var baseStyleList2 = defineStyle({
  [$bg23.variable]: "#fff",
  [$shadow4.variable]: "shadows.sm",
  _dark: {
    [$bg23.variable]: "colors.gray.700",
    [$shadow4.variable]: "shadows.dark-lg"
  },
  color: "inherit",
  minW: "3xs",
  py: "2",
  zIndex: 1,
  borderRadius: "md",
  borderWidth: "1px",
  bg: $bg23.reference,
  boxShadow: $shadow4.reference
});
var baseStyleItem2 = defineStyle({
  py: "1.5",
  px: "3",
  transitionProperty: "background",
  transitionDuration: "ultra-fast",
  transitionTimingFunction: "ease-in",
  _focus: {
    [$bg23.variable]: "colors.gray.100",
    _dark: {
      [$bg23.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg23.variable]: "colors.gray.200",
    _dark: {
      [$bg23.variable]: "colors.whiteAlpha.200"
    }
  },
  _expanded: {
    [$bg23.variable]: "colors.gray.100",
    _dark: {
      [$bg23.variable]: "colors.whiteAlpha.100"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  bg: $bg23.reference
});
var baseStyleGroupTitle2 = defineStyle({
  mx: 4,
  my: 2,
  fontWeight: "semibold",
  fontSize: "sm"
});
var baseStyleCommand2 = defineStyle({
  opacity: 0.6
});
var baseStyleDivider2 = defineStyle({
  border: 0,
  borderBottom: "1px solid",
  borderColor: "inherit",
  my: "2",
  opacity: 0.6
});
var baseStyleButton3 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyle62 = definePartsStyle38({
  button: baseStyleButton3,
  list: baseStyleList2,
  item: baseStyleItem2,
  groupTitle: baseStyleGroupTitle2,
  command: baseStyleCommand2,
  divider: baseStyleDivider2
});
var menuTheme2 = defineMultiStyleConfig38({
  baseStyle: baseStyle62
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-LYECXC4E.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig39, definePartsStyle: definePartsStyle39 } = createMultiStyleConfigHelpers(modalAnatomy.keys);
var $bg24 = cssVar("modal-bg");
var $shadow5 = cssVar("modal-shadow");
var baseStyleOverlay3 = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer3 = defineStyle((props) => {
  const { isCentered, scrollBehavior } = props;
  return {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center",
    alignItems: isCentered ? "center" : "flex-start",
    overflow: scrollBehavior === "inside" ? "hidden" : "auto",
    overscrollBehaviorY: "none"
  };
});
var baseStyleDialog3 = defineStyle((props) => {
  const { scrollBehavior } = props;
  return {
    borderRadius: "md",
    color: "inherit",
    my: "16",
    zIndex: "modal",
    maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
    [$bg24.variable]: "colors.white",
    [$shadow5.variable]: "shadows.lg",
    _dark: {
      [$bg24.variable]: "colors.gray.700",
      [$shadow5.variable]: "shadows.dark-lg"
    },
    bg: $bg24.reference,
    boxShadow: $shadow5.reference
  };
});
var baseStyleHeader4 = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton6 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody4 = defineStyle((props) => {
  const { scrollBehavior } = props;
  return {
    px: "6",
    py: "2",
    flex: "1",
    overflow: scrollBehavior === "inside" ? "auto" : void 0
  };
});
var baseStyleFooter4 = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle63 = definePartsStyle39((props) => ({
  overlay: baseStyleOverlay3,
  dialogContainer: runIfFn4(baseStyleDialogContainer3, props),
  dialog: runIfFn4(baseStyleDialog3, props),
  header: baseStyleHeader4,
  closeButton: baseStyleCloseButton6,
  body: runIfFn4(baseStyleBody4, props),
  footer: baseStyleFooter4
}));
function getSize5(value) {
  if (value === "full") {
    return definePartsStyle39({
      dialog: {
        maxW: "100vw",
        minH: "$100vh",
        my: "0",
        borderRadius: "0"
      }
    });
  }
  return definePartsStyle39({
    dialog: { maxW: value }
  });
}
var sizes38 = {
  xs: getSize5("xs"),
  sm: getSize5("sm"),
  md: getSize5("md"),
  lg: getSize5("lg"),
  xl: getSize5("xl"),
  "2xl": getSize5("2xl"),
  "3xl": getSize5("3xl"),
  "4xl": getSize5("4xl"),
  "5xl": getSize5("5xl"),
  "6xl": getSize5("6xl"),
  full: getSize5("full")
};
var modalTheme2 = defineMultiStyleConfig39({
  baseStyle: baseStyle63,
  sizes: sizes38,
  defaultProps: { size: "md" }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-XNRZTTJ2.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig40, definePartsStyle: definePartsStyle40 } = createMultiStyleConfigHelpers(numberInputAnatomy.keys);
var $stepperWidth2 = cssVar3("number-input-stepper-width");
var $inputPadding2 = cssVar3("number-input-input-padding");
var inputPaddingValue2 = calc3($stepperWidth2).add("0.5rem").toString();
var $bg25 = cssVar3("number-input-bg");
var $fg9 = cssVar3("number-input-color");
var $border6 = cssVar3("number-input-border-color");
var baseStyleRoot4 = defineStyle({
  [$stepperWidth2.variable]: "sizes.6",
  [$inputPadding2.variable]: inputPaddingValue2
});
var baseStyleField4 = defineStyle(
  (props) => {
    var _a40, _b8;
    return (_b8 = (_a40 = runIfFn4(inputTheme2.baseStyle, props)) == null ? void 0 : _a40.field) != null ? _b8 : {};
  }
);
var baseStyleStepperGroup2 = defineStyle({
  width: $stepperWidth2.reference
});
var baseStyleStepper2 = defineStyle({
  borderStart: "1px solid",
  borderStartColor: $border6.reference,
  color: $fg9.reference,
  bg: $bg25.reference,
  [$fg9.variable]: "colors.chakra-body-text",
  [$border6.variable]: "colors.chakra-border-color",
  _dark: {
    [$fg9.variable]: "colors.whiteAlpha.800",
    [$border6.variable]: "colors.whiteAlpha.300"
  },
  _active: {
    [$bg25.variable]: "colors.gray.200",
    _dark: {
      [$bg25.variable]: "colors.whiteAlpha.300"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  }
});
var baseStyle64 = definePartsStyle40((props) => {
  var _a40;
  return {
    root: baseStyleRoot4,
    field: (_a40 = runIfFn4(baseStyleField4, props)) != null ? _a40 : {},
    stepperGroup: baseStyleStepperGroup2,
    stepper: baseStyleStepper2
  };
});
function getSize6(size3) {
  var _a40, _b8, _c5;
  const sizeStyle = (_a40 = inputTheme2.sizes) == null ? void 0 : _a40[size3];
  const radius = {
    lg: "md",
    md: "md",
    sm: "sm",
    xs: "sm"
  };
  const _fontSize = (_c5 = (_b8 = sizeStyle.field) == null ? void 0 : _b8.fontSize) != null ? _c5 : "md";
  const fontSize = typography_default2.fontSizes[_fontSize];
  return definePartsStyle40({
    field: {
      ...sizeStyle.field,
      paddingInlineEnd: $inputPadding2.reference,
      verticalAlign: "top"
    },
    stepper: {
      fontSize: calc3(fontSize).multiply(0.75).toString(),
      _first: {
        borderTopEndRadius: radius[size3]
      },
      _last: {
        borderBottomEndRadius: radius[size3],
        mt: "-1px",
        borderTopWidth: 1
      }
    }
  });
}
var sizes39 = {
  xs: getSize6("xs"),
  sm: getSize6("sm"),
  md: getSize6("md"),
  lg: getSize6("lg")
};
var numberInputTheme2 = defineMultiStyleConfig40({
  baseStyle: baseStyle64,
  sizes: sizes39,
  variants: inputTheme2.variants,
  defaultProps: inputTheme2.defaultProps
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-QW3Z4V42.mjs
init_shim();
var _a9;
var baseStyle65 = defineStyle({
  ...(_a9 = inputTheme2.baseStyle) == null ? void 0 : _a9.field,
  textAlign: "center"
});
var sizes40 = {
  lg: defineStyle({
    fontSize: "lg",
    w: 12,
    h: 12,
    borderRadius: "md"
  }),
  md: defineStyle({
    fontSize: "md",
    w: 10,
    h: 10,
    borderRadius: "md"
  }),
  sm: defineStyle({
    fontSize: "sm",
    w: 8,
    h: 8,
    borderRadius: "sm"
  }),
  xs: defineStyle({
    fontSize: "xs",
    w: 6,
    h: 6,
    borderRadius: "sm"
  })
};
var _a26;
var _b7;
var variants19 = {
  outline: defineStyle(
    (props) => {
      var _a310, _b23, _c5;
      return (_c5 = (_b23 = runIfFn4((_a310 = inputTheme2.variants) == null ? void 0 : _a310.outline, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  flushed: defineStyle(
    (props) => {
      var _a310, _b23, _c5;
      return (_c5 = (_b23 = runIfFn4((_a310 = inputTheme2.variants) == null ? void 0 : _a310.flushed, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  filled: defineStyle(
    (props) => {
      var _a310, _b23, _c5;
      return (_c5 = (_b23 = runIfFn4((_a310 = inputTheme2.variants) == null ? void 0 : _a310.filled, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  unstyled: (_b7 = (_a26 = inputTheme2.variants) == null ? void 0 : _a26.unstyled.field) != null ? _b7 : {}
};
var pinInputTheme2 = defineStyleConfig({
  baseStyle: baseStyle65,
  sizes: sizes40,
  variants: variants19,
  defaultProps: inputTheme2.defaultProps
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-YJYMWHG4.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig41, definePartsStyle: definePartsStyle41 } = createMultiStyleConfigHelpers(popoverAnatomy.keys);
var $popperBg2 = cssVar3("popper-bg");
var $arrowBg4 = cssVar3("popper-arrow-bg");
var $arrowShadowColor2 = cssVar3("popper-arrow-shadow-color");
var baseStylePopper2 = defineStyle({ zIndex: 10 });
var baseStyleContent2 = defineStyle({
  [$popperBg2.variable]: `colors.white`,
  bg: $popperBg2.reference,
  [$arrowBg4.variable]: $popperBg2.reference,
  [$arrowShadowColor2.variable]: `colors.gray.200`,
  _dark: {
    [$popperBg2.variable]: `colors.gray.700`,
    [$arrowShadowColor2.variable]: `colors.whiteAlpha.300`
  },
  width: "xs",
  border: "1px solid",
  borderColor: "inherit",
  borderRadius: "md",
  boxShadow: "sm",
  zIndex: "inherit",
  _focusVisible: {
    outline: 0,
    boxShadow: "outline"
  }
});
var baseStyleHeader5 = defineStyle({
  px: 3,
  py: 2,
  borderBottomWidth: "1px"
});
var baseStyleBody5 = defineStyle({
  px: 3,
  py: 2
});
var baseStyleFooter5 = defineStyle({
  px: 3,
  py: 2,
  borderTopWidth: "1px"
});
var baseStyleCloseButton7 = defineStyle({
  position: "absolute",
  borderRadius: "md",
  top: 1,
  insetEnd: 2,
  padding: 2
});
var baseStyle66 = definePartsStyle41({
  popper: baseStylePopper2,
  content: baseStyleContent2,
  header: baseStyleHeader5,
  body: baseStyleBody5,
  footer: baseStyleFooter5,
  closeButton: baseStyleCloseButton7
});
var popoverTheme2 = defineMultiStyleConfig41({
  baseStyle: baseStyle66
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-PQSF5PVS.mjs
init_shim();
var { definePartsStyle: definePartsStyle42, defineMultiStyleConfig: defineMultiStyleConfig42 } = createMultiStyleConfigHelpers(drawerAnatomy.keys);
var $bg26 = cssVar("drawer-bg");
var $bs2 = cssVar("drawer-box-shadow");
function getSize7(value) {
  if (value === "full") {
    return definePartsStyle42({
      dialog: { maxW: "100vw", h: "100vh" }
    });
  }
  return definePartsStyle42({
    dialog: { maxW: value }
  });
}
var baseStyleOverlay4 = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "overlay"
});
var baseStyleDialogContainer4 = defineStyle({
  display: "flex",
  zIndex: "modal",
  justifyContent: "center"
});
var baseStyleDialog4 = defineStyle((props) => {
  const { isFullHeight } = props;
  return {
    ...isFullHeight && { height: "100vh" },
    zIndex: "modal",
    maxH: "100vh",
    color: "inherit",
    [$bg26.variable]: "colors.white",
    [$bs2.variable]: "shadows.lg",
    _dark: {
      [$bg26.variable]: "colors.gray.700",
      [$bs2.variable]: "shadows.dark-lg"
    },
    bg: $bg26.reference,
    boxShadow: $bs2.reference
  };
});
var baseStyleHeader6 = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton8 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody6 = defineStyle({
  px: "6",
  py: "2",
  flex: "1",
  overflow: "auto"
});
var baseStyleFooter6 = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle67 = definePartsStyle42((props) => ({
  overlay: baseStyleOverlay4,
  dialogContainer: baseStyleDialogContainer4,
  dialog: runIfFn4(baseStyleDialog4, props),
  header: baseStyleHeader6,
  closeButton: baseStyleCloseButton8,
  body: baseStyleBody6,
  footer: baseStyleFooter6
}));
var sizes41 = {
  xs: getSize7("xs"),
  sm: getSize7("md"),
  md: getSize7("lg"),
  lg: getSize7("2xl"),
  xl: getSize7("4xl"),
  full: getSize7("full")
};
var drawerTheme2 = defineMultiStyleConfig42({
  baseStyle: baseStyle67,
  sizes: sizes41,
  defaultProps: {
    size: "xs"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-YZVOF4MP.mjs
init_shim();
var { definePartsStyle: definePartsStyle43, defineMultiStyleConfig: defineMultiStyleConfig43 } = createMultiStyleConfigHelpers(editableAnatomy.keys);
var baseStylePreview2 = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyleInput2 = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyleTextarea2 = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyle68 = definePartsStyle43({
  preview: baseStylePreview2,
  input: baseStyleInput2,
  textarea: baseStyleTextarea2
});
var editableTheme2 = defineMultiStyleConfig43({
  baseStyle: baseStyle68
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-RUW3STUO.mjs
init_shim();
var { definePartsStyle: definePartsStyle44, defineMultiStyleConfig: defineMultiStyleConfig44 } = createMultiStyleConfigHelpers(formAnatomy.keys);
var $fg10 = cssVar("form-control-color");
var baseStyleRequiredIndicator2 = defineStyle({
  marginStart: "1",
  [$fg10.variable]: "colors.red.500",
  _dark: {
    [$fg10.variable]: "colors.red.300"
  },
  color: $fg10.reference
});
var baseStyleHelperText2 = defineStyle({
  mt: "2",
  [$fg10.variable]: "colors.gray.600",
  _dark: {
    [$fg10.variable]: "colors.whiteAlpha.600"
  },
  color: $fg10.reference,
  lineHeight: "normal",
  fontSize: "sm"
});
var baseStyle69 = definePartsStyle44({
  container: {
    width: "100%",
    position: "relative"
  },
  requiredIndicator: baseStyleRequiredIndicator2,
  helperText: baseStyleHelperText2
});
var formTheme2 = defineMultiStyleConfig44({
  baseStyle: baseStyle69
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-D55YRTLZ.mjs
init_shim();
var { definePartsStyle: definePartsStyle45, defineMultiStyleConfig: defineMultiStyleConfig45 } = createMultiStyleConfigHelpers(formErrorAnatomy.keys);
var $fg11 = cssVar("form-error-color");
var baseStyleText2 = defineStyle({
  [$fg11.variable]: `colors.red.500`,
  _dark: {
    [$fg11.variable]: `colors.red.300`
  },
  color: $fg11.reference,
  mt: "2",
  fontSize: "sm",
  lineHeight: "normal"
});
var baseStyleIcon11 = defineStyle({
  marginEnd: "0.5em",
  [$fg11.variable]: `colors.red.500`,
  _dark: {
    [$fg11.variable]: `colors.red.300`
  },
  color: $fg11.reference
});
var baseStyle70 = definePartsStyle45({
  text: baseStyleText2,
  icon: baseStyleIcon11
});
var formErrorTheme2 = defineMultiStyleConfig45({
  baseStyle: baseStyle70
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-OYCZTG3L.mjs
init_shim();
var baseStyle71 = defineStyle({
  fontSize: "md",
  marginEnd: "3",
  mb: "2",
  fontWeight: "medium",
  transitionProperty: "common",
  transitionDuration: "normal",
  opacity: 1,
  _disabled: {
    opacity: 0.4
  }
});
var formLabelTheme2 = defineStyleConfig({
  baseStyle: baseStyle71
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-X4O3JXYB.mjs
init_shim();
var baseStyle72 = defineStyle({
  fontFamily: "heading",
  fontWeight: "bold"
});
var sizes42 = {
  "4xl": defineStyle({
    fontSize: ["6xl", null, "7xl"],
    lineHeight: 1
  }),
  "3xl": defineStyle({
    fontSize: ["5xl", null, "6xl"],
    lineHeight: 1
  }),
  "2xl": defineStyle({
    fontSize: ["4xl", null, "5xl"],
    lineHeight: [1.2, null, 1]
  }),
  xl: defineStyle({
    fontSize: ["3xl", null, "4xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  lg: defineStyle({
    fontSize: ["2xl", null, "3xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  md: defineStyle({
    fontSize: "xl",
    lineHeight: 1.2
  }),
  sm: defineStyle({
    fontSize: "md",
    lineHeight: 1.2
  }),
  xs: defineStyle({
    fontSize: "sm",
    lineHeight: 1.2
  })
};
var headingTheme2 = defineStyleConfig({
  baseStyle: baseStyle72,
  sizes: sizes42,
  defaultProps: {
    size: "xl"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-GLS227WS.mjs
init_shim();
var { defineMultiStyleConfig: defineMultiStyleConfig46, definePartsStyle: definePartsStyle46 } = createMultiStyleConfigHelpers(breadcrumbAnatomy.keys);
var baseStyleLink2 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
});
var baseStyle73 = definePartsStyle46({
  link: baseStyleLink2
});
var breadcrumbTheme2 = defineMultiStyleConfig46({
  baseStyle: baseStyle73
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-AP3MTUHH.mjs
init_shim();
var baseStyle74 = defineStyle({
  lineHeight: "1.2",
  borderRadius: "md",
  fontWeight: "semibold",
  transitionProperty: "common",
  transitionDuration: "normal",
  _focusVisible: {
    boxShadow: "outline"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    _disabled: {
      bg: "initial"
    }
  }
});
var variantGhost2 = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  if (c === "gray") {
    return {
      color: mode2(`inherit`, `whiteAlpha.900`)(props),
      _hover: {
        bg: mode2(`gray.100`, `whiteAlpha.200`)(props)
      },
      _active: { bg: mode2(`gray.200`, `whiteAlpha.300`)(props) }
    };
  }
  const darkHoverBg = transparentize3(`${c}.200`, 0.12)(theme3);
  const darkActiveBg = transparentize3(`${c}.200`, 0.24)(theme3);
  return {
    color: mode2(`${c}.600`, `${c}.200`)(props),
    bg: "transparent",
    _hover: {
      bg: mode2(`${c}.50`, darkHoverBg)(props)
    },
    _active: {
      bg: mode2(`${c}.100`, darkActiveBg)(props)
    }
  };
});
var variantOutline6 = defineStyle((props) => {
  const { colorScheme: c } = props;
  const borderColor = mode2(`gray.200`, `whiteAlpha.300`)(props);
  return {
    border: "1px solid",
    borderColor: c === "gray" ? borderColor : "currentColor",
    ".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)": { marginEnd: "-1px" },
    ".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)": { marginBottom: "-1px" },
    ...runIfFn4(variantGhost2, props)
  };
});
var accessibleColorMap2 = {
  yellow: {
    bg: "yellow.400",
    color: "black",
    hoverBg: "yellow.500",
    activeBg: "yellow.600"
  },
  cyan: {
    bg: "cyan.400",
    color: "black",
    hoverBg: "cyan.500",
    activeBg: "cyan.600"
  }
};
var variantSolid6 = defineStyle((props) => {
  var _a40;
  const { colorScheme: c } = props;
  if (c === "gray") {
    const bg2 = mode2(`gray.100`, `whiteAlpha.200`)(props);
    return {
      bg: bg2,
      _hover: {
        bg: mode2(`gray.200`, `whiteAlpha.300`)(props),
        _disabled: {
          bg: bg2
        }
      },
      _active: { bg: mode2(`gray.300`, `whiteAlpha.400`)(props) }
    };
  }
  const {
    bg = `${c}.500`,
    color: color3 = "white",
    hoverBg = `${c}.600`,
    activeBg = `${c}.700`
  } = (_a40 = accessibleColorMap2[c]) != null ? _a40 : {};
  const background2 = mode2(bg, `${c}.200`)(props);
  return {
    bg: background2,
    color: mode2(color3, `gray.800`)(props),
    _hover: {
      bg: mode2(hoverBg, `${c}.300`)(props),
      _disabled: {
        bg: background2
      }
    },
    _active: { bg: mode2(activeBg, `${c}.400`)(props) }
  };
});
var variantLink2 = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    padding: 0,
    height: "auto",
    lineHeight: "normal",
    verticalAlign: "baseline",
    color: mode2(`${c}.500`, `${c}.200`)(props),
    _hover: {
      textDecoration: "underline",
      _disabled: {
        textDecoration: "none"
      }
    },
    _active: {
      color: mode2(`${c}.700`, `${c}.500`)(props)
    }
  };
});
var variantUnstyled6 = defineStyle({
  bg: "none",
  color: "inherit",
  display: "inline",
  lineHeight: "inherit",
  m: "0",
  p: "0"
});
var variants20 = {
  ghost: variantGhost2,
  outline: variantOutline6,
  solid: variantSolid6,
  link: variantLink2,
  unstyled: variantUnstyled6
};
var sizes43 = {
  lg: defineStyle({
    h: "12",
    minW: "12",
    fontSize: "lg",
    px: "6"
  }),
  md: defineStyle({
    h: "10",
    minW: "10",
    fontSize: "md",
    px: "4"
  }),
  sm: defineStyle({
    h: "8",
    minW: "8",
    fontSize: "sm",
    px: "3"
  }),
  xs: defineStyle({
    h: "6",
    minW: "6",
    fontSize: "xs",
    px: "2"
  })
};
var buttonTheme2 = defineStyleConfig({
  baseStyle: baseStyle74,
  variants: variants20,
  sizes: sizes43,
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-PZHBQTKY.mjs
init_shim();
var { definePartsStyle: definePartsStyle47, defineMultiStyleConfig: defineMultiStyleConfig47 } = createMultiStyleConfigHelpers(cardAnatomy.keys);
var $bg27 = cssVar("card-bg");
var $padding2 = cssVar("card-padding");
var $shadow6 = cssVar("card-shadow");
var $radius2 = cssVar("card-radius");
var $border7 = cssVar("card-border-width", "0");
var $borderColor2 = cssVar("card-border-color");
var baseStyle75 = definePartsStyle47({
  container: {
    [$bg27.variable]: "colors.chakra-body-bg",
    backgroundColor: $bg27.reference,
    boxShadow: $shadow6.reference,
    borderRadius: $radius2.reference,
    color: "chakra-body-text",
    borderWidth: $border7.reference,
    borderColor: $borderColor2.reference
  },
  body: {
    padding: $padding2.reference,
    flex: "1 1 0%"
  },
  header: {
    padding: $padding2.reference
  },
  footer: {
    padding: $padding2.reference
  }
});
var sizes44 = {
  sm: definePartsStyle47({
    container: {
      [$radius2.variable]: "radii.base",
      [$padding2.variable]: "space.3"
    }
  }),
  md: definePartsStyle47({
    container: {
      [$radius2.variable]: "radii.md",
      [$padding2.variable]: "space.5"
    }
  }),
  lg: definePartsStyle47({
    container: {
      [$radius2.variable]: "radii.xl",
      [$padding2.variable]: "space.7"
    }
  })
};
var variants21 = {
  elevated: definePartsStyle47({
    container: {
      [$shadow6.variable]: "shadows.base",
      _dark: {
        [$bg27.variable]: "colors.gray.700"
      }
    }
  }),
  outline: definePartsStyle47({
    container: {
      [$border7.variable]: "1px",
      [$borderColor2.variable]: "colors.chakra-border-color"
    }
  }),
  filled: definePartsStyle47({
    container: {
      [$bg27.variable]: "colors.chakra-subtle-bg"
    }
  }),
  unstyled: {
    body: {
      [$padding2.variable]: 0
    },
    header: {
      [$padding2.variable]: 0
    },
    footer: {
      [$padding2.variable]: 0
    }
  }
};
var cardTheme2 = defineMultiStyleConfig47({
  baseStyle: baseStyle75,
  variants: variants21,
  sizes: sizes44,
  defaultProps: {
    variant: "elevated",
    size: "md"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-C4P5PUHY.mjs
init_shim();
var $size6 = cssVar3("close-button-size");
var $bg28 = cssVar3("close-button-bg");
var baseStyle76 = defineStyle({
  w: [$size6.reference],
  h: [$size6.reference],
  borderRadius: "md",
  transitionProperty: "common",
  transitionDuration: "normal",
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    [$bg28.variable]: "colors.blackAlpha.100",
    _dark: {
      [$bg28.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg28.variable]: "colors.blackAlpha.200",
    _dark: {
      [$bg28.variable]: "colors.whiteAlpha.200"
    }
  },
  _focusVisible: {
    boxShadow: "outline"
  },
  bg: $bg28.reference
});
var sizes45 = {
  lg: defineStyle({
    [$size6.variable]: "sizes.10",
    fontSize: "md"
  }),
  md: defineStyle({
    [$size6.variable]: "sizes.8",
    fontSize: "xs"
  }),
  sm: defineStyle({
    [$size6.variable]: "sizes.6",
    fontSize: "2xs"
  })
};
var closeButtonTheme2 = defineStyleConfig({
  baseStyle: baseStyle76,
  sizes: sizes45,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-CAKKPKRW.mjs
init_shim();
var { variants: variants22, defaultProps: defaultProps2 } = badgeTheme2;
var baseStyle77 = defineStyle({
  fontFamily: "mono",
  fontSize: "sm",
  px: "0.2em",
  borderRadius: "sm",
  bg: vars2.bg.reference,
  color: vars2.color.reference,
  boxShadow: vars2.shadow.reference
});
var codeTheme2 = defineStyleConfig({
  baseStyle: baseStyle77,
  variants: variants22,
  defaultProps: defaultProps2
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-NDGGJV23.mjs
init_shim();
var baseStyle78 = defineStyle({
  w: "100%",
  mx: "auto",
  maxW: "prose",
  px: "4"
});
var containerTheme2 = defineStyleConfig({
  baseStyle: baseStyle78
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-5Z4IVOU3.mjs
init_shim();
var baseStyle79 = defineStyle({
  opacity: 0.6,
  borderColor: "inherit"
});
var variantSolid7 = defineStyle({
  borderStyle: "solid"
});
var variantDashed2 = defineStyle({
  borderStyle: "dashed"
});
var variants23 = {
  solid: variantSolid7,
  dashed: variantDashed2
};
var dividerTheme2 = defineStyleConfig({
  baseStyle: baseStyle79,
  variants: variants23,
  defaultProps: {
    variant: "solid"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-T276HDLM.mjs
init_shim();
var { definePartsStyle: definePartsStyle48, defineMultiStyleConfig: defineMultiStyleConfig48 } = createMultiStyleConfigHelpers(accordionAnatomy.keys);
var baseStyleContainer9 = defineStyle({
  borderTopWidth: "1px",
  borderColor: "inherit",
  _last: {
    borderBottomWidth: "1px"
  }
});
var baseStyleButton4 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal",
  fontSize: "md",
  _focusVisible: {
    boxShadow: "outline"
  },
  _hover: {
    bg: "blackAlpha.50"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  px: "4",
  py: "2"
});
var baseStylePanel2 = defineStyle({
  pt: "2",
  px: "4",
  pb: "5"
});
var baseStyleIcon12 = defineStyle({
  fontSize: "1.25em"
});
var baseStyle80 = definePartsStyle48({
  container: baseStyleContainer9,
  button: baseStyleButton4,
  panel: baseStylePanel2,
  icon: baseStyleIcon12
});
var accordionTheme2 = defineMultiStyleConfig48({ baseStyle: baseStyle80 });

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-YOXAUO7A.mjs
init_shim();
var { definePartsStyle: definePartsStyle49, defineMultiStyleConfig: defineMultiStyleConfig49 } = createMultiStyleConfigHelpers(alertAnatomy.keys);
var $fg12 = cssVar("alert-fg");
var $bg29 = cssVar("alert-bg");
var baseStyle81 = definePartsStyle49({
  container: {
    bg: $bg29.reference,
    px: "4",
    py: "3"
  },
  title: {
    fontWeight: "bold",
    lineHeight: "6",
    marginEnd: "2"
  },
  description: {
    lineHeight: "6"
  },
  icon: {
    color: $fg12.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "6"
  },
  spinner: {
    color: $fg12.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "5"
  }
});
function getBg2(props) {
  const { theme: theme3, colorScheme: c } = props;
  const darkBg = transparentize3(`${c}.200`, 0.16)(theme3);
  return {
    light: `colors.${c}.100`,
    dark: darkBg
  };
}
var variantSubtle4 = definePartsStyle49((props) => {
  const { colorScheme: c } = props;
  const bg = getBg2(props);
  return {
    container: {
      [$fg12.variable]: `colors.${c}.500`,
      [$bg29.variable]: bg.light,
      _dark: {
        [$fg12.variable]: `colors.${c}.200`,
        [$bg29.variable]: bg.dark
      }
    }
  };
});
var variantLeftAccent2 = definePartsStyle49((props) => {
  const { colorScheme: c } = props;
  const bg = getBg2(props);
  return {
    container: {
      [$fg12.variable]: `colors.${c}.500`,
      [$bg29.variable]: bg.light,
      _dark: {
        [$fg12.variable]: `colors.${c}.200`,
        [$bg29.variable]: bg.dark
      },
      paddingStart: "3",
      borderStartWidth: "4px",
      borderStartColor: $fg12.reference
    }
  };
});
var variantTopAccent2 = definePartsStyle49((props) => {
  const { colorScheme: c } = props;
  const bg = getBg2(props);
  return {
    container: {
      [$fg12.variable]: `colors.${c}.500`,
      [$bg29.variable]: bg.light,
      _dark: {
        [$fg12.variable]: `colors.${c}.200`,
        [$bg29.variable]: bg.dark
      },
      pt: "2",
      borderTopWidth: "4px",
      borderTopColor: $fg12.reference
    }
  };
});
var variantSolid8 = definePartsStyle49((props) => {
  const { colorScheme: c } = props;
  return {
    container: {
      [$fg12.variable]: `colors.white`,
      [$bg29.variable]: `colors.${c}.500`,
      _dark: {
        [$fg12.variable]: `colors.gray.900`,
        [$bg29.variable]: `colors.${c}.200`
      },
      color: $fg12.reference
    }
  };
});
var variants24 = {
  subtle: variantSubtle4,
  "left-accent": variantLeftAccent2,
  "top-accent": variantTopAccent2,
  solid: variantSolid8
};
var alertTheme2 = defineMultiStyleConfig49({
  baseStyle: baseStyle81,
  variants: variants24,
  defaultProps: {
    variant: "subtle",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-O7XTKHT6.mjs
init_shim();
var { definePartsStyle: definePartsStyle50, defineMultiStyleConfig: defineMultiStyleConfig50 } = createMultiStyleConfigHelpers(avatarAnatomy.keys);
var $border8 = cssVar("avatar-border-color");
var $bg30 = cssVar("avatar-bg");
var baseStyleBadge2 = defineStyle({
  borderRadius: "full",
  border: "0.2em solid",
  [$border8.variable]: "white",
  _dark: {
    [$border8.variable]: "colors.gray.800"
  },
  borderColor: $border8.reference
});
var baseStyleExcessLabel2 = defineStyle({
  [$bg30.variable]: "colors.gray.200",
  _dark: {
    [$bg30.variable]: "colors.whiteAlpha.400"
  },
  bgColor: $bg30.reference
});
var $avatarBg2 = cssVar("avatar-background");
var baseStyleContainer10 = defineStyle((props) => {
  const { name, theme: theme3 } = props;
  const bg = name ? randomColor2({ string: name }) : "colors.gray.400";
  const isBgDark = isDark2(bg)(theme3);
  let color3 = "white";
  if (!isBgDark)
    color3 = "gray.800";
  return {
    bg: $avatarBg2.reference,
    "&:not([data-loaded])": {
      [$avatarBg2.variable]: bg
    },
    color: color3,
    [$border8.variable]: "colors.white",
    _dark: {
      [$border8.variable]: "colors.gray.800"
    },
    borderColor: $border8.reference,
    verticalAlign: "top"
  };
});
var baseStyle82 = definePartsStyle50((props) => ({
  badge: runIfFn4(baseStyleBadge2, props),
  excessLabel: runIfFn4(baseStyleExcessLabel2, props),
  container: runIfFn4(baseStyleContainer10, props)
}));
function getSize8(size3) {
  const themeSize = size3 !== "100%" ? sizes_default2[size3] : void 0;
  return definePartsStyle50({
    container: {
      width: size3,
      height: size3,
      fontSize: `calc(${themeSize != null ? themeSize : size3} / 2.5)`
    },
    excessLabel: {
      width: size3,
      height: size3
    },
    label: {
      fontSize: `calc(${themeSize != null ? themeSize : size3} / 2.5)`,
      lineHeight: size3 !== "100%" ? themeSize != null ? themeSize : size3 : void 0
    }
  });
}
var sizes46 = {
  "2xs": getSize8(4),
  xs: getSize8(6),
  sm: getSize8(8),
  md: getSize8(12),
  lg: getSize8(16),
  xl: getSize8(24),
  "2xl": getSize8(32),
  full: getSize8("100%")
};
var avatarTheme2 = defineMultiStyleConfig50({
  baseStyle: baseStyle82,
  sizes: sizes46,
  defaultProps: { size: "md" }
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-EO2YJNI2.mjs
var components2 = {
  Accordion: accordionTheme2,
  Alert: alertTheme2,
  Avatar: avatarTheme2,
  Badge: badgeTheme2,
  Breadcrumb: breadcrumbTheme2,
  Button: buttonTheme2,
  Checkbox: checkboxTheme2,
  CloseButton: closeButtonTheme2,
  Code: codeTheme2,
  Container: containerTheme2,
  Divider: dividerTheme2,
  Drawer: drawerTheme2,
  Editable: editableTheme2,
  Form: formTheme2,
  FormError: formErrorTheme2,
  FormLabel: formLabelTheme2,
  Heading: headingTheme2,
  Input: inputTheme2,
  Kbd: kbdTheme2,
  Link: linkTheme2,
  List: listTheme2,
  Menu: menuTheme2,
  Modal: modalTheme2,
  NumberInput: numberInputTheme2,
  PinInput: pinInputTheme2,
  Popover: popoverTheme2,
  Progress: progressTheme2,
  Radio: radioTheme2,
  Select: selectTheme2,
  Skeleton: skeletonTheme2,
  SkipLink: skipLinkTheme2,
  Slider: sliderTheme2,
  Spinner: spinnerTheme2,
  Stat: statTheme2,
  Switch: switchTheme2,
  Table: tableTheme2,
  Tabs: tabsTheme2,
  Tag: tagTheme2,
  Textarea: textareaTheme2,
  Tooltip: tooltipTheme2,
  Card: cardTheme2
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-HZX2OI7F.mjs
init_shim();
var semanticTokens2 = {
  colors: {
    "chakra-body-text": { _light: "gray.800", _dark: "whiteAlpha.900" },
    "chakra-body-bg": { _light: "white", _dark: "gray.800" },
    "chakra-border-color": { _light: "gray.200", _dark: "whiteAlpha.300" },
    "chakra-subtle-bg": { _light: "gray.100", _dark: "gray.700" },
    "chakra-placeholder-color": { _light: "gray.500", _dark: "whiteAlpha.400" }
  }
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-VHIIIDDT.mjs
init_shim();
var styles2 = {
  global: {
    body: {
      fontFamily: "body",
      color: "chakra-body-text",
      bg: "chakra-body-bg",
      transitionProperty: "background-color",
      transitionDuration: "normal",
      lineHeight: "base"
    },
    "*::placeholder": {
      color: "chakra-placeholder-color"
    },
    "*, *::before, &::after": {
      borderColor: "chakra-border-color"
    }
  }
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/chunk-RT7D5LFX.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/theme/dist/index.mjs
var direction2 = "ltr";
var config2 = {
  useSystemColorMode: false,
  initialColorMode: "light",
  cssVarPrefix: "chakra"
};
var theme2 = {
  semanticTokens: semanticTokens2,
  direction: direction2,
  ...foundations2,
  components: components2,
  styles: styles2,
  config: config2
};
var src_default = theme2;
var baseTheme2 = {
  semanticTokens: semanticTokens2,
  direction: direction2,
  components: {},
  ...foundations2,
  styles: styles2,
  config: config2
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-7FYWZXXG.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-D3Z6CXO7.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-GQXYYJJJ.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-LQP773TK.mjs
init_shim();
var findById = (arr, id4) => arr.find((toast) => toast.id === id4);
function findToast(toasts, id4) {
  const position2 = getToastPosition(toasts, id4);
  const index = position2 ? toasts[position2].findIndex((toast) => toast.id === id4) : -1;
  return {
    position: position2,
    index
  };
}
function getToastPosition(toasts, id4) {
  for (const [position2, values] of Object.entries(toasts)) {
    if (findById(values, id4)) {
      return position2;
    }
  }
}
function getToastStyle(position2) {
  const isRighty = position2.includes("right");
  const isLefty = position2.includes("left");
  let alignItems = "center";
  if (isRighty)
    alignItems = "flex-end";
  if (isLefty)
    alignItems = "flex-start";
  return {
    display: "flex",
    flexDirection: "column",
    alignItems
  };
}
function getToastListStyle(position2) {
  const isTopOrBottom = position2 === "top" || position2 === "bottom";
  const margin = isTopOrBottom ? "0 auto" : void 0;
  const top = position2.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
  const bottom = position2.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
  const right = !position2.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
  const left = !position2.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
  return {
    position: "fixed",
    zIndex: "var(--toast-z-index, 5500)",
    pointerEvents: "none",
    display: "flex",
    flexDirection: "column",
    margin,
    top,
    bottom,
    right,
    left
  };
}

// node_modules/@chakra-ui/react-use-timeout/dist/index.mjs
init_shim();
var import_react19 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/react-use-callback-ref/dist/index.mjs
init_shim();
var import_react18 = __toESM(require_react(), 1);
function useCallbackRef(callback, deps = []) {
  const callbackRef = (0, import_react18.useRef)(callback);
  (0, import_react18.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react18.useCallback)((...args) => {
    var _a40;
    return (_a40 = callbackRef.current) == null ? void 0 : _a40.call(callbackRef, ...args);
  }, deps);
}

// node_modules/@chakra-ui/react-use-timeout/dist/index.mjs
function useTimeout(callback, delay2) {
  const fn = useCallbackRef(callback);
  (0, import_react19.useEffect)(() => {
    if (delay2 == null)
      return void 0;
    let timeoutId = null;
    timeoutId = window.setTimeout(() => {
      fn();
    }, delay2);
    return () => {
      if (timeoutId) {
        window.clearTimeout(timeoutId);
      }
    };
  }, [delay2, fn]);
}

// node_modules/@chakra-ui/react-use-update-effect/dist/index.mjs
init_shim();
var import_react20 = __toESM(require_react(), 1);
function useUpdateEffect(callback, deps) {
  const renderCycleRef = (0, import_react20.useRef)(false);
  const effectCycleRef = (0, import_react20.useRef)(false);
  (0, import_react20.useEffect)(() => {
    const mounted = renderCycleRef.current;
    const run = mounted && effectCycleRef.current;
    if (run) {
      return callback();
    }
    effectCycleRef.current = true;
  }, deps);
  (0, import_react20.useEffect)(() => {
    renderCycleRef.current = true;
    return () => {
      renderCycleRef.current = false;
    };
  }, []);
}

// node_modules/framer-motion/dist/es/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/motion.mjs
init_shim();

// node_modules/framer-motion/dist/es/motion/index.mjs
init_shim();
var React2 = __toESM(require_react(), 1);
var import_react32 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
init_shim();
var import_react21 = __toESM(require_react(), 1);
var MotionConfigContext = (0, import_react21.createContext)({
  transformPagePoint: (p) => p,
  isStatic: false,
  reducedMotion: "never"
});

// node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
init_shim();
var import_react22 = __toESM(require_react(), 1);
var MotionContext = (0, import_react22.createContext)({});

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
init_shim();
var import_react26 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/PresenceContext.mjs
init_shim();
var import_react23 = __toESM(require_react(), 1);
var PresenceContext = (0, import_react23.createContext)(null);

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
init_shim();
var import_react24 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/is-browser.mjs
init_shim();
var isBrowser2 = typeof document !== "undefined";

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var useIsomorphicLayoutEffect = isBrowser2 ? import_react24.useLayoutEffect : import_react24.useEffect;

// node_modules/framer-motion/dist/es/context/LazyContext.mjs
init_shim();
var import_react25 = __toESM(require_react(), 1);
var LazyContext = (0, import_react25.createContext)({ strict: false });

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
function useVisualElement(Component2, visualState, props, createVisualElement2) {
  const { visualElement: parent } = (0, import_react26.useContext)(MotionContext);
  const lazyContext = (0, import_react26.useContext)(LazyContext);
  const presenceContext = (0, import_react26.useContext)(PresenceContext);
  const reducedMotionConfig = (0, import_react26.useContext)(MotionConfigContext).reducedMotion;
  const visualElementRef = (0, import_react26.useRef)();
  createVisualElement2 = createVisualElement2 || lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement2) {
    visualElementRef.current = createVisualElement2(Component2, {
      visualState,
      parent,
      props,
      presenceContext,
      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
      reducedMotionConfig
    });
  }
  const visualElement = visualElementRef.current;
  (0, import_react26.useInsertionEffect)(() => {
    visualElement && visualElement.update(props, presenceContext);
  });
  useIsomorphicLayoutEffect(() => {
    visualElement && visualElement.render();
  });
  (0, import_react26.useEffect)(() => {
    visualElement && visualElement.updateFeatures();
  });
  const useAnimateChangesEffect = window.HandoffAppearAnimations ? useIsomorphicLayoutEffect : import_react26.useEffect;
  useAnimateChangesEffect(() => {
    if (visualElement && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
  });
  return visualElement;
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
init_shim();
var import_react27 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
init_shim();
function isRefObject2(ref) {
  return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
function useMotionRef(visualState, visualElement, externalRef) {
  return (0, import_react27.useCallback)(
    (instance) => {
      instance && visualState.mount && visualState.mount(instance);
      if (visualElement) {
        instance ? visualElement.mount(instance) : visualElement.unmount();
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject2(externalRef)) {
          externalRef.current = instance;
        }
      }
    },
    [visualElement]
  );
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
init_shim();
var import_react28 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs
init_shim();
function isVariantLabel(v) {
  return typeof v === "string" || Array.isArray(v);
}

// node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
init_shim();
function isAnimationControls(v) {
  return typeof v === "object" && typeof v.start === "function";
}

// node_modules/framer-motion/dist/es/render/utils/variant-props.mjs
init_shim();
var variantPriorityOrder = [
  "animate",
  "whileInView",
  "whileFocus",
  "whileHover",
  "whileTap",
  "whileDrag",
  "exit"
];
var variantProps = ["initial", ...variantPriorityOrder];

// node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
function isControllingVariants(props) {
  return isAnimationControls(props.animate) || variantProps.some((name) => isVariantLabel(props[name]));
}
function isVariantNode(props) {
  return Boolean(isControllingVariants(props) || props.variants);
}

// node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
function getCurrentTreeVariants(props, context) {
  if (isControllingVariants(props)) {
    const { initial, animate: animate2 } = props;
    return {
      initial: initial === false || isVariantLabel(initial) ? initial : void 0,
      animate: isVariantLabel(animate2) ? animate2 : void 0
    };
  }
  return props.inherit !== false ? context : {};
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
function useCreateMotionContext(props) {
  const { initial, animate: animate2 } = getCurrentTreeVariants(props, (0, import_react28.useContext)(MotionContext));
  return (0, import_react28.useMemo)(() => ({ initial, animate: animate2 }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate2)]);
}
function variantLabelsAsDependency(prop) {
  return Array.isArray(prop) ? prop.join(" ") : prop;
}

// node_modules/framer-motion/dist/es/motion/features/load-features.mjs
init_shim();

// node_modules/framer-motion/dist/es/motion/features/definitions.mjs
init_shim();
var featureProps = {
  animation: [
    "animate",
    "variants",
    "whileHover",
    "whileTap",
    "exit",
    "whileInView",
    "whileFocus",
    "whileDrag"
  ],
  exit: ["exit"],
  drag: ["drag", "dragControls"],
  focus: ["whileFocus"],
  hover: ["whileHover", "onHoverStart", "onHoverEnd"],
  tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
  pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
  inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
  layout: ["layout", "layoutId"]
};
var featureDefinitions = {};
for (const key in featureProps) {
  featureDefinitions[key] = {
    isEnabled: (props) => featureProps[key].some((name) => !!props[name])
  };
}

// node_modules/framer-motion/dist/es/motion/features/load-features.mjs
function loadFeatures(features) {
  for (const key in features) {
    featureDefinitions[key] = {
      ...featureDefinitions[key],
      ...features[key]
    };
  }
}

// node_modules/framer-motion/dist/es/projection/node/id.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/use-constant.mjs
init_shim();
var import_react29 = __toESM(require_react(), 1);
function useConstant(init) {
  const ref = (0, import_react29.useRef)(null);
  if (ref.current === null) {
    ref.current = init();
  }
  return ref.current;
}

// node_modules/framer-motion/dist/es/projection/node/state.mjs
init_shim();
var globalProjectionState = {
  hasAnimatedSinceResize: true,
  hasEverUpdated: false
};

// node_modules/framer-motion/dist/es/projection/node/id.mjs
var id = 1;
function useProjectionId() {
  return useConstant(() => {
    if (globalProjectionState.hasEverUpdated) {
      return id++;
    }
  });
}

// node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
init_shim();
var import_react30 = __toESM(require_react(), 1);
var LayoutGroupContext = (0, import_react30.createContext)({});

// node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
init_shim();
var import_react31 = __toESM(require_react(), 1);
var SwitchLayoutGroupContext = (0, import_react31.createContext)({});

// node_modules/framer-motion/dist/es/motion/utils/symbol.mjs
init_shim();
var motionComponentSymbol = Symbol.for("motionComponentSymbol");

// node_modules/framer-motion/dist/es/motion/index.mjs
function createMotionComponent({ preloadedFeatures: preloadedFeatures2, createVisualElement: createVisualElement2, useRender, useVisualState: useVisualState2, Component: Component2 }) {
  preloadedFeatures2 && loadFeatures(preloadedFeatures2);
  function MotionComponent(props, externalRef) {
    let MeasureLayout2;
    const configAndProps = {
      ...(0, import_react32.useContext)(MotionConfigContext),
      ...props,
      layoutId: useLayoutId(props)
    };
    const { isStatic } = configAndProps;
    const context = useCreateMotionContext(props);
    const projectionId = isStatic ? void 0 : useProjectionId();
    const visualState = useVisualState2(props, isStatic);
    if (!isStatic && isBrowser2) {
      context.visualElement = useVisualElement(Component2, visualState, configAndProps, createVisualElement2);
      const initialLayoutGroupConfig = (0, import_react32.useContext)(SwitchLayoutGroupContext);
      const isStrict = (0, import_react32.useContext)(LazyContext).strict;
      if (context.visualElement) {
        MeasureLayout2 = context.visualElement.loadFeatures(
          configAndProps,
          isStrict,
          preloadedFeatures2,
          projectionId,
          initialLayoutGroupConfig
        );
      }
    }
    return React2.createElement(
      MotionContext.Provider,
      { value: context },
      MeasureLayout2 && context.visualElement ? React2.createElement(MeasureLayout2, { visualElement: context.visualElement, ...configAndProps }) : null,
      useRender(Component2, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)
    );
  }
  const ForwardRefComponent = (0, import_react32.forwardRef)(MotionComponent);
  ForwardRefComponent[motionComponentSymbol] = Component2;
  return ForwardRefComponent;
}
function useLayoutId({ layoutId }) {
  const layoutGroupId = (0, import_react32.useContext)(LayoutGroupContext).id;
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}

// node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
init_shim();
function createMotionProxy(createConfig) {
  function custom(Component2, customMotionComponentConfig = {}) {
    return createMotionComponent(createConfig(Component2, customMotionComponentConfig));
  }
  if (typeof Proxy === "undefined") {
    return custom;
  }
  const componentCache = /* @__PURE__ */ new Map();
  return new Proxy(custom, {
    get: (_target, key) => {
      if (!componentCache.has(key)) {
        componentCache.set(key, custom(key));
      }
      return componentCache.get(key);
    }
  });
}

// node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
init_shim();
var lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "switch",
  "symbol",
  "svg",
  "text",
  "tspan",
  "use",
  "view"
];

// node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
function isSVGComponent(Component2) {
  if (typeof Component2 !== "string" || Component2.includes("-")) {
    return false;
  } else if (lowercaseSVGElements.indexOf(Component2) > -1 || /[A-Z]/.test(Component2)) {
    return true;
  }
  return false;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.mjs
init_shim();
var import_react35 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/html/use-props.mjs
init_shim();
var import_react33 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
init_shim();

// node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
init_shim();
var scaleCorrectors = {};
function addScaleCorrector(correctors) {
  Object.assign(scaleCorrectors, correctors);
}

// node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
init_shim();
var transformPropOrder = [
  "transformPerspective",
  "x",
  "y",
  "z",
  "translateX",
  "translateY",
  "translateZ",
  "scale",
  "scaleX",
  "scaleY",
  "rotate",
  "rotateX",
  "rotateY",
  "rotateZ",
  "skew",
  "skewX",
  "skewY"
];
var transformProps = new Set(transformPropOrder);

// node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
function isForcedMotionValue(key, { layout: layout3, layoutId }) {
  return transformProps.has(key) || key.startsWith("origin") || (layout3 || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
}

// node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
init_shim();
var isMotionValue = (value) => Boolean(value && value.getVelocity);

// node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
init_shim();
var translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
};
var numTransforms = transformPropOrder.length;
function buildTransform(transform3, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate2) {
  let transformString = "";
  for (let i = 0; i < numTransforms; i++) {
    const key = transformPropOrder[i];
    if (transform3[key] !== void 0) {
      const transformName = translateAlias[key] || key;
      transformString += `${transformName}(${transform3[key]}) `;
    }
  }
  if (enableHardwareAcceleration && !transform3.z) {
    transformString += "translateZ(0)";
  }
  transformString = transformString.trim();
  if (transformTemplate2) {
    transformString = transformTemplate2(transform3, transformIsDefault ? "" : transformString);
  } else if (allowTransformNone && transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}

// node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
init_shim();
var checkStringStartsWith = (token) => (key) => typeof key === "string" && key.startsWith(token);
var isCSSVariableName = checkStringStartsWith("--");
var isCSSVariableToken = checkStringStartsWith("var(--");
var cssVariableRegex = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g;

// node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
init_shim();
var getValueAsType = (value, type) => {
  return type && typeof value === "number" ? type.transform(value) : value;
};

// node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/clamp.mjs
init_shim();
var clamp = (min, max, v) => Math.min(Math.max(v, min), max);

// node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
var number = {
  test: (v) => typeof v === "number",
  parse: parseFloat,
  transform: (v) => v
};
var alpha = {
  ...number,
  transform: (v) => clamp(0, 1, v)
};
var scale = {
  ...number,
  default: 1
};

// node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/types/utils.mjs
init_shim();
var sanitize = (v) => Math.round(v * 1e5) / 1e5;
var floatRegex = /(-)?([\d]*\.?[\d])+/g;
var colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
var singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
function isString2(v) {
  return typeof v === "string";
}

// node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
var createUnitType = (unit) => ({
  test: (v) => isString2(v) && v.endsWith(unit) && v.split(" ").length === 1,
  parse: parseFloat,
  transform: (v) => `${v}${unit}`
});
var degrees = createUnitType("deg");
var percent = createUnitType("%");
var px3 = createUnitType("px");
var vh = createUnitType("vh");
var vw = createUnitType("vw");
var progressPercentage = {
  ...percent,
  parse: (v) => percent.parse(v) / 100,
  transform: (v) => percent.transform(v * 100)
};

// node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
init_shim();
var int = {
  ...number,
  transform: Math.round
};

// node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
var numberValueTypes = {
  borderWidth: px3,
  borderTopWidth: px3,
  borderRightWidth: px3,
  borderBottomWidth: px3,
  borderLeftWidth: px3,
  borderRadius: px3,
  radius: px3,
  borderTopLeftRadius: px3,
  borderTopRightRadius: px3,
  borderBottomRightRadius: px3,
  borderBottomLeftRadius: px3,
  width: px3,
  maxWidth: px3,
  height: px3,
  maxHeight: px3,
  size: px3,
  top: px3,
  right: px3,
  bottom: px3,
  left: px3,
  padding: px3,
  paddingTop: px3,
  paddingRight: px3,
  paddingBottom: px3,
  paddingLeft: px3,
  margin: px3,
  marginTop: px3,
  marginRight: px3,
  marginBottom: px3,
  marginLeft: px3,
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px3,
  translateX: px3,
  translateY: px3,
  translateZ: px3,
  x: px3,
  y: px3,
  z: px3,
  perspective: px3,
  transformPerspective: px3,
  opacity: alpha,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px3,
  zIndex: int,
  fillOpacity: alpha,
  strokeOpacity: alpha,
  numOctaves: int
};

// node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
function buildHTMLStyles(state2, latestValues, options, transformTemplate2) {
  const { style, vars: vars3, transform: transform3, transformOrigin: transformOrigin4 } = state2;
  let hasTransform2 = false;
  let hasTransformOrigin = false;
  let transformIsNone = true;
  for (const key in latestValues) {
    const value = latestValues[key];
    if (isCSSVariableName(key)) {
      vars3[key] = value;
      continue;
    }
    const valueType = numberValueTypes[key];
    const valueAsType = getValueAsType(value, valueType);
    if (transformProps.has(key)) {
      hasTransform2 = true;
      transform3[key] = valueAsType;
      if (!transformIsNone)
        continue;
      if (value !== (valueType.default || 0))
        transformIsNone = false;
    } else if (key.startsWith("origin")) {
      hasTransformOrigin = true;
      transformOrigin4[key] = valueAsType;
    } else {
      style[key] = valueAsType;
    }
  }
  if (!latestValues.transform) {
    if (hasTransform2 || transformTemplate2) {
      style.transform = buildTransform(state2.transform, options, transformIsNone, transformTemplate2);
    } else if (style.transform) {
      style.transform = "none";
    }
  }
  if (hasTransformOrigin) {
    const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin4;
    style.transformOrigin = `${originX} ${originY} ${originZ}`;
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
init_shim();
var createHtmlRenderState = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {}
});

// node_modules/framer-motion/dist/es/render/html/use-props.mjs
function copyRawValuesOnly(target, source, props) {
  for (const key in source) {
    if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
      target[key] = source[key];
    }
  }
}
function useInitialMotionValues({ transformTemplate: transformTemplate2 }, visualState, isStatic) {
  return (0, import_react33.useMemo)(() => {
    const state2 = createHtmlRenderState();
    buildHTMLStyles(state2, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate2);
    return Object.assign({}, state2.vars, state2.style);
  }, [visualState]);
}
function useStyle(props, visualState, isStatic) {
  const styleProp = props.style || {};
  const style = {};
  copyRawValuesOnly(style, styleProp, props);
  Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
  return props.transformValues ? props.transformValues(style) : style;
}
function useHTMLProps(props, visualState, isStatic) {
  const htmlProps = {};
  const style = useStyle(props, visualState, isStatic);
  if (props.drag && props.dragListener !== false) {
    htmlProps.draggable = false;
    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
    style.touchAction = props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
  }
  if (props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap)) {
    htmlProps.tabIndex = 0;
  }
  htmlProps.style = style;
  return htmlProps;
}

// node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
init_shim();

// node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
init_shim();
var validMotionProps = /* @__PURE__ */ new Set([
  "animate",
  "exit",
  "variants",
  "initial",
  "style",
  "values",
  "variants",
  "transition",
  "transformTemplate",
  "transformValues",
  "custom",
  "inherit",
  "onLayoutAnimationStart",
  "onLayoutAnimationComplete",
  "onLayoutMeasure",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "_dragX",
  "_dragY",
  "onHoverStart",
  "onHoverEnd",
  "onViewportEnter",
  "onViewportLeave",
  "ignoreStrict",
  "viewport"
]);
function isValidMotionProp(key) {
  return key.startsWith("while") || key.startsWith("drag") && key !== "draggable" || key.startsWith("layout") || key.startsWith("onTap") || key.startsWith("onPan") || validMotionProps.has(key);
}

// node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
var shouldForward = (key) => !isValidMotionProp(key);
function loadExternalIsValidProp(isValidProp) {
  if (!isValidProp)
    return;
  shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
}
try {
  loadExternalIsValidProp((init_is_prop_valid_browser_esm(), __toCommonJS(is_prop_valid_browser_esm_exports)).default);
} catch (_a40) {
}
function filterProps(props, isDom2, forwardMotionProps) {
  const filteredProps = {};
  for (const key in props) {
    if (key === "values" && typeof props.values === "object")
      continue;
    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom2 && !isValidMotionProp(key) || props["draggable"] && key.startsWith("onDrag")) {
      filteredProps[key] = props[key];
    }
  }
  return filteredProps;
}

// node_modules/framer-motion/dist/es/render/svg/use-props.mjs
init_shim();
var import_react34 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
init_shim();
function calcOrigin(origin, offset, size3) {
  return typeof origin === "string" ? origin : px3.transform(offset + size3 * origin);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
  const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
  return `${pxOriginX} ${pxOriginY}`;
}

// node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
init_shim();
var dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
};
var camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath(attrs, length, spacing3 = 1, offset = 0, useDashCase = true) {
  attrs.pathLength = 1;
  const keys2 = useDashCase ? dashKeys : camelKeys;
  attrs[keys2.offset] = px3.transform(-offset);
  const pathLength = px3.transform(length);
  const pathSpacing = px3.transform(spacing3);
  attrs[keys2.array] = `${pathLength} ${pathSpacing}`;
}

// node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
function buildSVGAttrs(state2, {
  attrX,
  attrY,
  attrScale,
  originX,
  originY,
  pathLength,
  pathSpacing = 1,
  pathOffset = 0,
  ...latest
}, options, isSVGTag2, transformTemplate2) {
  buildHTMLStyles(state2, latest, options, transformTemplate2);
  if (isSVGTag2) {
    if (state2.style.viewBox) {
      state2.attrs.viewBox = state2.style.viewBox;
    }
    return;
  }
  state2.attrs = state2.style;
  state2.style = {};
  const { attrs, style, dimensions } = state2;
  if (attrs.transform) {
    if (dimensions)
      style.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (attrScale !== void 0)
    attrs.scale = attrScale;
  if (pathLength !== void 0) {
    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
init_shim();
var createSvgRenderState = () => ({
  ...createHtmlRenderState(),
  attrs: {}
});

// node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs
init_shim();
var isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";

// node_modules/framer-motion/dist/es/render/svg/use-props.mjs
function useSVGProps(props, visualState, _isStatic, Component2) {
  const visualProps = (0, import_react34.useMemo)(() => {
    const state2 = createSvgRenderState();
    buildSVGAttrs(state2, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component2), props.transformTemplate);
    return {
      ...state2.attrs,
      style: { ...state2.style }
    };
  }, [visualState]);
  if (props.style) {
    const rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props);
    visualProps.style = { ...rawStyles, ...visualProps.style };
  }
  return visualProps;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.mjs
function createUseRender(forwardMotionProps = false) {
  const useRender = (Component2, props, projectionId, ref, { latestValues }, isStatic) => {
    const useVisualProps = isSVGComponent(Component2) ? useSVGProps : useHTMLProps;
    const visualProps = useVisualProps(props, latestValues, isStatic, Component2);
    const filteredProps = filterProps(props, typeof Component2 === "string", forwardMotionProps);
    const elementProps = {
      ...filteredProps,
      ...visualProps,
      ref
    };
    const { children } = props;
    const renderedChildren = (0, import_react35.useMemo)(() => isMotionValue(children) ? children.get() : children, [children]);
    if (projectionId) {
      elementProps["data-projection-id"] = projectionId;
    }
    return (0, import_react35.createElement)(Component2, {
      ...elementProps,
      children: renderedChildren
    });
  };
  return useRender;
}

// node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
init_shim();
var camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

// node_modules/framer-motion/dist/es/render/html/utils/render.mjs
init_shim();
function renderHTML(element, { style, vars: vars3 }, styleProp, projection) {
  Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
  for (const key in vars3) {
    element.style.setProperty(key, vars3[key]);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
init_shim();
var camelCaseAttributes = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
  "startOffset",
  "textLength",
  "lengthAdjust"
]);

// node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
function renderSVG(element, renderState, _styleProp, projection) {
  renderHTML(element, renderState, void 0, projection);
  for (const key in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
init_shim();
function scrapeMotionValuesFromProps(props, prevProps) {
  const { style } = props;
  const newValues = {};
  for (const key in style) {
    if (isMotionValue(style[key]) || prevProps.style && isMotionValue(prevProps.style[key]) || isForcedMotionValue(key, props)) {
      newValues[key] = style[key];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps2(props, prevProps) {
  const newValues = scrapeMotionValuesFromProps(props, prevProps);
  for (const key in props) {
    if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {
      const targetKey = transformPropOrder.indexOf(key) !== -1 ? "attr" + key.charAt(0).toUpperCase() + key.substring(1) : key;
      newValues[targetKey] = props[key];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
init_shim();
var import_react36 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs
init_shim();
function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {
  if (typeof definition === "function") {
    definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
  }
  if (typeof definition === "string") {
    definition = props.variants && props.variants[definition];
  }
  if (typeof definition === "function") {
    definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
  }
  return definition;
}

// node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/resolve-value.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
init_shim();
var isKeyframesTarget = (v) => {
  return Array.isArray(v);
};

// node_modules/framer-motion/dist/es/utils/resolve-value.mjs
var isCustomValue = (v) => {
  return Boolean(v && typeof v === "object" && v.mix && v.toValue);
};
var resolveFinalValueInKeyframes = (v) => {
  return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
};

// node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
function resolveMotionValue(value) {
  const unwrappedValue = isMotionValue(value) ? value.get() : value;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
function makeState({ scrapeMotionValuesFromProps: scrapeMotionValuesFromProps3, createRenderState, onMount }, props, context, presenceContext) {
  const state2 = {
    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
    renderState: createRenderState()
  };
  if (onMount) {
    state2.mount = (instance) => onMount(props, instance, state2);
  }
  return state2;
}
var makeUseVisualState = (config3) => (props, isStatic) => {
  const context = (0, import_react36.useContext)(MotionContext);
  const presenceContext = (0, import_react36.useContext)(PresenceContext);
  const make = () => makeState(config3, props, context, presenceContext);
  return isStatic ? make() : useConstant(make);
};
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
  const values = {};
  const motionValues = scrapeMotionValues(props, {});
  for (const key in motionValues) {
    values[key] = resolveMotionValue(motionValues[key]);
  }
  let { initial, animate: animate2 } = props;
  const isControllingVariants$1 = isControllingVariants(props);
  const isVariantNode$1 = isVariantNode(props);
  if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {
    if (initial === void 0)
      initial = context.initial;
    if (animate2 === void 0)
      animate2 = context.animate;
  }
  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
  const variantToSet = isInitialAnimationBlocked ? animate2 : initial;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
    const list2 = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    list2.forEach((definition) => {
      const resolved = resolveVariantFromProps(props, definition);
      if (!resolved)
        return;
      const { transitionEnd, transition: transition4, ...target } = resolved;
      for (const key in target) {
        let valueTarget = target[key];
        if (Array.isArray(valueTarget)) {
          const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
          valueTarget = valueTarget[index];
        }
        if (valueTarget !== null) {
          values[key] = valueTarget;
        }
      }
      for (const key in transitionEnd)
        values[key] = transitionEnd[key];
    });
  }
  return values;
}

// node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
var svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
    createRenderState: createSvgRenderState,
    onMount: (props, instance, { renderState, latestValues }) => {
      try {
        renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
      } catch (e) {
        renderState.dimensions = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      }
      buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);
      renderSVG(instance, renderState);
    }
  })
};

// node_modules/framer-motion/dist/es/render/html/config-motion.mjs
init_shim();
var htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createHtmlRenderState
  })
};

// node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
function createDomMotionConfig(Component2, { forwardMotionProps = false }, preloadedFeatures2, createVisualElement2) {
  const baseConfig = isSVGComponent(Component2) ? svgMotionConfig : htmlMotionConfig;
  return {
    ...baseConfig,
    preloadedFeatures: preloadedFeatures2,
    useRender: createUseRender(forwardMotionProps),
    createVisualElement: createVisualElement2,
    Component: Component2
  };
}

// node_modules/framer-motion/dist/es/motion/features/gestures.mjs
init_shim();

// node_modules/framer-motion/dist/es/gestures/hover.mjs
init_shim();

// node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
init_shim();

// node_modules/framer-motion/dist/es/events/add-dom-event.mjs
init_shim();
function addDomEvent2(target, eventName, handler, options = { passive: true }) {
  target.addEventListener(eventName, handler, options);
  return () => target.removeEventListener(eventName, handler);
}

// node_modules/framer-motion/dist/es/events/event-info.mjs
init_shim();

// node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs
init_shim();
var isPrimaryPointer = (event) => {
  if (event.pointerType === "mouse") {
    return typeof event.button !== "number" || event.button <= 0;
  } else {
    return event.isPrimary !== false;
  }
};

// node_modules/framer-motion/dist/es/events/event-info.mjs
function extractEventInfo2(event, pointType = "page") {
  return {
    point: {
      x: event[pointType + "X"],
      y: event[pointType + "Y"]
    }
  };
}
var addPointerInfo = (handler) => {
  return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo2(event));
};

// node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
function addPointerEvent2(target, eventName, handler, options) {
  return addDomEvent2(target, eventName, addPointerInfo(handler), options);
}

// node_modules/framer-motion/dist/es/utils/pipe.mjs
init_shim();
var combineFunctions = (a, b) => (v) => b(a(v));
var pipe5 = (...transformers) => transformers.reduce(combineFunctions);

// node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
init_shim();
function createLock(name) {
  let lock = null;
  return () => {
    const openLock = () => {
      lock = null;
    };
    if (lock === null) {
      lock = name;
      return openLock;
    }
    return false;
  };
}
var globalHorizontalLock = createLock("dragHorizontal");
var globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag2) {
  let lock = false;
  if (drag2 === "y") {
    lock = globalVerticalLock();
  } else if (drag2 === "x") {
    lock = globalHorizontalLock();
  } else {
    const openHorizontal = globalHorizontalLock();
    const openVertical = globalVerticalLock();
    if (openHorizontal && openVertical) {
      lock = () => {
        openHorizontal();
        openVertical();
      };
    } else {
      if (openHorizontal)
        openHorizontal();
      if (openVertical)
        openVertical();
    }
  }
  return lock;
}
function isDragActive() {
  const openGestureLock = getGlobalLock(true);
  if (!openGestureLock)
    return true;
  openGestureLock();
  return false;
}

// node_modules/framer-motion/dist/es/motion/features/Feature.mjs
init_shim();
var Feature = class {
  constructor(node2) {
    this.isMounted = false;
    this.node = node2;
  }
  update() {
  }
};

// node_modules/framer-motion/dist/es/frameloop/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/frameloop/create-render-step.mjs
init_shim();
function createRenderStep2(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/framer-motion/dist/es/frameloop/data.mjs
init_shim();
var frameData = {
  delta: 0,
  timestamp: 0,
  isProcessing: false
};

// node_modules/framer-motion/dist/es/frameloop/index.mjs
var maxElapsed2 = 40;
var useDefaultElapsed2 = true;
var runNextFrame2 = false;
var stepsOrder2 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps2 = stepsOrder2.reduce((acc, key) => {
  acc[key] = createRenderStep2(() => runNextFrame2 = true);
  return acc;
}, {});
var processStep2 = (stepId) => steps2[stepId].process(frameData);
var processFrame2 = (timestamp) => {
  runNextFrame2 = false;
  frameData.delta = useDefaultElapsed2 ? 1e3 / 60 : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed2), 1);
  frameData.timestamp = timestamp;
  frameData.isProcessing = true;
  stepsOrder2.forEach(processStep2);
  frameData.isProcessing = false;
  if (runNextFrame2) {
    useDefaultElapsed2 = false;
    requestAnimationFrame(processFrame2);
  }
};
var startLoop2 = () => {
  runNextFrame2 = true;
  useDefaultElapsed2 = true;
  if (!frameData.isProcessing)
    requestAnimationFrame(processFrame2);
};
var frame2 = stepsOrder2.reduce((acc, key) => {
  const step = steps2[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame2)
      startLoop2();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
function cancelFrame(process) {
  stepsOrder2.forEach((key) => steps2[key].cancel(process));
}

// node_modules/framer-motion/dist/es/gestures/hover.mjs
function addHoverEvent(node2, isActive) {
  const eventName = "pointer" + (isActive ? "enter" : "leave");
  const callbackName = "onHover" + (isActive ? "Start" : "End");
  const handleEvent = (event, info) => {
    if (event.type === "touch" || isDragActive())
      return;
    const props = node2.getProps();
    if (node2.animationState && props.whileHover) {
      node2.animationState.setActive("whileHover", isActive);
    }
    if (props[callbackName]) {
      frame2.update(() => props[callbackName](event, info));
    }
  };
  return addPointerEvent2(node2.current, eventName, handleEvent, {
    passive: !node2.getProps()[callbackName]
  });
}
var HoverGesture = class extends Feature {
  mount() {
    this.unmount = pipe5(addHoverEvent(this.node, true), addHoverEvent(this.node, false));
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/gestures/focus.mjs
init_shim();
var FocusGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.isActive = false;
  }
  onFocus() {
    let isFocusVisible2 = false;
    try {
      isFocusVisible2 = this.node.current.matches(":focus-visible");
    } catch (e) {
      isFocusVisible2 = true;
    }
    if (!isFocusVisible2 || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", true);
    this.isActive = true;
  }
  onBlur() {
    if (!this.isActive || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", false);
    this.isActive = false;
  }
  mount() {
    this.unmount = pipe5(addDomEvent2(this.node.current, "focus", () => this.onFocus()), addDomEvent2(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/gestures/press.mjs
init_shim();

// node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
init_shim();
var isNodeOrChild = (parent, child) => {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild(parent, child.parentElement);
  }
};

// node_modules/framer-motion/dist/es/utils/noop.mjs
init_shim();
var noop3 = (any2) => any2;

// node_modules/framer-motion/dist/es/gestures/press.mjs
function fireSyntheticPointerEvent(name, handler) {
  if (!handler)
    return;
  const syntheticPointerEvent = new PointerEvent("pointer" + name);
  handler(syntheticPointerEvent, extractEventInfo2(syntheticPointerEvent));
}
var PressGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.removeStartListeners = noop3;
    this.removeEndListeners = noop3;
    this.removeAccessibleListeners = noop3;
    this.startPointerPress = (startEvent, startInfo) => {
      this.removeEndListeners();
      if (this.isPressing)
        return;
      const props = this.node.getProps();
      const endPointerPress = (endEvent, endInfo) => {
        if (!this.checkPressEnd())
          return;
        const { onTap, onTapCancel } = this.node.getProps();
        frame2.update(() => {
          !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);
        });
      };
      const removePointerUpListener = addPointerEvent2(window, "pointerup", endPointerPress, { passive: !(props.onTap || props["onPointerUp"]) });
      const removePointerCancelListener = addPointerEvent2(window, "pointercancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props["onPointerCancel"]) });
      this.removeEndListeners = pipe5(removePointerUpListener, removePointerCancelListener);
      this.startPress(startEvent, startInfo);
    };
    this.startAccessiblePress = () => {
      const handleKeydown = (keydownEvent) => {
        if (keydownEvent.key !== "Enter" || this.isPressing)
          return;
        const handleKeyup = (keyupEvent) => {
          if (keyupEvent.key !== "Enter" || !this.checkPressEnd())
            return;
          fireSyntheticPointerEvent("up", (event, info) => {
            const { onTap } = this.node.getProps();
            if (onTap) {
              frame2.update(() => onTap(event, info));
            }
          });
        };
        this.removeEndListeners();
        this.removeEndListeners = addDomEvent2(this.node.current, "keyup", handleKeyup);
        fireSyntheticPointerEvent("down", (event, info) => {
          this.startPress(event, info);
        });
      };
      const removeKeydownListener = addDomEvent2(this.node.current, "keydown", handleKeydown);
      const handleBlur = () => {
        if (!this.isPressing)
          return;
        fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));
      };
      const removeBlurListener = addDomEvent2(this.node.current, "blur", handleBlur);
      this.removeAccessibleListeners = pipe5(removeKeydownListener, removeBlurListener);
    };
  }
  startPress(event, info) {
    this.isPressing = true;
    const { onTapStart, whileTap } = this.node.getProps();
    if (whileTap && this.node.animationState) {
      this.node.animationState.setActive("whileTap", true);
    }
    if (onTapStart) {
      frame2.update(() => onTapStart(event, info));
    }
  }
  checkPressEnd() {
    this.removeEndListeners();
    this.isPressing = false;
    const props = this.node.getProps();
    if (props.whileTap && this.node.animationState) {
      this.node.animationState.setActive("whileTap", false);
    }
    return !isDragActive();
  }
  cancelPress(event, info) {
    if (!this.checkPressEnd())
      return;
    const { onTapCancel } = this.node.getProps();
    if (onTapCancel) {
      frame2.update(() => onTapCancel(event, info));
    }
  }
  mount() {
    const props = this.node.getProps();
    const removePointerListener = addPointerEvent2(this.node.current, "pointerdown", this.startPointerPress, { passive: !(props.onTapStart || props["onPointerStart"]) });
    const removeFocusListener = addDomEvent2(this.node.current, "focus", this.startAccessiblePress);
    this.removeStartListeners = pipe5(removePointerListener, removeFocusListener);
  }
  unmount() {
    this.removeStartListeners();
    this.removeEndListeners();
    this.removeAccessibleListeners();
  }
};

// node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
init_shim();
var observerCallbacks = /* @__PURE__ */ new WeakMap();
var observers = /* @__PURE__ */ new WeakMap();
var fireObserverCallback = (entry) => {
  const callback = observerCallbacks.get(entry.target);
  callback && callback(entry);
};
var fireAllObserverCallbacks = (entries) => {
  entries.forEach(fireObserverCallback);
};
function initIntersectionObserver({ root, ...options }) {
  const lookupRoot = root || document;
  if (!observers.has(lookupRoot)) {
    observers.set(lookupRoot, {});
  }
  const rootObservers = observers.get(lookupRoot);
  const key = JSON.stringify(options);
  if (!rootObservers[key]) {
    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });
  }
  return rootObservers[key];
}
function observeIntersection(element, options, callback) {
  const rootInteresectionObserver = initIntersectionObserver(options);
  observerCallbacks.set(element, callback);
  rootInteresectionObserver.observe(element);
  return () => {
    observerCallbacks.delete(element);
    rootInteresectionObserver.unobserve(element);
  };
}

// node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
var thresholdNames = {
  some: 0,
  all: 1
};
var InViewFeature = class extends Feature {
  constructor() {
    super(...arguments);
    this.hasEnteredView = false;
    this.isInView = false;
  }
  startObserver() {
    this.unmount();
    const { viewport = {} } = this.node.getProps();
    const { root, margin: rootMargin, amount = "some", once: once25 } = viewport;
    const options = {
      root: root ? root.current : void 0,
      rootMargin,
      threshold: typeof amount === "number" ? amount : thresholdNames[amount]
    };
    const onIntersectionUpdate = (entry) => {
      const { isIntersecting } = entry;
      if (this.isInView === isIntersecting)
        return;
      this.isInView = isIntersecting;
      if (once25 && !isIntersecting && this.hasEnteredView) {
        return;
      } else if (isIntersecting) {
        this.hasEnteredView = true;
      }
      if (this.node.animationState) {
        this.node.animationState.setActive("whileInView", isIntersecting);
      }
      const { onViewportEnter, onViewportLeave } = this.node.getProps();
      const callback = isIntersecting ? onViewportEnter : onViewportLeave;
      callback && callback(entry);
    };
    return observeIntersection(this.node.current, options, onIntersectionUpdate);
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver === "undefined")
      return;
    const { props, prevProps } = this.node;
    const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
    if (hasOptionsChanged) {
      this.startObserver();
    }
  }
  unmount() {
  }
};
function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
  return (name) => viewport[name] !== prevViewport[name];
}

// node_modules/framer-motion/dist/es/motion/features/gestures.mjs
var gestureAnimations = {
  inView: {
    Feature: InViewFeature
  },
  tap: {
    Feature: PressGesture
  },
  focus: {
    Feature: FocusGesture
  },
  hover: {
    Feature: HoverGesture
  }
};

// node_modules/framer-motion/dist/es/motion/features/animations.mjs
init_shim();

// node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
init_shim();
function shallowCompare(next, prev) {
  if (!Array.isArray(prev))
    return false;
  const prevLength = prev.length;
  if (prevLength !== next.length)
    return false;
  for (let i = 0; i < prevLength; i++) {
    if (prev[i] !== next[i])
      return false;
  }
  return true;
}

// node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs
init_shim();
function getCurrent(visualElement) {
  const current = {};
  visualElement.values.forEach((value, key) => current[key] = value.get());
  return current;
}
function getVelocity(visualElement) {
  const velocity = {};
  visualElement.values.forEach((value, key) => velocity[key] = value.getVelocity());
  return velocity;
}
function resolveVariant(visualElement, definition, custom) {
  const props = visualElement.getProps();
  return resolveVariantFromProps(props, definition, custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));
}

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs
init_shim();
var optimizedAppearDataId = "framerAppearId";
var optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);

// node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/errors.mjs
init_shim();
var warning = noop3;
var invariant = noop3;
if (import_process.default.env.NODE_ENV !== "production") {
  warning = (check, message) => {
    if (!check && typeof console !== "undefined") {
      console.warn(message);
    }
  };
  invariant = (check, message) => {
    if (!check) {
      throw new Error(message);
    }
  };
}

// node_modules/framer-motion/dist/es/utils/time-conversion.mjs
init_shim();
var secondsToMilliseconds = (seconds) => seconds * 1e3;
var millisecondsToSeconds = (milliseconds) => milliseconds / 1e3;

// node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
init_shim();
var instantAnimationState = {
  current: false
};

// node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs
init_shim();

// node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs
init_shim();
var isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";

// node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs
function isWaapiSupportedEasing(easing) {
  return Boolean(!easing || typeof easing === "string" && supportedWaapiEasing[easing] || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
}
var cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;
var supportedWaapiEasing = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),
  circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),
  backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
  backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
};
function mapEasingToNativeEasing(easing) {
  if (!easing)
    return void 0;
  return isBezierDefinition(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];
}

// node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
function animateStyle(element, valueName, keyframes3, { delay: delay2 = 0, duration, repeat = 0, repeatType = "loop", ease: ease2, times } = {}) {
  const keyframeOptions = { [valueName]: keyframes3 };
  if (times)
    keyframeOptions.offset = times;
  const easing = mapEasingToNativeEasing(ease2);
  if (Array.isArray(easing))
    keyframeOptions.easing = easing;
  return element.animate(keyframeOptions, {
    delay: delay2,
    duration,
    easing: !Array.isArray(easing) ? easing : "linear",
    fill: "both",
    iterations: repeat + 1,
    direction: repeatType === "reverse" ? "alternate" : "normal"
  });
}

// node_modules/framer-motion/dist/es/animation/animators/waapi/supports.mjs
init_shim();
var featureTests = {
  waapi: () => Object.hasOwnProperty.call(Element.prototype, "animate")
};
var results = {};
var supports = {};
for (const key in featureTests) {
  supports[key] = () => {
    if (results[key] === void 0)
      results[key] = featureTests[key]();
    return results[key];
  };
}

// node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs
init_shim();
function getFinalKeyframe(keyframes3, { repeat, repeatType = "loop" }) {
  const index = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : keyframes3.length - 1;
  return keyframes3[index];
}

// node_modules/framer-motion/dist/es/animation/animators/js/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
init_shim();

// node_modules/framer-motion/dist/es/easing/ease.mjs
init_shim();

// node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs
init_shim();
var calcBezier = (t2, a1, a2) => (((1 - 3 * a2 + 3 * a1) * t2 + (3 * a2 - 6 * a1)) * t2 + 3 * a1) * t2;
var subdivisionPrecision = 1e-7;
var subdivisionMaxIterations = 12;
function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
  let currentX;
  let currentT;
  let i = 0;
  do {
    currentT = lowerBound + (upperBound - lowerBound) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - x;
    if (currentX > 0) {
      upperBound = currentT;
    } else {
      lowerBound = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
  return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return noop3;
  const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
  return (t2) => t2 === 0 || t2 === 1 ? t2 : calcBezier(getTForX(t2), mY1, mY2);
}

// node_modules/framer-motion/dist/es/easing/ease.mjs
var easeIn = cubicBezier(0.42, 0, 1, 1);
var easeOut = cubicBezier(0, 0, 0.58, 1);
var easeInOut = cubicBezier(0.42, 0, 0.58, 1);

// node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs
init_shim();
var isEasingArray = (ease2) => {
  return Array.isArray(ease2) && typeof ease2[0] !== "number";
};

// node_modules/framer-motion/dist/es/easing/utils/map.mjs
init_shim();

// node_modules/framer-motion/dist/es/easing/circ.mjs
init_shim();

// node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs
init_shim();
var mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;

// node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs
init_shim();
var reverseEasing = (easing) => (p) => 1 - easing(1 - p);

// node_modules/framer-motion/dist/es/easing/circ.mjs
var circIn = (p) => 1 - Math.sin(Math.acos(p));
var circOut = reverseEasing(circIn);
var circInOut = mirrorEasing(circOut);

// node_modules/framer-motion/dist/es/easing/back.mjs
init_shim();
var backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);
var backIn = reverseEasing(backOut);
var backInOut = mirrorEasing(backIn);

// node_modules/framer-motion/dist/es/easing/anticipate.mjs
init_shim();
var anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));

// node_modules/framer-motion/dist/es/easing/utils/map.mjs
var easingLookup = {
  linear: noop3,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate
};
var easingDefinitionToFunction = (definition) => {
  if (Array.isArray(definition)) {
    invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);
    const [x1, y1, x2, y2] = definition;
    return cubicBezier(x1, y1, x2, y2);
  } else if (typeof definition === "string") {
    invariant(easingLookup[definition] !== void 0, `Invalid easing type '${definition}'`);
    return easingLookup[definition];
  }
  return definition;
};

// node_modules/framer-motion/dist/es/utils/interpolate.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/types/color/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/types/color/hex.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/types/color/utils.mjs
init_shim();
var isColorString = (type, testProp) => (v) => {
  return Boolean(isString2(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
};
var splitColor = (aName, bName, cName) => (v) => {
  if (!isString2(v))
    return v;
  const [a, b, c, alpha2] = v.match(floatRegex);
  return {
    [aName]: parseFloat(a),
    [bName]: parseFloat(b),
    [cName]: parseFloat(c),
    alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
  };
};

// node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
var clampRgbUnit = (v) => clamp(0, 255, v);
var rgbUnit = {
  ...number,
  transform: (v) => Math.round(clampRgbUnit(v))
};
var rgba2 = {
  test: isColorString("rgb", "red"),
  parse: splitColor("red", "green", "blue"),
  transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
};

// node_modules/framer-motion/dist/es/value/types/color/hex.mjs
function parseHex(v) {
  let r2 = "";
  let g = "";
  let b = "";
  let a = "";
  if (v.length > 5) {
    r2 = v.substring(1, 3);
    g = v.substring(3, 5);
    b = v.substring(5, 7);
    a = v.substring(7, 9);
  } else {
    r2 = v.substring(1, 2);
    g = v.substring(2, 3);
    b = v.substring(3, 4);
    a = v.substring(4, 5);
    r2 += r2;
    g += g;
    b += b;
    a += a;
  }
  return {
    red: parseInt(r2, 16),
    green: parseInt(g, 16),
    blue: parseInt(b, 16),
    alpha: a ? parseInt(a, 16) / 255 : 1
  };
}
var hex = {
  test: isColorString("#"),
  parse: parseHex,
  transform: rgba2.transform
};

// node_modules/framer-motion/dist/es/value/types/color/hsla.mjs
init_shim();
var hsla2 = {
  test: isColorString("hsl", "hue"),
  parse: splitColor("hue", "saturation", "lightness"),
  transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
    return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
  }
};

// node_modules/framer-motion/dist/es/value/types/color/index.mjs
var color2 = {
  test: (v) => rgba2.test(v) || hex.test(v) || hsla2.test(v),
  parse: (v) => {
    if (rgba2.test(v)) {
      return rgba2.parse(v);
    } else if (hsla2.test(v)) {
      return hsla2.parse(v);
    } else {
      return hex.parse(v);
    }
  },
  transform: (v) => {
    return isString2(v) ? v : v.hasOwnProperty("red") ? rgba2.transform(v) : hsla2.transform(v);
  }
};

// node_modules/framer-motion/dist/es/utils/mix.mjs
init_shim();
var mix2 = (from, to, progress3) => -progress3 * from + progress3 * to + from;

// node_modules/framer-motion/dist/es/utils/mix-color.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs
init_shim();
function hueToRgb(p, q, t2) {
  if (t2 < 0)
    t2 += 1;
  if (t2 > 1)
    t2 -= 1;
  if (t2 < 1 / 6)
    return p + (q - p) * 6 * t2;
  if (t2 < 1 / 2)
    return q;
  if (t2 < 2 / 3)
    return p + (q - p) * (2 / 3 - t2) * 6;
  return p;
}
function hslaToRgba({ hue, saturation, lightness, alpha: alpha2 }) {
  hue /= 360;
  saturation /= 100;
  lightness /= 100;
  let red = 0;
  let green = 0;
  let blue = 0;
  if (!saturation) {
    red = green = blue = lightness;
  } else {
    const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
    const p = 2 * lightness - q;
    red = hueToRgb(p, q, hue + 1 / 3);
    green = hueToRgb(p, q, hue);
    blue = hueToRgb(p, q, hue - 1 / 3);
  }
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha: alpha2
  };
}

// node_modules/framer-motion/dist/es/utils/mix-color.mjs
var mixLinearColor = (from, to, v) => {
  const fromExpo = from * from;
  return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));
};
var colorTypes = [hex, rgba2, hsla2];
var getColorType = (v) => colorTypes.find((type) => type.test(v));
function asRGBA(color3) {
  const type = getColorType(color3);
  invariant(Boolean(type), `'${color3}' is not an animatable color. Use the equivalent color code instead.`);
  let model = type.parse(color3);
  if (type === hsla2) {
    model = hslaToRgba(model);
  }
  return model;
}
var mixColor = (from, to) => {
  const fromRGBA = asRGBA(from);
  const toRGBA = asRGBA(to);
  const blended = { ...fromRGBA };
  return (v) => {
    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);
    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);
    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);
    blended.alpha = mix2(fromRGBA.alpha, toRGBA.alpha, v);
    return rgba2.transform(blended);
  };
};

// node_modules/framer-motion/dist/es/utils/mix-complex.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/types/complex/index.mjs
init_shim();
function test(v) {
  var _a40, _b8;
  return isNaN(v) && isString2(v) && (((_a40 = v.match(floatRegex)) === null || _a40 === void 0 ? void 0 : _a40.length) || 0) + (((_b8 = v.match(colorRegex)) === null || _b8 === void 0 ? void 0 : _b8.length) || 0) > 0;
}
var cssVarTokeniser = {
  regex: cssVariableRegex,
  countKey: "Vars",
  token: "${v}",
  parse: noop3
};
var colorTokeniser = {
  regex: colorRegex,
  countKey: "Colors",
  token: "${c}",
  parse: color2.parse
};
var numberTokeniser = {
  regex: floatRegex,
  countKey: "Numbers",
  token: "${n}",
  parse: number.parse
};
function tokenise(info, { regex, countKey, token, parse: parse3 }) {
  const matches = info.tokenised.match(regex);
  if (!matches)
    return;
  info["num" + countKey] = matches.length;
  info.tokenised = info.tokenised.replace(regex, token);
  info.values.push(...matches.map(parse3));
}
function analyseComplexValue(value) {
  const originalValue = value.toString();
  const info = {
    value: originalValue,
    tokenised: originalValue,
    values: [],
    numVars: 0,
    numColors: 0,
    numNumbers: 0
  };
  if (info.value.includes("var(--"))
    tokenise(info, cssVarTokeniser);
  tokenise(info, colorTokeniser);
  tokenise(info, numberTokeniser);
  return info;
}
function parseComplexValue(v) {
  return analyseComplexValue(v).values;
}
function createTransformer(source) {
  const { values, numColors, numVars, tokenised } = analyseComplexValue(source);
  const numValues = values.length;
  return (v) => {
    let output = tokenised;
    for (let i = 0; i < numValues; i++) {
      if (i < numVars) {
        output = output.replace(cssVarTokeniser.token, v[i]);
      } else if (i < numVars + numColors) {
        output = output.replace(colorTokeniser.token, color2.transform(v[i]));
      } else {
        output = output.replace(numberTokeniser.token, sanitize(v[i]));
      }
    }
    return output;
  };
}
var convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
function getAnimatableNone(v) {
  const parsed = parseComplexValue(v);
  const transformer = createTransformer(v);
  return transformer(parsed.map(convertNumbersToZero));
}
var complex = {
  test,
  parse: parseComplexValue,
  createTransformer,
  getAnimatableNone
};

// node_modules/framer-motion/dist/es/utils/mix-complex.mjs
var mixImmediate = (origin, target) => (p) => `${p > 0 ? target : origin}`;
function getMixer(origin, target) {
  if (typeof origin === "number") {
    return (v) => mix2(origin, target, v);
  } else if (color2.test(origin)) {
    return mixColor(origin, target);
  } else {
    return origin.startsWith("var(") ? mixImmediate(origin, target) : mixComplex(origin, target);
  }
}
var mixArray = (from, to) => {
  const output = [...from];
  const numValues = output.length;
  const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));
  return (v) => {
    for (let i = 0; i < numValues; i++) {
      output[i] = blendValue[i](v);
    }
    return output;
  };
};
var mixObject = (origin, target) => {
  const output = { ...origin, ...target };
  const blendValue = {};
  for (const key in output) {
    if (origin[key] !== void 0 && target[key] !== void 0) {
      blendValue[key] = getMixer(origin[key], target[key]);
    }
  }
  return (v) => {
    for (const key in blendValue) {
      output[key] = blendValue[key](v);
    }
    return output;
  };
};
var mixComplex = (origin, target) => {
  const template = complex.createTransformer(target);
  const originStats = analyseComplexValue(origin);
  const targetStats = analyseComplexValue(target);
  const canInterpolate = originStats.numVars === targetStats.numVars && originStats.numColors === targetStats.numColors && originStats.numNumbers >= targetStats.numNumbers;
  if (canInterpolate) {
    return pipe5(mixArray(originStats.values, targetStats.values), template);
  } else {
    warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
    return mixImmediate(origin, target);
  }
};

// node_modules/framer-motion/dist/es/utils/progress.mjs
init_shim();
var progress = (from, to, value) => {
  const toFromDifference = to - from;
  return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};

// node_modules/framer-motion/dist/es/utils/interpolate.mjs
var mixNumber = (from, to) => (p) => mix2(from, to, p);
function detectMixerFactory(v) {
  if (typeof v === "number") {
    return mixNumber;
  } else if (typeof v === "string") {
    return color2.test(v) ? mixColor : mixComplex;
  } else if (Array.isArray(v)) {
    return mixArray;
  } else if (typeof v === "object") {
    return mixObject;
  }
  return mixNumber;
}
function createMixers(output, ease2, customMixer) {
  const mixers = [];
  const mixerFactory = customMixer || detectMixerFactory(output[0]);
  const numMixers = output.length - 1;
  for (let i = 0; i < numMixers; i++) {
    let mixer = mixerFactory(output[i], output[i + 1]);
    if (ease2) {
      const easingFunction = Array.isArray(ease2) ? ease2[i] || noop3 : ease2;
      mixer = pipe5(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function interpolate(input, output, { clamp: isClamp = true, ease: ease2, mixer } = {}) {
  const inputLength = input.length;
  invariant(inputLength === output.length, "Both input and output ranges must be the same length");
  if (inputLength === 1)
    return () => output[0];
  if (input[0] > input[inputLength - 1]) {
    input = [...input].reverse();
    output = [...output].reverse();
  }
  const mixers = createMixers(output, ease2, mixer);
  const numMixers = mixers.length;
  const interpolator = (v) => {
    let i = 0;
    if (numMixers > 1) {
      for (; i < input.length - 2; i++) {
        if (v < input[i + 1])
          break;
      }
    }
    const progressInRange = progress(input[i], input[i + 1], v);
    return mixers[i](progressInRange);
  };
  return isClamp ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;
}

// node_modules/framer-motion/dist/es/utils/offsets/default.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/offsets/fill.mjs
init_shim();
function fillOffset(offset, remaining) {
  const min = offset[offset.length - 1];
  for (let i = 1; i <= remaining; i++) {
    const offsetProgress = progress(0, remaining, i);
    offset.push(mix2(min, 1, offsetProgress));
  }
}

// node_modules/framer-motion/dist/es/utils/offsets/default.mjs
function defaultOffset(arr) {
  const offset = [0];
  fillOffset(offset, arr.length - 1);
  return offset;
}

// node_modules/framer-motion/dist/es/utils/offsets/time.mjs
init_shim();
function convertOffsetToTimes(offset, duration) {
  return offset.map((o) => o * duration);
}

// node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
function defaultEasing(values, easing) {
  return values.map(() => easing || easeInOut).splice(0, values.length - 1);
}
function keyframes2({ duration = 300, keyframes: keyframeValues, times, ease: ease2 = "easeInOut" }) {
  const easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2);
  const state2 = {
    done: false,
    value: keyframeValues[0]
  };
  const absoluteTimes = convertOffsetToTimes(
    times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues),
    duration
  );
  const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
    ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
  });
  return {
    calculatedDuration: duration,
    next: (t2) => {
      state2.value = mapTimeToKeyframe(t2);
      state2.done = t2 >= duration;
      return state2;
    }
  };
}

// node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs
init_shim();
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}

// node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
var velocitySampleDuration = 5;
function calcGeneratorVelocity(resolveValue, t2, current) {
  const prevT = Math.max(t2 - velocitySampleDuration, 0);
  return velocityPerSecond(current - resolveValue(prevT), t2 - prevT);
}

// node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs
init_shim();
var safeMin = 1e-3;
var minDuration = 0.01;
var maxDuration = 10;
var minDamping = 0.05;
var maxDamping = 1;
function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
  let envelope;
  let derivative;
  warning(duration <= secondsToMilliseconds(maxDuration), "Spring duration must be 10 seconds or less");
  let dampingRatio = 1 - bounce;
  dampingRatio = clamp(minDamping, maxDamping, dampingRatio);
  duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));
  if (dampingRatio < 1) {
    envelope = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const a = exponentialDecay - velocity;
      const b = calcAngularFreq(undampedFreq2, dampingRatio);
      const c = Math.exp(-delta);
      return safeMin - a / b * c;
    };
    derivative = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const d = delta * velocity + velocity;
      const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
      const f = Math.exp(-delta);
      const g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
      const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
      return factor * ((d - e) * f) / g;
    };
  } else {
    envelope = (undampedFreq2) => {
      const a = Math.exp(-undampedFreq2 * duration);
      const b = (undampedFreq2 - velocity) * duration + 1;
      return -safeMin + a * b;
    };
    derivative = (undampedFreq2) => {
      const a = Math.exp(-undampedFreq2 * duration);
      const b = (velocity - undampedFreq2) * (duration * duration);
      return a * b;
    };
  }
  const initialGuess = 5 / duration;
  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration = secondsToMilliseconds(duration);
  if (isNaN(undampedFreq)) {
    return {
      stiffness: 100,
      damping: 10,
      duration
    };
  } else {
    const stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration
    };
  }
}
var rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  let result = initialGuess;
  for (let i = 1; i < rootIterations; i++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

// node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
var durationKeys = ["duration", "bounce"];
var physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options, keys2) {
  return keys2.some((key) => options[key] !== void 0);
}
function getSpringOptions(options) {
  let springOptions = {
    velocity: 0,
    stiffness: 100,
    damping: 10,
    mass: 1,
    isResolvedFromDuration: false,
    ...options
  };
  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
    const derived = findSpring(options);
    springOptions = {
      ...springOptions,
      ...derived,
      velocity: 0,
      mass: 1
    };
    springOptions.isResolvedFromDuration = true;
  }
  return springOptions;
}
function spring({ keyframes: keyframes3, restDelta, restSpeed, ...options }) {
  const origin = keyframes3[0];
  const target = keyframes3[keyframes3.length - 1];
  const state2 = { done: false, value: origin };
  const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options);
  const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0;
  const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
  const initialDelta = target - origin;
  const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
  const isGranularScale = Math.abs(initialDelta) < 5;
  restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);
  restDelta || (restDelta = isGranularScale ? 5e-3 : 0.5);
  let resolveSpring;
  if (dampingRatio < 1) {
    const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
    resolveSpring = (t2) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t2) + initialDelta * Math.cos(angularFreq * t2));
    };
  } else if (dampingRatio === 1) {
    resolveSpring = (t2) => target - Math.exp(-undampedAngularFreq * t2) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t2);
  } else {
    const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
    resolveSpring = (t2) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
      const freqForT = Math.min(dampedAngularFreq * t2, 300);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
    };
  }
  return {
    calculatedDuration: isResolvedFromDuration ? duration || null : null,
    next: (t2) => {
      const current = resolveSpring(t2);
      if (!isResolvedFromDuration) {
        let currentVelocity = initialVelocity;
        if (t2 !== 0) {
          if (dampingRatio < 1) {
            currentVelocity = calcGeneratorVelocity(resolveSpring, t2, current);
          } else {
            currentVelocity = 0;
          }
        }
        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
        state2.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state2.done = t2 >= duration;
      }
      state2.value = state2.done ? target : current;
      return state2;
    }
  };
}

// node_modules/framer-motion/dist/es/animation/generators/inertia.mjs
init_shim();
function inertia({ keyframes: keyframes3, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed }) {
  const origin = keyframes3[0];
  const state2 = {
    done: false,
    value: origin
  };
  const isOutOfBounds = (v) => min !== void 0 && v < min || max !== void 0 && v > max;
  const nearestBoundary = (v) => {
    if (min === void 0)
      return max;
    if (max === void 0)
      return min;
    return Math.abs(min - v) < Math.abs(max - v) ? min : max;
  };
  let amplitude = power * velocity;
  const ideal = origin + amplitude;
  const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target !== ideal)
    amplitude = target - origin;
  const calcDelta = (t2) => -amplitude * Math.exp(-t2 / timeConstant);
  const calcLatest = (t2) => target + calcDelta(t2);
  const applyFriction = (t2) => {
    const delta = calcDelta(t2);
    const latest = calcLatest(t2);
    state2.done = Math.abs(delta) <= restDelta;
    state2.value = state2.done ? target : latest;
  };
  let timeReachedBoundary;
  let spring$1;
  const checkCatchBoundary = (t2) => {
    if (!isOutOfBounds(state2.value))
      return;
    timeReachedBoundary = t2;
    spring$1 = spring({
      keyframes: [state2.value, nearestBoundary(state2.value)],
      velocity: calcGeneratorVelocity(calcLatest, t2, state2.value),
      damping: bounceDamping,
      stiffness: bounceStiffness,
      restDelta,
      restSpeed
    });
  };
  checkCatchBoundary(0);
  return {
    calculatedDuration: null,
    next: (t2) => {
      let hasUpdatedFrame = false;
      if (!spring$1 && timeReachedBoundary === void 0) {
        hasUpdatedFrame = true;
        applyFriction(t2);
        checkCatchBoundary(t2);
      }
      if (timeReachedBoundary !== void 0 && t2 > timeReachedBoundary) {
        return spring$1.next(t2 - timeReachedBoundary);
      } else {
        !hasUpdatedFrame && applyFriction(t2);
        return state2;
      }
    }
  };
}

// node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs
init_shim();
var frameloopDriver = (update) => {
  const passTimestamp = ({ timestamp }) => update(timestamp);
  return {
    start: () => frame2.update(passTimestamp, true),
    stop: () => cancelFrame(passTimestamp),
    now: () => frameData.isProcessing ? frameData.timestamp : performance.now()
  };
};

// node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs
init_shim();
var maxGeneratorDuration = 2e4;
function calcGeneratorDuration(generator) {
  let duration = 0;
  const timeStep = 50;
  let state2 = generator.next(duration);
  while (!state2.done && duration < maxGeneratorDuration) {
    duration += timeStep;
    state2 = generator.next(duration);
  }
  return duration >= maxGeneratorDuration ? Infinity : duration;
}

// node_modules/framer-motion/dist/es/animation/animators/js/index.mjs
var types = {
  decay: inertia,
  inertia,
  tween: keyframes2,
  keyframes: keyframes2,
  spring
};
function animateValue({ autoplay = true, delay: delay2 = 0, driver = frameloopDriver, keyframes: keyframes$1, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", onPlay, onStop, onComplete, onUpdate, ...options }) {
  let speed = 1;
  let hasStopped = false;
  let resolveFinishedPromise;
  let currentFinishedPromise;
  const updateFinishedPromise = () => {
    resolveFinishedPromise && resolveFinishedPromise();
    currentFinishedPromise = new Promise((resolve) => {
      resolveFinishedPromise = resolve;
    });
  };
  updateFinishedPromise();
  let animationDriver;
  const generatorFactory = types[type] || keyframes2;
  let mapNumbersToKeyframes;
  if (generatorFactory !== keyframes2 && typeof keyframes$1[0] !== "number") {
    mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {
      clamp: false
    });
    keyframes$1 = [0, 100];
  }
  const generator = generatorFactory({ ...options, keyframes: keyframes$1 });
  let mirroredGenerator;
  if (repeatType === "mirror") {
    mirroredGenerator = generatorFactory({
      ...options,
      keyframes: [...keyframes$1].reverse(),
      velocity: -(options.velocity || 0)
    });
  }
  let playState = "idle";
  let holdTime = null;
  let startTime = null;
  let cancelTime = null;
  if (generator.calculatedDuration === null && repeat) {
    generator.calculatedDuration = calcGeneratorDuration(generator);
  }
  const { calculatedDuration } = generator;
  let resolvedDuration = Infinity;
  let totalDuration = Infinity;
  if (calculatedDuration !== null) {
    resolvedDuration = calculatedDuration + repeatDelay;
    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
  }
  let currentTime = 0;
  const tick = (timestamp) => {
    if (startTime === null)
      return;
    if (speed > 0)
      startTime = Math.min(startTime, timestamp);
    if (holdTime !== null) {
      currentTime = holdTime;
    } else {
      currentTime = (timestamp - startTime) * speed;
    }
    const timeWithoutDelay = currentTime - delay2;
    const isInDelayPhase = timeWithoutDelay < 0;
    currentTime = Math.max(timeWithoutDelay, 0);
    if (playState === "finished" && holdTime === null) {
      currentTime = totalDuration;
    }
    let elapsed = currentTime;
    let frameGenerator = generator;
    if (repeat) {
      const progress3 = currentTime / resolvedDuration;
      let currentIteration = Math.floor(progress3);
      let iterationProgress = progress3 % 1;
      if (!iterationProgress && progress3 >= 1) {
        iterationProgress = 1;
      }
      iterationProgress === 1 && currentIteration--;
      currentIteration = Math.min(currentIteration, repeat + 1);
      const iterationIsOdd = Boolean(currentIteration % 2);
      if (iterationIsOdd) {
        if (repeatType === "reverse") {
          iterationProgress = 1 - iterationProgress;
          if (repeatDelay) {
            iterationProgress -= repeatDelay / resolvedDuration;
          }
        } else if (repeatType === "mirror") {
          frameGenerator = mirroredGenerator;
        }
      }
      let p = clamp(0, 1, iterationProgress);
      if (currentTime > totalDuration) {
        p = repeatType === "reverse" && iterationIsOdd ? 1 : 0;
      }
      elapsed = p * resolvedDuration;
    }
    const state2 = isInDelayPhase ? { done: false, value: keyframes$1[0] } : frameGenerator.next(elapsed);
    if (mapNumbersToKeyframes) {
      state2.value = mapNumbersToKeyframes(state2.value);
    }
    let { done } = state2;
    if (!isInDelayPhase && calculatedDuration !== null) {
      done = currentTime >= totalDuration;
    }
    const isAnimationFinished = holdTime === null && (playState === "finished" || playState === "running" && done || speed < 0 && currentTime <= 0);
    if (onUpdate) {
      onUpdate(state2.value);
    }
    if (isAnimationFinished) {
      finish();
    }
    return state2;
  };
  const stopAnimationDriver = () => {
    animationDriver && animationDriver.stop();
    animationDriver = void 0;
  };
  const cancel = () => {
    playState = "idle";
    stopAnimationDriver();
    updateFinishedPromise();
    startTime = cancelTime = null;
  };
  const finish = () => {
    playState = "finished";
    onComplete && onComplete();
    stopAnimationDriver();
    updateFinishedPromise();
  };
  const play = () => {
    if (hasStopped)
      return;
    if (!animationDriver)
      animationDriver = driver(tick);
    const now = animationDriver.now();
    onPlay && onPlay();
    if (holdTime !== null) {
      startTime = now - holdTime;
    } else if (!startTime || playState === "finished") {
      startTime = now;
    }
    cancelTime = startTime;
    holdTime = null;
    playState = "running";
    animationDriver.start();
  };
  if (autoplay) {
    play();
  }
  const controls = {
    then(resolve, reject) {
      return currentFinishedPromise.then(resolve, reject);
    },
    get time() {
      return millisecondsToSeconds(currentTime);
    },
    set time(newTime) {
      newTime = secondsToMilliseconds(newTime);
      currentTime = newTime;
      if (holdTime !== null || !animationDriver || speed === 0) {
        holdTime = newTime;
      } else {
        startTime = animationDriver.now() - newTime / speed;
      }
    },
    get duration() {
      const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;
      return millisecondsToSeconds(duration);
    },
    get speed() {
      return speed;
    },
    set speed(newSpeed) {
      if (newSpeed === speed || !animationDriver)
        return;
      speed = newSpeed;
      controls.time = millisecondsToSeconds(currentTime);
    },
    get state() {
      return playState;
    },
    play,
    pause: () => {
      playState = "paused";
      holdTime = currentTime;
    },
    stop: () => {
      hasStopped = true;
      if (playState === "idle")
        return;
      playState = "idle";
      onStop && onStop();
      cancel();
    },
    cancel: () => {
      if (cancelTime !== null)
        tick(cancelTime);
      cancel();
    },
    complete: () => {
      playState = "finished";
    },
    sample: (elapsed) => {
      startTime = 0;
      return tick(elapsed);
    }
  };
  return controls;
}

// node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs
var acceleratedValues = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform",
  "backgroundColor"
]);
var sampleDelta = 10;
var maxDuration2 = 2e4;
var requiresPregeneratedKeyframes = (valueName, options) => options.type === "spring" || valueName === "backgroundColor" || !isWaapiSupportedEasing(options.ease);
function createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {
  const canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== "mirror" && options.damping !== 0 && options.type !== "inertia";
  if (!canAccelerateAnimation)
    return false;
  let hasStopped = false;
  let resolveFinishedPromise;
  let currentFinishedPromise;
  const updateFinishedPromise = () => {
    currentFinishedPromise = new Promise((resolve) => {
      resolveFinishedPromise = resolve;
    });
  };
  updateFinishedPromise();
  let { keyframes: keyframes3, duration = 300, ease: ease2, times } = options;
  if (requiresPregeneratedKeyframes(valueName, options)) {
    const sampleAnimation = animateValue({
      ...options,
      repeat: 0,
      delay: 0
    });
    let state2 = { done: false, value: keyframes3[0] };
    const pregeneratedKeyframes = [];
    let t2 = 0;
    while (!state2.done && t2 < maxDuration2) {
      state2 = sampleAnimation.sample(t2);
      pregeneratedKeyframes.push(state2.value);
      t2 += sampleDelta;
    }
    times = void 0;
    keyframes3 = pregeneratedKeyframes;
    duration = t2 - sampleDelta;
    ease2 = "linear";
  }
  const animation = animateStyle(value.owner.current, valueName, keyframes3, {
    ...options,
    duration,
    ease: ease2,
    times
  });
  const cancelAnimation = () => animation.cancel();
  const safeCancel = () => {
    frame2.update(cancelAnimation);
    resolveFinishedPromise();
    updateFinishedPromise();
  };
  animation.onfinish = () => {
    value.set(getFinalKeyframe(keyframes3, options));
    onComplete && onComplete();
    safeCancel();
  };
  return {
    then(resolve, reject) {
      return currentFinishedPromise.then(resolve, reject);
    },
    get time() {
      return millisecondsToSeconds(animation.currentTime || 0);
    },
    set time(newTime) {
      animation.currentTime = secondsToMilliseconds(newTime);
    },
    get speed() {
      return animation.playbackRate;
    },
    set speed(newSpeed) {
      animation.playbackRate = newSpeed;
    },
    get duration() {
      return millisecondsToSeconds(duration);
    },
    play: () => {
      if (hasStopped)
        return;
      animation.play();
      cancelFrame(cancelAnimation);
    },
    pause: () => animation.pause(),
    stop: () => {
      hasStopped = true;
      if (animation.playState === "idle")
        return;
      const { currentTime } = animation;
      if (currentTime) {
        const sampleAnimation = animateValue({
          ...options,
          autoplay: false
        });
        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);
      }
      safeCancel();
    },
    complete: () => animation.finish(),
    cancel: safeCancel
  };
}

// node_modules/framer-motion/dist/es/animation/animators/instant.mjs
init_shim();
function createInstantAnimation({ keyframes: keyframes3, delay: delay2, onUpdate, onComplete }) {
  const setValue = () => {
    onUpdate && onUpdate(keyframes3[keyframes3.length - 1]);
    onComplete && onComplete();
    return {
      time: 0,
      speed: 1,
      duration: 0,
      play: noop3,
      pause: noop3,
      stop: noop3,
      then: (resolve) => {
        resolve();
        return Promise.resolve();
      },
      cancel: noop3,
      complete: noop3
    };
  };
  return delay2 ? animateValue({
    keyframes: [0, 1],
    duration: 0,
    delay: delay2,
    onComplete: setValue
  }) : setValue();
}

// node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
init_shim();
var underDampedSpring = {
  type: "spring",
  stiffness: 500,
  damping: 25,
  restSpeed: 10
};
var criticallyDampedSpring = (target) => ({
  type: "spring",
  stiffness: 550,
  damping: target === 0 ? 2 * Math.sqrt(550) : 30,
  restSpeed: 10
});
var keyframesTransition = {
  type: "keyframes",
  duration: 0.8
};
var ease = {
  type: "keyframes",
  ease: [0.25, 0.1, 0.35, 1],
  duration: 0.3
};
var getDefaultTransition = (valueKey, { keyframes: keyframes3 }) => {
  if (keyframes3.length > 2) {
    return keyframesTransition;
  } else if (transformProps.has(valueKey)) {
    return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes3[1]) : underDampedSpring;
  }
  return ease;
};

// node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
init_shim();
var isAnimatable = (key, value) => {
  if (key === "zIndex")
    return false;
  if (typeof value === "number" || Array.isArray(value))
    return true;
  if (typeof value === "string" && complex.test(value) && !value.startsWith("url(")) {
    return true;
  }
  return false;
};

// node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/types/complex/filter.mjs
init_shim();
var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v) {
  const [name, value] = v.slice(0, -1).split("(");
  if (name === "drop-shadow")
    return v;
  const [number2] = value.match(floatRegex) || [];
  if (!number2)
    return v;
  const unit = value.replace(number2, "");
  let defaultValue = maxDefaults.has(name) ? 1 : 0;
  if (number2 !== value)
    defaultValue *= 100;
  return name + "(" + defaultValue + unit + ")";
}
var functionRegex = /([a-z-]*)\(.*?\)/g;
var filter2 = {
  ...complex,
  getAnimatableNone: (v) => {
    const functions = v.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v;
  }
};

// node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
init_shim();
var defaultValueTypes = {
  ...numberValueTypes,
  color: color2,
  backgroundColor: color2,
  outlineColor: color2,
  fill: color2,
  stroke: color2,
  borderColor: color2,
  borderTopColor: color2,
  borderRightColor: color2,
  borderBottomColor: color2,
  borderLeftColor: color2,
  filter: filter2,
  WebkitFilter: filter2
};
var getDefaultValueType = (key) => defaultValueTypes[key];

// node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
function getAnimatableNone2(key, value) {
  let defaultValueType = getDefaultValueType(key);
  if (defaultValueType !== filter2)
    defaultValueType = complex;
  return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
}

// node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
init_shim();
function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition4 }) {
  return !!Object.keys(transition4).length;
}
function isZero(value) {
  return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
}
function getZeroUnit(potentialUnitType) {
  return typeof potentialUnitType === "number" ? 0 : getAnimatableNone2("", potentialUnitType);
}
function getValueTransition(transition4, key) {
  return transition4[key] || transition4["default"] || transition4;
}

// node_modules/framer-motion/dist/es/animation/utils/wildcards.mjs
init_shim();
function fillWildcardKeyframes(origin, [...keyframes3]) {
  for (let i = 0; i < keyframes3.length; i++) {
    if (keyframes3[i] === null) {
      keyframes3[i] = i === 0 ? origin : keyframes3[i - 1];
    }
  }
  return keyframes3;
}

// node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs
function getKeyframes(value, valueName, target, transition4) {
  const isTargetAnimatable = isAnimatable(valueName, target);
  let origin = transition4.from !== void 0 ? transition4.from : value.get();
  if (origin === "none" && isTargetAnimatable && typeof target === "string") {
    origin = getAnimatableNone2(valueName, target);
  } else if (isZero(origin) && typeof target === "string") {
    origin = getZeroUnit(target);
  } else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") {
    target = getZeroUnit(origin);
  }
  if (Array.isArray(target)) {
    return fillWildcardKeyframes(origin, target);
  } else {
    return [origin, target];
  }
}

// node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
var animateMotionValue = (valueName, value, target, transition4 = {}) => {
  return (onComplete) => {
    const valueTransition = getValueTransition(transition4, valueName) || {};
    const delay2 = valueTransition.delay || transition4.delay || 0;
    let { elapsed = 0 } = transition4;
    elapsed = elapsed - secondsToMilliseconds(delay2);
    const keyframes3 = getKeyframes(value, valueName, target, valueTransition);
    const originKeyframe = keyframes3[0];
    const targetKeyframe = keyframes3[keyframes3.length - 1];
    const isOriginAnimatable = isAnimatable(valueName, originKeyframe);
    const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);
    warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
    let options = {
      keyframes: keyframes3,
      velocity: value.getVelocity(),
      ease: "easeOut",
      ...valueTransition,
      delay: -elapsed,
      onUpdate: (v) => {
        value.set(v);
        valueTransition.onUpdate && valueTransition.onUpdate(v);
      },
      onComplete: () => {
        onComplete();
        valueTransition.onComplete && valueTransition.onComplete();
      }
    };
    if (!isTransitionDefined(valueTransition)) {
      options = {
        ...options,
        ...getDefaultTransition(valueName, options)
      };
    }
    if (options.duration) {
      options.duration = secondsToMilliseconds(options.duration);
    }
    if (options.repeatDelay) {
      options.repeatDelay = secondsToMilliseconds(options.repeatDelay);
    }
    if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false) {
      return createInstantAnimation(options);
    }
    if (value.owner && value.owner.current instanceof HTMLElement && !value.owner.getProps().onUpdate) {
      const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);
      if (acceleratedAnimation)
        return acceleratedAnimation;
    }
    return animateValue(options);
  };
};

// node_modules/framer-motion/dist/es/value/use-will-change/is.mjs
init_shim();
function isWillChangeMotionValue(value) {
  return Boolean(isMotionValue(value) && value.add);
}

// node_modules/framer-motion/dist/es/render/utils/setters.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
init_shim();
var isNumericalString = (v) => /^\-?\d*\.?\d+$/.test(v);

// node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
init_shim();
var isZeroValueString = (v) => /^0[^.\s]+$/.test(v);

// node_modules/framer-motion/dist/es/value/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/array.mjs
init_shim();
function addUniqueItem(arr, item) {
  if (arr.indexOf(item) === -1)
    arr.push(item);
}
function removeItem2(arr, item) {
  const index = arr.indexOf(item);
  if (index > -1)
    arr.splice(index, 1);
}
function moveItem([...arr], fromIndex, toIndex) {
  const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;
  if (startIndex >= 0 && startIndex < arr.length) {
    const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;
    const [item] = arr.splice(fromIndex, 1);
    arr.splice(endIndex, 0, item);
  }
  return arr;
}

// node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
var SubscriptionManager = class {
  constructor() {
    this.subscriptions = [];
  }
  add(handler) {
    addUniqueItem(this.subscriptions, handler);
    return () => removeItem2(this.subscriptions, handler);
  }
  notify(a, b, c) {
    const numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions)
      return;
    if (numSubscriptions === 1) {
      this.subscriptions[0](a, b, c);
    } else {
      for (let i = 0; i < numSubscriptions; i++) {
        const handler = this.subscriptions[i];
        handler && handler(a, b, c);
      }
    }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
};

// node_modules/framer-motion/dist/es/utils/warn-once.mjs
init_shim();
var warned = /* @__PURE__ */ new Set();
function warnOnce(condition, message, element) {
  if (condition || warned.has(message))
    return;
  console.warn(message);
  if (element)
    console.warn(element);
  warned.add(message);
}

// node_modules/framer-motion/dist/es/value/index.mjs
var isFloat = (value) => {
  return !isNaN(parseFloat(value));
};
var MotionValue = class {
  constructor(init, options = {}) {
    this.version = "10.12.4";
    this.timeDelta = 0;
    this.lastUpdated = 0;
    this.canTrackVelocity = false;
    this.events = {};
    this.updateAndNotify = (v, render = true) => {
      this.prev = this.current;
      this.current = v;
      const { delta, timestamp } = frameData;
      if (this.lastUpdated !== timestamp) {
        this.timeDelta = delta;
        this.lastUpdated = timestamp;
        frame2.postRender(this.scheduleVelocityCheck);
      }
      if (this.prev !== this.current && this.events.change) {
        this.events.change.notify(this.current);
      }
      if (this.events.velocityChange) {
        this.events.velocityChange.notify(this.getVelocity());
      }
      if (render && this.events.renderRequest) {
        this.events.renderRequest.notify(this.current);
      }
    };
    this.scheduleVelocityCheck = () => frame2.postRender(this.velocityCheck);
    this.velocityCheck = ({ timestamp }) => {
      if (timestamp !== this.lastUpdated) {
        this.prev = this.current;
        if (this.events.velocityChange) {
          this.events.velocityChange.notify(this.getVelocity());
        }
      }
    };
    this.hasAnimated = false;
    this.prev = this.current = init;
    this.canTrackVelocity = isFloat(this.current);
    this.owner = options.owner;
  }
  onChange(subscription) {
    if (import_process.default.env.NODE_ENV !== "production") {
      warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`);
    }
    return this.on("change", subscription);
  }
  on(eventName, callback) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    const unsubscribe = this.events[eventName].add(callback);
    if (eventName === "change") {
      return () => {
        unsubscribe();
        frame2.read(() => {
          if (!this.events.change.getSize()) {
            this.stop();
          }
        });
      };
    }
    return unsubscribe;
  }
  clearListeners() {
    for (const eventManagers in this.events) {
      this.events[eventManagers].clear();
    }
  }
  attach(passiveEffect, stopPassiveEffect) {
    this.passiveEffect = passiveEffect;
    this.stopPassiveEffect = stopPassiveEffect;
  }
  set(v, render = true) {
    if (!render || !this.passiveEffect) {
      this.updateAndNotify(v, render);
    } else {
      this.passiveEffect(v, this.updateAndNotify);
    }
  }
  setWithVelocity(prev, current, delta) {
    this.set(current);
    this.prev = prev;
    this.timeDelta = delta;
  }
  jump(v) {
    this.updateAndNotify(v);
    this.prev = v;
    this.stop();
    if (this.stopPassiveEffect)
      this.stopPassiveEffect();
  }
  get() {
    return this.current;
  }
  getPrevious() {
    return this.prev;
  }
  getVelocity() {
    return this.canTrackVelocity ? velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
  }
  start(startAnimation) {
    this.stop();
    return new Promise((resolve) => {
      this.hasAnimated = true;
      this.animation = startAnimation(resolve);
      if (this.events.animationStart) {
        this.events.animationStart.notify();
      }
    }).then(() => {
      if (this.events.animationComplete) {
        this.events.animationComplete.notify();
      }
      this.clearAnimation();
    });
  }
  stop() {
    if (this.animation) {
      this.animation.stop();
      if (this.events.animationCancel) {
        this.events.animationCancel.notify();
      }
    }
    this.clearAnimation();
  }
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  destroy() {
    this.clearListeners();
    this.stop();
    if (this.stopPassiveEffect) {
      this.stopPassiveEffect();
    }
  }
};
function motionValue(init, options) {
  return new MotionValue(init, options);
}

// node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
init_shim();
var testValueType = (v) => (type) => type.test(v);

// node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
init_shim();
var auto = {
  test: (v) => v === "auto",
  parse: (v) => v
};

// node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
var dimensionValueTypes = [number, px3, percent, degrees, vw, vh, auto];
var findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));

// node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
var valueTypes = [...dimensionValueTypes, color2, complex];
var findValueType = (v) => valueTypes.find(testValueType(v));

// node_modules/framer-motion/dist/es/render/utils/setters.mjs
function setMotionValue(visualElement, key, value) {
  if (visualElement.hasValue(key)) {
    visualElement.getValue(key).set(value);
  } else {
    visualElement.addValue(key, motionValue(value));
  }
}
function setTarget(visualElement, definition) {
  const resolved = resolveVariant(visualElement, definition);
  let { transitionEnd = {}, transition: transition4 = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};
  target = { ...target, ...transitionEnd };
  for (const key in target) {
    const value = resolveFinalValueInKeyframes(target[key]);
    setMotionValue(visualElement, key, value);
  }
}
function checkTargetForNewValues(visualElement, target, origin) {
  var _a40, _b8;
  const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));
  const numNewValues = newValueKeys.length;
  if (!numNewValues)
    return;
  for (let i = 0; i < numNewValues; i++) {
    const key = newValueKeys[i];
    const targetValue = target[key];
    let value = null;
    if (Array.isArray(targetValue)) {
      value = targetValue[0];
    }
    if (value === null) {
      value = (_b8 = (_a40 = origin[key]) !== null && _a40 !== void 0 ? _a40 : visualElement.readValue(key)) !== null && _b8 !== void 0 ? _b8 : target[key];
    }
    if (value === void 0 || value === null)
      continue;
    if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
      value = parseFloat(value);
    } else if (!findValueType(value) && complex.test(targetValue)) {
      value = getAnimatableNone2(key, targetValue);
    }
    visualElement.addValue(key, motionValue(value, { owner: visualElement }));
    if (origin[key] === void 0) {
      origin[key] = value;
    }
    if (value !== null)
      visualElement.setBaseTarget(key, value);
  }
}
function getOriginFromTransition(key, transition4) {
  if (!transition4)
    return;
  const valueTransition = transition4[key] || transition4["default"] || transition4;
  return valueTransition.from;
}
function getOrigin(target, transition4, visualElement) {
  const origin = {};
  for (const key in target) {
    const transitionOrigin = getOriginFromTransition(key, transition4);
    if (transitionOrigin !== void 0) {
      origin[key] = transitionOrigin;
    } else {
      const value = visualElement.getValue(key);
      if (value) {
        origin[key] = value.get();
      }
    }
  }
  return origin;
}

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
  needsAnimating[key] = false;
  return shouldBlock;
}
function animateTarget(visualElement, definition, { delay: delay2 = 0, transitionOverride, type } = {}) {
  let { transition: transition4 = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);
  const willChange = visualElement.getValue("willChange");
  if (transitionOverride)
    transition4 = transitionOverride;
  const animations2 = [];
  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
  for (const key in target) {
    const value = visualElement.getValue(key);
    const valueTarget = target[key];
    if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
      continue;
    }
    const valueTransition = { delay: delay2, elapsed: 0, ...transition4 };
    if (window.HandoffAppearAnimations && !value.hasAnimated) {
      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];
      if (appearId) {
        valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame2);
      }
    }
    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? { type: false } : valueTransition));
    const animation = value.animation;
    if (isWillChangeMotionValue(willChange)) {
      willChange.add(key);
      animation.then(() => willChange.remove(key));
    }
    animations2.push(animation);
  }
  if (transitionEnd) {
    Promise.all(animations2).then(() => {
      transitionEnd && setTarget(visualElement, transitionEnd);
    });
  }
  return animations2;
}

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs
init_shim();
function animateVariant(visualElement, variant, options = {}) {
  const resolved = resolveVariant(visualElement, variant, options.custom);
  let { transition: transition4 = visualElement.getDefaultTransition() || {} } = resolved || {};
  if (options.transitionOverride) {
    transition4 = options.transitionOverride;
  }
  const getAnimation = resolved ? () => Promise.all(animateTarget(visualElement, resolved, options)) : () => Promise.resolve();
  const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {
    const { delayChildren = 0, staggerChildren, staggerDirection } = transition4;
    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
  } : () => Promise.resolve();
  const { when } = transition4;
  if (when) {
    const [first, last] = when === "beforeChildren" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];
    return first().then(() => last());
  } else {
    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
  }
}
function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
  const animations2 = [];
  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
  const generateStaggerDuration = staggerDirection === 1 ? (i = 0) => i * staggerChildren : (i = 0) => maxStaggerDuration - i * staggerChildren;
  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {
    child.notify("AnimationStart", variant);
    animations2.push(animateVariant(child, variant, {
      ...options,
      delay: delayChildren + generateStaggerDuration(i)
    }).then(() => child.notify("AnimationComplete", variant)));
  });
  return Promise.all(animations2);
}
function sortByTreeOrder(a, b) {
  return a.sortNodePosition(b);
}

// node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
function animateVisualElement(visualElement, definition, options = {}) {
  visualElement.notify("AnimationStart", definition);
  let animation;
  if (Array.isArray(definition)) {
    const animations2 = definition.map((variant) => animateVariant(visualElement, variant, options));
    animation = Promise.all(animations2);
  } else if (typeof definition === "string") {
    animation = animateVariant(visualElement, definition, options);
  } else {
    const resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement, definition, options.custom) : definition;
    animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
  }
  return animation.then(() => visualElement.notify("AnimationComplete", definition));
}

// node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
var reversePriorityOrder = [...variantPriorityOrder].reverse();
var numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement) {
  return (animations2) => Promise.all(animations2.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
}
function createAnimationState(visualElement) {
  let animate2 = animateList(visualElement);
  const state2 = createState();
  let isInitialRender = true;
  const buildResolvedTypeValues = (acc, definition) => {
    const resolved = resolveVariant(visualElement, definition);
    if (resolved) {
      const { transition: transition4, transitionEnd, ...target } = resolved;
      acc = { ...acc, ...target, ...transitionEnd };
    }
    return acc;
  };
  function setAnimateFunction(makeAnimator) {
    animate2 = makeAnimator(visualElement);
  }
  function animateChanges(options, changedActiveType) {
    const props = visualElement.getProps();
    const context = visualElement.getVariantContext(true) || {};
    const animations2 = [];
    const removedKeys = /* @__PURE__ */ new Set();
    let encounteredKeys = {};
    let removedVariantIndex = Infinity;
    for (let i = 0; i < numAnimationTypes; i++) {
      const type = reversePriorityOrder[i];
      const typeState = state2[type];
      const prop = props[type] !== void 0 ? props[type] : context[type];
      const propIsVariant = isVariantLabel(prop);
      const activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i;
      let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = { ...encounteredKeys };
      if (!typeState.isActive && activeDelta === null || !prop && !typeState.prevProp || isAnimationControls(prop) || typeof prop === "boolean") {
        continue;
      }
      const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
      let shouldAnimateType = variantDidChange || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i > removedVariantIndex && propIsVariant;
      const definitionList = Array.isArray(prop) ? prop : [prop];
      let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
      if (activeDelta === false)
        resolvedValues = {};
      const { prevResolvedValues = {} } = typeState;
      const allKeys = {
        ...prevResolvedValues,
        ...resolvedValues
      };
      const markToAnimate = (key) => {
        shouldAnimateType = true;
        removedKeys.delete(key);
        typeState.needsAnimating[key] = true;
      };
      for (const key in allKeys) {
        const next = resolvedValues[key];
        const prev = prevResolvedValues[key];
        if (encounteredKeys.hasOwnProperty(key))
          continue;
        if (next !== prev) {
          if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
            if (!shallowCompare(next, prev) || variantDidChange) {
              markToAnimate(key);
            } else {
              typeState.protectedKeys[key] = true;
            }
          } else if (next !== void 0) {
            markToAnimate(key);
          } else {
            removedKeys.add(key);
          }
        } else if (next !== void 0 && removedKeys.has(key)) {
          markToAnimate(key);
        } else {
          typeState.protectedKeys[key] = true;
        }
      }
      typeState.prevProp = prop;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = { ...encounteredKeys, ...resolvedValues };
      }
      if (isInitialRender && visualElement.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      if (shouldAnimateType && !isInherited) {
        animations2.push(...definitionList.map((animation) => ({
          animation,
          options: { type, ...options }
        })));
      }
    }
    if (removedKeys.size) {
      const fallbackAnimation = {};
      removedKeys.forEach((key) => {
        const fallbackTarget = visualElement.getBaseTarget(key);
        if (fallbackTarget !== void 0) {
          fallbackAnimation[key] = fallbackTarget;
        }
      });
      animations2.push({ animation: fallbackAnimation });
    }
    let shouldAnimate = Boolean(animations2.length);
    if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate2(animations2) : Promise.resolve();
  }
  function setActive(type, isActive, options) {
    var _a40;
    if (state2[type].isActive === isActive)
      return Promise.resolve();
    (_a40 = visualElement.variantChildren) === null || _a40 === void 0 ? void 0 : _a40.forEach((child) => {
      var _a41;
      return (_a41 = child.animationState) === null || _a41 === void 0 ? void 0 : _a41.setActive(type, isActive);
    });
    state2[type].isActive = isActive;
    const animations2 = animateChanges(options, type);
    for (const key in state2) {
      state2[key].protectedKeys = {};
    }
    return animations2;
  }
  return {
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: () => state2
  };
}
function checkVariantsDidChange(prev, next) {
  if (typeof next === "string") {
    return next !== prev;
  } else if (Array.isArray(next)) {
    return !shallowCompare(next, prev);
  }
  return false;
}
function createTypeState(isActive = false) {
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  return {
    animate: createTypeState(true),
    whileInView: createTypeState(),
    whileHover: createTypeState(),
    whileTap: createTypeState(),
    whileDrag: createTypeState(),
    whileFocus: createTypeState(),
    exit: createTypeState()
  };
}

// node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
var AnimationFeature = class extends Feature {
  constructor(node2) {
    super(node2);
    node2.animationState || (node2.animationState = createAnimationState(node2));
  }
  updateAnimationControlsSubscription() {
    const { animate: animate2 } = this.node.getProps();
    this.unmount();
    if (isAnimationControls(animate2)) {
      this.unmount = animate2.subscribe(this.node);
    }
  }
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate: animate2 } = this.node.getProps();
    const { animate: prevAnimate } = this.node.prevProps || {};
    if (animate2 !== prevAnimate) {
      this.updateAnimationControlsSubscription();
    }
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs
init_shim();
var id2 = 0;
var ExitAnimationFeature = class extends Feature {
  constructor() {
    super(...arguments);
    this.id = id2++;
  }
  update() {
    if (!this.node.presenceContext)
      return;
    const { isPresent: isPresent2, onExitComplete, custom } = this.node.presenceContext;
    const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || isPresent2 === prevIsPresent) {
      return;
    }
    const exitAnimation = this.node.animationState.setActive("exit", !isPresent2, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });
    if (onExitComplete && !isPresent2) {
      exitAnimation.then(() => onExitComplete(this.id));
    }
  }
  mount() {
    const { register } = this.node.presenceContext || {};
    if (register) {
      this.unmount = register(this.id);
    }
  }
  unmount() {
  }
};

// node_modules/framer-motion/dist/es/motion/features/animations.mjs
var animations = {
  animation: {
    Feature: AnimationFeature
  },
  exit: {
    Feature: ExitAnimationFeature
  }
};

// node_modules/framer-motion/dist/es/motion/features/drag.mjs
init_shim();

// node_modules/framer-motion/dist/es/gestures/drag/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
init_shim();

// node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/distance.mjs
init_shim();
var distance2 = (a, b) => Math.abs(a - b);
function distance2D(a, b) {
  const xDelta = distance2(a.x, b.x);
  const yDelta = distance2(a.y, b.y);
  return Math.sqrt(xDelta ** 2 + yDelta ** 2);
}

// node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs
var PanSession2 = class {
  constructor(event, handlers2, { transformPagePoint } = {}) {
    this.startEvent = null;
    this.lastMoveEvent = null;
    this.lastMoveEventInfo = null;
    this.handlers = {};
    this.updatePoint = () => {
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const info2 = getPanInfo(this.lastMoveEventInfo, this.history);
      const isPanStarted = this.startEvent !== null;
      const isDistancePastThreshold = distance2D(info2.offset, { x: 0, y: 0 }) >= 3;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      const { point: point2 } = info2;
      const { timestamp: timestamp2 } = frameData;
      this.history.push({ ...point2, timestamp: timestamp2 });
      const { onStart, onMove } = this.handlers;
      if (!isPanStarted) {
        onStart && onStart(this.lastMoveEvent, info2);
        this.startEvent = this.lastMoveEvent;
      }
      onMove && onMove(this.lastMoveEvent, info2);
    };
    this.handlePointerMove = (event2, info2) => {
      this.lastMoveEvent = event2;
      this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint);
      frame2.update(this.updatePoint, true);
    };
    this.handlePointerUp = (event2, info2) => {
      this.end();
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const { onEnd, onSessionEnd } = this.handlers;
      const panInfo = getPanInfo(event2.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint), this.history);
      if (this.startEvent && onEnd) {
        onEnd(event2, panInfo);
      }
      onSessionEnd && onSessionEnd(event2, panInfo);
    };
    if (!isPrimaryPointer(event))
      return;
    this.handlers = handlers2;
    this.transformPagePoint = transformPagePoint;
    const info = extractEventInfo2(event);
    const initialInfo = transformPoint(info, this.transformPagePoint);
    const { point } = initialInfo;
    const { timestamp } = frameData;
    this.history = [{ ...point, timestamp }];
    const { onSessionStart } = handlers2;
    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
    this.removeListeners = pipe5(addPointerEvent2(window, "pointermove", this.handlePointerMove), addPointerEvent2(window, "pointerup", this.handlePointerUp), addPointerEvent2(window, "pointercancel", this.handlePointerUp));
  }
  updateHandlers(handlers2) {
    this.handlers = handlers2;
  }
  end() {
    this.removeListeners && this.removeListeners();
    cancelFrame(this.updatePoint);
  }
};
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint(a, b) {
  return { x: a.x - b.x, y: a.y - b.y };
}
function getPanInfo({ point }, history) {
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history)),
    offset: subtractPoint(point, startDevicePoint(history)),
    velocity: getVelocity2(history, 0.1)
  };
}
function startDevicePoint(history) {
  return history[0];
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
function getVelocity2(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  let i = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = lastDevicePoint(history);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
  if (time === 0) {
    return { x: 0, y: 0 };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time,
    y: (lastPoint.y - timestampedPoint.y) / time
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}

// node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
init_shim();

// node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
init_shim();
function calcLength(axis) {
  return axis.max - axis.min;
}
function isNear(value, target = 0, maxDistance = 0.01) {
  return Math.abs(value - target) <= maxDistance;
}
function calcAxisDelta(delta, source, target, origin = 0.5) {
  delta.origin = origin;
  delta.originPoint = mix2(source.min, source.max, delta.origin);
  delta.scale = calcLength(target) / calcLength(source);
  if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
    delta.scale = 1;
  delta.translate = mix2(target.min, target.max, delta.origin) - delta.originPoint;
  if (isNear(delta.translate) || isNaN(delta.translate))
    delta.translate = 0;
}
function calcBoxDelta(delta, source, target, origin) {
  calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : void 0);
  calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : void 0);
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength(relative);
}
function calcRelativeBox(target, relative, parent) {
  calcRelativeAxis(target.x, relative.x, parent.x);
  calcRelativeAxis(target.y, relative.y, parent.y);
}
function calcRelativeAxisPosition(target, layout3, parent) {
  target.min = layout3.min - parent.min;
  target.max = target.min + calcLength(layout3);
}
function calcRelativePosition(target, layout3, parent) {
  calcRelativeAxisPosition(target.x, layout3.x, parent.x);
  calcRelativeAxisPosition(target.y, layout3.y, parent.y);
}

// node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
function applyConstraints(point, { min, max }, elastic) {
  if (min !== void 0 && point < min) {
    point = elastic ? mix2(min, point, elastic.min) : Math.max(point, min);
  } else if (max !== void 0 && point > max) {
    point = elastic ? mix2(max, point, elastic.max) : Math.min(point, max);
  }
  return point;
}
function calcRelativeAxisConstraints(axis, min, max) {
  return {
    min: min !== void 0 ? axis.min + min : void 0,
    max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left, right),
    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  let min = constraintsAxis.min - layoutAxis.min;
  let max = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    [min, max] = [max, min];
  }
  return { min, max };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcOrigin2(source, target) {
  let origin = 0.5;
  const sourceLength = calcLength(source);
  const targetLength = calcLength(target);
  if (targetLength > sourceLength) {
    origin = progress(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin = progress(source.min, source.max - targetLength, target.min);
  }
  return clamp(0, 1, origin);
}
function rebaseAxisConstraints(layout3, constraints) {
  const relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout3.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout3.min;
  }
  return relativeConstraints;
}
var defaultElastic = 0.35;
function resolveDragElastic(dragElastic = defaultElastic) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel)
  };
}
function resolvePointElastic(dragElastic, label) {
  return typeof dragElastic === "number" ? dragElastic : dragElastic[label] || 0;
}

// node_modules/framer-motion/dist/es/projection/geometry/models.mjs
init_shim();
var createAxisDelta = () => ({
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0
});
var createDelta = () => ({
  x: createAxisDelta(),
  y: createAxisDelta()
});
var createAxis = () => ({ min: 0, max: 0 });
var createBox = () => ({
  x: createAxis(),
  y: createAxis()
});

// node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
init_shim();
function eachAxis(callback) {
  return [callback("x"), callback("y")];
}

// node_modules/framer-motion/dist/es/projection/utils/measure.mjs
init_shim();

// node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
init_shim();
function convertBoundingBoxToBox({ top, left, right, bottom }) {
  return {
    x: { min: left, max: right },
    y: { min: top, max: bottom }
  };
}
function convertBoxToBoundingBox({ x, y }) {
  return { top: y.min, right: x.max, bottom: y.max, left: x.min };
}
function transformBoxPoints(point, transformPoint2) {
  if (!transformPoint2)
    return point;
  const topLeft = transformPoint2({ x: point.left, y: point.top });
  const bottomRight = transformPoint2({ x: point.right, y: point.bottom });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
init_shim();

// node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
init_shim();
function isIdentityScale(scale3) {
  return scale3 === void 0 || scale3 === 1;
}
function hasScale({ scale: scale3, scaleX, scaleY }) {
  return !isIdentityScale(scale3) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
}
function hasTransform(values) {
  return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY;
}
function has2DTranslate(values) {
  return is2DTranslate(values.x) || is2DTranslate(values.y);
}
function is2DTranslate(value) {
  return value && value !== "0%";
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
function scalePoint(point, scale3, originPoint) {
  const distanceFromOrigin = point - originPoint;
  const scaled = scale3 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate, scale3, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale3, originPoint) + translate;
}
function applyAxisDelta(axis, translate = 0, scale3 = 1, originPoint, boxScale) {
  axis.min = applyPointDelta(axis.min, translate, scale3, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate, scale3, originPoint, boxScale);
}
function applyBoxDelta(box, { x, y }) {
  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
}
function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
  const treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  let node2;
  let delta;
  for (let i = 0; i < treeLength; i++) {
    node2 = treePath[i];
    delta = node2.projectionDelta;
    const instance = node2.instance;
    if (instance && instance.style && instance.style.display === "contents") {
      continue;
    }
    if (isSharedTransition && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
      transformBox(box, {
        x: -node2.scroll.offset.x,
        y: -node2.scroll.offset.y
      });
    }
    if (delta) {
      treeScale.x *= delta.x.scale;
      treeScale.y *= delta.y.scale;
      applyBoxDelta(box, delta);
    }
    if (isSharedTransition && hasTransform(node2.latestValues)) {
      transformBox(box, node2.latestValues);
    }
  }
  treeScale.x = snapToDefault(treeScale.x);
  treeScale.y = snapToDefault(treeScale.y);
}
function snapToDefault(scale3) {
  if (Number.isInteger(scale3))
    return scale3;
  return scale3 > 1.0000000000001 || scale3 < 0.999999999999 ? scale3 : 1;
}
function translateAxis(axis, distance27) {
  axis.min = axis.min + distance27;
  axis.max = axis.max + distance27;
}
function transformAxis(axis, transforms4, [key, scaleKey, originKey]) {
  const axisOrigin = transforms4[originKey] !== void 0 ? transforms4[originKey] : 0.5;
  const originPoint = mix2(axis.min, axis.max, axisOrigin);
  applyAxisDelta(axis, transforms4[key], transforms4[scaleKey], originPoint, transforms4.scale);
}
var xKeys = ["x", "scaleX", "originX"];
var yKeys = ["y", "scaleY", "originY"];
function transformBox(box, transform3) {
  transformAxis(box.x, transform3, xKeys);
  transformAxis(box.y, transform3, yKeys);
}

// node_modules/framer-motion/dist/es/projection/utils/measure.mjs
function measureViewportBox(instance, transformPoint2) {
  return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
}
function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
  const viewportBox = measureViewportBox(element, transformPagePoint);
  const { scroll: scroll3 } = rootProjectionNode2;
  if (scroll3) {
    translateAxis(viewportBox.x, scroll3.offset.x);
    translateAxis(viewportBox.y, scroll3.offset.y);
  }
  return viewportBox;
}

// node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
var elementDragControls = /* @__PURE__ */ new WeakMap();
var VisualElementDragControls = class {
  constructor(visualElement) {
    this.openGlobalLock = null;
    this.isDragging = false;
    this.currentDirection = null;
    this.originPoint = { x: 0, y: 0 };
    this.constraints = false;
    this.hasMutatedConstraints = false;
    this.elastic = createBox();
    this.visualElement = visualElement;
  }
  start(originEvent, { snapToCursor = false } = {}) {
    const { presenceContext } = this.visualElement;
    if (presenceContext && presenceContext.isPresent === false)
      return;
    const onSessionStart = (event) => {
      this.stopAnimation();
      if (snapToCursor) {
        this.snapToCursor(extractEventInfo2(event, "page").point);
      }
    };
    const onStart = (event, info) => {
      const { drag: drag2, dragPropagation, onDragStart } = this.getProps();
      if (drag2 && !dragPropagation) {
        if (this.openGlobalLock)
          this.openGlobalLock();
        this.openGlobalLock = getGlobalLock(drag2);
        if (!this.openGlobalLock)
          return;
      }
      this.isDragging = true;
      this.currentDirection = null;
      this.resolveConstraints();
      if (this.visualElement.projection) {
        this.visualElement.projection.isAnimationBlocked = true;
        this.visualElement.projection.target = void 0;
      }
      eachAxis((axis) => {
        let current = this.getAxisMotionValue(axis).get() || 0;
        if (percent.test(current)) {
          const { projection } = this.visualElement;
          if (projection && projection.layout) {
            const measuredAxis = projection.layout.layoutBox[axis];
            if (measuredAxis) {
              const length = calcLength(measuredAxis);
              current = length * (parseFloat(current) / 100);
            }
          }
        }
        this.originPoint[axis] = current;
      });
      if (onDragStart) {
        frame2.update(() => onDragStart(event, info), false, true);
      }
      const { animationState } = this.visualElement;
      animationState && animationState.setActive("whileDrag", true);
    };
    const onMove = (event, info) => {
      const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
      if (!dragPropagation && !this.openGlobalLock)
        return;
      const { offset } = info;
      if (dragDirectionLock && this.currentDirection === null) {
        this.currentDirection = getCurrentDirection(offset);
        if (this.currentDirection !== null) {
          onDirectionLock && onDirectionLock(this.currentDirection);
        }
        return;
      }
      this.updateAxis("x", info.point, offset);
      this.updateAxis("y", info.point, offset);
      this.visualElement.render();
      onDrag && onDrag(event, info);
    };
    const onSessionEnd = (event, info) => this.stop(event, info);
    this.panSession = new PanSession2(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd
    }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
  }
  stop(event, info) {
    const isDragging = this.isDragging;
    this.cancel();
    if (!isDragging)
      return;
    const { velocity } = info;
    this.startAnimation(velocity);
    const { onDragEnd } = this.getProps();
    if (onDragEnd) {
      frame2.update(() => onDragEnd(event, info));
    }
  }
  cancel() {
    this.isDragging = false;
    const { projection, animationState } = this.visualElement;
    if (projection) {
      projection.isAnimationBlocked = false;
    }
    this.panSession && this.panSession.end();
    this.panSession = void 0;
    const { dragPropagation } = this.getProps();
    if (!dragPropagation && this.openGlobalLock) {
      this.openGlobalLock();
      this.openGlobalLock = null;
    }
    animationState && animationState.setActive("whileDrag", false);
  }
  updateAxis(axis, _point, offset) {
    const { drag: drag2 } = this.getProps();
    if (!offset || !shouldDrag(axis, drag2, this.currentDirection))
      return;
    const axisValue = this.getAxisMotionValue(axis);
    let next = this.originPoint[axis] + offset[axis];
    if (this.constraints && this.constraints[axis]) {
      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
    }
    axisValue.set(next);
  }
  resolveConstraints() {
    const { dragConstraints, dragElastic } = this.getProps();
    const { layout: layout3 } = this.visualElement.projection || {};
    const prevConstraints = this.constraints;
    if (dragConstraints && isRefObject2(dragConstraints)) {
      if (!this.constraints) {
        this.constraints = this.resolveRefConstraints();
      }
    } else {
      if (dragConstraints && layout3) {
        this.constraints = calcRelativeConstraints(layout3.layoutBox, dragConstraints);
      } else {
        this.constraints = false;
      }
    }
    this.elastic = resolveDragElastic(dragElastic);
    if (prevConstraints !== this.constraints && layout3 && this.constraints && !this.hasMutatedConstraints) {
      eachAxis((axis) => {
        if (this.getAxisMotionValue(axis)) {
          this.constraints[axis] = rebaseAxisConstraints(layout3.layoutBox[axis], this.constraints[axis]);
        }
      });
    }
  }
  resolveRefConstraints() {
    const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
    if (!constraints || !isRefObject2(constraints))
      return false;
    const constraintsElement = constraints.current;
    invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
    const { projection } = this.visualElement;
    if (!projection || !projection.layout)
      return false;
    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
    if (onMeasureDragConstraints) {
      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToBox(userConstraints);
      }
    }
    return measuredConstraints;
  }
  startAnimation(velocity) {
    const { drag: drag2, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();
    const constraints = this.constraints || {};
    const momentumAnimations = eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, this.currentDirection)) {
        return;
      }
      let transition4 = constraints && constraints[axis] || {};
      if (dragSnapToOrigin)
        transition4 = { min: 0, max: 0 };
      const bounceStiffness = dragElastic ? 200 : 1e6;
      const bounceDamping = dragElastic ? 40 : 1e7;
      const inertia2 = {
        type: "inertia",
        velocity: dragMomentum ? velocity[axis] : 0,
        bounceStiffness,
        bounceDamping,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10,
        ...dragTransition,
        ...transition4
      };
      return this.startAxisValueAnimation(axis, inertia2);
    });
    return Promise.all(momentumAnimations).then(onDragTransitionEnd);
  }
  startAxisValueAnimation(axis, transition4) {
    const axisValue = this.getAxisMotionValue(axis);
    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition4));
  }
  stopAnimation() {
    eachAxis((axis) => this.getAxisMotionValue(axis).stop());
  }
  getAxisMotionValue(axis) {
    const dragKey = "_drag" + axis.toUpperCase();
    const props = this.visualElement.getProps();
    const externalMotionValue = props[dragKey];
    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : void 0) || 0);
  }
  snapToCursor(point) {
    eachAxis((axis) => {
      const { drag: drag2 } = this.getProps();
      if (!shouldDrag(axis, drag2, this.currentDirection))
        return;
      const { projection } = this.visualElement;
      const axisValue = this.getAxisMotionValue(axis);
      if (projection && projection.layout) {
        const { min, max } = projection.layout.layoutBox[axis];
        axisValue.set(point[axis] - mix2(min, max, 0.5));
      }
    });
  }
  scalePositionWithinConstraints() {
    if (!this.visualElement.current)
      return;
    const { drag: drag2, dragConstraints } = this.getProps();
    const { projection } = this.visualElement;
    if (!isRefObject2(dragConstraints) || !projection || !this.constraints)
      return;
    this.stopAnimation();
    const boxProgress = { x: 0, y: 0 };
    eachAxis((axis) => {
      const axisValue = this.getAxisMotionValue(axis);
      if (axisValue) {
        const latest = axisValue.get();
        boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, this.constraints[axis]);
      }
    });
    const { transformTemplate: transformTemplate2 } = this.visualElement.getProps();
    this.visualElement.current.style.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
    projection.root && projection.root.updateScroll();
    projection.updateLayout();
    this.resolveConstraints();
    eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, null))
        return;
      const axisValue = this.getAxisMotionValue(axis);
      const { min, max } = this.constraints[axis];
      axisValue.set(mix2(min, max, boxProgress[axis]));
    });
  }
  addListeners() {
    if (!this.visualElement.current)
      return;
    elementDragControls.set(this.visualElement, this);
    const element = this.visualElement.current;
    const stopPointerListener = addPointerEvent2(element, "pointerdown", (event) => {
      const { drag: drag2, dragListener = true } = this.getProps();
      drag2 && dragListener && this.start(event);
    });
    const measureDragConstraints = () => {
      const { dragConstraints } = this.getProps();
      if (isRefObject2(dragConstraints)) {
        this.constraints = this.resolveRefConstraints();
      }
    };
    const { projection } = this.visualElement;
    const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
    if (projection && !projection.layout) {
      projection.root && projection.root.updateScroll();
      projection.updateLayout();
    }
    measureDragConstraints();
    const stopResizeListener = addDomEvent2(window, "resize", () => this.scalePositionWithinConstraints());
    const stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta, hasLayoutChanged }) => {
      if (this.isDragging && hasLayoutChanged) {
        eachAxis((axis) => {
          const motionValue2 = this.getAxisMotionValue(axis);
          if (!motionValue2)
            return;
          this.originPoint[axis] += delta[axis].translate;
          motionValue2.set(motionValue2.get() + delta[axis].translate);
        });
        this.visualElement.render();
      }
    });
    return () => {
      stopResizeListener();
      stopPointerListener();
      stopMeasureLayoutListener();
      stopLayoutUpdateListener && stopLayoutUpdateListener();
    };
  }
  getProps() {
    const props = this.visualElement.getProps();
    const { drag: drag2 = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props;
    return {
      ...props,
      drag: drag2,
      dragDirectionLock,
      dragPropagation,
      dragConstraints,
      dragElastic,
      dragMomentum
    };
  }
};
function shouldDrag(direction3, drag2, currentDirection) {
  return (drag2 === true || drag2 === direction3) && (currentDirection === null || currentDirection === direction3);
}
function getCurrentDirection(offset, lockThreshold = 10) {
  let direction3 = null;
  if (Math.abs(offset.y) > lockThreshold) {
    direction3 = "y";
  } else if (Math.abs(offset.x) > lockThreshold) {
    direction3 = "x";
  }
  return direction3;
}

// node_modules/framer-motion/dist/es/gestures/drag/index.mjs
var DragGesture = class extends Feature {
  constructor(node2) {
    super(node2);
    this.removeGroupControls = noop3;
    this.removeListeners = noop3;
    this.controls = new VisualElementDragControls(node2);
  }
  mount() {
    const { dragControls } = this.node.getProps();
    if (dragControls) {
      this.removeGroupControls = dragControls.subscribe(this.controls);
    }
    this.removeListeners = this.controls.addListeners() || noop3;
  }
  unmount() {
    this.removeGroupControls();
    this.removeListeners();
  }
};

// node_modules/framer-motion/dist/es/gestures/pan/index.mjs
init_shim();
var asyncHandler = (handler) => (event, info) => {
  if (handler) {
    frame2.update(() => handler(event, info));
  }
};
var PanGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.removePointerDownListener = noop3;
  }
  onPointerDown(pointerDownEvent) {
    this.session = new PanSession2(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });
  }
  createPanHandlers() {
    const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
    return {
      onSessionStart: asyncHandler(onPanSessionStart),
      onStart: asyncHandler(onPanStart),
      onMove: onPan,
      onEnd: (event, info) => {
        delete this.session;
        if (onPanEnd) {
          frame2.update(() => onPanEnd(event, info));
        }
      }
    };
  }
  mount() {
    this.removePointerDownListener = addPointerEvent2(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener();
    this.session && this.session.end();
  }
};

// node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
init_shim();
var import_react38 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
init_shim();
var import_react37 = __toESM(require_react(), 1);
function usePresence() {
  const context = (0, import_react37.useContext)(PresenceContext);
  if (context === null)
    return [true, null];
  const { isPresent: isPresent2, onExitComplete, register } = context;
  const id4 = (0, import_react37.useId)();
  (0, import_react37.useEffect)(() => register(id4), []);
  const safeToRemove = () => onExitComplete && onExitComplete(id4);
  return !isPresent2 && onExitComplete ? [false, safeToRemove] : [true];
}
function useIsPresent() {
  return isPresent((0, import_react37.useContext)(PresenceContext));
}
function isPresent(context) {
  return context === null ? true : context.isPresent;
}

// node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
init_shim();
function pixelsToPercent(pixels, axis) {
  if (axis.max === axis.min)
    return 0;
  return pixels / (axis.max - axis.min) * 100;
}
var correctBorderRadius = {
  correct: (latest, node2) => {
    if (!node2.target)
      return latest;
    if (typeof latest === "string") {
      if (px3.test(latest)) {
        latest = parseFloat(latest);
      } else {
        return latest;
      }
    }
    const x = pixelsToPercent(latest, node2.target.x);
    const y = pixelsToPercent(latest, node2.target.y);
    return `${x}% ${y}%`;
  }
};

// node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
init_shim();
var correctBoxShadow = {
  correct: (latest, { treeScale, projectionDelta }) => {
    const original = latest;
    const shadow = complex.parse(latest);
    if (shadow.length > 5)
      return original;
    const template = complex.createTransformer(latest);
    const offset = typeof shadow[0] !== "number" ? 1 : 0;
    const xScale = projectionDelta.x.scale * treeScale.x;
    const yScale = projectionDelta.y.scale * treeScale.y;
    shadow[0 + offset] /= xScale;
    shadow[1 + offset] /= yScale;
    const averageScale = mix2(xScale, yScale, 0.5);
    if (typeof shadow[2 + offset] === "number")
      shadow[2 + offset] /= averageScale;
    if (typeof shadow[3 + offset] === "number")
      shadow[3 + offset] /= averageScale;
    return template(shadow);
  }
};

// node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var MeasureLayoutWithContext = class extends import_react38.default.Component {
  componentDidMount() {
    const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
    const { projection } = visualElement;
    addScaleCorrector(defaultScaleCorrectors);
    if (projection) {
      if (layoutGroup.group)
        layoutGroup.group.add(projection);
      if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
        switchLayoutGroup.register(projection);
      }
      projection.root.didUpdate();
      projection.addEventListener("animationComplete", () => {
        this.safeToRemove();
      });
      projection.setOptions({
        ...projection.options,
        onExitComplete: () => this.safeToRemove()
      });
    }
    globalProjectionState.hasEverUpdated = true;
  }
  getSnapshotBeforeUpdate(prevProps) {
    const { layoutDependency, visualElement, drag: drag2, isPresent: isPresent2 } = this.props;
    const projection = visualElement.projection;
    if (!projection)
      return null;
    projection.isPresent = isPresent2;
    if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
      projection.willUpdate();
    } else {
      this.safeToRemove();
    }
    if (prevProps.isPresent !== isPresent2) {
      if (isPresent2) {
        projection.promote();
      } else if (!projection.relegate()) {
        frame2.postRender(() => {
          const stack = projection.getStack();
          if (!stack || !stack.members.length) {
            this.safeToRemove();
          }
        });
      }
    }
    return null;
  }
  componentDidUpdate() {
    const { projection } = this.props.visualElement;
    if (projection) {
      projection.root.didUpdate();
      if (!projection.currentAnimation && projection.isLead()) {
        this.safeToRemove();
      }
    }
  }
  componentWillUnmount() {
    const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;
    const { projection } = visualElement;
    if (projection) {
      projection.scheduleCheckAfterUnmount();
      if (layoutGroup && layoutGroup.group)
        layoutGroup.group.remove(projection);
      if (promoteContext && promoteContext.deregister)
        promoteContext.deregister(projection);
    }
  }
  safeToRemove() {
    const { safeToRemove } = this.props;
    safeToRemove && safeToRemove();
  }
  render() {
    return null;
  }
};
function MeasureLayout(props) {
  const [isPresent2, safeToRemove] = usePresence();
  const layoutGroup = (0, import_react38.useContext)(LayoutGroupContext);
  return import_react38.default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup, switchLayoutGroup: (0, import_react38.useContext)(SwitchLayoutGroupContext), isPresent: isPresent2, safeToRemove });
}
var defaultScaleCorrectors = {
  borderRadius: {
    ...correctBorderRadius,
    applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ]
  },
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow
};

// node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
init_shim();

// node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
init_shim();

// node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
init_shim();
var borders3 = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
var numBorders = borders3.length;
var asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
var isPx = (value) => typeof value === "number" || px3.test(value);
function mixValues(target, follow, lead, progress3, shouldCrossfadeOpacity, isOnlyMember) {
  if (shouldCrossfadeOpacity) {
    target.opacity = mix2(
      0,
      lead.opacity !== void 0 ? lead.opacity : 1,
      easeCrossfadeIn(progress3)
    );
    target.opacityExit = mix2(follow.opacity !== void 0 ? follow.opacity : 1, 0, easeCrossfadeOut(progress3));
  } else if (isOnlyMember) {
    target.opacity = mix2(follow.opacity !== void 0 ? follow.opacity : 1, lead.opacity !== void 0 ? lead.opacity : 1, progress3);
  }
  for (let i = 0; i < numBorders; i++) {
    const borderLabel = `border${borders3[i]}Radius`;
    let followRadius = getRadius(follow, borderLabel);
    let leadRadius = getRadius(lead, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
    if (canMix) {
      target[borderLabel] = Math.max(mix2(asNumber(followRadius), asNumber(leadRadius), progress3), 0);
      if (percent.test(leadRadius) || percent.test(followRadius)) {
        target[borderLabel] += "%";
      }
    } else {
      target[borderLabel] = leadRadius;
    }
  }
  if (follow.rotate || lead.rotate) {
    target.rotate = mix2(follow.rotate || 0, lead.rotate || 0, progress3);
  }
}
function getRadius(values, radiusName) {
  return values[radiusName] !== void 0 ? values[radiusName] : values.borderRadius;
}
var easeCrossfadeIn = compress(0, 0.5, circOut);
var easeCrossfadeOut = compress(0.5, 0.95, noop3);
function compress(min, max, easing) {
  return (p) => {
    if (p < min)
      return 0;
    if (p > max)
      return 1;
    return easing(progress(min, max, p));
  };
}

// node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
init_shim();
function copyAxisInto(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function copyBoxInto(box, originBox) {
  copyAxisInto(box.x, originBox.x);
  copyAxisInto(box.y, originBox.y);
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
init_shim();
function removePointDelta(point, translate, scale3, originPoint, boxScale) {
  point -= translate;
  point = scalePoint(point, 1 / scale3, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta(axis, translate = 0, scale3 = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
  if (percent.test(translate)) {
    translate = parseFloat(translate);
    const relativeProgress = mix2(sourceAxis.min, sourceAxis.max, translate / 100);
    translate = relativeProgress - sourceAxis.min;
  }
  if (typeof translate !== "number")
    return;
  let originPoint = mix2(originAxis.min, originAxis.max, origin);
  if (axis === originAxis)
    originPoint -= translate;
  axis.min = removePointDelta(axis.min, translate, scale3, originPoint, boxScale);
  axis.max = removePointDelta(axis.max, translate, scale3, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms4, [key, scaleKey, originKey], origin, sourceAxis) {
  removeAxisDelta(axis, transforms4[key], transforms4[scaleKey], transforms4[originKey], transforms4.scale, origin, sourceAxis);
}
var xKeys2 = ["x", "scaleX", "originX"];
var yKeys2 = ["y", "scaleY", "originY"];
function removeBoxTransforms(box, transforms4, originBox, sourceBox) {
  removeAxisTransforms(box.x, transforms4, xKeys2, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0);
  removeAxisTransforms(box.y, transforms4, yKeys2, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0);
}

// node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
init_shim();
function isAxisDeltaZero(delta) {
  return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta) {
  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
}
function boxEquals(a, b) {
  return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;
}
function aspectRatio(box) {
  return calcLength(box.x) / calcLength(box.y);
}

// node_modules/framer-motion/dist/es/projection/shared/stack.mjs
init_shim();
var NodeStack = class {
  constructor() {
    this.members = [];
  }
  add(node2) {
    addUniqueItem(this.members, node2);
    node2.scheduleRender();
  }
  remove(node2) {
    removeItem2(this.members, node2);
    if (node2 === this.prevLead) {
      this.prevLead = void 0;
    }
    if (node2 === this.lead) {
      const prevLead = this.members[this.members.length - 1];
      if (prevLead) {
        this.promote(prevLead);
      }
    }
  }
  relegate(node2) {
    const indexOfNode = this.members.findIndex((member) => node2 === member);
    if (indexOfNode === 0)
      return false;
    let prevLead;
    for (let i = indexOfNode; i >= 0; i--) {
      const member = this.members[i];
      if (member.isPresent !== false) {
        prevLead = member;
        break;
      }
    }
    if (prevLead) {
      this.promote(prevLead);
      return true;
    } else {
      return false;
    }
  }
  promote(node2, preserveFollowOpacity) {
    const prevLead = this.lead;
    if (node2 === prevLead)
      return;
    this.prevLead = prevLead;
    this.lead = node2;
    node2.show();
    if (prevLead) {
      prevLead.instance && prevLead.scheduleRender();
      node2.scheduleRender();
      node2.resumeFrom = prevLead;
      if (preserveFollowOpacity) {
        node2.resumeFrom.preserveOpacity = true;
      }
      if (prevLead.snapshot) {
        node2.snapshot = prevLead.snapshot;
        node2.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
      }
      if (node2.root && node2.root.isUpdating) {
        node2.isLayoutDirty = true;
      }
      const { crossfade } = node2.options;
      if (crossfade === false) {
        prevLead.hide();
      }
    }
  }
  exitAnimationComplete() {
    this.members.forEach((node2) => {
      const { options, resumingFrom } = node2;
      options.onExitComplete && options.onExitComplete();
      if (resumingFrom) {
        resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
      }
    });
  }
  scheduleRender() {
    this.members.forEach((node2) => {
      node2.instance && node2.scheduleRender(false);
    });
  }
  removeLeadSnapshot() {
    if (this.lead && this.lead.snapshot) {
      this.lead.snapshot = void 0;
    }
  }
};

// node_modules/framer-motion/dist/es/projection/styles/transform.mjs
init_shim();
function buildProjectionTransform(delta, treeScale, latestTransform) {
  let transform3 = "";
  const xTranslate = delta.x.translate / treeScale.x;
  const yTranslate = delta.y.translate / treeScale.y;
  if (xTranslate || yTranslate) {
    transform3 = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;
  }
  if (treeScale.x !== 1 || treeScale.y !== 1) {
    transform3 += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
  }
  if (latestTransform) {
    const { rotate: rotate2, rotateX, rotateY } = latestTransform;
    if (rotate2)
      transform3 += `rotate(${rotate2}deg) `;
    if (rotateX)
      transform3 += `rotateX(${rotateX}deg) `;
    if (rotateY)
      transform3 += `rotateY(${rotateY}deg) `;
  }
  const elementScaleX = delta.x.scale * treeScale.x;
  const elementScaleY = delta.y.scale * treeScale.y;
  if (elementScaleX !== 1 || elementScaleY !== 1) {
    transform3 += `scale(${elementScaleX}, ${elementScaleY})`;
  }
  return transform3 || "none";
}

// node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
init_shim();
var compareByDepth = (a, b) => a.depth - b.depth;

// node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
var FlatTree = class {
  constructor() {
    this.children = [];
    this.isDirty = false;
  }
  add(child) {
    addUniqueItem(this.children, child);
    this.isDirty = true;
  }
  remove(child) {
    removeItem2(this.children, child);
    this.isDirty = true;
  }
  forEach(callback) {
    this.isDirty && this.children.sort(compareByDepth);
    this.isDirty = false;
    this.children.forEach(callback);
  }
};

// node_modules/framer-motion/dist/es/utils/delay.mjs
init_shim();
function delay(callback, timeout) {
  const start = performance.now();
  const checkElapsed = ({ timestamp }) => {
    const elapsed = timestamp - start;
    if (elapsed >= timeout) {
      cancelFrame(checkElapsed);
      callback(elapsed - timeout);
    }
  };
  frame2.read(checkElapsed, true);
  return () => cancelFrame(checkElapsed);
}

// node_modules/framer-motion/dist/es/debug/record.mjs
init_shim();
function record(data) {
  if (window.MotionDebug) {
    window.MotionDebug.record(data);
  }
}

// node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs
init_shim();
function isSVGElement(element) {
  return element instanceof SVGElement && element.tagName !== "svg";
}

// node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs
init_shim();
function animateSingleValue(value, keyframes3, options) {
  const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
  motionValue$1.start(animateMotionValue("", motionValue$1, keyframes3, options));
  return motionValue$1.animation;
}

// node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
var transformAxes = ["", "X", "Y", "Z"];
var animationTarget = 1e3;
var id3 = 0;
var projectionFrameData = {
  type: "projectionFrame",
  totalNodes: 0,
  resolvedTargetDeltas: 0,
  recalculatedProjection: 0
};
function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
  return class ProjectionNode {
    constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
      this.id = id3++;
      this.animationId = 0;
      this.children = /* @__PURE__ */ new Set();
      this.options = {};
      this.isTreeAnimating = false;
      this.isAnimationBlocked = false;
      this.isLayoutDirty = false;
      this.isProjectionDirty = false;
      this.isSharedProjectionDirty = false;
      this.isTransformDirty = false;
      this.updateManuallyBlocked = false;
      this.updateBlockedByResize = false;
      this.isUpdating = false;
      this.isSVG = false;
      this.needsReset = false;
      this.shouldResetTransform = false;
      this.treeScale = { x: 1, y: 1 };
      this.eventHandlers = /* @__PURE__ */ new Map();
      this.potentialNodes = /* @__PURE__ */ new Map();
      this.checkUpdateFailed = () => {
        if (this.isUpdating) {
          this.isUpdating = false;
          this.clearAllSnapshots();
        }
      };
      this.updateProjection = () => {
        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;
        this.nodes.forEach(propagateDirtyNodes);
        this.nodes.forEach(resolveTargetDelta);
        this.nodes.forEach(calcProjection);
        this.nodes.forEach(cleanDirtyNodes);
        record(projectionFrameData);
      };
      this.hasProjected = false;
      this.isVisible = true;
      this.animationProgress = 0;
      this.sharedNodes = /* @__PURE__ */ new Map();
      this.elementId = elementId;
      this.latestValues = latestValues;
      this.root = parent ? parent.root || parent : this;
      this.path = parent ? [...parent.path, parent] : [];
      this.parent = parent;
      this.depth = parent ? parent.depth + 1 : 0;
      elementId && this.root.registerPotentialNode(elementId, this);
      for (let i = 0; i < this.path.length; i++) {
        this.path[i].shouldResetTransform = true;
      }
      if (this.root === this)
        this.nodes = new FlatTree();
    }
    addEventListener(name, handler) {
      if (!this.eventHandlers.has(name)) {
        this.eventHandlers.set(name, new SubscriptionManager());
      }
      return this.eventHandlers.get(name).add(handler);
    }
    notifyListeners(name, ...args) {
      const subscriptionManager = this.eventHandlers.get(name);
      subscriptionManager && subscriptionManager.notify(...args);
    }
    hasListeners(name) {
      return this.eventHandlers.has(name);
    }
    registerPotentialNode(elementId, node2) {
      this.potentialNodes.set(elementId, node2);
    }
    mount(instance, isLayoutDirty = false) {
      if (this.instance)
        return;
      this.isSVG = isSVGElement(instance);
      this.instance = instance;
      const { layoutId, layout: layout3, visualElement } = this.options;
      if (visualElement && !visualElement.current) {
        visualElement.mount(instance);
      }
      this.root.nodes.add(this);
      this.parent && this.parent.children.add(this);
      this.elementId && this.root.potentialNodes.delete(this.elementId);
      if (isLayoutDirty && (layout3 || layoutId)) {
        this.isLayoutDirty = true;
      }
      if (attachResizeListener) {
        let cancelDelay;
        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;
        attachResizeListener(instance, () => {
          this.root.updateBlockedByResize = true;
          cancelDelay && cancelDelay();
          cancelDelay = delay(resizeUnblockUpdate, 250);
          if (globalProjectionState.hasAnimatedSinceResize) {
            globalProjectionState.hasAnimatedSinceResize = false;
            this.nodes.forEach(finishAnimation);
          }
        });
      }
      if (layoutId) {
        this.root.registerSharedNode(layoutId, this);
      }
      if (this.options.animate !== false && visualElement && (layoutId || layout3)) {
        this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout }) => {
          if (this.isTreeAnimationBlocked()) {
            this.target = void 0;
            this.relativeTarget = void 0;
            return;
          }
          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
          const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();
          const targetChanged = !this.targetLayout || !boxEquals(this.targetLayout, newLayout) || hasRelativeTargetChanged;
          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
          if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
            if (this.resumeFrom) {
              this.resumingFrom = this.resumeFrom;
              this.resumingFrom.resumingFrom = void 0;
            }
            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
            const animationOptions = {
              ...getValueTransition(layoutTransition, "layout"),
              onPlay: onLayoutAnimationStart,
              onComplete: onLayoutAnimationComplete
            };
            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
              animationOptions.delay = 0;
              animationOptions.type = false;
            }
            this.startAnimation(animationOptions);
          } else {
            if (!hasLayoutChanged && this.animationProgress === 0) {
              finishAnimation(this);
            }
            if (this.isLead() && this.options.onExitComplete) {
              this.options.onExitComplete();
            }
          }
          this.targetLayout = newLayout;
        });
      }
    }
    unmount() {
      this.options.layoutId && this.willUpdate();
      this.root.nodes.remove(this);
      const stack = this.getStack();
      stack && stack.remove(this);
      this.parent && this.parent.children.delete(this);
      this.instance = void 0;
      cancelFrame(this.updateProjection);
    }
    blockUpdate() {
      this.updateManuallyBlocked = true;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = false;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
    }
    startUpdate() {
      if (this.isUpdateBlocked())
        return;
      this.isUpdating = true;
      this.nodes && this.nodes.forEach(resetRotation);
      this.animationId++;
    }
    getTransformTemplate() {
      const { visualElement } = this.options;
      return visualElement && visualElement.getProps().transformTemplate;
    }
    willUpdate(shouldNotifyListeners = true) {
      if (this.root.isUpdateBlocked()) {
        this.options.onExitComplete && this.options.onExitComplete();
        return;
      }
      !this.root.isUpdating && this.root.startUpdate();
      if (this.isLayoutDirty)
        return;
      this.isLayoutDirty = true;
      for (let i = 0; i < this.path.length; i++) {
        const node2 = this.path[i];
        node2.shouldResetTransform = true;
        node2.updateScroll("snapshot");
        if (node2.options.layoutRoot) {
          node2.willUpdate(false);
        }
      }
      const { layoutId, layout: layout3 } = this.options;
      if (layoutId === void 0 && !layout3)
        return;
      const transformTemplate2 = this.getTransformTemplate();
      this.prevTransformTemplateValue = transformTemplate2 ? transformTemplate2(this.latestValues, "") : void 0;
      this.updateSnapshot();
      shouldNotifyListeners && this.notifyListeners("willUpdate");
    }
    didUpdate() {
      const updateWasBlocked = this.isUpdateBlocked();
      if (updateWasBlocked) {
        this.unblockUpdate();
        this.clearAllSnapshots();
        this.nodes.forEach(clearMeasurements);
        return;
      }
      if (!this.isUpdating)
        return;
      this.isUpdating = false;
      if (this.potentialNodes.size) {
        this.potentialNodes.forEach(mountNodeEarly);
        this.potentialNodes.clear();
      }
      this.nodes.forEach(resetTransformStyle);
      this.nodes.forEach(updateLayout);
      this.nodes.forEach(notifyLayoutUpdate);
      this.clearAllSnapshots();
      steps2.update.process(frameData);
      steps2.preRender.process(frameData);
      steps2.render.process(frameData);
    }
    clearAllSnapshots() {
      this.nodes.forEach(clearSnapshot);
      this.sharedNodes.forEach(removeLeadSnapshots);
    }
    scheduleUpdateProjection() {
      frame2.preRender(this.updateProjection, false, true);
    }
    scheduleCheckAfterUnmount() {
      frame2.postRender(() => {
        if (this.isLayoutDirty) {
          this.root.didUpdate();
        } else {
          this.root.checkUpdateFailed();
        }
      });
    }
    updateSnapshot() {
      if (this.snapshot || !this.instance)
        return;
      this.snapshot = this.measure();
    }
    updateLayout() {
      if (!this.instance)
        return;
      this.updateScroll();
      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
        return;
      }
      if (this.resumeFrom && !this.resumeFrom.instance) {
        for (let i = 0; i < this.path.length; i++) {
          const node2 = this.path[i];
          node2.updateScroll();
        }
      }
      const prevLayout = this.layout;
      this.layout = this.measure(false);
      this.layoutCorrected = createBox();
      this.isLayoutDirty = false;
      this.projectionDelta = void 0;
      this.notifyListeners("measure", this.layout.layoutBox);
      const { visualElement } = this.options;
      visualElement && visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0);
    }
    updateScroll(phase = "measure") {
      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {
        needsMeasurement = false;
      }
      if (needsMeasurement) {
        this.scroll = {
          animationId: this.root.animationId,
          phase,
          isRoot: checkIsScrollRoot(this.instance),
          offset: measureScroll(this.instance)
        };
      }
    }
    resetTransform() {
      if (!resetTransform)
        return;
      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
      const transformTemplate2 = this.getTransformTemplate();
      const transformTemplateValue = transformTemplate2 ? transformTemplate2(this.latestValues, "") : void 0;
      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
        resetTransform(this.instance, transformTemplateValue);
        this.shouldResetTransform = false;
        this.scheduleRender();
      }
    }
    measure(removeTransform = true) {
      const pageBox = this.measurePageBox();
      let layoutBox = this.removeElementScroll(pageBox);
      if (removeTransform) {
        layoutBox = this.removeTransform(layoutBox);
      }
      roundBox(layoutBox);
      return {
        animationId: this.root.animationId,
        measuredBox: pageBox,
        layoutBox,
        latestValues: {},
        source: this.id
      };
    }
    measurePageBox() {
      const { visualElement } = this.options;
      if (!visualElement)
        return createBox();
      const box = visualElement.measureViewportBox();
      const { scroll: scroll3 } = this.root;
      if (scroll3) {
        translateAxis(box.x, scroll3.offset.x);
        translateAxis(box.y, scroll3.offset.y);
      }
      return box;
    }
    removeElementScroll(box) {
      const boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box);
      for (let i = 0; i < this.path.length; i++) {
        const node2 = this.path[i];
        const { scroll: scroll3, options } = node2;
        if (node2 !== this.root && scroll3 && options.layoutScroll) {
          if (scroll3.isRoot) {
            copyBoxInto(boxWithoutScroll, box);
            const { scroll: rootScroll } = this.root;
            if (rootScroll) {
              translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);
              translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);
            }
          }
          translateAxis(boxWithoutScroll.x, scroll3.offset.x);
          translateAxis(boxWithoutScroll.y, scroll3.offset.y);
        }
      }
      return boxWithoutScroll;
    }
    applyTransform(box, transformOnly = false) {
      const withTransforms = createBox();
      copyBoxInto(withTransforms, box);
      for (let i = 0; i < this.path.length; i++) {
        const node2 = this.path[i];
        if (!transformOnly && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
          transformBox(withTransforms, {
            x: -node2.scroll.offset.x,
            y: -node2.scroll.offset.y
          });
        }
        if (!hasTransform(node2.latestValues))
          continue;
        transformBox(withTransforms, node2.latestValues);
      }
      if (hasTransform(this.latestValues)) {
        transformBox(withTransforms, this.latestValues);
      }
      return withTransforms;
    }
    removeTransform(box) {
      const boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box);
      for (let i = 0; i < this.path.length; i++) {
        const node2 = this.path[i];
        if (!node2.instance)
          continue;
        if (!hasTransform(node2.latestValues))
          continue;
        hasScale(node2.latestValues) && node2.updateSnapshot();
        const sourceBox = createBox();
        const nodeBox = node2.measurePageBox();
        copyBoxInto(sourceBox, nodeBox);
        removeBoxTransforms(boxWithoutTransform, node2.latestValues, node2.snapshot ? node2.snapshot.layoutBox : void 0, sourceBox);
      }
      if (hasTransform(this.latestValues)) {
        removeBoxTransforms(boxWithoutTransform, this.latestValues);
      }
      return boxWithoutTransform;
    }
    setTargetDelta(delta) {
      this.targetDelta = delta;
      this.root.scheduleUpdateProjection();
      this.isProjectionDirty = true;
    }
    setOptions(options) {
      this.options = {
        ...this.options,
        ...options,
        crossfade: options.crossfade !== void 0 ? options.crossfade : true
      };
    }
    clearMeasurements() {
      this.scroll = void 0;
      this.layout = void 0;
      this.snapshot = void 0;
      this.prevTransformTemplateValue = void 0;
      this.targetDelta = void 0;
      this.target = void 0;
      this.isLayoutDirty = false;
    }
    forceRelativeParentToResolveTarget() {
      if (!this.relativeParent)
        return;
      if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {
        this.relativeParent.resolveTargetDelta(true);
      }
    }
    resolveTargetDelta(forceRecalculation = false) {
      var _a40;
      const lead = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a40 = this.parent) === null || _a40 === void 0 ? void 0 : _a40.isProjectionDirty) || this.attemptToResolveRelativeTarget);
      if (canSkip)
        return;
      const { layout: layout3, layoutId } = this.options;
      if (!this.layout || !(layout3 || layoutId))
        return;
      this.resolvedRelativeTargetAt = frameData.timestamp;
      if (!this.targetDelta && !this.relativeTarget) {
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && relativeParent.layout) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      if (!this.relativeTarget && !this.targetDelta)
        return;
      if (!this.target) {
        this.target = createBox();
        this.targetWithTransforms = createBox();
      }
      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
        this.forceRelativeParentToResolveTarget();
        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
      } else if (this.targetDelta) {
        if (Boolean(this.resumingFrom)) {
          this.target = this.applyTransform(this.layout.layoutBox);
        } else {
          copyBoxInto(this.target, this.layout.layoutBox);
        }
        applyBoxDelta(this.target, this.targetDelta);
      } else {
        copyBoxInto(this.target, this.layout.layoutBox);
      }
      if (this.attemptToResolveRelativeTarget) {
        this.attemptToResolveRelativeTarget = false;
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      projectionFrameData.resolvedTargetDeltas++;
    }
    getClosestProjectingParent() {
      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {
        return void 0;
      }
      if (this.parent.isProjecting()) {
        return this.parent;
      } else {
        return this.parent.getClosestProjectingParent();
      }
    }
    isProjecting() {
      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
    }
    calcProjection() {
      var _a40;
      const lead = this.getLead();
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      let canSkip = true;
      if (this.isProjectionDirty || ((_a40 = this.parent) === null || _a40 === void 0 ? void 0 : _a40.isProjectionDirty)) {
        canSkip = false;
      }
      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
        canSkip = false;
      }
      if (this.resolvedRelativeTargetAt === frameData.timestamp) {
        canSkip = false;
      }
      if (canSkip)
        return;
      const { layout: layout3, layoutId } = this.options;
      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);
      if (!this.isTreeAnimating) {
        this.targetDelta = this.relativeTarget = void 0;
      }
      if (!this.layout || !(layout3 || layoutId))
        return;
      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
      const { target } = lead;
      if (!target)
        return;
      if (!this.projectionDelta) {
        this.projectionDelta = createDelta();
        this.projectionDeltaWithTransform = createDelta();
      }
      const prevTreeScaleX = this.treeScale.x;
      const prevTreeScaleY = this.treeScale.y;
      const prevProjectionTransform = this.projectionTransform;
      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
        this.hasProjected = true;
        this.scheduleRender();
        this.notifyListeners("projectionUpdate", target);
      }
      projectionFrameData.recalculatedProjection++;
    }
    hide() {
      this.isVisible = false;
    }
    show() {
      this.isVisible = true;
    }
    scheduleRender(notifyAll = true) {
      this.options.scheduleRender && this.options.scheduleRender();
      if (notifyAll) {
        const stack = this.getStack();
        stack && stack.scheduleRender();
      }
      if (this.resumingFrom && !this.resumingFrom.instance) {
        this.resumingFrom = void 0;
      }
    }
    setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
      const snapshot = this.snapshot;
      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
      const mixedValues = { ...this.latestValues };
      const targetDelta = createDelta();
      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
        this.relativeTarget = this.relativeTargetOrigin = void 0;
      }
      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      const relativeLayout = createBox();
      const snapshotSource = snapshot ? snapshot.source : void 0;
      const layoutSource = this.layout ? this.layout.source : void 0;
      const isSharedLayoutAnimation = snapshotSource !== layoutSource;
      const stack = this.getStack();
      const isOnlyMember = !stack || stack.members.length <= 1;
      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
      this.animationProgress = 0;
      let prevRelativeTarget;
      this.mixTargetDelta = (latest) => {
        const progress3 = latest / 1e3;
        mixAxisDelta(targetDelta.x, delta.x, progress3);
        mixAxisDelta(targetDelta.y, delta.y, progress3);
        this.setTargetDelta(targetDelta);
        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress3);
          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {
            this.isProjectionDirty = false;
          }
          if (!prevRelativeTarget)
            prevRelativeTarget = createBox();
          copyBoxInto(prevRelativeTarget, this.relativeTarget);
        }
        if (isSharedLayoutAnimation) {
          this.animationValues = mixedValues;
          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress3, shouldCrossfadeOpacity, isOnlyMember);
        }
        this.root.scheduleUpdateProjection();
        this.scheduleRender();
        this.animationProgress = progress3;
      };
      this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
    }
    startAnimation(options) {
      this.notifyListeners("animationStart");
      this.currentAnimation && this.currentAnimation.stop();
      if (this.resumingFrom && this.resumingFrom.currentAnimation) {
        this.resumingFrom.currentAnimation.stop();
      }
      if (this.pendingAnimation) {
        cancelFrame(this.pendingAnimation);
        this.pendingAnimation = void 0;
      }
      this.pendingAnimation = frame2.update(() => {
        globalProjectionState.hasAnimatedSinceResize = true;
        this.currentAnimation = animateSingleValue(0, animationTarget, {
          ...options,
          onUpdate: (latest) => {
            this.mixTargetDelta(latest);
            options.onUpdate && options.onUpdate(latest);
          },
          onComplete: () => {
            options.onComplete && options.onComplete();
            this.completeAnimation();
          }
        });
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = this.currentAnimation;
        }
        this.pendingAnimation = void 0;
      });
    }
    completeAnimation() {
      if (this.resumingFrom) {
        this.resumingFrom.currentAnimation = void 0;
        this.resumingFrom.preserveOpacity = void 0;
      }
      const stack = this.getStack();
      stack && stack.exitAnimationComplete();
      this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
      this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      if (this.currentAnimation) {
        this.mixTargetDelta && this.mixTargetDelta(animationTarget);
        this.currentAnimation.stop();
      }
      this.completeAnimation();
    }
    applyTransformsToTarget() {
      const lead = this.getLead();
      let { targetWithTransforms, target, layout: layout3, latestValues } = lead;
      if (!targetWithTransforms || !target || !layout3)
        return;
      if (this !== lead && this.layout && layout3 && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout3.layoutBox)) {
        target = this.target || createBox();
        const xLength = calcLength(this.layout.layoutBox.x);
        target.x.min = lead.target.x.min;
        target.x.max = target.x.min + xLength;
        const yLength = calcLength(this.layout.layoutBox.y);
        target.y.min = lead.target.y.min;
        target.y.max = target.y.min + yLength;
      }
      copyBoxInto(targetWithTransforms, target);
      transformBox(targetWithTransforms, latestValues);
      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
    }
    registerSharedNode(layoutId, node2) {
      if (!this.sharedNodes.has(layoutId)) {
        this.sharedNodes.set(layoutId, new NodeStack());
      }
      const stack = this.sharedNodes.get(layoutId);
      stack.add(node2);
      const config3 = node2.options.initialPromotionConfig;
      node2.promote({
        transition: config3 ? config3.transition : void 0,
        preserveFollowOpacity: config3 && config3.shouldPreserveFollowOpacity ? config3.shouldPreserveFollowOpacity(node2) : void 0
      });
    }
    isLead() {
      const stack = this.getStack();
      return stack ? stack.lead === this : true;
    }
    getLead() {
      var _a40;
      const { layoutId } = this.options;
      return layoutId ? ((_a40 = this.getStack()) === null || _a40 === void 0 ? void 0 : _a40.lead) || this : this;
    }
    getPrevLead() {
      var _a40;
      const { layoutId } = this.options;
      return layoutId ? (_a40 = this.getStack()) === null || _a40 === void 0 ? void 0 : _a40.prevLead : void 0;
    }
    getStack() {
      const { layoutId } = this.options;
      if (layoutId)
        return this.root.sharedNodes.get(layoutId);
    }
    promote({ needsReset, transition: transition4, preserveFollowOpacity } = {}) {
      const stack = this.getStack();
      if (stack)
        stack.promote(this, preserveFollowOpacity);
      if (needsReset) {
        this.projectionDelta = void 0;
        this.needsReset = true;
      }
      if (transition4)
        this.setOptions({ transition: transition4 });
    }
    relegate() {
      const stack = this.getStack();
      if (stack) {
        return stack.relegate(this);
      } else {
        return false;
      }
    }
    resetRotation() {
      const { visualElement } = this.options;
      if (!visualElement)
        return;
      let hasRotate = false;
      const { latestValues } = visualElement;
      if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {
        hasRotate = true;
      }
      if (!hasRotate)
        return;
      const resetValues = {};
      for (let i = 0; i < transformAxes.length; i++) {
        const key = "rotate" + transformAxes[i];
        if (latestValues[key]) {
          resetValues[key] = latestValues[key];
          visualElement.setStaticValue(key, 0);
        }
      }
      visualElement.render();
      for (const key in resetValues) {
        visualElement.setStaticValue(key, resetValues[key]);
      }
      visualElement.scheduleRender();
    }
    getProjectionStyles(styleProp = {}) {
      var _a40, _b8;
      const styles3 = {};
      if (!this.instance || this.isSVG)
        return styles3;
      if (!this.isVisible) {
        return { visibility: "hidden" };
      } else {
        styles3.visibility = "";
      }
      const transformTemplate2 = this.getTransformTemplate();
      if (this.needsReset) {
        this.needsReset = false;
        styles3.opacity = "";
        styles3.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
        styles3.transform = transformTemplate2 ? transformTemplate2(this.latestValues, "") : "none";
        return styles3;
      }
      const lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        const emptyStyles = {};
        if (this.options.layoutId) {
          emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1;
          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
        }
        if (this.hasProjected && !hasTransform(this.latestValues)) {
          emptyStyles.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
          this.hasProjected = false;
        }
        return emptyStyles;
      }
      const valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget();
      styles3.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
      if (transformTemplate2) {
        styles3.transform = transformTemplate2(valuesToRender, styles3.transform);
      }
      const { x, y } = this.projectionDelta;
      styles3.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
      if (lead.animationValues) {
        styles3.opacity = lead === this ? (_b8 = (_a40 = valuesToRender.opacity) !== null && _a40 !== void 0 ? _a40 : this.latestValues.opacity) !== null && _b8 !== void 0 ? _b8 : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
      } else {
        styles3.opacity = lead === this ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== void 0 ? valuesToRender.opacityExit : 0;
      }
      for (const key in scaleCorrectors) {
        if (valuesToRender[key] === void 0)
          continue;
        const { correct, applyTo } = scaleCorrectors[key];
        const corrected = styles3.transform === "none" ? valuesToRender[key] : correct(valuesToRender[key], lead);
        if (applyTo) {
          const num = applyTo.length;
          for (let i = 0; i < num; i++) {
            styles3[applyTo[i]] = corrected;
          }
        } else {
          styles3[key] = corrected;
        }
      }
      if (this.options.layoutId) {
        styles3.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || "" : "none";
      }
      return styles3;
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    resetTree() {
      this.root.nodes.forEach((node2) => {
        var _a40;
        return (_a40 = node2.currentAnimation) === null || _a40 === void 0 ? void 0 : _a40.stop();
      });
      this.root.nodes.forEach(clearMeasurements);
      this.root.sharedNodes.clear();
    }
  };
}
function updateLayout(node2) {
  node2.updateLayout();
}
function notifyLayoutUpdate(node2) {
  var _a40;
  const snapshot = ((_a40 = node2.resumeFrom) === null || _a40 === void 0 ? void 0 : _a40.snapshot) || node2.snapshot;
  if (node2.isLead() && node2.layout && snapshot && node2.hasListeners("didUpdate")) {
    const { layoutBox: layout3, measuredBox: measuredLayout } = node2.layout;
    const { animationType } = node2.options;
    const isShared = snapshot.source !== node2.layout.source;
    if (animationType === "size") {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length = calcLength(axisSnapshot);
        axisSnapshot.min = layout3[axis].min;
        axisSnapshot.max = axisSnapshot.min + length;
      });
    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout3)) {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length = calcLength(layout3[axis]);
        axisSnapshot.max = axisSnapshot.min + length;
        if (node2.relativeTarget && !node2.currentAnimation) {
          node2.isProjectionDirty = true;
          node2.relativeTarget[axis].max = node2.relativeTarget[axis].min + length;
        }
      });
    }
    const layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout3, snapshot.layoutBox);
    const visualDelta = createDelta();
    if (isShared) {
      calcBoxDelta(visualDelta, node2.applyTransform(measuredLayout, true), snapshot.measuredBox);
    } else {
      calcBoxDelta(visualDelta, layout3, snapshot.layoutBox);
    }
    const hasLayoutChanged = !isDeltaZero(layoutDelta);
    let hasRelativeTargetChanged = false;
    if (!node2.resumeFrom) {
      const relativeParent = node2.getClosestProjectingParent();
      if (relativeParent && !relativeParent.resumeFrom) {
        const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
        if (parentSnapshot && parentLayout) {
          const relativeSnapshot = createBox();
          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
          const relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout3, parentLayout.layoutBox);
          if (!boxEquals(relativeSnapshot, relativeLayout)) {
            hasRelativeTargetChanged = true;
          }
          if (relativeParent.options.layoutRoot) {
            node2.relativeTarget = relativeLayout;
            node2.relativeTargetOrigin = relativeSnapshot;
            node2.relativeParent = relativeParent;
          }
        }
      }
    }
    node2.notifyListeners("didUpdate", {
      layout: layout3,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeTargetChanged
    });
  } else if (node2.isLead()) {
    const { onExitComplete } = node2.options;
    onExitComplete && onExitComplete();
  }
  node2.options.transition = void 0;
}
function propagateDirtyNodes(node2) {
  projectionFrameData.totalNodes++;
  if (!node2.parent)
    return;
  if (!node2.isProjecting()) {
    node2.isProjectionDirty = node2.parent.isProjectionDirty;
  }
  node2.isSharedProjectionDirty || (node2.isSharedProjectionDirty = Boolean(node2.isProjectionDirty || node2.parent.isProjectionDirty || node2.parent.isSharedProjectionDirty));
  node2.isTransformDirty || (node2.isTransformDirty = node2.parent.isTransformDirty);
}
function cleanDirtyNodes(node2) {
  node2.isProjectionDirty = node2.isSharedProjectionDirty = node2.isTransformDirty = false;
}
function clearSnapshot(node2) {
  node2.clearSnapshot();
}
function clearMeasurements(node2) {
  node2.clearMeasurements();
}
function resetTransformStyle(node2) {
  const { visualElement } = node2.options;
  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
    visualElement.notify("BeforeLayoutMeasure");
  }
  node2.resetTransform();
}
function finishAnimation(node2) {
  node2.finishAnimation();
  node2.targetDelta = node2.relativeTarget = node2.target = void 0;
}
function resolveTargetDelta(node2) {
  node2.resolveTargetDelta();
}
function calcProjection(node2) {
  node2.calcProjection();
}
function resetRotation(node2) {
  node2.resetRotation();
}
function removeLeadSnapshots(stack) {
  stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta, p) {
  output.translate = mix2(delta.translate, 0, p);
  output.scale = mix2(delta.scale, 1, p);
  output.origin = delta.origin;
  output.originPoint = delta.originPoint;
}
function mixAxis(output, from, to, p) {
  output.min = mix2(from.min, to.min, p);
  output.max = mix2(from.max, to.max, p);
}
function mixBox(output, from, to, p) {
  mixAxis(output.x, from.x, to.x, p);
  mixAxis(output.y, from.y, to.y, p);
}
function hasOpacityCrossfade(node2) {
  return node2.animationValues && node2.animationValues.opacityExit !== void 0;
}
var defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
function mountNodeEarly(node2, elementId) {
  let searchNode = node2.root;
  for (let i = node2.path.length - 1; i >= 0; i--) {
    if (Boolean(node2.path[i].instance)) {
      searchNode = node2.path[i];
      break;
    }
  }
  const searchElement = searchNode && searchNode !== node2.root ? searchNode.instance : document;
  const element = searchElement.querySelector(`[data-projection-id="${elementId}"]`);
  if (element)
    node2.mount(element, true);
}
function roundAxis(axis) {
  axis.min = Math.round(axis.min);
  axis.max = Math.round(axis.max);
}
function roundBox(box) {
  roundAxis(box.x);
  roundAxis(box.y);
}
function shouldAnimatePositionOnly(animationType, snapshot, layout3) {
  return animationType === "position" || animationType === "preserve-aspect" && !isNear(aspectRatio(snapshot), aspectRatio(layout3), 0.2);
}

// node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
init_shim();
var DocumentProjectionNode = createProjectionNode({
  attachResizeListener: (ref, notify) => addDomEvent2(ref, "resize", notify),
  measureScroll: () => ({
    x: document.documentElement.scrollLeft || document.body.scrollLeft,
    y: document.documentElement.scrollTop || document.body.scrollTop
  }),
  checkIsScrollRoot: () => true
});

// node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
var rootProjectionNode = {
  current: void 0
};
var HTMLProjectionNode = createProjectionNode({
  measureScroll: (instance) => ({
    x: instance.scrollLeft,
    y: instance.scrollTop
  }),
  defaultParent: () => {
    if (!rootProjectionNode.current) {
      const documentNode = new DocumentProjectionNode(0, {});
      documentNode.mount(window);
      documentNode.setOptions({ layoutScroll: true });
      rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: (instance, value) => {
    instance.style.transform = value !== void 0 ? value : "none";
  },
  checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed")
});

// node_modules/framer-motion/dist/es/motion/features/drag.mjs
var drag = {
  pan: {
    Feature: PanGesture
  },
  drag: {
    Feature: DragGesture,
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};

// node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
init_shim();
var splitCSSVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable(current) {
  const match = splitCSSVariableRegex.exec(current);
  if (!match)
    return [,];
  const [, token, fallback] = match;
  return [token, fallback];
}
var maxDepth = 4;
function getVariableValue(current, element, depth = 1) {
  invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
  const [token, fallback] = parseCSSVariable(current);
  if (!token)
    return;
  const resolved = window.getComputedStyle(element).getPropertyValue(token);
  if (resolved) {
    return resolved.trim();
  } else if (isCSSVariableToken(fallback)) {
    return getVariableValue(fallback, element, depth + 1);
  } else {
    return fallback;
  }
}
function resolveCSSVariables(visualElement, { ...target }, transitionEnd) {
  const element = visualElement.current;
  if (!(element instanceof Element))
    return { target, transitionEnd };
  if (transitionEnd) {
    transitionEnd = { ...transitionEnd };
  }
  visualElement.values.forEach((value) => {
    const current = value.get();
    if (!isCSSVariableToken(current))
      return;
    const resolved = getVariableValue(current, element);
    if (resolved)
      value.set(resolved);
  });
  for (const key in target) {
    const current = target[key];
    if (!isCSSVariableToken(current))
      continue;
    const resolved = getVariableValue(current, element);
    if (!resolved)
      continue;
    target[key] = resolved;
    if (!transitionEnd)
      transitionEnd = {};
    if (transitionEnd[key] === void 0) {
      transitionEnd[key] = current;
    }
  }
  return { target, transitionEnd };
}

// node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
init_shim();
var positionalKeys = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y"
]);
var isPositionalKey = (key) => positionalKeys.has(key);
var hasPositionalKey = (target) => {
  return Object.keys(target).some(isPositionalKey);
};
var isNumOrPxType = (v) => v === number || v === px3;
var getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
var getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform: transform3 }) => {
  if (transform3 === "none" || !transform3)
    return 0;
  const matrix3d = transform3.match(/^matrix3d\((.+)\)$/);
  if (matrix3d) {
    return getPosFromMatrix(matrix3d[1], pos3);
  } else {
    const matrix = transform3.match(/^matrix\((.+)\)$/);
    if (matrix) {
      return getPosFromMatrix(matrix[1], pos2);
    } else {
      return 0;
    }
  }
};
var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
var nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
function removeNonTranslationalTransform(visualElement) {
  const removedTransforms = [];
  nonTranslationalTransformKeys.forEach((key) => {
    const value = visualElement.getValue(key);
    if (value !== void 0) {
      removedTransforms.push([key, value.get()]);
      value.set(key.startsWith("scale") ? 1 : 0);
    }
  });
  if (removedTransforms.length)
    visualElement.render();
  return removedTransforms;
}
var positionalValues = {
  width: ({ x }, { paddingLeft = "0", paddingRight = "0" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
  height: ({ y }, { paddingTop = "0", paddingBottom = "0" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
  top: (_bbox, { top }) => parseFloat(top),
  left: (_bbox, { left }) => parseFloat(left),
  bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),
  right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),
  x: getTranslateFromMatrix(4, 13),
  y: getTranslateFromMatrix(5, 14)
};
var convertChangedValueTypes = (target, visualElement, changedKeys) => {
  const originBbox = visualElement.measureViewportBox();
  const element = visualElement.current;
  const elementComputedStyle = getComputedStyle(element);
  const { display } = elementComputedStyle;
  const origin = {};
  if (display === "none") {
    visualElement.setStaticValue("display", target.display || "block");
  }
  changedKeys.forEach((key) => {
    origin[key] = positionalValues[key](originBbox, elementComputedStyle);
  });
  visualElement.render();
  const targetBbox = visualElement.measureViewportBox();
  changedKeys.forEach((key) => {
    const value = visualElement.getValue(key);
    value && value.jump(origin[key]);
    target[key] = positionalValues[key](targetBbox, elementComputedStyle);
  });
  return target;
};
var checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {
  target = { ...target };
  transitionEnd = { ...transitionEnd };
  const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
  let removedTransformValues = [];
  let hasAttemptedToRemoveTransformValues = false;
  const changedValueTypeKeys = [];
  targetPositionalKeys.forEach((key) => {
    const value = visualElement.getValue(key);
    if (!visualElement.hasValue(key))
      return;
    let from = origin[key];
    let fromType = findDimensionValueType(from);
    const to = target[key];
    let toType;
    if (isKeyframesTarget(to)) {
      const numKeyframes = to.length;
      const fromIndex = to[0] === null ? 1 : 0;
      from = to[fromIndex];
      fromType = findDimensionValueType(from);
      for (let i = fromIndex; i < numKeyframes; i++) {
        if (to[i] === null)
          break;
        if (!toType) {
          toType = findDimensionValueType(to[i]);
          invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
        } else {
          invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
        }
      }
    } else {
      toType = findDimensionValueType(to);
    }
    if (fromType !== toType) {
      if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
        const current = value.get();
        if (typeof current === "string") {
          value.set(parseFloat(current));
        }
        if (typeof to === "string") {
          target[key] = parseFloat(to);
        } else if (Array.isArray(to) && toType === px3) {
          target[key] = to.map(parseFloat);
        }
      } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {
        if (from === 0) {
          value.set(toType.transform(from));
        } else {
          target[key] = fromType.transform(to);
        }
      } else {
        if (!hasAttemptedToRemoveTransformValues) {
          removedTransformValues = removeNonTranslationalTransform(visualElement);
          hasAttemptedToRemoveTransformValues = true;
        }
        changedValueTypeKeys.push(key);
        transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key];
        value.jump(to);
      }
    }
  });
  if (changedValueTypeKeys.length) {
    const scrollY = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
    const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);
    if (removedTransformValues.length) {
      removedTransformValues.forEach(([key, value]) => {
        visualElement.getValue(key).set(value);
      });
    }
    visualElement.render();
    if (isBrowser2 && scrollY !== null) {
      window.scrollTo({ top: scrollY });
    }
    return { target: convertedTarget, transitionEnd };
  } else {
    return { target, transitionEnd };
  }
};
function unitConversion(visualElement, target, origin, transitionEnd) {
  return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : { target, transitionEnd };
}

// node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
var parseDomVariant = (visualElement, target, origin, transitionEnd) => {
  const resolved = resolveCSSVariables(visualElement, target, transitionEnd);
  target = resolved.target;
  transitionEnd = resolved.transitionEnd;
  return unitConversion(visualElement, target, origin, transitionEnd);
};

// node_modules/framer-motion/dist/es/render/VisualElement.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs
init_shim();
var prefersReducedMotion = { current: null };
var hasReducedMotionListener = { current: false };

// node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
function initPrefersReducedMotion() {
  hasReducedMotionListener.current = true;
  if (!isBrowser2)
    return;
  if (window.matchMedia) {
    const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
    const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
    motionMediaQuery.addListener(setReducedMotionPreferences);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.current = false;
  }
}

// node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
init_shim();
function updateMotionValuesFromProps(element, next, prev) {
  const { willChange } = next;
  for (const key in next) {
    const nextValue = next[key];
    const prevValue = prev[key];
    if (isMotionValue(nextValue)) {
      element.addValue(key, nextValue);
      if (isWillChangeMotionValue(willChange)) {
        willChange.add(key);
      }
      if (import_process.default.env.NODE_ENV === "development") {
        warnOnce(nextValue.version === "10.12.4", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.12.4 may not work as expected.`);
      }
    } else if (isMotionValue(prevValue)) {
      element.addValue(key, motionValue(nextValue, { owner: element }));
      if (isWillChangeMotionValue(willChange)) {
        willChange.remove(key);
      }
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key)) {
        const existingValue = element.getValue(key);
        !existingValue.hasAnimated && existingValue.set(nextValue);
      } else {
        const latestValue = element.getStaticValue(key);
        element.addValue(key, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element }));
      }
    }
  }
  for (const key in prev) {
    if (next[key] === void 0)
      element.removeValue(key);
  }
  return next;
}

// node_modules/framer-motion/dist/es/render/store.mjs
init_shim();
var visualElementStore = /* @__PURE__ */ new WeakMap();

// node_modules/framer-motion/dist/es/render/VisualElement.mjs
var featureNames = Object.keys(featureDefinitions);
var numFeatures = featureNames.length;
var propEventHandlers = [
  "AnimationStart",
  "AnimationComplete",
  "Update",
  "BeforeLayoutMeasure",
  "LayoutMeasure",
  "LayoutAnimationStart",
  "LayoutAnimationComplete"
];
var numVariantProps = variantProps.length;
var VisualElement = class {
  constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options = {}) {
    this.current = null;
    this.children = /* @__PURE__ */ new Set();
    this.isVariantNode = false;
    this.isControllingVariants = false;
    this.shouldReduceMotion = null;
    this.values = /* @__PURE__ */ new Map();
    this.features = {};
    this.valueSubscriptions = /* @__PURE__ */ new Map();
    this.prevMotionValues = {};
    this.events = {};
    this.propEventSubscriptions = {};
    this.notifyUpdate = () => this.notify("Update", this.latestValues);
    this.render = () => {
      if (!this.current)
        return;
      this.triggerBuild();
      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
    };
    this.scheduleRender = () => frame2.render(this.render, false, true);
    const { latestValues, renderState } = visualState;
    this.latestValues = latestValues;
    this.baseTarget = { ...latestValues };
    this.initialValues = props.initial ? { ...latestValues } : {};
    this.renderState = renderState;
    this.parent = parent;
    this.props = props;
    this.presenceContext = presenceContext;
    this.depth = parent ? parent.depth + 1 : 0;
    this.reducedMotionConfig = reducedMotionConfig;
    this.options = options;
    this.isControllingVariants = isControllingVariants(props);
    this.isVariantNode = isVariantNode(props);
    if (this.isVariantNode) {
      this.variantChildren = /* @__PURE__ */ new Set();
    }
    this.manuallyAnimateOnMount = Boolean(parent && parent.current);
    const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});
    for (const key in initialMotionValues) {
      const value = initialMotionValues[key];
      if (latestValues[key] !== void 0 && isMotionValue(value)) {
        value.set(latestValues[key], false);
        if (isWillChangeMotionValue(willChange)) {
          willChange.add(key);
        }
      }
    }
  }
  scrapeMotionValuesFromProps(_props, _prevProps) {
    return {};
  }
  mount(instance) {
    this.current = instance;
    visualElementStore.set(instance, this);
    if (this.projection) {
      this.projection.mount(instance);
    }
    if (this.parent && this.isVariantNode && !this.isControllingVariants) {
      this.removeFromVariantTree = this.parent.addVariantChild(this);
    }
    this.values.forEach((value, key) => this.bindToMotionValue(key, value));
    if (!hasReducedMotionListener.current) {
      initPrefersReducedMotion();
    }
    this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : prefersReducedMotion.current;
    if (import_process.default.env.NODE_ENV !== "production") {
      warnOnce(this.shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
    }
    if (this.parent)
      this.parent.children.add(this);
    this.update(this.props, this.presenceContext);
  }
  unmount() {
    visualElementStore.delete(this.current);
    this.projection && this.projection.unmount();
    cancelFrame(this.notifyUpdate);
    cancelFrame(this.render);
    this.valueSubscriptions.forEach((remove) => remove());
    this.removeFromVariantTree && this.removeFromVariantTree();
    this.parent && this.parent.children.delete(this);
    for (const key in this.events) {
      this.events[key].clear();
    }
    for (const key in this.features) {
      this.features[key].unmount();
    }
    this.current = null;
  }
  bindToMotionValue(key, value) {
    const valueIsTransform = transformProps.has(key);
    const removeOnChange = value.on("change", (latestValue) => {
      this.latestValues[key] = latestValue;
      this.props.onUpdate && frame2.update(this.notifyUpdate, false, true);
      if (valueIsTransform && this.projection) {
        this.projection.isTransformDirty = true;
      }
    });
    const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
    this.valueSubscriptions.set(key, () => {
      removeOnChange();
      removeOnRenderRequest();
    });
  }
  sortNodePosition(other) {
    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
      return 0;
    }
    return this.sortInstanceNodePosition(this.current, other.current);
  }
  loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures2, projectionId, initialLayoutGroupConfig) {
    let ProjectionNodeConstructor;
    let MeasureLayout2;
    if (import_process.default.env.NODE_ENV !== "production" && preloadedFeatures2 && isStrict) {
      const strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
      renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant(false, strictMessage);
    }
    for (let i = 0; i < numFeatures; i++) {
      const name = featureNames[i];
      const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = featureDefinitions[name];
      if (ProjectionNode)
        ProjectionNodeConstructor = ProjectionNode;
      if (isEnabled(renderedProps)) {
        if (!this.features[name] && FeatureConstructor) {
          this.features[name] = new FeatureConstructor(this);
        }
        if (MeasureLayoutComponent) {
          MeasureLayout2 = MeasureLayoutComponent;
        }
      }
    }
    if (!this.projection && ProjectionNodeConstructor) {
      this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);
      const { layoutId, layout: layout3, drag: drag2, dragConstraints, layoutScroll, layoutRoot } = renderedProps;
      this.projection.setOptions({
        layoutId,
        layout: layout3,
        alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject2(dragConstraints),
        visualElement: this,
        scheduleRender: () => this.scheduleRender(),
        animationType: typeof layout3 === "string" ? layout3 : "both",
        initialPromotionConfig: initialLayoutGroupConfig,
        layoutScroll,
        layoutRoot
      });
    }
    return MeasureLayout2;
  }
  updateFeatures() {
    for (const key in this.features) {
      const feature = this.features[key];
      if (feature.isMounted) {
        feature.update(this.props, this.prevProps);
      } else {
        feature.mount();
        feature.isMounted = true;
      }
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.options, this.props);
  }
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
  }
  getStaticValue(key) {
    return this.latestValues[key];
  }
  setStaticValue(key, value) {
    this.latestValues[key] = value;
  }
  makeTargetAnimatable(target, canMutate = true) {
    return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);
  }
  update(props, presenceContext) {
    if (props.transformTemplate || this.props.transformTemplate) {
      this.scheduleRender();
    }
    this.prevProps = this.props;
    this.props = props;
    this.prevPresenceContext = this.presenceContext;
    this.presenceContext = presenceContext;
    for (let i = 0; i < propEventHandlers.length; i++) {
      const key = propEventHandlers[i];
      if (this.propEventSubscriptions[key]) {
        this.propEventSubscriptions[key]();
        delete this.propEventSubscriptions[key];
      }
      const listener = props["on" + key];
      if (listener) {
        this.propEventSubscriptions[key] = this.on(key, listener);
      }
    }
    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);
    if (this.handleChildMotionValue) {
      this.handleChildMotionValue();
    }
  }
  getProps() {
    return this.props;
  }
  getVariant(name) {
    return this.props.variants ? this.props.variants[name] : void 0;
  }
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  getVariantContext(startAtParent = false) {
    if (startAtParent) {
      return this.parent ? this.parent.getVariantContext() : void 0;
    }
    if (!this.isControllingVariants) {
      const context2 = this.parent ? this.parent.getVariantContext() || {} : {};
      if (this.props.initial !== void 0) {
        context2.initial = this.props.initial;
      }
      return context2;
    }
    const context = {};
    for (let i = 0; i < numVariantProps; i++) {
      const name = variantProps[i];
      const prop = this.props[name];
      if (isVariantLabel(prop) || prop === false) {
        context[name] = prop;
      }
    }
    return context;
  }
  addVariantChild(child) {
    const closestVariantNode = this.getClosestVariantNode();
    if (closestVariantNode) {
      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
      return () => closestVariantNode.variantChildren.delete(child);
    }
  }
  addValue(key, value) {
    if (value !== this.values.get(key)) {
      this.removeValue(key);
      this.bindToMotionValue(key, value);
    }
    this.values.set(key, value);
    this.latestValues[key] = value.get();
  }
  removeValue(key) {
    this.values.delete(key);
    const unsubscribe = this.valueSubscriptions.get(key);
    if (unsubscribe) {
      unsubscribe();
      this.valueSubscriptions.delete(key);
    }
    delete this.latestValues[key];
    this.removeValueFromRenderState(key, this.renderState);
  }
  hasValue(key) {
    return this.values.has(key);
  }
  getValue(key, defaultValue) {
    if (this.props.values && this.props.values[key]) {
      return this.props.values[key];
    }
    let value = this.values.get(key);
    if (value === void 0 && defaultValue !== void 0) {
      value = motionValue(defaultValue, { owner: this });
      this.addValue(key, value);
    }
    return value;
  }
  readValue(key) {
    return this.latestValues[key] !== void 0 || !this.current ? this.latestValues[key] : this.readValueFromInstance(this.current, key, this.options);
  }
  setBaseTarget(key, value) {
    this.baseTarget[key] = value;
  }
  getBaseTarget(key) {
    var _a40;
    const { initial } = this.props;
    const valueFromInitial = typeof initial === "string" || typeof initial === "object" ? (_a40 = resolveVariantFromProps(this.props, initial)) === null || _a40 === void 0 ? void 0 : _a40[key] : void 0;
    if (initial && valueFromInitial !== void 0) {
      return valueFromInitial;
    }
    const target = this.getBaseTargetFromProps(this.props, key);
    if (target !== void 0 && !isMotionValue(target))
      return target;
    return this.initialValues[key] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key];
  }
  on(eventName, callback) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    return this.events[eventName].add(callback);
  }
  notify(eventName, ...args) {
    if (this.events[eventName]) {
      this.events[eventName].notify(...args);
    }
  }
};

// node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
var DOMVisualElement = class extends VisualElement {
  sortInstanceNodePosition(a, b) {
    return a.compareDocumentPosition(b) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(props, key) {
    return props.style ? props.style[key] : void 0;
  }
  removeValueFromRenderState(key, { vars: vars3, style }) {
    delete vars3[key];
    delete style[key];
  }
  makeTargetAnimatableFromInstance({ transition: transition4, transitionEnd, ...target }, { transformValues }, isMounted) {
    let origin = getOrigin(target, transition4 || {}, this);
    if (transformValues) {
      if (transitionEnd)
        transitionEnd = transformValues(transitionEnd);
      if (target)
        target = transformValues(target);
      if (origin)
        origin = transformValues(origin);
    }
    if (isMounted) {
      checkTargetForNewValues(this, target, origin);
      const parsed = parseDomVariant(this, target, origin, transitionEnd);
      transitionEnd = parsed.transitionEnd;
      target = parsed.target;
    }
    return {
      transition: transition4,
      transitionEnd,
      ...target
    };
  }
};

// node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
function getComputedStyle2(element) {
  return window.getComputedStyle(element);
}
var HTMLVisualElement = class extends DOMVisualElement {
  readValueFromInstance(instance, key) {
    if (transformProps.has(key)) {
      const defaultType = getDefaultValueType(key);
      return defaultType ? defaultType.default || 0 : 0;
    } else {
      const computedStyle = getComputedStyle2(instance);
      const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
      return typeof value === "string" ? value.trim() : value;
    }
  }
  measureInstanceViewportBox(instance, { transformPagePoint }) {
    return measureViewportBox(instance, transformPagePoint);
  }
  build(renderState, latestValues, options, props) {
    buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
  }
  scrapeMotionValuesFromProps(props, prevProps) {
    return scrapeMotionValuesFromProps(props, prevProps);
  }
  handleChildMotionValue() {
    if (this.childSubscription) {
      this.childSubscription();
      delete this.childSubscription;
    }
    const { children } = this.props;
    if (isMotionValue(children)) {
      this.childSubscription = children.on("change", (latest) => {
        if (this.current)
          this.current.textContent = `${latest}`;
      });
    }
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderHTML(instance, renderState, styleProp, projection);
  }
};

// node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs
init_shim();
var SVGVisualElement = class extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.isSVGTag = false;
  }
  getBaseTargetFromProps(props, key) {
    return props[key];
  }
  readValueFromInstance(instance, key) {
    if (transformProps.has(key)) {
      const defaultType = getDefaultValueType(key);
      return defaultType ? defaultType.default || 0 : 0;
    }
    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
    return instance.getAttribute(key);
  }
  measureInstanceViewportBox() {
    return createBox();
  }
  scrapeMotionValuesFromProps(props, prevProps) {
    return scrapeMotionValuesFromProps2(props, prevProps);
  }
  build(renderState, latestValues, options, props) {
    buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderSVG(instance, renderState, styleProp, projection);
  }
  mount(instance) {
    this.isSVGTag = isSVGTag(instance.tagName);
    super.mount(instance);
  }
};

// node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
var createDomVisualElement = (Component2, options) => {
  return isSVGComponent(Component2) ? new SVGVisualElement(options, { enableHardwareAcceleration: false }) : new HTMLVisualElement(options, { enableHardwareAcceleration: true });
};

// node_modules/framer-motion/dist/es/motion/features/layout.mjs
init_shim();
var layout2 = {
  layout: {
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};

// node_modules/framer-motion/dist/es/render/dom/motion.mjs
var preloadedFeatures = {
  ...animations,
  ...gestureAnimations,
  ...drag,
  ...layout2
};
var motion = createMotionProxy((Component2, config3) => createDomMotionConfig(Component2, config3, preloadedFeatures, createDomVisualElement));

// node_modules/framer-motion/dist/es/render/dom/motion-minimal.mjs
init_shim();
var m = createMotionProxy(createDomMotionConfig);

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
init_shim();
var React5 = __toESM(require_react(), 1);
var import_react44 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-force-update.mjs
init_shim();
var import_react40 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
init_shim();
var import_react39 = __toESM(require_react(), 1);
function useIsMounted() {
  const isMounted = (0, import_react39.useRef)(false);
  useIsomorphicLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
}

// node_modules/framer-motion/dist/es/utils/use-force-update.mjs
function useForceUpdate() {
  const isMounted = useIsMounted();
  const [forcedRenderCount, setForcedRenderCount] = (0, import_react40.useState)(0);
  const forceRender = (0, import_react40.useCallback)(() => {
    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
  const deferredForceRender = (0, import_react40.useCallback)(() => frame2.postRender(forceRender), [forceRender]);
  return [deferredForceRender, forcedRenderCount];
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
init_shim();
var React4 = __toESM(require_react(), 1);
var import_react42 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs
init_shim();
var React3 = __toESM(require_react(), 1);
var import_react41 = __toESM(require_react(), 1);
var PopChildMeasure = class extends React3.Component {
  getSnapshotBeforeUpdate(prevProps) {
    const element = this.props.childRef.current;
    if (element && prevProps.isPresent && !this.props.isPresent) {
      const size3 = this.props.sizeRef.current;
      size3.height = element.offsetHeight || 0;
      size3.width = element.offsetWidth || 0;
      size3.top = element.offsetTop;
      size3.left = element.offsetLeft;
    }
    return null;
  }
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
};
function PopChild({ children, isPresent: isPresent2 }) {
  const id4 = (0, import_react41.useId)();
  const ref = (0, import_react41.useRef)(null);
  const size3 = (0, import_react41.useRef)({
    width: 0,
    height: 0,
    top: 0,
    left: 0
  });
  (0, import_react41.useInsertionEffect)(() => {
    const { width, height, top, left } = size3.current;
    if (isPresent2 || !ref.current || !width || !height)
      return;
    ref.current.dataset.motionPopId = id4;
    const style = document.createElement("style");
    document.head.appendChild(style);
    if (style.sheet) {
      style.sheet.insertRule(`
          [data-motion-pop-id="${id4}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            top: ${top}px !important;
            left: ${left}px !important;
          }
        `);
    }
    return () => {
      document.head.removeChild(style);
    };
  }, [isPresent2]);
  return React3.createElement(PopChildMeasure, { isPresent: isPresent2, childRef: ref, sizeRef: size3 }, React3.cloneElement(children, { ref }));
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
var PresenceChild = ({ children, initial, isPresent: isPresent2, onExitComplete, custom, presenceAffectsLayout, mode: mode3 }) => {
  const presenceChildren = useConstant(newChildrenMap);
  const id4 = (0, import_react42.useId)();
  const context = (0, import_react42.useMemo)(
    () => ({
      id: id4,
      initial,
      isPresent: isPresent2,
      custom,
      onExitComplete: (childId) => {
        presenceChildren.set(childId, true);
        for (const isComplete of presenceChildren.values()) {
          if (!isComplete)
            return;
        }
        onExitComplete && onExitComplete();
      },
      register: (childId) => {
        presenceChildren.set(childId, false);
        return () => presenceChildren.delete(childId);
      }
    }),
    presenceAffectsLayout ? void 0 : [isPresent2]
  );
  (0, import_react42.useMemo)(() => {
    presenceChildren.forEach((_, key) => presenceChildren.set(key, false));
  }, [isPresent2]);
  React4.useEffect(() => {
    !isPresent2 && !presenceChildren.size && onExitComplete && onExitComplete();
  }, [isPresent2]);
  if (mode3 === "popLayout") {
    children = React4.createElement(PopChild, { isPresent: isPresent2 }, children);
  }
  return React4.createElement(PresenceContext.Provider, { value: context }, children);
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}

// node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs
init_shim();
var import_react43 = __toESM(require_react(), 1);
function useUnmountEffect(callback) {
  return (0, import_react43.useEffect)(() => () => callback(), []);
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var getChildKey = (child) => child.key || "";
function updateChildLookup(children, allChildren) {
  children.forEach((child) => {
    const key = getChildKey(child);
    allChildren.set(key, child);
  });
}
function onlyElements(children) {
  const filtered = [];
  import_react44.Children.forEach(children, (child) => {
    if ((0, import_react44.isValidElement)(child))
      filtered.push(child);
  });
  return filtered;
}
var AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode: mode3 = "sync" }) => {
  invariant(!exitBeforeEnter, "Replace exitBeforeEnter with mode='wait'");
  let [forceRender] = useForceUpdate();
  const forceRenderLayoutGroup = (0, import_react44.useContext)(LayoutGroupContext).forceRender;
  if (forceRenderLayoutGroup)
    forceRender = forceRenderLayoutGroup;
  const isMounted = useIsMounted();
  const filteredChildren = onlyElements(children);
  let childrenToRender = filteredChildren;
  const exiting = /* @__PURE__ */ new Set();
  const presentChildren = (0, import_react44.useRef)(childrenToRender);
  const allChildren = (0, import_react44.useRef)(/* @__PURE__ */ new Map()).current;
  const isInitialRender = (0, import_react44.useRef)(true);
  useIsomorphicLayoutEffect(() => {
    isInitialRender.current = false;
    updateChildLookup(filteredChildren, allChildren);
    presentChildren.current = childrenToRender;
  });
  useUnmountEffect(() => {
    isInitialRender.current = true;
    allChildren.clear();
    exiting.clear();
  });
  if (isInitialRender.current) {
    return React5.createElement(React5.Fragment, null, childrenToRender.map((child) => React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout, mode: mode3 }, child)));
  }
  childrenToRender = [...childrenToRender];
  const presentKeys = presentChildren.current.map(getChildKey);
  const targetKeys = filteredChildren.map(getChildKey);
  const numPresent = presentKeys.length;
  for (let i = 0; i < numPresent; i++) {
    const key = presentKeys[i];
    if (targetKeys.indexOf(key) === -1) {
      exiting.add(key);
    }
  }
  if (mode3 === "wait" && exiting.size) {
    childrenToRender = [];
  }
  exiting.forEach((key) => {
    if (targetKeys.indexOf(key) !== -1)
      return;
    const child = allChildren.get(key);
    if (!child)
      return;
    const insertionIndex = presentKeys.indexOf(key);
    const onExit = () => {
      allChildren.delete(key);
      exiting.delete(key);
      const removeIndex25 = presentChildren.current.findIndex((presentChild) => presentChild.key === key);
      presentChildren.current.splice(removeIndex25, 1);
      if (!exiting.size) {
        presentChildren.current = filteredChildren;
        if (isMounted.current === false)
          return;
        forceRender();
        onExitComplete && onExitComplete();
      }
    };
    childrenToRender.splice(insertionIndex, 0, React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout, mode: mode3 }, child));
  });
  childrenToRender = childrenToRender.map((child) => {
    const key = child.key;
    return exiting.has(key) ? child : React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout, mode: mode3 }, child);
  });
  if (import_process.default.env.NODE_ENV !== "production" && mode3 === "wait" && childrenToRender.length > 1) {
    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
  }
  return React5.createElement(React5.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map((child) => (0, import_react44.cloneElement)(child)));
};

// node_modules/framer-motion/dist/es/components/MotionConfig/index.mjs
init_shim();
var React6 = __toESM(require_react(), 1);
var import_react45 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs
init_shim();
var React7 = __toESM(require_react(), 1);
var import_react46 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/LayoutGroup/index.mjs
init_shim();
var React8 = __toESM(require_react(), 1);
var import_react48 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/DeprecatedLayoutGroupContext.mjs
init_shim();
var import_react47 = __toESM(require_react(), 1);
var DeprecatedLayoutGroupContext = (0, import_react47.createContext)(null);

// node_modules/framer-motion/dist/es/projection/node/group.mjs
init_shim();

// node_modules/framer-motion/dist/es/components/Reorder/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/components/Reorder/Group.mjs
init_shim();
var React9 = __toESM(require_react(), 1);
var import_react50 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/ReorderContext.mjs
init_shim();
var import_react49 = __toESM(require_react(), 1);
var ReorderContext = (0, import_react49.createContext)(null);

// node_modules/framer-motion/dist/es/components/Reorder/utils/check-reorder.mjs
init_shim();
function checkReorder(order, value, offset, velocity) {
  if (!velocity)
    return order;
  const index = order.findIndex((item2) => item2.value === value);
  if (index === -1)
    return order;
  const nextOffset = velocity > 0 ? 1 : -1;
  const nextItem = order[index + nextOffset];
  if (!nextItem)
    return order;
  const item = order[index];
  const nextLayout = nextItem.layout;
  const nextItemCenter = mix2(nextLayout.min, nextLayout.max, 0.5);
  if (nextOffset === 1 && item.layout.max + offset > nextItemCenter || nextOffset === -1 && item.layout.min + offset < nextItemCenter) {
    return moveItem(order, index, index + nextOffset);
  }
  return order;
}

// node_modules/framer-motion/dist/es/components/Reorder/Group.mjs
function ReorderGroup({ children, as = "ul", axis = "y", onReorder, values, ...props }, externalRef) {
  const Component2 = useConstant(() => motion(as));
  const order = [];
  const isReordering = (0, import_react50.useRef)(false);
  invariant(Boolean(values), "Reorder.Group must be provided a values prop");
  const context = {
    axis,
    registerItem: (value, layout3) => {
      if (layout3 && order.findIndex((entry) => value === entry.value) === -1) {
        order.push({ value, layout: layout3[axis] });
        order.sort(compareMin);
      }
    },
    updateOrder: (id4, offset, velocity) => {
      if (isReordering.current)
        return;
      const newOrder = checkReorder(order, id4, offset, velocity);
      if (order !== newOrder) {
        isReordering.current = true;
        onReorder(newOrder.map(getValue).filter((value) => values.indexOf(value) !== -1));
      }
    }
  };
  (0, import_react50.useEffect)(() => {
    isReordering.current = false;
  });
  return React9.createElement(
    Component2,
    { ...props, ref: externalRef, ignoreStrict: true },
    React9.createElement(ReorderContext.Provider, { value: context }, children)
  );
}
var Group = (0, import_react50.forwardRef)(ReorderGroup);
function getValue(item) {
  return item.value;
}
function compareMin(a, b) {
  return a.layout.min - b.layout.min;
}

// node_modules/framer-motion/dist/es/components/Reorder/Item.mjs
init_shim();
var React10 = __toESM(require_react(), 1);
var import_react52 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/value/use-motion-value.mjs
init_shim();
var import_react51 = __toESM(require_react(), 1);
function useMotionValue(initial) {
  const value = useConstant(() => motionValue(initial));
  const { isStatic } = (0, import_react51.useContext)(MotionConfigContext);
  if (isStatic) {
    const [, setLatest] = (0, import_react51.useState)(initial);
    (0, import_react51.useEffect)(() => value.on("change", setLatest), []);
  }
  return value;
}

// node_modules/framer-motion/dist/es/value/use-transform.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/transform.mjs
init_shim();
var isCustomValueType = (v) => {
  return typeof v === "object" && v.mix;
};
var getMixer2 = (v) => isCustomValueType(v) ? v.mix : void 0;
function transform2(...args) {
  const useImmediate = !Array.isArray(args[0]);
  const argOffset = useImmediate ? 0 : -1;
  const inputValue = args[0 + argOffset];
  const inputRange = args[1 + argOffset];
  const outputRange = args[2 + argOffset];
  const options = args[3 + argOffset];
  const interpolator = interpolate(inputRange, outputRange, {
    mixer: getMixer2(outputRange[0]),
    ...options
  });
  return useImmediate ? interpolator(inputValue) : interpolator;
}

// node_modules/framer-motion/dist/es/value/use-combine-values.mjs
init_shim();
function useCombineMotionValues(values, combineValues) {
  const value = useMotionValue(combineValues());
  const updateValue = () => value.set(combineValues());
  updateValue();
  useIsomorphicLayoutEffect(() => {
    const scheduleUpdate = () => frame2.update(updateValue, false, true);
    const subscriptions = values.map((v) => v.on("change", scheduleUpdate));
    return () => {
      subscriptions.forEach((unsubscribe) => unsubscribe());
      cancelFrame(updateValue);
    };
  });
  return value;
}

// node_modules/framer-motion/dist/es/value/use-transform.mjs
function useTransform(input, inputRangeOrTransformer, outputRange, options) {
  const transformer = typeof inputRangeOrTransformer === "function" ? inputRangeOrTransformer : transform2(inputRangeOrTransformer, outputRange, options);
  return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([input], ([latest]) => transformer(latest));
}
function useListTransform(values, transformer) {
  const latest = useConstant(() => []);
  return useCombineMotionValues(values, () => {
    latest.length = 0;
    const numValues = values.length;
    for (let i = 0; i < numValues; i++) {
      latest[i] = values[i].get();
    }
    return transformer(latest);
  });
}

// node_modules/framer-motion/dist/es/components/Reorder/Item.mjs
function useDefaultMotionValue(value, defaultValue = 0) {
  return isMotionValue(value) ? value : useMotionValue(defaultValue);
}
function ReorderItem({ children, style = {}, value, as = "li", onDrag, layout: layout3 = true, ...props }, externalRef) {
  const Component2 = useConstant(() => motion(as));
  const context = (0, import_react52.useContext)(ReorderContext);
  const point = {
    x: useDefaultMotionValue(style.x),
    y: useDefaultMotionValue(style.y)
  };
  const zIndex = useTransform([point.x, point.y], ([latestX, latestY]) => latestX || latestY ? 1 : "unset");
  const measuredLayout = (0, import_react52.useRef)(null);
  invariant(Boolean(context), "Reorder.Item must be a child of Reorder.Group");
  const { axis, registerItem, updateOrder } = context;
  (0, import_react52.useEffect)(() => {
    registerItem(value, measuredLayout.current);
  }, [context]);
  return React10.createElement(Component2, { drag: axis, ...props, dragSnapToOrigin: true, style: { ...style, x: point.x, y: point.y, zIndex }, layout: layout3, onDrag: (event, gesturePoint) => {
    const { velocity } = gesturePoint;
    velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);
    onDrag && onDrag(event, gesturePoint);
  }, onLayoutMeasure: (measured) => {
    measuredLayout.current = measured;
  }, ref: externalRef, ignoreStrict: true }, children);
}
var Item = (0, import_react52.forwardRef)(ReorderItem);

// node_modules/framer-motion/dist/es/render/dom/features-animation.mjs
init_shim();
var domAnimation = {
  renderer: createDomVisualElement,
  ...animations,
  ...gestureAnimations
};

// node_modules/framer-motion/dist/es/render/dom/features-max.mjs
init_shim();
var domMax = {
  ...domAnimation,
  ...drag,
  ...layout2
};

// node_modules/framer-motion/dist/es/value/use-motion-template.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/use-spring.mjs
init_shim();
var import_react53 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/value/use-velocity.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/use-motion-value-event.mjs
init_shim();
var import_react54 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/value/use-scroll.mjs
init_shim();
var import_react55 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/dom/scroll/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/resize/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/resize/handle-element.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs
init_shim();
function resolveElements(elements, scope, selectorCache) {
  var _a40;
  if (typeof elements === "string") {
    let root = document;
    if (scope) {
      invariant(Boolean(scope.current), "Scope provided, but no element detected.");
      root = scope.current;
    }
    if (selectorCache) {
      (_a40 = selectorCache[elements]) !== null && _a40 !== void 0 ? _a40 : selectorCache[elements] = root.querySelectorAll(elements);
      elements = selectorCache[elements];
    } else {
      elements = root.querySelectorAll(elements);
    }
  } else if (elements instanceof Element) {
    elements = [elements];
  }
  return Array.from(elements || []);
}

// node_modules/framer-motion/dist/es/render/dom/resize/handle-window.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/scroll/info.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/scroll/on-scroll-handler.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/scroll/offsets/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/scroll/offsets/inset.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/scroll/offsets/presets.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/scroll/offsets/offset.mjs
init_shim();

// node_modules/framer-motion/dist/es/render/dom/scroll/offsets/edge.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/scroll/use-element-scroll.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/scroll/use-viewport-scroll.mjs
init_shim();

// node_modules/framer-motion/dist/es/value/use-time.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/use-animation-frame.mjs
init_shim();
var import_react56 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/value/use-will-change/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion.mjs
init_shim();
var import_react57 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion-config.mjs
init_shim();
var import_react58 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/hooks/use-animate.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/animate.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs
init_shim();
var GroupPlaybackControls = class {
  constructor(animations2) {
    this.animations = animations2.filter(Boolean);
  }
  then(onResolve, onReject) {
    return Promise.all(this.animations).then(onResolve).catch(onReject);
  }
  getAll(propName) {
    return this.animations[0][propName];
  }
  setAll(propName, newValue) {
    for (let i = 0; i < this.animations.length; i++) {
      this.animations[i][propName] = newValue;
    }
  }
  get time() {
    return this.getAll("time");
  }
  set time(time) {
    this.setAll("time", time);
  }
  get speed() {
    return this.getAll("speed");
  }
  set speed(speed) {
    this.setAll("speed", speed);
  }
  get duration() {
    let max = 0;
    for (let i = 0; i < this.animations.length; i++) {
      max = Math.max(max, this.animations[i].duration);
    }
    return max;
  }
  runAll(methodName) {
    this.animations.forEach((controls) => controls[methodName]());
  }
  play() {
    this.runAll("play");
  }
  pause() {
    this.runAll("pause");
  }
  stop() {
    this.runAll("stop");
  }
  cancel() {
    this.runAll("cancel");
  }
  complete() {
    this.runAll("complete");
  }
};

// node_modules/framer-motion/dist/es/animation/utils/is-dom-keyframes.mjs
init_shim();
function isDOMKeyframes(keyframes3) {
  return typeof keyframes3 === "object" && !Array.isArray(keyframes3);
}

// node_modules/framer-motion/dist/es/animation/utils/create-visual-element.mjs
init_shim();
function createVisualElement(element) {
  const options = {
    presenceContext: null,
    props: {},
    visualState: {
      renderState: {
        transform: {},
        transformOrigin: {},
        style: {},
        vars: {},
        attrs: {}
      },
      latestValues: {}
    }
  };
  const node2 = isSVGElement(element) ? new SVGVisualElement(options, {
    enableHardwareAcceleration: false
  }) : new HTMLVisualElement(options, {
    enableHardwareAcceleration: true
  });
  node2.mount(element);
  visualElementStore.set(element, node2);
}

// node_modules/framer-motion/dist/es/animation/sequence/create.mjs
init_shim();

// node_modules/framer-motion/dist/es/easing/utils/create-generator-easing.mjs
init_shim();
function createGeneratorEasing(options, scale3 = 100) {
  const generator = spring({ keyframes: [0, scale3], ...options });
  const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);
  return {
    type: "keyframes",
    ease: (progress3) => generator.next(duration * progress3).value / scale3,
    duration: millisecondsToSeconds(duration)
  };
}

// node_modules/framer-motion/dist/es/animation/sequence/utils/calc-time.mjs
init_shim();
function calcNextTime(current, next, prev, labels) {
  var _a40;
  if (typeof next === "number") {
    return next;
  } else if (next.startsWith("-") || next.startsWith("+")) {
    return Math.max(0, current + parseFloat(next));
  } else if (next === "<") {
    return prev;
  } else {
    return (_a40 = labels.get(next)) !== null && _a40 !== void 0 ? _a40 : current;
  }
}

// node_modules/framer-motion/dist/es/animation/sequence/utils/edit.mjs
init_shim();

// node_modules/framer-motion/dist/es/easing/utils/get-easing-for-segment.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/wrap.mjs
init_shim();
var wrap2 = (min, max, v) => {
  const rangeSize = max - min;
  return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
};

// node_modules/framer-motion/dist/es/easing/utils/get-easing-for-segment.mjs
function getEasingForSegment(easing, i) {
  return isEasingArray(easing) ? easing[wrap2(0, easing.length, i)] : easing;
}

// node_modules/framer-motion/dist/es/animation/sequence/utils/edit.mjs
function eraseKeyframes(sequence, startTime, endTime) {
  for (let i = 0; i < sequence.length; i++) {
    const keyframe = sequence[i];
    if (keyframe.at > startTime && keyframe.at < endTime) {
      removeItem2(sequence, keyframe);
      i--;
    }
  }
}
function addKeyframes(sequence, keyframes3, easing, offset, startTime, endTime) {
  eraseKeyframes(sequence, startTime, endTime);
  for (let i = 0; i < keyframes3.length; i++) {
    sequence.push({
      value: keyframes3[i],
      at: mix2(startTime, endTime, offset[i]),
      easing: getEasingForSegment(easing, i)
    });
  }
}

// node_modules/framer-motion/dist/es/animation/sequence/utils/sort.mjs
init_shim();
function compareByTime(a, b) {
  if (a.at === b.at) {
    if (a.value === null)
      return 1;
    if (b.value === null)
      return -1;
    return 0;
  } else {
    return a.at - b.at;
  }
}

// node_modules/framer-motion/dist/es/animation/sequence/create.mjs
var defaultSegmentEasing = "easeInOut";
function createAnimationsFromSequence(sequence, { defaultTransition: defaultTransition4 = {}, ...sequenceTransition } = {}, scope) {
  const defaultDuration = defaultTransition4.duration || 0.3;
  const animationDefinitions = /* @__PURE__ */ new Map();
  const sequences = /* @__PURE__ */ new Map();
  const elementCache = {};
  const timeLabels = /* @__PURE__ */ new Map();
  let prevTime = 0;
  let currentTime = 0;
  let totalDuration = 0;
  for (let i = 0; i < sequence.length; i++) {
    const segment = sequence[i];
    if (typeof segment === "string") {
      timeLabels.set(segment, currentTime);
      continue;
    } else if (!Array.isArray(segment)) {
      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));
      continue;
    }
    let [subject, keyframes3, transition4 = {}] = segment;
    if (transition4.at !== void 0) {
      currentTime = calcNextTime(currentTime, transition4.at, prevTime, timeLabels);
    }
    let maxDuration3 = 0;
    const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {
      const valueKeyframesAsList = keyframesAsList(valueKeyframes);
      const { delay: delay2 = 0, times = defaultOffset(valueKeyframesAsList), type = "keyframes", ...remainingTransition } = valueTransition;
      let { ease: ease2 = defaultTransition4.ease || "easeOut", duration } = valueTransition;
      const calculatedDelay = typeof delay2 === "function" ? delay2(elementIndex, numElements) : delay2;
      const numKeyframes = valueKeyframesAsList.length;
      if (numKeyframes <= 2 && type === "spring") {
        let absoluteDelta = 100;
        if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {
          const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];
          absoluteDelta = Math.abs(delta);
        }
        const springTransition = { ...remainingTransition };
        if (duration !== void 0) {
          springTransition.duration = secondsToMilliseconds(duration);
        }
        const springEasing = createGeneratorEasing(springTransition, absoluteDelta);
        ease2 = springEasing.ease;
        duration = springEasing.duration;
      }
      duration !== null && duration !== void 0 ? duration : duration = defaultDuration;
      const startTime = currentTime + calculatedDelay;
      const targetTime = startTime + duration;
      if (times.length === 1 && times[0] === 0) {
        times[1] = 1;
      }
      const remainder = times.length - valueKeyframesAsList.length;
      remainder > 0 && fillOffset(times, remainder);
      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);
      addKeyframes(valueSequence, valueKeyframesAsList, ease2, times, startTime, targetTime);
      maxDuration3 = Math.max(calculatedDelay + duration, maxDuration3);
      totalDuration = Math.max(targetTime, totalDuration);
    };
    if (isMotionValue(subject)) {
      const subjectSequence = getSubjectSequence(subject, sequences);
      resolveValueSequence(keyframes3, transition4, getValueSequence("default", subjectSequence));
    } else {
      const elements = resolveElements(subject, scope, elementCache);
      const numElements = elements.length;
      for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {
        keyframes3 = keyframes3;
        transition4 = transition4;
        const element = elements[elementIndex];
        const subjectSequence = getSubjectSequence(element, sequences);
        for (const key in keyframes3) {
          resolveValueSequence(keyframes3[key], getValueTransition2(transition4, key), getValueSequence(key, subjectSequence), elementIndex, numElements);
        }
      }
      prevTime = currentTime;
      currentTime += maxDuration3;
    }
  }
  sequences.forEach((valueSequences, element) => {
    for (const key in valueSequences) {
      const valueSequence = valueSequences[key];
      valueSequence.sort(compareByTime);
      const keyframes3 = [];
      const valueOffset = [];
      const valueEasing = [];
      for (let i = 0; i < valueSequence.length; i++) {
        const { at, value, easing } = valueSequence[i];
        keyframes3.push(value);
        valueOffset.push(progress(0, totalDuration, at));
        valueEasing.push(easing || "easeOut");
      }
      if (valueOffset[0] !== 0) {
        valueOffset.unshift(0);
        keyframes3.unshift(keyframes3[0]);
        valueEasing.unshift(defaultSegmentEasing);
      }
      if (valueOffset[valueOffset.length - 1] !== 1) {
        valueOffset.push(1);
        keyframes3.push(null);
      }
      if (!animationDefinitions.has(element)) {
        animationDefinitions.set(element, {
          keyframes: {},
          transition: {}
        });
      }
      const definition = animationDefinitions.get(element);
      definition.keyframes[key] = keyframes3;
      definition.transition[key] = {
        ...defaultTransition4,
        duration: totalDuration,
        ease: valueEasing,
        times: valueOffset,
        ...sequenceTransition
      };
    }
  });
  return animationDefinitions;
}
function getSubjectSequence(subject, sequences) {
  !sequences.has(subject) && sequences.set(subject, {});
  return sequences.get(subject);
}
function getValueSequence(name, sequences) {
  if (!sequences[name])
    sequences[name] = [];
  return sequences[name];
}
function keyframesAsList(keyframes3) {
  return Array.isArray(keyframes3) ? keyframes3 : [keyframes3];
}
function getValueTransition2(transition4, key) {
  return transition4[key] ? { ...transition4, ...transition4[key] } : { ...transition4 };
}
var isNumber2 = (keyframe) => typeof keyframe === "number";
var isNumberKeyframesArray = (keyframes3) => keyframes3.every(isNumber2);

// node_modules/framer-motion/dist/es/animation/animate.mjs
function animateElements(elementOrSelector, keyframes3, options, scope) {
  const elements = resolveElements(elementOrSelector, scope);
  const numElements = elements.length;
  invariant(Boolean(numElements), "No valid element provided.");
  const animations2 = [];
  for (let i = 0; i < numElements; i++) {
    const element = elements[i];
    if (!visualElementStore.has(element)) {
      createVisualElement(element);
    }
    const visualElement = visualElementStore.get(element);
    const transition4 = { ...options };
    if (typeof transition4.delay === "function") {
      transition4.delay = transition4.delay(i, numElements);
    }
    animations2.push(...animateTarget(visualElement, { ...keyframes3, transition: transition4 }, {}));
  }
  return new GroupPlaybackControls(animations2);
}
var isSequence = (value) => Array.isArray(value) && Array.isArray(value[0]);
function animateSequence(sequence, options, scope) {
  const animations2 = [];
  const animationDefinitions = createAnimationsFromSequence(sequence, options, scope);
  animationDefinitions.forEach(({ keyframes: keyframes3, transition: transition4 }, subject) => {
    let animation;
    if (isMotionValue(subject)) {
      animation = animateSingleValue(subject, keyframes3.default, transition4.default);
    } else {
      animation = animateElements(subject, keyframes3, transition4);
    }
    animations2.push(animation);
  });
  return new GroupPlaybackControls(animations2);
}
var createScopedAnimate = (scope) => {
  function scopedAnimate(valueOrElementOrSequence, keyframes3, options) {
    let animation;
    if (isSequence(valueOrElementOrSequence)) {
      animation = animateSequence(valueOrElementOrSequence, keyframes3, scope);
    } else if (isDOMKeyframes(keyframes3)) {
      animation = animateElements(valueOrElementOrSequence, keyframes3, options, scope);
    } else {
      animation = animateSingleValue(valueOrElementOrSequence, keyframes3, options);
    }
    if (scope) {
      scope.animations.push(animation);
    }
    return animation;
  }
  return scopedAnimate;
};
var animate = createScopedAnimate();

// node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/use-cycle.mjs
init_shim();
var import_react59 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-in-view.mjs
init_shim();
var import_react60 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/dom/viewport/index.mjs
init_shim();

// node_modules/framer-motion/dist/es/gestures/drag/use-drag-controls.mjs
init_shim();

// node_modules/framer-motion/dist/es/events/use-dom-event.mjs
init_shim();
var import_react61 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/motion/utils/is-motion-component.mjs
init_shim();

// node_modules/framer-motion/dist/es/motion/utils/unwrap-motion-component.mjs
init_shim();

// node_modules/framer-motion/dist/es/utils/use-instant-transition.mjs
init_shim();
var import_react62 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/projection/use-instant-layout-transition.mjs
init_shim();

// node_modules/framer-motion/dist/es/projection/use-reset-projection.mjs
init_shim();
var React11 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/animation/optimized-appear/start.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/optimized-appear/store-id.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/optimized-appear/handoff.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/optimized-appear/store.mjs
init_shim();

// node_modules/framer-motion/dist/es/animation/hooks/use-animated-state.mjs
init_shim();
var import_react63 = __toESM(require_react(), 1);
var createObject = () => ({});
var useVisualState = makeUseVisualState({
  scrapeMotionValuesFromProps: createObject,
  createRenderState: createObject
});

// node_modules/framer-motion/dist/es/value/use-inverted-scale.mjs
init_shim();
var import_react64 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout.mjs
init_shim();
var React12 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/animation/utils/stagger.mjs
init_shim();

// node_modules/framer-motion/dist/es/frameloop/index-legacy.mjs
init_shim();
var cancelSync2 = stepsOrder2.reduce((acc, key) => {
  acc[key] = (process) => cancelFrame(process);
  return acc;
}, {});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react66 = __toESM(require_react(), 1);
function useTheme2() {
  const theme3 = (0, import_react66.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra2() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme2();
  return { ...colorModeResult, theme: theme3 };
}
function getBreakpointValue(theme3, value, fallback) {
  var _a40, _b8;
  if (value == null)
    return value;
  const getValue2 = (val) => {
    var _a210, _b23;
    return (_b23 = (_a210 = theme3.__breakpoints) == null ? void 0 : _a210.asArray) == null ? void 0 : _b23[val];
  };
  return (_b8 = (_a40 = getValue2(value)) != null ? _a40 : getValue2(fallback)) != null ? _b8 : fallback;
}
function getTokenValue(theme3, value, fallback) {
  var _a40, _b8;
  if (value == null)
    return value;
  const getValue2 = (val) => {
    var _a210, _b23;
    return (_b23 = (_a210 = theme3.__cssMap) == null ? void 0 : _a210[val]) == null ? void 0 : _b23.value;
  };
  return (_b8 = (_a40 = getValue2(value)) != null ? _a40 : getValue2(fallback)) != null ? _b8 : fallback;
}
function useToken2(scale3, token, fallback) {
  const theme3 = useTheme2();
  return getToken2(scale3, token, fallback)(theme3);
}
function getToken2(scale3, token, fallback) {
  const _token = Array.isArray(token) ? token : [token];
  const _fallback = Array.isArray(fallback) ? fallback : [fallback];
  return (theme3) => {
    const fallbackArr = _fallback.filter(Boolean);
    const result = _token.map((token2, index) => {
      var _a40, _b8;
      if (scale3 === "breakpoints") {
        return getBreakpointValue(theme3, token2, (_a40 = fallbackArr[index]) != null ? _a40 : token2);
      }
      const path = `${scale3}.${token2}`;
      return getTokenValue(theme3, path, (_b8 = fallbackArr[index]) != null ? _b8 : token2);
    });
    return Array.isArray(token) ? result : result[0];
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function isElement2(el) {
  return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}
function isHTMLElement2(el) {
  var _a40;
  if (!isElement2(el)) {
    return false;
  }
  const win = (_a40 = el.ownerDocument.defaultView) != null ? _a40 : window;
  return el instanceof win.HTMLElement;
}
function getOwnerWindow2(node2) {
  var _a40, _b8;
  return isElement2(node2) ? (_b8 = (_a40 = getOwnerDocument2(node2)) == null ? void 0 : _a40.defaultView) != null ? _b8 : window : window;
}
function getOwnerDocument2(node2) {
  var _a40;
  return isElement2(node2) ? (_a40 = node2.ownerDocument) != null ? _a40 : document : document;
}
function getEventWindow2(event) {
  var _a40;
  return (_a40 = event.view) != null ? _a40 : window;
}
function canUseDOM2() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser3 = canUseDOM2();
function getActiveElement2(node2) {
  const doc = getOwnerDocument2(node2);
  return doc == null ? void 0 : doc.activeElement;
}
function contains2(parent, child) {
  if (!parent)
    return false;
  return parent === child || parent.contains(child);
}
function addDomEvent3(target, eventName, handler, options) {
  target.addEventListener(eventName, handler, options);
  return () => {
    target.removeEventListener(eventName, handler, options);
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
function getUserAgentBrowser(navigator2) {
  const { userAgent: ua, vendor } = navigator2;
  const android = /(android)/i.test(ua);
  switch (true) {
    case /CriOS/.test(ua):
      return "Chrome for iOS";
    case /Edg\//.test(ua):
      return "Edge";
    case (android && /Silk\//.test(ua)):
      return "Silk";
    case (/Chrome/.test(ua) && /Google Inc/.test(vendor)):
      return "Chrome";
    case /Firefox\/\d+\.\d+$/.test(ua):
      return "Firefox";
    case android:
      return "AOSP";
    case /MSIE|Trident/.test(ua):
      return "IE";
    case (/Safari/.test(navigator2.userAgent) && /Apple Computer/.test(ua)):
      return "Safari";
    case /AppleWebKit/.test(ua):
      return "WebKit";
    default:
      return null;
  }
}
function detectBrowser2(browser) {
  if (!isBrowser3)
    return false;
  return getUserAgentBrowser(window.navigator) === browser;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash7 = __toESM(require_lodash(), 1);
function omit3(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get3(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize3 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet3 = memoize3(get3);
function objectFilter2(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined2 = (object2) => objectFilter2(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isNumber3(value) {
  return typeof value === "number";
}
function isFunction5(value) {
  return typeof value === "function";
}
var __DEV__2 = import_process.default.env.NODE_ENV !== "production";
var __TEST__2 = import_process.default.env.NODE_ENV === "test";
function isRefObject3(val) {
  return "current" in val;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn5(valueOrFn, ...args) {
  return isFunction5(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function callAllHandlers3(...fns) {
  return function func2(event) {
    fns.some((fn) => {
      fn == null ? void 0 : fn(event);
      return event == null ? void 0 : event.defaultPrevented;
    });
  };
}
function once2(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var noop4 = () => {
};
var warn3 = once2((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__2) {
    console.warn(message);
  }
});
var error2 = once2((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__2) {
    console.error(message);
  }
});
var pipe6 = (...fns) => (v) => fns.reduce((a, b) => b(a), v);
var distance1D = (a, b) => Math.abs(a - b);
var isPoint = (point) => "x" in point && "y" in point;
function distance3(a, b) {
  if (isNumber3(a) && isNumber3(b)) {
    return distance1D(a, b);
  }
  if (isPoint(a) && isPoint(b)) {
    const xDelta = distance1D(a.x, b.x);
    const yDelta = distance1D(a.y, b.y);
    return Math.sqrt(xDelta ** 2 + yDelta ** 2);
  }
  return 0;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger2 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger2 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();
function isMouseEvent2(event) {
  const win = getEventWindow2(event);
  if (typeof win.PointerEvent !== "undefined" && event instanceof win.PointerEvent) {
    return !!(event.pointerType === "mouse");
  }
  return event instanceof win.MouseEvent;
}
function isTouchEvent2(event) {
  const hasTouches = !!event.touches;
  return hasTouches;
}
function filterPrimaryPointer(eventHandler) {
  return (event) => {
    const win = getEventWindow2(event);
    const isMouseEvent26 = event instanceof win.MouseEvent;
    const isPrimaryPointer2 = !isMouseEvent26 || isMouseEvent26 && event.button === 0;
    if (isPrimaryPointer2) {
      eventHandler(event);
    }
  };
}
var defaultPagePoint = { pageX: 0, pageY: 0 };
function pointFromTouch(e, pointType = "page") {
  const primaryTouch = e.touches[0] || e.changedTouches[0];
  const point = primaryTouch || defaultPagePoint;
  return {
    x: point[`${pointType}X`],
    y: point[`${pointType}Y`]
  };
}
function pointFromMouse(point, pointType = "page") {
  return {
    x: point[`${pointType}X`],
    y: point[`${pointType}Y`]
  };
}
function extractEventInfo3(event, pointType = "page") {
  return {
    point: isTouchEvent2(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
  };
}
var wrapPointerEventHandler2 = (handler, shouldFilterPrimaryPointer = false) => {
  const listener = (event) => handler(event, extractEventInfo3(event));
  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
};
var supportsPointerEvents = () => isBrowser3 && window.onpointerdown === null;
var supportsTouchEvents = () => isBrowser3 && window.ontouchstart === null;
var supportsMouseEvents = () => isBrowser3 && window.onmousedown === null;
var mouseEventNames = {
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointercancel: "mousecancel",
  pointerover: "mouseover",
  pointerout: "mouseout",
  pointerenter: "mouseenter",
  pointerleave: "mouseleave"
};
var touchEventNames = {
  pointerdown: "touchstart",
  pointermove: "touchmove",
  pointerup: "touchend",
  pointercancel: "touchcancel"
};
function getPointerEventName2(name) {
  if (supportsPointerEvents()) {
    return name;
  }
  if (supportsTouchEvents()) {
    return touchEventNames[name];
  }
  if (supportsMouseEvents()) {
    return mouseEventNames[name];
  }
  return name;
}
function addPointerEvent3(target, eventName, handler, options) {
  return addDomEvent3(
    target,
    getPointerEventName2(eventName),
    wrapPointerEventHandler2(handler, eventName === "pointerdown"),
    options
  );
}
function isMultiTouchEvent2(event) {
  return isTouchEvent2(event) && event.touches.length > 1;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField2 = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/@chakra-ui/react/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep2 = 1 / 60 * 1e3;
var getCurrentTime2 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame2 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime2()), defaultTimestep2);

// node_modules/@chakra-ui/react/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep3(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/react/node_modules/framesync/dist/es/index.mjs
var maxElapsed3 = 40;
var useDefaultElapsed3 = true;
var runNextFrame3 = false;
var isProcessing2 = false;
var frame3 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder3 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps3 = stepsOrder3.reduce((acc, key) => {
  acc[key] = createRenderStep3(() => runNextFrame3 = true);
  return acc;
}, {});
var sync3 = stepsOrder3.reduce((acc, key) => {
  const step = steps3[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame3)
      startLoop3();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync3 = stepsOrder3.reduce((acc, key) => {
  acc[key] = steps3[key].cancel;
  return acc;
}, {});
var flushSync2 = stepsOrder3.reduce((acc, key) => {
  acc[key] = () => steps3[key].process(frame3);
  return acc;
}, {});
var processStep3 = (stepId) => steps3[stepId].process(frame3);
var processFrame3 = (timestamp) => {
  runNextFrame3 = false;
  frame3.delta = useDefaultElapsed3 ? defaultTimestep2 : Math.max(Math.min(timestamp - frame3.timestamp, maxElapsed3), 1);
  frame3.timestamp = timestamp;
  isProcessing2 = true;
  stepsOrder3.forEach(processStep3);
  isProcessing2 = false;
  if (runNextFrame3) {
    useDefaultElapsed3 = false;
    onNextFrame2(processFrame3);
  }
};
var startLoop3 = () => {
  runNextFrame3 = true;
  useDefaultElapsed3 = true;
  if (!isProcessing2)
    onNextFrame2(processFrame3);
};
var getFrameData2 = () => frame3;
var es_default2 = sync3;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
var PanSession3 = class {
  constructor(event, handlers2, threshold) {
    __publicField2(this, "history", []);
    __publicField2(this, "startEvent", null);
    __publicField2(this, "lastEvent", null);
    __publicField2(this, "lastEventInfo", null);
    __publicField2(this, "handlers", {});
    __publicField2(this, "removeListeners", noop4);
    __publicField2(this, "threshold", 3);
    __publicField2(this, "win");
    __publicField2(this, "updatePoint", () => {
      if (!(this.lastEvent && this.lastEventInfo))
        return;
      const info2 = getPanInfo2(this.lastEventInfo, this.history);
      const isPanStarted = this.startEvent !== null;
      const isDistancePastThreshold = distance3(info2.offset, { x: 0, y: 0 }) >= this.threshold;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      const { timestamp: timestamp2 } = getFrameData2();
      this.history.push({ ...info2.point, timestamp: timestamp2 });
      const { onStart, onMove } = this.handlers;
      if (!isPanStarted) {
        onStart == null ? void 0 : onStart(this.lastEvent, info2);
        this.startEvent = this.lastEvent;
      }
      onMove == null ? void 0 : onMove(this.lastEvent, info2);
    });
    __publicField2(this, "onPointerMove", (event2, info2) => {
      this.lastEvent = event2;
      this.lastEventInfo = info2;
      if (isMouseEvent2(event2) && event2.buttons === 0) {
        this.onPointerUp(event2, info2);
        return;
      }
      es_default2.update(this.updatePoint, true);
    });
    __publicField2(this, "onPointerUp", (event2, info2) => {
      const panInfo = getPanInfo2(info2, this.history);
      const { onEnd, onSessionEnd } = this.handlers;
      onSessionEnd == null ? void 0 : onSessionEnd(event2, panInfo);
      this.end();
      if (!onEnd || !this.startEvent)
        return;
      onEnd == null ? void 0 : onEnd(event2, panInfo);
    });
    this.win = getEventWindow2(event);
    if (isMultiTouchEvent2(event))
      return;
    this.handlers = handlers2;
    if (threshold) {
      this.threshold = threshold;
    }
    event.stopPropagation();
    event.preventDefault();
    const info = extractEventInfo3(event);
    const { timestamp } = getFrameData2();
    this.history = [{ ...info.point, timestamp }];
    const { onSessionStart } = handlers2;
    onSessionStart == null ? void 0 : onSessionStart(event, getPanInfo2(info, this.history));
    this.removeListeners = pipe6(
      addPointerEvent3(this.win, "pointermove", this.onPointerMove),
      addPointerEvent3(this.win, "pointerup", this.onPointerUp),
      addPointerEvent3(this.win, "pointercancel", this.onPointerUp)
    );
  }
  updateHandlers(handlers2) {
    this.handlers = handlers2;
  }
  end() {
    var _a40;
    (_a40 = this.removeListeners) == null ? void 0 : _a40.call(this);
    cancelSync3.update(this.updatePoint);
  }
};
function subtractPoint2(a, b) {
  return { x: a.x - b.x, y: a.y - b.y };
}
function startPanPoint(history) {
  return history[0];
}
function lastPanPoint(history) {
  return history[history.length - 1];
}
function getPanInfo2(info, history) {
  return {
    point: info.point,
    delta: subtractPoint2(info.point, lastPanPoint(history)),
    offset: subtractPoint2(info.point, startPanPoint(history)),
    velocity: getVelocity3(history, 0.1)
  };
}
function lastDevicePoint2(history) {
  return history[history.length - 1];
}
var toMilliseconds = (seconds) => seconds * 1e3;
function getVelocity3(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  let i = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = lastDevicePoint2(history);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
  if (time === 0) {
    return { x: 0, y: 0 };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time,
    y: (lastPoint.y - timestampedPoint.y) / time
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints4 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();
var hasTabIndex2 = (element) => element.hasAttribute("tabindex");
var hasNegativeTabIndex2 = (element) => hasTabIndex2(element) && element.tabIndex === -1;
function isDisabled2(element) {
  return Boolean(element.getAttribute("disabled")) === true || Boolean(element.getAttribute("aria-disabled")) === true;
}
function isInputElement2(element) {
  return isHTMLElement2(element) && element.localName === "input" && "select" in element;
}
function isActiveElement2(element) {
  const doc = isHTMLElement2(element) ? getOwnerDocument2(element) : document;
  return doc.activeElement === element;
}
function hasFocusWithin2(element) {
  if (!document.activeElement)
    return false;
  return element.contains(document.activeElement);
}
function isHidden2(element) {
  if (element.parentElement && isHidden2(element.parentElement))
    return true;
  return element.hidden;
}
function isContentEditable2(element) {
  const value = element.getAttribute("contenteditable");
  return value !== "false" && value != null;
}
function isFocusable2(element) {
  if (!isHTMLElement2(element) || isHidden2(element) || isDisabled2(element)) {
    return false;
  }
  const { localName } = element;
  const focusableTags = ["input", "select", "textarea", "button"];
  if (focusableTags.indexOf(localName) >= 0)
    return true;
  const others2 = {
    a: () => element.hasAttribute("href"),
    audio: () => element.hasAttribute("controls"),
    video: () => element.hasAttribute("controls")
  };
  if (localName in others2) {
    return others2[localName]();
  }
  if (isContentEditable2(element))
    return true;
  return hasTabIndex2(element);
}
function isTabbable2(element) {
  if (!element)
    return false;
  return isHTMLElement2(element) && isFocusable2(element) && !hasNegativeTabIndex2(element);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList2 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector2 = focusableElList2.join();
var isVisible = (el) => el.offsetWidth > 0 && el.offsetHeight > 0;
function getAllFocusable2(container3) {
  const focusableEls = Array.from(
    container3.querySelectorAll(focusableElSelector2)
  );
  focusableEls.unshift(container3);
  return focusableEls.filter((el) => isFocusable2(el) && isVisible(el));
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();
function focus2(element, options = {}) {
  const {
    isActive = isActiveElement2,
    nextTick,
    preventScroll = true,
    selectTextIfInput = true
  } = options;
  if (!element || isActive(element))
    return -1;
  function triggerFocus() {
    if (!element) {
      warn3({
        condition: true,
        message: "[chakra-ui]: can't call focus() on `null` or `undefined` element"
      });
      return;
    }
    if (supportsPreventScroll()) {
      element.focus({ preventScroll });
    } else {
      element.focus();
      if (preventScroll) {
        const scrollableElements = getScrollableElements(element);
        restoreScrollPosition(scrollableElements);
      }
    }
    if (selectTextIfInput) {
      if (isInputElement2(element)) {
        element.select();
      } else if ("setSelectionRange" in element) {
        const el = element;
        el.setSelectionRange(el.value.length, el.value.length);
      }
    }
  }
  if (nextTick) {
    return requestAnimationFrame(triggerFocus);
  }
  triggerFocus();
  return -1;
}
var supportsPreventScrollCached = null;
function supportsPreventScroll() {
  if (supportsPreventScrollCached == null) {
    supportsPreventScrollCached = false;
    try {
      const div = document.createElement("div");
      div.focus({
        get preventScroll() {
          supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e) {
    }
  }
  return supportsPreventScrollCached;
}
function getScrollableElements(element) {
  var _a40;
  const doc = getOwnerDocument2(element);
  const win = (_a40 = doc.defaultView) != null ? _a40 : window;
  let parent = element.parentNode;
  const scrollableElements = [];
  const rootScrollingElement = doc.scrollingElement || doc.documentElement;
  while (parent instanceof win.HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {
      scrollableElements.push({
        element: parent,
        scrollTop: parent.scrollTop,
        scrollLeft: parent.scrollLeft
      });
    }
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof win.HTMLElement) {
    scrollableElements.push({
      element: rootScrollingElement,
      scrollTop: rootScrollingElement.scrollTop,
      scrollLeft: rootScrollingElement.scrollLeft
    });
  }
  return scrollableElements;
}
function restoreScrollPosition(scrollableElements) {
  for (const { element, scrollTop, scrollLeft } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react67 = __toESM(require_react(), 1);
var import_react_fast_compare2 = __toESM(require_react_fast_compare2(), 1);
function useStyleConfigImpl(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra2();
  const themeStyleConfig = themeKey ? memoizedGet3(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash7.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined2(omit3(rest, ["children"]))
  );
  const stylesRef = (0, import_react67.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare2.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig2(themeKey, props = {}) {
  return useStyleConfigImpl(themeKey, props);
}
function useMultiStyleConfig2(themeKey, props = {}) {
  return useStyleConfigImpl(themeKey, props);
}
function useComponentStyles__unstable2(themeKey, props) {
  var _a40;
  const { baseConfig, ...restProps } = props;
  const { theme: theme3 } = useChakra2();
  const overrides = (_a40 = theme3.components) == null ? void 0 : _a40[themeKey];
  const styleConfig = overrides ? mergeThemeOverride(overrides, baseConfig) : baseConfig;
  return useStyleConfigImpl(null, {
    ...restProps,
    styleConfig
  });
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames2 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps2 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp2(prop) {
  return validHTMLProps2.has(prop) || !allPropNames2.has(prop);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react68 = __toESM(require_react(), 1);
var _a10;
var emotion_styled2 = (_a10 = emotion_styled_browser_esm_default.default) != null ? _a10 : emotion_styled_browser_esm_default;
var toCSSObject2 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter2(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn5(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined2(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled2(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp2;
  }
  const styleObject = toCSSObject2({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled2(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react68.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react68.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory2() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled2, {
    apply(target, thisArg, argArray) {
      return styled2(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled2(element));
      }
      return cache.get(element);
    }
  });
}
var chakra2 = factory2();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react69 = __toESM(require_react(), 1);
function forwardRef5(component) {
  return (0, import_react69.forwardRef)(component);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react70 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react71 = __toESM(require_react(), 1);
function createContext13(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react71.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react71.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react73 = __toESM(require_react(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
function ThemeProvider3(props) {
  const { cssVarsRoot, theme: theme3, children } = props;
  const computedTheme = (0, import_react73.useMemo)(() => toCSSVar(theme3), [theme3]);
  return (0, import_jsx_runtime9.jsxs)(ThemeProvider, { theme: computedTheme, children: [
    (0, import_jsx_runtime9.jsx)(CSSVars2, { root: cssVarsRoot }),
    children
  ] });
}
function CSSVars2({ root = ":host, :root" }) {
  const selector2 = [root, `[data-theme]`].join(",");
  return (0, import_jsx_runtime9.jsx)(Global, { styles: (theme3) => ({ [selector2]: theme3.__cssVars }) });
}
var [StylesProvider2, useStyles2] = createContext13({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});
function createStylesContext2(componentName) {
  return createContext13({
    name: `${componentName}StylesContext`,
    errorMessage: `useStyles: "styles" is undefined. Seems you forgot to wrap the components in "<${componentName} />" `
  });
}
function GlobalStyle2() {
  const { colorMode } = useColorMode();
  return (0, import_jsx_runtime9.jsx)(
    Global,
    {
      styles: (theme3) => {
        const styleObjectOrFn = memoizedGet3(theme3, "styles.global");
        const globalStyles = runIfFn5(styleObjectOrFn, { theme: theme3, colorMode });
        if (!globalStyles)
          return void 0;
        const styles3 = css2(globalStyles)(theme3);
        return styles3;
      }
    }
  );
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-GQXYYJJJ.mjs
var import_react75 = __toESM(require_react(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var toastMotionVariants = {
  initial: (props) => {
    const { position: position2 } = props;
    const dir = ["top", "bottom"].includes(position2) ? "y" : "x";
    let factor = ["top-right", "bottom-right"].includes(position2) ? 1 : -1;
    if (position2 === "bottom")
      factor = 1;
    return {
      opacity: 0,
      [dir]: factor * 24
    };
  },
  animate: {
    opacity: 1,
    y: 0,
    x: 0,
    scale: 1,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: 0.85,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 1, 1]
    }
  }
};
var ToastComponent = (0, import_react75.memo)((props) => {
  const {
    id: id4,
    message,
    onCloseComplete,
    onRequestRemove,
    requestClose = false,
    position: position2 = "bottom",
    duration = 5e3,
    containerStyle,
    motionVariants: motionVariants2 = toastMotionVariants,
    toastSpacing = "0.5rem"
  } = props;
  const [delay2, setDelay] = (0, import_react75.useState)(duration);
  const isPresent2 = useIsPresent();
  useUpdateEffect(() => {
    if (!isPresent2) {
      onCloseComplete == null ? void 0 : onCloseComplete();
    }
  }, [isPresent2]);
  useUpdateEffect(() => {
    setDelay(duration);
  }, [duration]);
  const onMouseEnter = () => setDelay(null);
  const onMouseLeave = () => setDelay(duration);
  const close = () => {
    if (isPresent2)
      onRequestRemove();
  };
  (0, import_react75.useEffect)(() => {
    if (isPresent2 && requestClose) {
      onRequestRemove();
    }
  }, [isPresent2, requestClose, onRequestRemove]);
  useTimeout(close, delay2);
  const containerStyles = (0, import_react75.useMemo)(
    () => ({
      pointerEvents: "auto",
      maxWidth: 560,
      minWidth: 300,
      margin: toastSpacing,
      ...containerStyle
    }),
    [containerStyle, toastSpacing]
  );
  const toastStyle = (0, import_react75.useMemo)(() => getToastStyle(position2), [position2]);
  return (0, import_jsx_runtime10.jsx)(
    motion.li,
    {
      layout: true,
      className: "chakra-toast",
      variants: motionVariants2,
      initial: "initial",
      animate: "animate",
      exit: "exit",
      onHoverStart: onMouseEnter,
      onHoverEnd: onMouseLeave,
      custom: { position: position2 },
      style: toastStyle,
      children: (0, import_jsx_runtime10.jsx)(
        chakra2.div,
        {
          role: "status",
          "aria-atomic": "true",
          className: "chakra-toast__inner",
          __css: containerStyles,
          children: runIfFn(message, { id: id4, onClose: close })
        }
      )
    }
  );
});
ToastComponent.displayName = "ToastComponent";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-PE6CKLNB.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-F6QD4NSP.mjs
init_shim();
function getToastPlacement(position2, dir) {
  var _a40;
  const computedPosition = position2 != null ? position2 : "bottom";
  const logicals4 = {
    "top-start": { ltr: "top-left", rtl: "top-right" },
    "top-end": { ltr: "top-right", rtl: "top-left" },
    "bottom-start": { ltr: "bottom-left", rtl: "bottom-right" },
    "bottom-end": { ltr: "bottom-right", rtl: "bottom-left" }
  };
  const logical2 = logicals4[computedPosition];
  return (_a40 = logical2 == null ? void 0 : logical2[dir]) != null ? _a40 : computedPosition;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/alert/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/alert/dist/chunk-FBQ6TKVQ.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/alert/dist/chunk-FZCW3KO4.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/alert/dist/chunk-R7JICMEA.mjs
init_shim();
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
function CheckIcon(props) {
  return (0, import_jsx_runtime11.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime11.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
    }
  ) });
}
function InfoIcon(props) {
  return (0, import_jsx_runtime11.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime11.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
    }
  ) });
}
function WarningIcon(props) {
  return (0, import_jsx_runtime11.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime11.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
    }
  ) });
}

// node_modules/@chakra-ui/spinner/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/spinner/dist/chunk-NO6MRLPK.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react77 = __toESM(require_react(), 1);
function useTheme3() {
  const theme3 = (0, import_react77.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra3() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme3();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM3() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser4 = canUseDOM3();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash8 = __toESM(require_lodash(), 1);
function omit4(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get4(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize4 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet4 = memoize4(get4);
function objectFilter3(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined3 = (object2) => objectFilter3(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction6(value) {
  return typeof value === "function";
}
var __DEV__3 = import_process.default.env.NODE_ENV !== "production";
var __TEST__3 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn6(valueOrFn, ...args) {
  return isFunction6(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once3(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn4 = once3((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__3) {
    console.warn(message);
  }
});
var error3 = once3((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__3) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger3 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger3 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep3 = 1 / 60 * 1e3;
var getCurrentTime3 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame3 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime3()), defaultTimestep3);

// node_modules/@chakra-ui/spinner/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep4(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/spinner/node_modules/framesync/dist/es/index.mjs
var maxElapsed4 = 40;
var useDefaultElapsed4 = true;
var runNextFrame4 = false;
var isProcessing3 = false;
var frame4 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder4 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps4 = stepsOrder4.reduce((acc, key) => {
  acc[key] = createRenderStep4(() => runNextFrame4 = true);
  return acc;
}, {});
var sync4 = stepsOrder4.reduce((acc, key) => {
  const step = steps4[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame4)
      startLoop4();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync4 = stepsOrder4.reduce((acc, key) => {
  acc[key] = steps4[key].cancel;
  return acc;
}, {});
var flushSync3 = stepsOrder4.reduce((acc, key) => {
  acc[key] = () => steps4[key].process(frame4);
  return acc;
}, {});
var processStep4 = (stepId) => steps4[stepId].process(frame4);
var processFrame4 = (timestamp) => {
  runNextFrame4 = false;
  frame4.delta = useDefaultElapsed4 ? defaultTimestep3 : Math.max(Math.min(timestamp - frame4.timestamp, maxElapsed4), 1);
  frame4.timestamp = timestamp;
  isProcessing3 = true;
  stepsOrder4.forEach(processStep4);
  isProcessing3 = false;
  if (runNextFrame4) {
    useDefaultElapsed4 = false;
    onNextFrame3(processFrame4);
  }
};
var startLoop4 = () => {
  runNextFrame4 = true;
  useDefaultElapsed4 = true;
  if (!isProcessing3)
    onNextFrame3(processFrame4);
};

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints5 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList3 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector3 = focusableElList3.join();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react78 = __toESM(require_react(), 1);
var import_react_fast_compare3 = __toESM(require_react_fast_compare3(), 1);
function useStyleConfigImpl2(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra3();
  const themeStyleConfig = themeKey ? memoizedGet4(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash8.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined3(omit4(rest, ["children"]))
  );
  const stylesRef = (0, import_react78.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare3.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig3(themeKey, props = {}) {
  return useStyleConfigImpl2(themeKey, props);
}

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames3 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps3 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp3(prop) {
  return validHTMLProps3.has(prop) || !allPropNames3.has(prop);
}

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react79 = __toESM(require_react(), 1);
var _a11;
var emotion_styled3 = (_a11 = emotion_styled_browser_esm_default.default) != null ? _a11 : emotion_styled_browser_esm_default;
var toCSSObject3 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter3(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn6(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined3(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled3(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp3;
  }
  const styleObject = toCSSObject3({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled3(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react79.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react79.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory3() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled3, {
    apply(target, thisArg, argArray) {
      return styled3(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled3(element));
      }
      return cache.get(element);
    }
  });
}
var chakra3 = factory3();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react80 = __toESM(require_react(), 1);
function forwardRef6(component) {
  return (0, import_react80.forwardRef)(component);
}

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react81 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react82 = __toESM(require_react(), 1);
function createContext14(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react82.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react82.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react84 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider3, useStyles3] = createContext14({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/spinner/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/spinner/dist/chunk-NO6MRLPK.mjs
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var spin = keyframes({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
var Spinner = forwardRef6((props, ref) => {
  const styles3 = useStyleConfig3("Spinner", props);
  const {
    label = "Loading...",
    thickness = "2px",
    speed = "0.45s",
    emptyColor = "transparent",
    className,
    ...rest
  } = omitThemingProps(props);
  const _className = cx("chakra-spinner", className);
  const spinnerStyles = {
    display: "inline-block",
    borderColor: "currentColor",
    borderStyle: "solid",
    borderRadius: "99999px",
    borderWidth: thickness,
    borderBottomColor: emptyColor,
    borderLeftColor: emptyColor,
    animation: `${spin} ${speed} linear infinite`,
    ...styles3
  };
  return (0, import_jsx_runtime13.jsx)(
    chakra3.div,
    {
      ref,
      __css: spinnerStyles,
      className: _className,
      ...rest,
      children: label && (0, import_jsx_runtime13.jsx)(chakra3.span, { srOnly: true, children: label })
    }
  );
});
Spinner.displayName = "Spinner";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/alert/dist/chunk-FZCW3KO4.mjs
var [AlertProvider, useAlertContext] = createContext({
  name: "AlertContext",
  hookName: "useAlertContext",
  providerName: "<Alert />"
});
var [AlertStylesProvider, useAlertStyles] = createContext({
  name: `AlertStylesContext`,
  hookName: `useAlertStyles`,
  providerName: "<Alert />"
});
var STATUSES = {
  info: { icon: InfoIcon, colorScheme: "blue" },
  warning: { icon: WarningIcon, colorScheme: "orange" },
  success: { icon: CheckIcon, colorScheme: "green" },
  error: { icon: WarningIcon, colorScheme: "red" },
  loading: { icon: Spinner, colorScheme: "blue" }
};
function getStatusColorScheme(status) {
  return STATUSES[status].colorScheme;
}
function getStatusIcon(status) {
  return STATUSES[status].icon;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/alert/dist/chunk-FBQ6TKVQ.mjs
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var AlertDescription = forwardRef5(
  function AlertDescription2(props, ref) {
    const styles3 = useAlertStyles();
    const { status } = useAlertContext();
    const descriptionStyles = {
      display: "inline",
      ...styles3.description
    };
    return (0, import_jsx_runtime14.jsx)(
      chakra2.div,
      {
        ref,
        "data-status": status,
        ...props,
        className: cx("chakra-alert__desc", props.className),
        __css: descriptionStyles
      }
    );
  }
);
AlertDescription.displayName = "AlertDescription";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/alert/dist/chunk-TEHNKISS.mjs
init_shim();
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
function AlertIcon(props) {
  const { status } = useAlertContext();
  const BaseIcon = getStatusIcon(status);
  const styles3 = useAlertStyles();
  const css4 = status === "loading" ? styles3.spinner : styles3.icon;
  return (0, import_jsx_runtime15.jsx)(
    chakra2.span,
    {
      display: "inherit",
      "data-status": status,
      ...props,
      className: cx("chakra-alert__icon", props.className),
      __css: css4,
      children: props.children || (0, import_jsx_runtime15.jsx)(BaseIcon, { h: "100%", w: "100%" })
    }
  );
}
AlertIcon.displayName = "AlertIcon";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/alert/dist/chunk-FRKYNQ2N.mjs
init_shim();
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var AlertTitle = forwardRef5(
  function AlertTitle2(props, ref) {
    const styles3 = useAlertStyles();
    const { status } = useAlertContext();
    return (0, import_jsx_runtime16.jsx)(
      chakra2.div,
      {
        ref,
        "data-status": status,
        ...props,
        className: cx("chakra-alert__title", props.className),
        __css: styles3.title
      }
    );
  }
);
AlertTitle.displayName = "AlertTitle";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/alert/dist/chunk-RWQIUCJP.mjs
init_shim();
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var Alert = forwardRef5(function Alert2(props, ref) {
  var _a40;
  const { status = "info", addRole = true, ...rest } = omitThemingProps(props);
  const colorScheme = (_a40 = props.colorScheme) != null ? _a40 : getStatusColorScheme(status);
  const styles3 = useMultiStyleConfig2("Alert", { ...props, colorScheme });
  const alertStyles = {
    width: "100%",
    display: "flex",
    alignItems: "center",
    position: "relative",
    overflow: "hidden",
    ...styles3.container
  };
  return (0, import_jsx_runtime17.jsx)(AlertProvider, { value: { status }, children: (0, import_jsx_runtime17.jsx)(AlertStylesProvider, { value: styles3, children: (0, import_jsx_runtime17.jsx)(
    chakra2.div,
    {
      "data-status": status,
      role: addRole ? "alert" : void 0,
      ref,
      ...rest,
      className: cx("chakra-alert", props.className),
      __css: alertStyles
    }
  ) }) });
});
Alert.displayName = "Alert";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/close-button/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/close-button/dist/chunk-DUEJD2BE.mjs
init_shim();
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
function CloseIcon(props) {
  return (0, import_jsx_runtime18.jsx)(Icon, { focusable: "false", "aria-hidden": true, ...props, children: (0, import_jsx_runtime18.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
    }
  ) });
}
var CloseButton = forwardRef5(
  function CloseButton2(props, ref) {
    const styles3 = useStyleConfig2("CloseButton", props);
    const { children, isDisabled: isDisabled26, __css, ...rest } = omitThemingProps(props);
    const baseStyle84 = {
      outline: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0
    };
    return (0, import_jsx_runtime18.jsx)(
      chakra2.button,
      {
        type: "button",
        "aria-label": "Close",
        ref,
        disabled: isDisabled26,
        __css: {
          ...baseStyle84,
          ...styles3,
          ...__css
        },
        ...rest,
        children: children || (0, import_jsx_runtime18.jsx)(CloseIcon, { width: "1em", height: "1em" })
      }
    );
  }
);
CloseButton.displayName = "CloseButton";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-PE6CKLNB.mjs
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var initialState = {
  top: [],
  "top-left": [],
  "top-right": [],
  "bottom-left": [],
  bottom: [],
  "bottom-right": []
};
var toastStore = createStore(initialState);
function createStore(initialState2) {
  let state2 = initialState2;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (setStateFn) => {
    state2 = setStateFn(state2);
    listeners.forEach((l) => l());
  };
  return {
    getState: () => state2,
    subscribe: (listener) => {
      listeners.add(listener);
      return () => {
        setState(() => initialState2);
        listeners.delete(listener);
      };
    },
    removeToast: (id4, position2) => {
      setState((prevState) => ({
        ...prevState,
        [position2]: prevState[position2].filter((toast) => toast.id != id4)
      }));
    },
    notify: (message, options) => {
      const toast = createToast(message, options);
      const { position: position2, id: id4 } = toast;
      setState((prevToasts) => {
        var _a40, _b8;
        const isTop = position2.includes("top");
        const toasts = isTop ? [toast, ...(_a40 = prevToasts[position2]) != null ? _a40 : []] : [...(_b8 = prevToasts[position2]) != null ? _b8 : [], toast];
        return {
          ...prevToasts,
          [position2]: toasts
        };
      });
      return id4;
    },
    update: (id4, options) => {
      if (!id4)
        return;
      setState((prevState) => {
        const nextState = { ...prevState };
        const { position: position2, index } = findToast(nextState, id4);
        if (position2 && index !== -1) {
          nextState[position2][index] = {
            ...nextState[position2][index],
            ...options,
            message: createRenderToast(options)
          };
        }
        return nextState;
      });
    },
    closeAll: ({ positions } = {}) => {
      setState((prev) => {
        const allPositions = [
          "bottom",
          "bottom-right",
          "bottom-left",
          "top",
          "top-left",
          "top-right"
        ];
        const positionsToClose = positions != null ? positions : allPositions;
        return positionsToClose.reduce(
          (acc, position2) => {
            acc[position2] = prev[position2].map((toast) => ({
              ...toast,
              requestClose: true
            }));
            return acc;
          },
          { ...prev }
        );
      });
    },
    close: (id4) => {
      setState((prevState) => {
        const position2 = getToastPosition(prevState, id4);
        if (!position2)
          return prevState;
        return {
          ...prevState,
          [position2]: prevState[position2].map((toast) => {
            if (toast.id == id4) {
              return {
                ...toast,
                requestClose: true
              };
            }
            return toast;
          })
        };
      });
    },
    isActive: (id4) => Boolean(findToast(toastStore.getState(), id4).position)
  };
}
var counter = 0;
function createToast(message, options = {}) {
  var _a40, _b8;
  counter += 1;
  const id4 = (_a40 = options.id) != null ? _a40 : counter;
  const position2 = (_b8 = options.position) != null ? _b8 : "bottom";
  return {
    id: id4,
    message,
    position: position2,
    duration: options.duration,
    onCloseComplete: options.onCloseComplete,
    onRequestRemove: () => toastStore.removeToast(String(id4), position2),
    status: options.status,
    requestClose: false,
    containerStyle: options.containerStyle
  };
}
var Toast = (props) => {
  const {
    status,
    variant = "solid",
    id: id4,
    title,
    isClosable,
    onClose,
    description,
    colorScheme,
    icon
  } = props;
  const ids = id4 ? {
    root: `toast-${id4}`,
    title: `toast-${id4}-title`,
    description: `toast-${id4}-description`
  } : void 0;
  return (0, import_jsx_runtime19.jsxs)(
    Alert,
    {
      addRole: false,
      status,
      variant,
      id: ids == null ? void 0 : ids.root,
      alignItems: "start",
      borderRadius: "md",
      boxShadow: "lg",
      paddingEnd: 8,
      textAlign: "start",
      width: "auto",
      colorScheme,
      children: [
        (0, import_jsx_runtime19.jsx)(AlertIcon, { children: icon }),
        (0, import_jsx_runtime19.jsxs)(chakra2.div, { flex: "1", maxWidth: "100%", children: [
          title && (0, import_jsx_runtime19.jsx)(AlertTitle, { id: ids == null ? void 0 : ids.title, children: title }),
          description && (0, import_jsx_runtime19.jsx)(AlertDescription, { id: ids == null ? void 0 : ids.description, display: "block", children: description })
        ] }),
        isClosable && (0, import_jsx_runtime19.jsx)(
          CloseButton,
          {
            size: "sm",
            onClick: onClose,
            position: "absolute",
            insetEnd: 1,
            top: 1
          }
        )
      ]
    }
  );
};
function createRenderToast(options = {}) {
  const { render, toastComponent: ToastComponent2 = Toast } = options;
  const renderToast = (props) => {
    if (typeof render === "function") {
      return render({ ...props, ...options });
    }
    return (0, import_jsx_runtime19.jsx)(ToastComponent2, { ...props, ...options });
  };
  return renderToast;
}
function createToastFn(dir, defaultOptions3) {
  const normalizeToastOptions = (options) => {
    var _a40;
    return {
      ...defaultOptions3,
      ...options,
      position: getToastPlacement(
        (_a40 = options == null ? void 0 : options.position) != null ? _a40 : defaultOptions3 == null ? void 0 : defaultOptions3.position,
        dir
      )
    };
  };
  const toast = (options) => {
    const normalizedToastOptions = normalizeToastOptions(options);
    const Message = createRenderToast(normalizedToastOptions);
    return toastStore.notify(Message, normalizedToastOptions);
  };
  toast.update = (id4, options) => {
    toastStore.update(id4, normalizeToastOptions(options));
  };
  toast.promise = (promise, options) => {
    const id4 = toast({
      ...options.loading,
      status: "loading",
      duration: null
    });
    promise.then(
      (data) => toast.update(id4, {
        status: "success",
        duration: 5e3,
        ...runIfFn(options.success, data)
      })
    ).catch(
      (error25) => toast.update(id4, {
        status: "error",
        duration: 5e3,
        ...runIfFn(options.error, error25)
      })
    );
  };
  toast.closeAll = toastStore.closeAll;
  toast.close = toastStore.close;
  toast.isActive = toastStore.isActive;
  return toast;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-D3Z6CXO7.mjs
var import_react86 = __toESM(require_react(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
var [ToastOptionProvider, useToastOptionContext] = createContext({
  name: `ToastOptionsContext`,
  strict: false
});
var ToastProvider = (props) => {
  const state2 = (0, import_react86.useSyncExternalStore)(
    toastStore.subscribe,
    toastStore.getState,
    toastStore.getState
  );
  const {
    motionVariants: motionVariants2,
    component: Component2 = ToastComponent,
    portalProps
  } = props;
  const stateKeys = Object.keys(state2);
  const toastList = stateKeys.map((position2) => {
    const toasts = state2[position2];
    return (0, import_jsx_runtime20.jsx)(
      "ul",
      {
        role: "region",
        "aria-live": "polite",
        id: `chakra-toast-manager-${position2}`,
        style: getToastListStyle(position2),
        children: (0, import_jsx_runtime20.jsx)(AnimatePresence, { initial: false, children: toasts.map((toast) => (0, import_jsx_runtime20.jsx)(
          Component2,
          {
            motionVariants: motionVariants2,
            ...toast
          },
          toast.id
        )) })
      },
      position2
    );
  });
  return (0, import_jsx_runtime20.jsx)(Portal, { ...portalProps, children: toastList });
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-7FYWZXXG.mjs
var import_react87 = __toESM(require_react(), 1);
function useToast(options) {
  const { theme: theme3 } = useChakra2();
  const defaultOptions3 = useToastOptionContext();
  return (0, import_react87.useMemo)(
    () => createToastFn(theme3.direction, {
      ...defaultOptions3,
      ...options
    }),
    [options, theme3.direction, defaultOptions3]
  );
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/toast/dist/chunk-F5UHYQF6.mjs
init_shim();
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var defaults = {
  duration: 5e3,
  variant: "solid"
};
var defaultStandaloneParam = {
  theme: src_default,
  colorMode: "light",
  toggleColorMode: () => {
  },
  setColorMode: () => {
  },
  defaultOptions: defaults,
  forced: false
};
function createStandaloneToast({
  theme: theme3 = defaultStandaloneParam.theme,
  colorMode = defaultStandaloneParam.colorMode,
  toggleColorMode = defaultStandaloneParam.toggleColorMode,
  setColorMode = defaultStandaloneParam.setColorMode,
  defaultOptions: defaultOptions3 = defaultStandaloneParam.defaultOptions,
  motionVariants: motionVariants2,
  toastSpacing,
  component,
  forced
} = defaultStandaloneParam) {
  const colorModeContextValue = {
    colorMode,
    setColorMode,
    toggleColorMode,
    forced
  };
  const ToastContainer = () => (0, import_jsx_runtime21.jsx)(ThemeProvider3, { theme: theme3, children: (0, import_jsx_runtime21.jsx)(ColorModeContext.Provider, { value: colorModeContextValue, children: (0, import_jsx_runtime21.jsx)(
    ToastProvider,
    {
      defaultOptions: defaultOptions3,
      motionVariants: motionVariants2,
      toastSpacing,
      component
    }
  ) }) });
  return {
    ToastContainer,
    toast: createToastFn(theme3.direction, defaultOptions3)
  };
}

// node_modules/@chakra-ui/react/dist/chunk-DGNA6VRZ.mjs
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var createChakraProvider = (providerTheme) => {
  return function ChakraProvider22({
    children,
    theme: theme3 = providerTheme,
    toastOptions,
    ...restProps
  }) {
    return (0, import_jsx_runtime22.jsxs)(ChakraProvider, { theme: theme3, ...restProps, children: [
      (0, import_jsx_runtime22.jsx)(ToastOptionProvider, { value: toastOptions == null ? void 0 : toastOptions.defaultOptions, children }),
      (0, import_jsx_runtime22.jsx)(ToastProvider, { ...toastOptions })
    ] });
  };
};
var ChakraProvider2 = createChakraProvider(theme2);
var ChakraBaseProvider = createChakraProvider(baseTheme2);

// node_modules/@chakra-ui/accordion/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/accordion/dist/chunk-APVWO53B.mjs
init_shim();

// node_modules/@chakra-ui/accordion/dist/chunk-JST25EWU.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/descendant/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/descendant/dist/chunk-D5UZ3RNN.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/descendant/dist/chunk-P6SLLHUK.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/descendant/dist/chunk-N7WDF4QK.mjs
init_shim();
var import_react88 = __toESM(require_react(), 1);
var __defProp2 = Object.defineProperty;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField4 = (obj, key, value) => {
  __defNormalProp2(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
function sortNodes(nodes) {
  return nodes.sort((a, b) => {
    const compare = a.compareDocumentPosition(b);
    if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY) {
      return -1;
    }
    if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS) {
      return 1;
    }
    if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) {
      throw Error("Cannot sort the given nodes.");
    } else {
      return 0;
    }
  });
}
var isElement4 = (el) => typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
function getNextIndex5(current, max, loop) {
  let next = current + 1;
  if (loop && next >= max)
    next = 0;
  return next;
}
function getPrevIndex4(current, max, loop) {
  let next = current - 1;
  if (loop && next < 0)
    next = max;
  return next;
}
var useSafeLayoutEffect2 = typeof window !== "undefined" ? import_react88.useLayoutEffect : import_react88.useEffect;
var cast = (value) => value;

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/descendant/dist/chunk-P6SLLHUK.mjs
var DescendantsManager = class {
  constructor() {
    __publicField4(this, "descendants", /* @__PURE__ */ new Map());
    __publicField4(this, "register", (nodeOrOptions) => {
      if (nodeOrOptions == null)
        return;
      if (isElement4(nodeOrOptions)) {
        return this.registerNode(nodeOrOptions);
      }
      return (node2) => {
        this.registerNode(node2, nodeOrOptions);
      };
    });
    __publicField4(this, "unregister", (node2) => {
      this.descendants.delete(node2);
      const sorted = sortNodes(Array.from(this.descendants.keys()));
      this.assignIndex(sorted);
    });
    __publicField4(this, "destroy", () => {
      this.descendants.clear();
    });
    __publicField4(this, "assignIndex", (descendants) => {
      this.descendants.forEach((descendant) => {
        const index = descendants.indexOf(descendant.node);
        descendant.index = index;
        descendant.node.dataset["index"] = descendant.index.toString();
      });
    });
    __publicField4(this, "count", () => this.descendants.size);
    __publicField4(this, "enabledCount", () => this.enabledValues().length);
    __publicField4(this, "values", () => {
      const values = Array.from(this.descendants.values());
      return values.sort((a, b) => a.index - b.index);
    });
    __publicField4(this, "enabledValues", () => {
      return this.values().filter((descendant) => !descendant.disabled);
    });
    __publicField4(this, "item", (index) => {
      if (this.count() === 0)
        return void 0;
      return this.values()[index];
    });
    __publicField4(this, "enabledItem", (index) => {
      if (this.enabledCount() === 0)
        return void 0;
      return this.enabledValues()[index];
    });
    __publicField4(this, "first", () => this.item(0));
    __publicField4(this, "firstEnabled", () => this.enabledItem(0));
    __publicField4(this, "last", () => this.item(this.descendants.size - 1));
    __publicField4(this, "lastEnabled", () => {
      const lastIndex = this.enabledValues().length - 1;
      return this.enabledItem(lastIndex);
    });
    __publicField4(this, "indexOf", (node2) => {
      var _a40, _b8;
      if (!node2)
        return -1;
      return (_b8 = (_a40 = this.descendants.get(node2)) == null ? void 0 : _a40.index) != null ? _b8 : -1;
    });
    __publicField4(this, "enabledIndexOf", (node2) => {
      if (node2 == null)
        return -1;
      return this.enabledValues().findIndex((i) => i.node.isSameNode(node2));
    });
    __publicField4(this, "next", (index, loop = true) => {
      const next = getNextIndex5(index, this.count(), loop);
      return this.item(next);
    });
    __publicField4(this, "nextEnabled", (index, loop = true) => {
      const item = this.item(index);
      if (!item)
        return;
      const enabledIndex = this.enabledIndexOf(item.node);
      const nextEnabledIndex = getNextIndex5(
        enabledIndex,
        this.enabledCount(),
        loop
      );
      return this.enabledItem(nextEnabledIndex);
    });
    __publicField4(this, "prev", (index, loop = true) => {
      const prev = getPrevIndex4(index, this.count() - 1, loop);
      return this.item(prev);
    });
    __publicField4(this, "prevEnabled", (index, loop = true) => {
      const item = this.item(index);
      if (!item)
        return;
      const enabledIndex = this.enabledIndexOf(item.node);
      const prevEnabledIndex = getPrevIndex4(
        enabledIndex,
        this.enabledCount() - 1,
        loop
      );
      return this.enabledItem(prevEnabledIndex);
    });
    __publicField4(this, "registerNode", (node2, options) => {
      if (!node2 || this.descendants.has(node2))
        return;
      const keys2 = Array.from(this.descendants.keys()).concat(node2);
      const sorted = sortNodes(keys2);
      if (options == null ? void 0 : options.disabled) {
        options.disabled = !!options.disabled;
      }
      const descendant = { node: node2, index: -1, ...options };
      this.descendants.set(node2, descendant);
      this.assignIndex(sorted);
    });
  }
};

// node_modules/@chakra-ui/react-use-merge-refs/dist/index.mjs
init_shim();
var import_react89 = __toESM(require_react(), 1);
function assignRef4(ref, value) {
  if (ref == null)
    return;
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  try {
    ref.current = value;
  } catch (error25) {
    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
  }
}
function mergeRefs4(...refs) {
  return (node2) => {
    refs.forEach((ref) => {
      assignRef4(ref, node2);
    });
  };
}
function useMergeRefs2(...refs) {
  return (0, import_react89.useMemo)(() => mergeRefs4(...refs), refs);
}

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/descendant/dist/chunk-D5UZ3RNN.mjs
var import_react90 = __toESM(require_react(), 1);
function useDescendants() {
  const descendants = (0, import_react90.useRef)(new DescendantsManager());
  useSafeLayoutEffect2(() => {
    return () => descendants.current.destroy();
  });
  return descendants.current;
}
var [DescendantsContextProvider, useDescendantsContext] = createContext({
  name: "DescendantsProvider",
  errorMessage: "useDescendantsContext must be used within DescendantsProvider"
});
function useDescendant(options) {
  const descendants = useDescendantsContext();
  const [index, setIndex] = (0, import_react90.useState)(-1);
  const ref = (0, import_react90.useRef)(null);
  useSafeLayoutEffect2(() => {
    return () => {
      if (!ref.current)
        return;
      descendants.unregister(ref.current);
    };
  }, []);
  useSafeLayoutEffect2(() => {
    if (!ref.current)
      return;
    const dataIndex = Number(ref.current.dataset["index"]);
    if (index != dataIndex && !Number.isNaN(dataIndex)) {
      setIndex(dataIndex);
    }
  });
  const refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);
  return {
    descendants,
    index,
    enabledIndex: descendants.enabledIndexOf(ref.current),
    register: mergeRefs4(refCallback, ref)
  };
}
function createDescendantContext() {
  const ContextProvider = cast(DescendantsContextProvider);
  const _useDescendantsContext = () => cast(useDescendantsContext());
  const _useDescendant = (options) => useDescendant(options);
  const _useDescendants = () => useDescendants();
  return [
    ContextProvider,
    _useDescendantsContext,
    _useDescendants,
    _useDescendant
  ];
}

// node_modules/@chakra-ui/accordion/dist/chunk-JST25EWU.mjs
var [AccordionStylesProvider, useAccordionStyles] = createContext({
  name: "AccordionStylesContext",
  hookName: "useAccordionStyles",
  providerName: "<Accordion />"
});
var [AccordionItemProvider, useAccordionItemContext] = createContext({
  name: "AccordionItemContext",
  hookName: "useAccordionItemContext",
  providerName: "<AccordionItem />"
});
var [
  AccordionDescendantsProvider,
  useAccordionDescendantsContext,
  useAccordionDescendants,
  useAccordionDescendant
] = createDescendantContext();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react92 = __toESM(require_react(), 1);
function useTheme4() {
  const theme3 = (0, import_react92.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra4() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme4();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM4() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser5 = canUseDOM4();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash9 = __toESM(require_lodash(), 1);
function omit5(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get5(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize5 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet5 = memoize5(get5);
function objectFilter4(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined4 = (object2) => objectFilter4(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction7(value) {
  return typeof value === "function";
}
var __DEV__4 = import_process.default.env.NODE_ENV !== "production";
var __TEST__4 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn7(valueOrFn, ...args) {
  return isFunction7(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once4(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn5 = once4((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__4) {
    console.warn(message);
  }
});
var error4 = once4((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__4) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger4 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger4 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep4 = 1 / 60 * 1e3;
var getCurrentTime4 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame4 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime4()), defaultTimestep4);

// node_modules/@chakra-ui/accordion/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep5(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/accordion/node_modules/framesync/dist/es/index.mjs
var maxElapsed5 = 40;
var useDefaultElapsed5 = true;
var runNextFrame5 = false;
var isProcessing4 = false;
var frame5 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder5 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps5 = stepsOrder5.reduce((acc, key) => {
  acc[key] = createRenderStep5(() => runNextFrame5 = true);
  return acc;
}, {});
var sync5 = stepsOrder5.reduce((acc, key) => {
  const step = steps5[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame5)
      startLoop5();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync5 = stepsOrder5.reduce((acc, key) => {
  acc[key] = steps5[key].cancel;
  return acc;
}, {});
var flushSync4 = stepsOrder5.reduce((acc, key) => {
  acc[key] = () => steps5[key].process(frame5);
  return acc;
}, {});
var processStep5 = (stepId) => steps5[stepId].process(frame5);
var processFrame5 = (timestamp) => {
  runNextFrame5 = false;
  frame5.delta = useDefaultElapsed5 ? defaultTimestep4 : Math.max(Math.min(timestamp - frame5.timestamp, maxElapsed5), 1);
  frame5.timestamp = timestamp;
  isProcessing4 = true;
  stepsOrder5.forEach(processStep5);
  isProcessing4 = false;
  if (runNextFrame5) {
    useDefaultElapsed5 = false;
    onNextFrame4(processFrame5);
  }
};
var startLoop5 = () => {
  runNextFrame5 = true;
  useDefaultElapsed5 = true;
  if (!isProcessing4)
    onNextFrame4(processFrame5);
};

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints6 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList4 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector4 = focusableElList4.join();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react93 = __toESM(require_react(), 1);
var import_react_fast_compare4 = __toESM(require_react_fast_compare4(), 1);
function useStyleConfigImpl3(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra4();
  const themeStyleConfig = themeKey ? memoizedGet5(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash9.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined4(omit5(rest, ["children"]))
  );
  const stylesRef = (0, import_react93.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare4.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useMultiStyleConfig4(themeKey, props = {}) {
  return useStyleConfigImpl3(themeKey, props);
}

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames4 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps4 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp4(prop) {
  return validHTMLProps4.has(prop) || !allPropNames4.has(prop);
}

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react94 = __toESM(require_react(), 1);
var _a12;
var emotion_styled4 = (_a12 = emotion_styled_browser_esm_default.default) != null ? _a12 : emotion_styled_browser_esm_default;
var toCSSObject4 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter4(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn7(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined4(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled4(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp4;
  }
  const styleObject = toCSSObject4({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled4(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react94.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react94.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory4() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled4, {
    apply(target, thisArg, argArray) {
      return styled4(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled4(element));
      }
      return cache.get(element);
    }
  });
}
var chakra4 = factory4();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react95 = __toESM(require_react(), 1);
function forwardRef7(component) {
  return (0, import_react95.forwardRef)(component);
}

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react96 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react97 = __toESM(require_react(), 1);
function createContext15(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react97.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react97.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react99 = __toESM(require_react(), 1);
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider4, useStyles4] = createContext15({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/accordion/dist/chunk-APVWO53B.mjs
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var AccordionButton = forwardRef7(
  function AccordionButton2(props, ref) {
    const { getButtonProps } = useAccordionItemContext();
    const buttonProps = getButtonProps(props, ref);
    const styles3 = useAccordionStyles();
    const buttonStyles = {
      display: "flex",
      alignItems: "center",
      width: "100%",
      outline: 0,
      ...styles3.button
    };
    return (0, import_jsx_runtime24.jsx)(
      chakra4.button,
      {
        ...buttonProps,
        className: cx("chakra-accordion__button", props.className),
        __css: buttonStyles
      }
    );
  }
);
AccordionButton.displayName = "AccordionButton";

// node_modules/@chakra-ui/accordion/dist/chunk-IXS34X2E.mjs
init_shim();

// node_modules/@chakra-ui/accordion/dist/chunk-JDQBKIKM.mjs
init_shim();

// node_modules/@chakra-ui/react-use-controllable-state/dist/index.mjs
init_shim();
var import_react101 = __toESM(require_react(), 1);
function useControllableState(props) {
  const {
    value: valueProp,
    defaultValue,
    onChange,
    shouldUpdate = (prev, next) => prev !== next
  } = props;
  const onChangeProp = useCallbackRef(onChange);
  const shouldUpdateProp = useCallbackRef(shouldUpdate);
  const [uncontrolledState, setUncontrolledState] = (0, import_react101.useState)(defaultValue);
  const controlled = valueProp !== void 0;
  const value = controlled ? valueProp : uncontrolledState;
  const setValue = useCallbackRef(
    (next) => {
      const setter = next;
      const nextValue = typeof next === "function" ? setter(value) : next;
      if (!shouldUpdateProp(value, nextValue)) {
        return;
      }
      if (!controlled) {
        setUncontrolledState(nextValue);
      }
      onChangeProp(nextValue);
    },
    [controlled, onChangeProp, value, shouldUpdateProp]
  );
  return [value, setValue];
}

// node_modules/@chakra-ui/accordion/dist/chunk-JDQBKIKM.mjs
var import_react102 = __toESM(require_react(), 1);
function useAccordion(props) {
  const {
    onChange,
    defaultIndex,
    index: indexProp,
    allowMultiple,
    allowToggle,
    ...htmlProps
  } = props;
  allowMultipleWarning(props);
  allowMultipleAndAllowToggleWarning(props);
  const descendants = useAccordionDescendants();
  const [focusedIndex, setFocusedIndex] = (0, import_react102.useState)(-1);
  (0, import_react102.useEffect)(() => {
    return () => {
      setFocusedIndex(-1);
    };
  }, []);
  const [index, setIndex] = useControllableState({
    value: indexProp,
    defaultValue() {
      if (allowMultiple)
        return defaultIndex != null ? defaultIndex : [];
      return defaultIndex != null ? defaultIndex : -1;
    },
    onChange
  });
  const getAccordionItemProps = (idx) => {
    let isOpen = false;
    if (idx !== null) {
      isOpen = Array.isArray(index) ? index.includes(idx) : index === idx;
    }
    const onChange2 = (isOpen2) => {
      if (idx === null)
        return;
      if (allowMultiple && Array.isArray(index)) {
        const nextState = isOpen2 ? index.concat(idx) : index.filter((i) => i !== idx);
        setIndex(nextState);
      } else if (isOpen2) {
        setIndex(idx);
      } else if (allowToggle) {
        setIndex(-1);
      }
    };
    return { isOpen, onChange: onChange2 };
  };
  return {
    index,
    setIndex,
    htmlProps,
    getAccordionItemProps,
    focusedIndex,
    setFocusedIndex,
    descendants
  };
}
var [AccordionProvider, useAccordionContext] = createContext({
  name: "AccordionContext",
  hookName: "useAccordionContext",
  providerName: "Accordion"
});
function useAccordionItem(props) {
  const { isDisabled: isDisabled26, isFocusable: isFocusable26, id: id4, ...htmlProps } = props;
  const { getAccordionItemProps, setFocusedIndex } = useAccordionContext();
  const buttonRef = (0, import_react102.useRef)(null);
  const reactId = (0, import_react102.useId)();
  const uid = id4 != null ? id4 : reactId;
  const buttonId = `accordion-button-${uid}`;
  const panelId = `accordion-panel-${uid}`;
  focusableNotDisabledWarning(props);
  const { register, index, descendants } = useAccordionDescendant({
    disabled: isDisabled26 && !isFocusable26
  });
  const { isOpen, onChange } = getAccordionItemProps(
    index === -1 ? null : index
  );
  warnIfOpenAndDisabled({ isOpen, isDisabled: isDisabled26 });
  const onOpen = () => {
    onChange == null ? void 0 : onChange(true);
  };
  const onClose = () => {
    onChange == null ? void 0 : onChange(false);
  };
  const onClick = (0, import_react102.useCallback)(() => {
    onChange == null ? void 0 : onChange(!isOpen);
    setFocusedIndex(index);
  }, [index, setFocusedIndex, isOpen, onChange]);
  const onKeyDown = (0, import_react102.useCallback)(
    (event) => {
      const keyMap = {
        ArrowDown: () => {
          const next = descendants.nextEnabled(index);
          next == null ? void 0 : next.node.focus();
        },
        ArrowUp: () => {
          const prev = descendants.prevEnabled(index);
          prev == null ? void 0 : prev.node.focus();
        },
        Home: () => {
          const first = descendants.firstEnabled();
          first == null ? void 0 : first.node.focus();
        },
        End: () => {
          const last = descendants.lastEnabled();
          last == null ? void 0 : last.node.focus();
        }
      };
      const action = keyMap[event.key];
      if (action) {
        event.preventDefault();
        action(event);
      }
    },
    [descendants, index]
  );
  const onFocus3 = (0, import_react102.useCallback)(() => {
    setFocusedIndex(index);
  }, [setFocusedIndex, index]);
  const getButtonProps = (0, import_react102.useCallback)(
    function getButtonProps2(props2 = {}, ref = null) {
      return {
        ...props2,
        type: "button",
        ref: mergeRefs4(register, buttonRef, ref),
        id: buttonId,
        disabled: !!isDisabled26,
        "aria-expanded": !!isOpen,
        "aria-controls": panelId,
        onClick: callAllHandlers(props2.onClick, onClick),
        onFocus: callAllHandlers(props2.onFocus, onFocus3),
        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown)
      };
    },
    [
      buttonId,
      isDisabled26,
      isOpen,
      onClick,
      onFocus3,
      onKeyDown,
      panelId,
      register
    ]
  );
  const getPanelProps = (0, import_react102.useCallback)(
    function getPanelProps2(props2 = {}, ref = null) {
      return {
        ...props2,
        ref,
        role: "region",
        id: panelId,
        "aria-labelledby": buttonId,
        hidden: !isOpen
      };
    },
    [buttonId, isOpen, panelId]
  );
  return {
    isOpen,
    isDisabled: isDisabled26,
    isFocusable: isFocusable26,
    onOpen,
    onClose,
    getButtonProps,
    getPanelProps,
    htmlProps
  };
}
function allowMultipleWarning(props) {
  const index = props.index || props.defaultIndex;
  const condition = index != null && !Array.isArray(index) && props.allowMultiple;
  warn({
    condition: !!condition,
    message: `If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: ${typeof index},`
  });
}
function allowMultipleAndAllowToggleWarning(props) {
  warn({
    condition: !!(props.allowMultiple && props.allowToggle),
    message: `If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not`
  });
}
function focusableNotDisabledWarning(props) {
  warn({
    condition: !!(props.isFocusable && !props.isDisabled),
    message: `Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.
    `
  });
}
function warnIfOpenAndDisabled(props) {
  warn({
    condition: props.isOpen && !!props.isDisabled,
    message: "Cannot open a disabled accordion item"
  });
}

// node_modules/@chakra-ui/accordion/dist/chunk-IXS34X2E.mjs
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
function AccordionIcon(props) {
  const { isOpen, isDisabled: isDisabled26 } = useAccordionItemContext();
  const { reduceMotion } = useAccordionContext();
  const _className = cx("chakra-accordion__icon", props.className);
  const styles3 = useAccordionStyles();
  const iconStyles = {
    opacity: isDisabled26 ? 0.4 : 1,
    transform: isOpen ? "rotate(-180deg)" : void 0,
    transition: reduceMotion ? void 0 : "transform 0.2s",
    transformOrigin: "center",
    ...styles3.icon
  };
  return (0, import_jsx_runtime25.jsx)(
    Icon,
    {
      viewBox: "0 0 24 24",
      "aria-hidden": true,
      className: _className,
      __css: iconStyles,
      ...props,
      children: (0, import_jsx_runtime25.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
        }
      )
    }
  );
}
AccordionIcon.displayName = "AccordionIcon";

// node_modules/@chakra-ui/accordion/dist/chunk-I3JYRBXX.mjs
init_shim();
var import_react103 = __toESM(require_react(), 1);
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
var AccordionItem = forwardRef7(
  function AccordionItem2(props, ref) {
    const { children, className } = props;
    const { htmlProps, ...context } = useAccordionItem(props);
    const styles3 = useAccordionStyles();
    const containerStyles = {
      ...styles3.container,
      overflowAnchor: "none"
    };
    const ctx = (0, import_react103.useMemo)(() => context, [context]);
    return (0, import_jsx_runtime26.jsx)(AccordionItemProvider, { value: ctx, children: (0, import_jsx_runtime26.jsx)(
      chakra4.div,
      {
        ref,
        ...htmlProps,
        className: cx("chakra-accordion__item", className),
        __css: containerStyles,
        children: typeof children === "function" ? children({
          isExpanded: !!context.isOpen,
          isDisabled: !!context.isDisabled
        }) : children
      }
    ) });
  }
);
AccordionItem.displayName = "AccordionItem";

// node_modules/@chakra-ui/accordion/dist/chunk-WA4Q3J7T.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/transition/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/transition/dist/chunk-LRMLOJAR.mjs
init_shim();

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/transition/dist/chunk-LB6CWFOC.mjs
init_shim();
var TRANSITION_EASINGS = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
var TRANSITION_VARIANTS = {
  scale: {
    enter: { scale: 1 },
    exit: { scale: 0.95 }
  },
  fade: {
    enter: { opacity: 1 },
    exit: { opacity: 0 }
  },
  pushLeft: {
    enter: { x: "100%" },
    exit: { x: "-30%" }
  },
  pushRight: {
    enter: { x: "-100%" },
    exit: { x: "30%" }
  },
  pushUp: {
    enter: { y: "100%" },
    exit: { y: "-30%" }
  },
  pushDown: {
    enter: { y: "-100%" },
    exit: { y: "30%" }
  },
  slideLeft: {
    position: { left: 0, top: 0, bottom: 0, width: "100%" },
    enter: { x: 0, y: 0 },
    exit: { x: "-100%", y: 0 }
  },
  slideRight: {
    position: { right: 0, top: 0, bottom: 0, width: "100%" },
    enter: { x: 0, y: 0 },
    exit: { x: "100%", y: 0 }
  },
  slideUp: {
    position: { top: 0, left: 0, right: 0, maxWidth: "100vw" },
    enter: { x: 0, y: 0 },
    exit: { x: 0, y: "-100%" }
  },
  slideDown: {
    position: { bottom: 0, left: 0, right: 0, maxWidth: "100vw" },
    enter: { x: 0, y: 0 },
    exit: { x: 0, y: "100%" }
  }
};
function getSlideTransition(options) {
  var _a40;
  const side = (_a40 = options == null ? void 0 : options.direction) != null ? _a40 : "right";
  switch (side) {
    case "right":
      return TRANSITION_VARIANTS.slideRight;
    case "left":
      return TRANSITION_VARIANTS.slideLeft;
    case "bottom":
      return TRANSITION_VARIANTS.slideDown;
    case "top":
      return TRANSITION_VARIANTS.slideUp;
    default:
      return TRANSITION_VARIANTS.slideRight;
  }
}
var TRANSITION_DEFAULTS = {
  enter: {
    duration: 0.2,
    ease: TRANSITION_EASINGS.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TRANSITION_EASINGS.easeIn
  }
};
var withDelay = {
  enter: (transition4, delay2) => ({
    ...transition4,
    delay: typeof delay2 === "number" ? delay2 : delay2 == null ? void 0 : delay2["enter"]
  }),
  exit: (transition4, delay2) => ({
    ...transition4,
    delay: typeof delay2 === "number" ? delay2 : delay2 == null ? void 0 : delay2["exit"]
  })
};

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/transition/dist/chunk-LRMLOJAR.mjs
var import_react104 = __toESM(require_react(), 1);
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var isNumeric5 = (value) => value != null && parseInt(value.toString(), 10) > 0;
var defaultTransitions = {
  exit: {
    height: { duration: 0.2, ease: TRANSITION_EASINGS.ease },
    opacity: { duration: 0.3, ease: TRANSITION_EASINGS.ease }
  },
  enter: {
    height: { duration: 0.3, ease: TRANSITION_EASINGS.ease },
    opacity: { duration: 0.4, ease: TRANSITION_EASINGS.ease }
  }
};
var variants25 = {
  exit: ({
    animateOpacity,
    startingHeight,
    transition: transition4,
    transitionEnd,
    delay: delay2
  }) => {
    var _a40;
    return {
      ...animateOpacity && { opacity: isNumeric5(startingHeight) ? 1 : 0 },
      height: startingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay.exit(defaultTransitions.exit, delay2)
    };
  },
  enter: ({
    animateOpacity,
    endingHeight,
    transition: transition4,
    transitionEnd,
    delay: delay2
  }) => {
    var _a40;
    return {
      ...animateOpacity && { opacity: 1 },
      height: endingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay.enter(defaultTransitions.enter, delay2)
    };
  }
};
var Collapse = (0, import_react104.forwardRef)(
  (props, ref) => {
    const {
      in: isOpen,
      unmountOnExit,
      animateOpacity = true,
      startingHeight = 0,
      endingHeight = "auto",
      style,
      className,
      transition: transition4,
      transitionEnd,
      ...rest
    } = props;
    const [mounted, setMounted] = (0, import_react104.useState)(false);
    (0, import_react104.useEffect)(() => {
      const timeout = setTimeout(() => {
        setMounted(true);
      });
      return () => clearTimeout(timeout);
    }, []);
    warn({
      condition: Number(startingHeight) > 0 && !!unmountOnExit,
      message: `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`
    });
    const hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
    const custom = {
      startingHeight,
      endingHeight,
      animateOpacity,
      transition: !mounted ? { enter: { duration: 0 } } : transition4,
      transitionEnd: {
        enter: transitionEnd == null ? void 0 : transitionEnd.enter,
        exit: unmountOnExit ? transitionEnd == null ? void 0 : transitionEnd.exit : {
          ...transitionEnd == null ? void 0 : transitionEnd.exit,
          display: hasStartingHeight ? "block" : "none"
        }
      }
    };
    const show = unmountOnExit ? isOpen : true;
    const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
    return (0, import_jsx_runtime27.jsx)(AnimatePresence, { initial: false, custom, children: show && (0, import_jsx_runtime27.jsx)(
      motion.div,
      {
        ref,
        ...rest,
        className: cx("chakra-collapse", className),
        style: {
          overflow: "hidden",
          display: "block",
          ...style
        },
        custom,
        variants: variants25,
        initial: unmountOnExit ? "exit" : false,
        animate: animate2,
        exit: "exit"
      }
    ) });
  }
);
Collapse.displayName = "Collapse";

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/transition/dist/chunk-NBEP2PWU.mjs
init_shim();
var import_react105 = __toESM(require_react(), 1);
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
var variants26 = {
  enter: ({ transition: transition4, transitionEnd, delay: delay2 } = {}) => {
    var _a40;
    return {
      opacity: 1,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay.enter(TRANSITION_DEFAULTS.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: ({ transition: transition4, transitionEnd, delay: delay2 } = {}) => {
    var _a40;
    return {
      opacity: 0,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  }
};
var fadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants26
};
var Fade = (0, import_react105.forwardRef)(function Fade2(props, ref) {
  const {
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition4,
    transitionEnd,
    delay: delay2,
    ...rest
  } = props;
  const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const custom = { transition: transition4, transitionEnd, delay: delay2 };
  return (0, import_jsx_runtime28.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime28.jsx)(
    motion.div,
    {
      ref,
      className: cx("chakra-fade", className),
      custom,
      ...fadeConfig,
      animate: animate2,
      ...rest
    }
  ) });
});
Fade.displayName = "Fade";

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/transition/dist/chunk-462CPKWM.mjs
init_shim();
var import_react106 = __toESM(require_react(), 1);
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var variants27 = {
  exit: ({ reverse, initialScale, transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 0,
      ...reverse ? { scale: initialScale, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { scale: initialScale, ...transitionEnd == null ? void 0 : transitionEnd.exit } },
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2)
    };
  },
  enter: ({ transitionEnd, transition: transition4, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 1,
      scale: 1,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay.enter(TRANSITION_DEFAULTS.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var scaleFadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants27
};
var ScaleFade = (0, import_react106.forwardRef)(
  function ScaleFade2(props, ref) {
    const {
      unmountOnExit,
      in: isOpen,
      reverse = true,
      initialScale = 0.95,
      className,
      transition: transition4,
      transitionEnd,
      delay: delay2,
      ...rest
    } = props;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = { initialScale, reverse, transition: transition4, transitionEnd, delay: delay2 };
    return (0, import_jsx_runtime29.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime29.jsx)(
      motion.div,
      {
        ref,
        className: cx("chakra-offset-slide", className),
        ...scaleFadeConfig,
        animate: animate2,
        custom,
        ...rest
      }
    ) });
  }
);
ScaleFade.displayName = "ScaleFade";

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/transition/dist/chunk-Z2TCYYTS.mjs
init_shim();
var import_react107 = __toESM(require_react(), 1);
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var variants28 = {
  initial: ({ offsetX, offsetY, transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 0,
      x: offsetX,
      y: offsetY,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: ({ transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 1,
      x: 0,
      y: 0,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay.enter(TRANSITION_DEFAULTS.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: ({ offsetY, offsetX, transition: transition4, transitionEnd, reverse, delay: delay2 }) => {
    var _a40;
    const offset = { x: offsetX, y: offsetY };
    return {
      opacity: 0,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay.exit(TRANSITION_DEFAULTS.exit, delay2),
      ...reverse ? { ...offset, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { ...offset, ...transitionEnd == null ? void 0 : transitionEnd.exit } }
    };
  }
};
var slideFadeConfig = {
  initial: "initial",
  animate: "enter",
  exit: "exit",
  variants: variants28
};
var SlideFade = (0, import_react107.forwardRef)(
  function SlideFade2(props, ref) {
    const {
      unmountOnExit,
      in: isOpen,
      reverse = true,
      className,
      offsetX = 0,
      offsetY = 8,
      transition: transition4,
      transitionEnd,
      delay: delay2,
      ...rest
    } = props;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = {
      offsetX,
      offsetY,
      reverse,
      transition: transition4,
      transitionEnd,
      delay: delay2
    };
    return (0, import_jsx_runtime30.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime30.jsx)(
      motion.div,
      {
        ref,
        className: cx("chakra-offset-slide", className),
        custom,
        ...slideFadeConfig,
        animate: animate2,
        ...rest
      }
    ) });
  }
);
SlideFade.displayName = "SlideFade";

// node_modules/@chakra-ui/accordion/node_modules/@chakra-ui/transition/dist/chunk-D35G6FNO.mjs
init_shim();
var import_react108 = __toESM(require_react(), 1);
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var defaultTransition = {
  exit: {
    duration: 0.15,
    ease: TRANSITION_EASINGS.easeInOut
  },
  enter: {
    type: "spring",
    damping: 25,
    stiffness: 180
  }
};
var variants29 = {
  exit: ({ direction: direction3, transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    const { exit: exitStyles } = getSlideTransition({ direction: direction3 });
    return {
      ...exitStyles,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay.exit(defaultTransition.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: ({ direction: direction3, transitionEnd, transition: transition4, delay: delay2 }) => {
    var _a40;
    const { enter: enterStyles } = getSlideTransition({ direction: direction3 });
    return {
      ...enterStyles,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay.enter(defaultTransition.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var Slide = (0, import_react108.forwardRef)(function Slide2(props, ref) {
  const {
    direction: direction3 = "right",
    style,
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition4,
    transitionEnd,
    delay: delay2,
    motionProps,
    ...rest
  } = props;
  const transitionStyles = getSlideTransition({ direction: direction3 });
  const computedStyle = Object.assign(
    { position: "fixed" },
    transitionStyles.position,
    style
  );
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
  const custom = { transitionEnd, transition: transition4, direction: direction3, delay: delay2 };
  return (0, import_jsx_runtime31.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime31.jsx)(
    motion.div,
    {
      ...rest,
      ref,
      initial: "exit",
      className: cx("chakra-slide", className),
      animate: animate2,
      exit: "exit",
      custom,
      variants: variants29,
      style: computedStyle,
      ...motionProps
    }
  ) });
});
Slide.displayName = "Slide";

// node_modules/@chakra-ui/accordion/dist/chunk-WA4Q3J7T.mjs
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var AccordionPanel = forwardRef7(
  function AccordionPanel2(props, ref) {
    const { className, motionProps, ...rest } = props;
    const { reduceMotion } = useAccordionContext();
    const { getPanelProps, isOpen } = useAccordionItemContext();
    const panelProps = getPanelProps(rest, ref);
    const _className = cx("chakra-accordion__panel", className);
    const styles3 = useAccordionStyles();
    if (!reduceMotion) {
      delete panelProps.hidden;
    }
    const child = (0, import_jsx_runtime32.jsx)(chakra4.div, { ...panelProps, __css: styles3.panel, className: _className });
    if (!reduceMotion) {
      return (0, import_jsx_runtime32.jsx)(Collapse, { in: isOpen, ...motionProps, children: child });
    }
    return child;
  }
);
AccordionPanel.displayName = "AccordionPanel";

// node_modules/@chakra-ui/accordion/dist/chunk-3VH7AMBV.mjs
init_shim();
var import_react109 = __toESM(require_react(), 1);
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
var Accordion = forwardRef7(function Accordion2({ children, reduceMotion, ...props }, ref) {
  const styles3 = useMultiStyleConfig4("Accordion", props);
  const ownProps = omitThemingProps(props);
  const { htmlProps, descendants, ...context } = useAccordion(ownProps);
  const ctx = (0, import_react109.useMemo)(
    () => ({ ...context, reduceMotion: !!reduceMotion }),
    [context, reduceMotion]
  );
  return (0, import_jsx_runtime33.jsx)(AccordionDescendantsProvider, { value: descendants, children: (0, import_jsx_runtime33.jsx)(AccordionProvider, { value: ctx, children: (0, import_jsx_runtime33.jsx)(AccordionStylesProvider, { value: styles3, children: (0, import_jsx_runtime33.jsx)(
    chakra4.div,
    {
      ref,
      ...htmlProps,
      className: cx("chakra-accordion", props.className),
      __css: styles3.root,
      children
    }
  ) }) }) });
});
Accordion.displayName = "Accordion";

// node_modules/@chakra-ui/accordion/dist/chunk-UN5JZMTF.mjs
init_shim();
function useAccordionItemState() {
  const { isOpen, isDisabled: isDisabled26, onClose, onOpen } = useAccordionItemContext();
  return { isOpen, onClose, isDisabled: isDisabled26, onOpen };
}

// node_modules/@chakra-ui/avatar/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/avatar/dist/chunk-2RQKHYD2.mjs
init_shim();

// node_modules/@chakra-ui/avatar/dist/chunk-QVBG3QXJ.mjs
init_shim();
var [AvatarStylesProvider, useAvatarStyles] = createContext({
  name: `AvatarStylesContext`,
  hookName: `useAvatarStyles`,
  providerName: "<Avatar/>"
});

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react111 = __toESM(require_react(), 1);
function useTheme5() {
  const theme3 = (0, import_react111.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra5() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme5();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM5() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser6 = canUseDOM5();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash10 = __toESM(require_lodash(), 1);
function omit6(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get6(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize6 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet6 = memoize6(get6);
function objectFilter5(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined5 = (object2) => objectFilter5(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction8(value) {
  return typeof value === "function";
}
var __DEV__5 = import_process.default.env.NODE_ENV !== "production";
var __TEST__5 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn8(valueOrFn, ...args) {
  return isFunction8(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once5(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn6 = once5((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__5) {
    console.warn(message);
  }
});
var error5 = once5((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__5) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger5 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger5 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep5 = 1 / 60 * 1e3;
var getCurrentTime5 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame5 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime5()), defaultTimestep5);

// node_modules/@chakra-ui/avatar/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep6(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/avatar/node_modules/framesync/dist/es/index.mjs
var maxElapsed6 = 40;
var useDefaultElapsed6 = true;
var runNextFrame6 = false;
var isProcessing5 = false;
var frame6 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder6 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps6 = stepsOrder6.reduce((acc, key) => {
  acc[key] = createRenderStep6(() => runNextFrame6 = true);
  return acc;
}, {});
var sync6 = stepsOrder6.reduce((acc, key) => {
  const step = steps6[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame6)
      startLoop6();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync6 = stepsOrder6.reduce((acc, key) => {
  acc[key] = steps6[key].cancel;
  return acc;
}, {});
var flushSync5 = stepsOrder6.reduce((acc, key) => {
  acc[key] = () => steps6[key].process(frame6);
  return acc;
}, {});
var processStep6 = (stepId) => steps6[stepId].process(frame6);
var processFrame6 = (timestamp) => {
  runNextFrame6 = false;
  frame6.delta = useDefaultElapsed6 ? defaultTimestep5 : Math.max(Math.min(timestamp - frame6.timestamp, maxElapsed6), 1);
  frame6.timestamp = timestamp;
  isProcessing5 = true;
  stepsOrder6.forEach(processStep6);
  isProcessing5 = false;
  if (runNextFrame6) {
    useDefaultElapsed6 = false;
    onNextFrame5(processFrame6);
  }
};
var startLoop6 = () => {
  runNextFrame6 = true;
  useDefaultElapsed6 = true;
  if (!isProcessing5)
    onNextFrame5(processFrame6);
};

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints7 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList5 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector5 = focusableElList5.join();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react112 = __toESM(require_react(), 1);
var import_react_fast_compare5 = __toESM(require_react_fast_compare5(), 1);
function useStyleConfigImpl4(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra5();
  const themeStyleConfig = themeKey ? memoizedGet6(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash10.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined5(omit6(rest, ["children"]))
  );
  const stylesRef = (0, import_react112.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare5.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useMultiStyleConfig5(themeKey, props = {}) {
  return useStyleConfigImpl4(themeKey, props);
}

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames5 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps5 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp5(prop) {
  return validHTMLProps5.has(prop) || !allPropNames5.has(prop);
}

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react113 = __toESM(require_react(), 1);
var _a13;
var emotion_styled5 = (_a13 = emotion_styled_browser_esm_default.default) != null ? _a13 : emotion_styled_browser_esm_default;
var toCSSObject5 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter5(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn8(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined5(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled5(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp5;
  }
  const styleObject = toCSSObject5({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled5(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react113.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react113.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory5() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled5, {
    apply(target, thisArg, argArray) {
      return styled5(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled5(element));
      }
      return cache.get(element);
    }
  });
}
var chakra5 = factory5();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react114 = __toESM(require_react(), 1);
function forwardRef13(component) {
  return (0, import_react114.forwardRef)(component);
}

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react115 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react116 = __toESM(require_react(), 1);
function createContext16(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react116.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react116.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react118 = __toESM(require_react(), 1);
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider5, useStyles5] = createContext16({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/avatar/dist/chunk-2RQKHYD2.mjs
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
var placementMap = {
  "top-start": {
    top: "0",
    insetStart: "0",
    transform: "translate(-25%, -25%)"
  },
  "top-end": {
    top: "0",
    insetEnd: "0",
    transform: "translate(25%, -25%)"
  },
  "bottom-start": {
    bottom: "0",
    insetStart: "0",
    transform: "translate(-25%, 25%)"
  },
  "bottom-end": {
    bottom: "0",
    insetEnd: "0",
    transform: "translate(25%, 25%)"
  }
};
var AvatarBadge = forwardRef13(
  function AvatarBadge2(props, ref) {
    const { placement = "bottom-end", className, ...rest } = props;
    const styles3 = useAvatarStyles();
    const placementStyles = placementMap[placement];
    const badgeStyles = {
      position: "absolute",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      ...placementStyles,
      ...styles3.badge
    };
    return (0, import_jsx_runtime35.jsx)(
      chakra5.div,
      {
        ref,
        ...rest,
        className: cx("chakra-avatar__badge", className),
        __css: badgeStyles
      }
    );
  }
);
AvatarBadge.displayName = "AvatarBadge";

// node_modules/@chakra-ui/avatar/dist/chunk-3DMB23BS.mjs
init_shim();

// node_modules/@chakra-ui/avatar/dist/chunk-YYQ66DB3.mjs
init_shim();

// node_modules/@chakra-ui/avatar/dist/chunk-TLFCZAEL.mjs
init_shim();

// node_modules/@chakra-ui/avatar/dist/chunk-XLTSJSZV.mjs
init_shim();
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
function initials(name) {
  const [firstName, lastName] = name.split(" ");
  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);
}
function AvatarName(props) {
  const { name, getInitials, ...rest } = props;
  const styles3 = useAvatarStyles();
  return (0, import_jsx_runtime36.jsx)(chakra5.div, { role: "img", "aria-label": name, ...rest, __css: styles3.label, children: name ? getInitials == null ? void 0 : getInitials(name) : null });
}
AvatarName.displayName = "AvatarName";

// node_modules/@chakra-ui/avatar/dist/chunk-ZXZNYCCD.mjs
init_shim();
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
var GenericAvatarIcon = (props) => (0, import_jsx_runtime37.jsxs)(
  chakra5.svg,
  {
    viewBox: "0 0 128 128",
    color: "#fff",
    width: "100%",
    height: "100%",
    className: "chakra-avatar__svg",
    ...props,
    children: [
      (0, import_jsx_runtime37.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z"
        }
      ),
      (0, import_jsx_runtime37.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24"
        }
      )
    ]
  }
);

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/image/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/image/dist/chunk-E77276RR.mjs
init_shim();

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/image/dist/chunk-QBIO4VEB.mjs
init_shim();
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
var NativeImage = forwardRef13(function NativeImage2(props, ref) {
  const { htmlWidth, htmlHeight, alt, ...rest } = props;
  return (0, import_jsx_runtime38.jsx)("img", { width: htmlWidth, height: htmlHeight, ref, alt, ...rest });
});
NativeImage.displayName = "NativeImage";

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/image/dist/chunk-HR33I6FK.mjs
init_shim();
var import_react120 = __toESM(require_react(), 1);
function useImage(props) {
  const {
    loading,
    src,
    srcSet,
    onLoad,
    onError,
    crossOrigin,
    sizes: sizes47,
    ignoreFallback
  } = props;
  const [status, setStatus] = (0, import_react120.useState)("pending");
  (0, import_react120.useEffect)(() => {
    setStatus(src ? "loading" : "pending");
  }, [src]);
  const imageRef = (0, import_react120.useRef)();
  const load = (0, import_react120.useCallback)(() => {
    if (!src)
      return;
    flush();
    const img = new Image();
    img.src = src;
    if (crossOrigin)
      img.crossOrigin = crossOrigin;
    if (srcSet)
      img.srcset = srcSet;
    if (sizes47)
      img.sizes = sizes47;
    if (loading)
      img.loading = loading;
    img.onload = (event) => {
      flush();
      setStatus("loaded");
      onLoad == null ? void 0 : onLoad(event);
    };
    img.onerror = (error25) => {
      flush();
      setStatus("failed");
      onError == null ? void 0 : onError(error25);
    };
    imageRef.current = img;
  }, [src, crossOrigin, srcSet, sizes47, onLoad, onError, loading]);
  const flush = () => {
    if (imageRef.current) {
      imageRef.current.onload = null;
      imageRef.current.onerror = null;
      imageRef.current = null;
    }
  };
  useSafeLayoutEffect(() => {
    if (ignoreFallback)
      return void 0;
    if (status === "loading") {
      load();
    }
    return () => {
      flush();
    };
  }, [status, load, ignoreFallback]);
  return ignoreFallback ? "loaded" : status;
}
var shouldShowFallbackImage = (status, fallbackStrategy) => status !== "loaded" && fallbackStrategy === "beforeLoadOrError" || status === "failed" && fallbackStrategy === "onError";

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/image/dist/chunk-E77276RR.mjs
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
function omit7(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key of keysToOmit) {
    if (key in clone) {
      delete clone[key];
    }
  }
  return clone;
}
var Image2 = forwardRef13(function Image22(props, ref) {
  const {
    fallbackSrc,
    fallback,
    src,
    srcSet,
    align,
    fit,
    loading,
    ignoreFallback,
    crossOrigin,
    fallbackStrategy = "beforeLoadOrError",
    referrerPolicy,
    ...rest
  } = props;
  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;
  const shouldIgnoreFallbackImage = loading != null || ignoreFallback || !providedFallback;
  const status = useImage({
    ...props,
    ignoreFallback: shouldIgnoreFallbackImage
  });
  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);
  const shared = {
    ref,
    objectFit: fit,
    objectPosition: align,
    ...shouldIgnoreFallbackImage ? rest : omit7(rest, ["onError", "onLoad"])
  };
  if (showFallbackImage) {
    if (fallback)
      return fallback;
    return (0, import_jsx_runtime39.jsx)(
      chakra5.img,
      {
        as: NativeImage,
        className: "chakra-image__placeholder",
        src: fallbackSrc,
        ...shared
      }
    );
  }
  return (0, import_jsx_runtime39.jsx)(
    chakra5.img,
    {
      as: NativeImage,
      src,
      srcSet,
      crossOrigin,
      loading,
      referrerPolicy,
      className: "chakra-image",
      ...shared
    }
  );
});
Image2.displayName = "Image";

// node_modules/@chakra-ui/avatar/node_modules/@chakra-ui/image/dist/chunk-E3YVMML4.mjs
init_shim();
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
var Img = forwardRef13((props, ref) => (0, import_jsx_runtime40.jsx)(chakra5.img, { ref, as: NativeImage, className: "chakra-image", ...props }));

// node_modules/@chakra-ui/avatar/dist/chunk-TLFCZAEL.mjs
var import_react121 = __toESM(require_react(), 1);
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
function AvatarImage(props) {
  const {
    src,
    srcSet,
    onError,
    onLoad,
    getInitials,
    name,
    borderRadius,
    loading,
    iconLabel,
    icon = (0, import_jsx_runtime41.jsx)(GenericAvatarIcon, {}),
    ignoreFallback,
    referrerPolicy,
    crossOrigin
  } = props;
  const status = useImage({ src, onError, ignoreFallback });
  const hasLoaded = status === "loaded";
  const showFallback = !src || !hasLoaded;
  if (showFallback) {
    return name ? (0, import_jsx_runtime41.jsx)(
      AvatarName,
      {
        className: "chakra-avatar__initials",
        getInitials,
        name
      }
    ) : (0, import_react121.cloneElement)(icon, {
      role: "img",
      "aria-label": iconLabel
    });
  }
  return (0, import_jsx_runtime41.jsx)(
    chakra5.img,
    {
      src,
      srcSet,
      alt: name,
      onLoad,
      referrerPolicy,
      crossOrigin: crossOrigin != null ? crossOrigin : void 0,
      className: "chakra-avatar__img",
      loading,
      __css: {
        width: "100%",
        height: "100%",
        objectFit: "cover",
        borderRadius
      }
    }
  );
}
AvatarImage.displayName = "AvatarImage";

// node_modules/@chakra-ui/avatar/dist/chunk-YYQ66DB3.mjs
var import_react122 = __toESM(require_react(), 1);
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var baseStyle83 = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  textAlign: "center",
  textTransform: "uppercase",
  fontWeight: "medium",
  position: "relative",
  flexShrink: 0
};
var Avatar = forwardRef13((props, ref) => {
  const styles3 = useMultiStyleConfig5("Avatar", props);
  const [isLoaded, setIsLoaded] = (0, import_react122.useState)(false);
  const {
    src,
    srcSet,
    name,
    showBorder,
    borderRadius = "full",
    onError,
    onLoad: onLoadProp,
    getInitials = initials,
    icon = (0, import_jsx_runtime42.jsx)(GenericAvatarIcon, {}),
    iconLabel = " avatar",
    loading,
    children,
    borderColor,
    ignoreFallback,
    crossOrigin,
    ...rest
  } = omitThemingProps(props);
  const avatarStyles = {
    borderRadius,
    borderWidth: showBorder ? "2px" : void 0,
    ...baseStyle83,
    ...styles3.container
  };
  if (borderColor) {
    avatarStyles.borderColor = borderColor;
  }
  return (0, import_jsx_runtime42.jsx)(
    chakra5.span,
    {
      ref,
      ...rest,
      className: cx("chakra-avatar", props.className),
      "data-loaded": dataAttr(isLoaded),
      __css: avatarStyles,
      children: (0, import_jsx_runtime42.jsxs)(AvatarStylesProvider, { value: styles3, children: [
        (0, import_jsx_runtime42.jsx)(
          AvatarImage,
          {
            src,
            srcSet,
            loading,
            onLoad: callAllHandlers(onLoadProp, () => {
              setIsLoaded(true);
            }),
            onError,
            getInitials,
            name,
            borderRadius,
            icon,
            iconLabel,
            ignoreFallback,
            crossOrigin
          }
        ),
        children
      ] })
    }
  );
});
Avatar.displayName = "Avatar";

// node_modules/@chakra-ui/react-children-utils/dist/index.mjs
init_shim();
var import_react123 = __toESM(require_react(), 1);
function getValidChildren6(children) {
  return import_react123.Children.toArray(children).filter(
    (child) => (0, import_react123.isValidElement)(child)
  );
}

// node_modules/@chakra-ui/avatar/dist/chunk-3DMB23BS.mjs
var import_react124 = __toESM(require_react(), 1);
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
function compact2(object2) {
  const clone = Object.assign({}, object2);
  for (let key in clone) {
    if (clone[key] === void 0)
      delete clone[key];
  }
  return clone;
}
var AvatarGroup = forwardRef13(
  function AvatarGroup2(props, ref) {
    const styles3 = useMultiStyleConfig5("Avatar", props);
    const {
      children,
      borderColor,
      max,
      spacing: spacing3 = "-0.75rem",
      borderRadius = "full",
      ...rest
    } = omitThemingProps(props);
    const validChildren = getValidChildren6(children);
    const childrenWithinMax = max != null ? validChildren.slice(0, max) : validChildren;
    const excess = max != null ? validChildren.length - max : 0;
    const reversedChildren = childrenWithinMax.reverse();
    const clones = reversedChildren.map((child, index) => {
      var _a40;
      const isFirstAvatar = index === 0;
      const childProps = {
        marginEnd: isFirstAvatar ? 0 : spacing3,
        size: props.size,
        borderColor: (_a40 = child.props.borderColor) != null ? _a40 : borderColor,
        showBorder: true
      };
      return (0, import_react124.cloneElement)(child, compact2(childProps));
    });
    const groupStyles = {
      display: "flex",
      alignItems: "center",
      justifyContent: "flex-end",
      flexDirection: "row-reverse",
      ...styles3.group
    };
    const excessStyles = {
      borderRadius,
      marginStart: spacing3,
      ...baseStyle83,
      ...styles3.excessLabel
    };
    return (0, import_jsx_runtime43.jsxs)(
      chakra5.div,
      {
        ref,
        role: "group",
        __css: groupStyles,
        ...rest,
        className: cx("chakra-avatar__group", props.className),
        children: [
          excess > 0 && (0, import_jsx_runtime43.jsx)(chakra5.span, { className: "chakra-avatar__excess", __css: excessStyles, children: `+${excess}` }),
          clones
        ]
      }
    );
  }
);
AvatarGroup.displayName = "AvatarGroup";

// node_modules/@chakra-ui/breadcrumb/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/dist/chunk-5BPFTGUI.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/dist/chunk-GCVB4LG4.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/dist/chunk-OLDTR4XF.mjs
init_shim();
var [BreadcrumbStylesProvider, useBreadcrumbStyles] = createContext({
  name: `BreadcrumbStylesContext`,
  errorMessage: `useBreadcrumbStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Breadcrumb />" `
});

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react126 = __toESM(require_react(), 1);
function useTheme6() {
  const theme3 = (0, import_react126.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra6() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme6();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM6() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser7 = canUseDOM6();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash11 = __toESM(require_lodash(), 1);
function omit8(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get7(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize7 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet7 = memoize7(get7);
function objectFilter6(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined6 = (object2) => objectFilter6(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction9(value) {
  return typeof value === "function";
}
var __DEV__6 = import_process.default.env.NODE_ENV !== "production";
var __TEST__6 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn9(valueOrFn, ...args) {
  return isFunction9(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once6(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn7 = once6((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__6) {
    console.warn(message);
  }
});
var error6 = once6((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__6) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger6 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger6 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep6 = 1 / 60 * 1e3;
var getCurrentTime6 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame6 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime6()), defaultTimestep6);

// node_modules/@chakra-ui/breadcrumb/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep7(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/breadcrumb/node_modules/framesync/dist/es/index.mjs
var maxElapsed7 = 40;
var useDefaultElapsed7 = true;
var runNextFrame7 = false;
var isProcessing6 = false;
var frame7 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder7 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps7 = stepsOrder7.reduce((acc, key) => {
  acc[key] = createRenderStep7(() => runNextFrame7 = true);
  return acc;
}, {});
var sync7 = stepsOrder7.reduce((acc, key) => {
  const step = steps7[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame7)
      startLoop7();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync7 = stepsOrder7.reduce((acc, key) => {
  acc[key] = steps7[key].cancel;
  return acc;
}, {});
var flushSync6 = stepsOrder7.reduce((acc, key) => {
  acc[key] = () => steps7[key].process(frame7);
  return acc;
}, {});
var processStep7 = (stepId) => steps7[stepId].process(frame7);
var processFrame7 = (timestamp) => {
  runNextFrame7 = false;
  frame7.delta = useDefaultElapsed7 ? defaultTimestep6 : Math.max(Math.min(timestamp - frame7.timestamp, maxElapsed7), 1);
  frame7.timestamp = timestamp;
  isProcessing6 = true;
  stepsOrder7.forEach(processStep7);
  isProcessing6 = false;
  if (runNextFrame7) {
    useDefaultElapsed7 = false;
    onNextFrame6(processFrame7);
  }
};
var startLoop7 = () => {
  runNextFrame7 = true;
  useDefaultElapsed7 = true;
  if (!isProcessing6)
    onNextFrame6(processFrame7);
};

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints8 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList6 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector6 = focusableElList6.join();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react127 = __toESM(require_react(), 1);
var import_react_fast_compare6 = __toESM(require_react_fast_compare6(), 1);
function useStyleConfigImpl5(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra6();
  const themeStyleConfig = themeKey ? memoizedGet7(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash11.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined6(omit8(rest, ["children"]))
  );
  const stylesRef = (0, import_react127.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare6.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useMultiStyleConfig6(themeKey, props = {}) {
  return useStyleConfigImpl5(themeKey, props);
}

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames6 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps6 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp6(prop) {
  return validHTMLProps6.has(prop) || !allPropNames6.has(prop);
}

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react128 = __toESM(require_react(), 1);
var _a14;
var emotion_styled6 = (_a14 = emotion_styled_browser_esm_default.default) != null ? _a14 : emotion_styled_browser_esm_default;
var toCSSObject6 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter6(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn9(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined6(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled6(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp6;
  }
  const styleObject = toCSSObject6({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled6(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react128.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react128.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory6() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled6, {
    apply(target, thisArg, argArray) {
      return styled6(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled6(element));
      }
      return cache.get(element);
    }
  });
}
var chakra6 = factory6();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react129 = __toESM(require_react(), 1);
function forwardRef14(component) {
  return (0, import_react129.forwardRef)(component);
}

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react130 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react131 = __toESM(require_react(), 1);
function createContext17(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react131.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react131.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react133 = __toESM(require_react(), 1);
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider6, useStyles6] = createContext17({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/breadcrumb/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/breadcrumb/dist/chunk-GCVB4LG4.mjs
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var BreadcrumbLink = forwardRef14(
  function BreadcrumbLink2(props, ref) {
    const { isCurrentPage, as, className, href, ...rest } = props;
    const styles3 = useBreadcrumbStyles();
    const sharedProps = {
      ref,
      as,
      className: cx("chakra-breadcrumb__link", className),
      ...rest
    };
    if (isCurrentPage) {
      return (0, import_jsx_runtime45.jsx)(chakra6.span, { "aria-current": "page", __css: styles3.link, ...sharedProps });
    }
    return (0, import_jsx_runtime45.jsx)(chakra6.a, { __css: styles3.link, href, ...sharedProps });
  }
);
BreadcrumbLink.displayName = "BreadcrumbLink";

// node_modules/@chakra-ui/breadcrumb/dist/chunk-XCVTFTPE.mjs
init_shim();
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
var BreadcrumbSeparator = forwardRef14(
  function BreadcrumbSeparator2(props, ref) {
    const { spacing: spacing3, ...rest } = props;
    const styles3 = useBreadcrumbStyles();
    const separatorStyles = {
      mx: spacing3,
      ...styles3.separator
    };
    return (0, import_jsx_runtime46.jsx)(
      chakra6.span,
      {
        ref,
        role: "presentation",
        ...rest,
        __css: separatorStyles
      }
    );
  }
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

// node_modules/@chakra-ui/breadcrumb/dist/chunk-5BPFTGUI.mjs
var import_react135 = __toESM(require_react(), 1);
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
var BreadcrumbItem = forwardRef14(
  function BreadcrumbItem2(props, ref) {
    const {
      isCurrentPage,
      separator,
      isLastChild,
      spacing: spacing3,
      children,
      className,
      ...rest
    } = props;
    const validChildren = getValidChildren6(children);
    const clones = validChildren.map((child) => {
      if (child.type === BreadcrumbLink) {
        return (0, import_react135.cloneElement)(child, {
          isCurrentPage
        });
      }
      if (child.type === BreadcrumbSeparator) {
        return (0, import_react135.cloneElement)(child, {
          spacing: spacing3,
          children: child.props.children || separator
        });
      }
      return child;
    });
    const styles3 = useBreadcrumbStyles();
    const itemStyles = {
      display: "inline-flex",
      alignItems: "center",
      ...styles3.item
    };
    const _className = cx("chakra-breadcrumb__list-item", className);
    return (0, import_jsx_runtime47.jsxs)(chakra6.li, { ref, className: _className, ...rest, __css: itemStyles, children: [
      clones,
      !isLastChild && (0, import_jsx_runtime47.jsx)(BreadcrumbSeparator, { spacing: spacing3, children: separator })
    ] });
  }
);
BreadcrumbItem.displayName = "BreadcrumbItem";

// node_modules/@chakra-ui/breadcrumb/dist/chunk-RDQRB6BQ.mjs
init_shim();
var import_react136 = __toESM(require_react(), 1);
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
var Breadcrumb = forwardRef14(
  function Breadcrumb2(props, ref) {
    const styles3 = useMultiStyleConfig6("Breadcrumb", props);
    const ownProps = omitThemingProps(props);
    const {
      children,
      spacing: spacing3 = "0.5rem",
      separator = "/",
      className,
      listProps,
      ...rest
    } = ownProps;
    const validChildren = getValidChildren6(children);
    const count = validChildren.length;
    const clones = validChildren.map(
      (child, index) => (0, import_react136.cloneElement)(child, {
        separator,
        spacing: spacing3,
        isLastChild: count === index + 1
      })
    );
    const _className = cx("chakra-breadcrumb", className);
    return (0, import_jsx_runtime48.jsx)(
      chakra6.nav,
      {
        ref,
        "aria-label": "breadcrumb",
        className: _className,
        __css: styles3.container,
        ...rest,
        children: (0, import_jsx_runtime48.jsx)(BreadcrumbStylesProvider, { value: styles3, children: (0, import_jsx_runtime48.jsx)(
          chakra6.ol,
          {
            className: "chakra-breadcrumb__list",
            ...listProps,
            __css: {
              display: "flex",
              alignItems: "center",
              ...styles3.list
            },
            children: clones
          }
        ) })
      }
    );
  }
);
Breadcrumb.displayName = "Breadcrumb";

// node_modules/@chakra-ui/button/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/button/dist/chunk-PEYICJIL.mjs
init_shim();

// node_modules/@chakra-ui/button/dist/chunk-DGWZA2DU.mjs
init_shim();
var [ButtonGroupProvider, useButtonGroup] = createContext({
  strict: false,
  name: "ButtonGroupContext"
});

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react138 = __toESM(require_react(), 1);
function useTheme7() {
  const theme3 = (0, import_react138.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra7() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme7();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM7() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser8 = canUseDOM7();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash12 = __toESM(require_lodash(), 1);
function omit9(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get8(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize8 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet8 = memoize8(get8);
function objectFilter7(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined7 = (object2) => objectFilter7(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction10(value) {
  return typeof value === "function";
}
var __DEV__7 = import_process.default.env.NODE_ENV !== "production";
var __TEST__7 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn10(valueOrFn, ...args) {
  return isFunction10(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once7(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn8 = once7((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__7) {
    console.warn(message);
  }
});
var error7 = once7((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__7) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger7 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger7 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep7 = 1 / 60 * 1e3;
var getCurrentTime7 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame7 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime7()), defaultTimestep7);

// node_modules/@chakra-ui/button/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep8(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/button/node_modules/framesync/dist/es/index.mjs
var maxElapsed8 = 40;
var useDefaultElapsed8 = true;
var runNextFrame8 = false;
var isProcessing7 = false;
var frame8 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder8 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps8 = stepsOrder8.reduce((acc, key) => {
  acc[key] = createRenderStep8(() => runNextFrame8 = true);
  return acc;
}, {});
var sync8 = stepsOrder8.reduce((acc, key) => {
  const step = steps8[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame8)
      startLoop8();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync8 = stepsOrder8.reduce((acc, key) => {
  acc[key] = steps8[key].cancel;
  return acc;
}, {});
var flushSync7 = stepsOrder8.reduce((acc, key) => {
  acc[key] = () => steps8[key].process(frame8);
  return acc;
}, {});
var processStep8 = (stepId) => steps8[stepId].process(frame8);
var processFrame8 = (timestamp) => {
  runNextFrame8 = false;
  frame8.delta = useDefaultElapsed8 ? defaultTimestep7 : Math.max(Math.min(timestamp - frame8.timestamp, maxElapsed8), 1);
  frame8.timestamp = timestamp;
  isProcessing7 = true;
  stepsOrder8.forEach(processStep8);
  isProcessing7 = false;
  if (runNextFrame8) {
    useDefaultElapsed8 = false;
    onNextFrame7(processFrame8);
  }
};
var startLoop8 = () => {
  runNextFrame8 = true;
  useDefaultElapsed8 = true;
  if (!isProcessing7)
    onNextFrame7(processFrame8);
};

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints9 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList7 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector7 = focusableElList7.join();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react139 = __toESM(require_react(), 1);
var import_react_fast_compare7 = __toESM(require_react_fast_compare7(), 1);
function useStyleConfigImpl6(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra7();
  const themeStyleConfig = themeKey ? memoizedGet8(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash12.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined7(omit9(rest, ["children"]))
  );
  const stylesRef = (0, import_react139.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare7.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig7(themeKey, props = {}) {
  return useStyleConfigImpl6(themeKey, props);
}

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames7 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps7 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp7(prop) {
  return validHTMLProps7.has(prop) || !allPropNames7.has(prop);
}

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react140 = __toESM(require_react(), 1);
var _a15;
var emotion_styled7 = (_a15 = emotion_styled_browser_esm_default.default) != null ? _a15 : emotion_styled_browser_esm_default;
var toCSSObject7 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter7(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn10(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined7(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled7(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp7;
  }
  const styleObject = toCSSObject7({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled7(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react140.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react140.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory7() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled7, {
    apply(target, thisArg, argArray) {
      return styled7(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled7(element));
      }
      return cache.get(element);
    }
  });
}
var chakra7 = factory7();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react141 = __toESM(require_react(), 1);
function forwardRef15(component) {
  return (0, import_react141.forwardRef)(component);
}

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react142 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react143 = __toESM(require_react(), 1);
function createContext18(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react143.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react143.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react145 = __toESM(require_react(), 1);
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider7, useStyles7] = createContext18({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/button/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/button/dist/chunk-PEYICJIL.mjs
var import_react147 = __toESM(require_react(), 1);
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var attachedStyles = {
  horizontal: {
    "> *:first-of-type:not(:last-of-type)": { borderEndRadius: 0 },
    "> *:not(:first-of-type):not(:last-of-type)": { borderRadius: 0 },
    "> *:not(:first-of-type):last-of-type": { borderStartRadius: 0 }
  },
  vertical: {
    "> *:first-of-type:not(:last-of-type)": { borderBottomRadius: 0 },
    "> *:not(:first-of-type):not(:last-of-type)": { borderRadius: 0 },
    "> *:not(:first-of-type):last-of-type": { borderTopRadius: 0 }
  }
};
var gapStyles = {
  horizontal: (spacing3) => ({
    "& > *:not(style) ~ *:not(style)": { marginStart: spacing3 }
  }),
  vertical: (spacing3) => ({
    "& > *:not(style) ~ *:not(style)": { marginTop: spacing3 }
  })
};
var ButtonGroup = forwardRef15(
  function ButtonGroup2(props, ref) {
    const {
      size: size3,
      colorScheme,
      variant,
      className,
      spacing: spacing3 = "0.5rem",
      isAttached,
      isDisabled: isDisabled26,
      orientation = "horizontal",
      ...rest
    } = props;
    const _className = cx("chakra-button__group", className);
    const context = (0, import_react147.useMemo)(
      () => ({ size: size3, colorScheme, variant, isDisabled: isDisabled26 }),
      [size3, colorScheme, variant, isDisabled26]
    );
    let groupStyles = {
      display: "inline-flex",
      ...isAttached ? attachedStyles[orientation] : gapStyles[orientation](spacing3)
    };
    const isVertical = orientation === "vertical";
    return (0, import_jsx_runtime50.jsx)(ButtonGroupProvider, { value: context, children: (0, import_jsx_runtime50.jsx)(
      chakra7.div,
      {
        ref,
        role: "group",
        __css: groupStyles,
        className: _className,
        "data-attached": isAttached ? "" : void 0,
        "data-orientation": orientation,
        flexDir: isVertical ? "column" : void 0,
        ...rest
      }
    ) });
  }
);
ButtonGroup.displayName = "ButtonGroup";

// node_modules/@chakra-ui/button/dist/chunk-3HSDMH4Y.mjs
init_shim();

// node_modules/@chakra-ui/button/dist/chunk-NAA7TEES.mjs
init_shim();

// node_modules/@chakra-ui/button/dist/chunk-FRFD4OXU.mjs
init_shim();
var import_react148 = __toESM(require_react(), 1);
function useButtonType(value) {
  const [isButton, setIsButton] = (0, import_react148.useState)(!value);
  const refCallback = (0, import_react148.useCallback)((node2) => {
    if (!node2)
      return;
    setIsButton(node2.tagName === "BUTTON");
  }, []);
  const type = isButton ? "button" : void 0;
  return { ref: refCallback, type };
}

// node_modules/@chakra-ui/button/dist/chunk-HCASMTTF.mjs
init_shim();
var import_react149 = __toESM(require_react(), 1);
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
function ButtonIcon(props) {
  const { children, className, ...rest } = props;
  const _children = (0, import_react149.isValidElement)(children) ? (0, import_react149.cloneElement)(children, {
    "aria-hidden": true,
    focusable: false
  }) : children;
  const _className = cx("chakra-button__icon", className);
  return (0, import_jsx_runtime51.jsx)(
    chakra7.span,
    {
      display: "inline-flex",
      alignSelf: "center",
      flexShrink: 0,
      ...rest,
      className: _className,
      children: _children
    }
  );
}
ButtonIcon.displayName = "ButtonIcon";

// node_modules/@chakra-ui/button/dist/chunk-HNNHG6RU.mjs
init_shim();
var import_react150 = __toESM(require_react(), 1);
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
function ButtonSpinner(props) {
  const {
    label,
    placement,
    spacing: spacing3 = "0.5rem",
    children = (0, import_jsx_runtime52.jsx)(Spinner, { color: "currentColor", width: "1em", height: "1em" }),
    className,
    __css,
    ...rest
  } = props;
  const _className = cx("chakra-button__spinner", className);
  const marginProp = placement === "start" ? "marginEnd" : "marginStart";
  const spinnerStyles = (0, import_react150.useMemo)(
    () => ({
      display: "flex",
      alignItems: "center",
      position: label ? "relative" : "absolute",
      [marginProp]: label ? spacing3 : 0,
      fontSize: "1em",
      lineHeight: "normal",
      ...__css
    }),
    [__css, label, marginProp, spacing3]
  );
  return (0, import_jsx_runtime52.jsx)(chakra7.div, { className: _className, ...rest, __css: spinnerStyles, children });
}
ButtonSpinner.displayName = "ButtonSpinner";

// node_modules/@chakra-ui/button/dist/chunk-NAA7TEES.mjs
var import_react151 = __toESM(require_react(), 1);
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
var Button = forwardRef15((props, ref) => {
  const group = useButtonGroup();
  const styles3 = useStyleConfig7("Button", { ...group, ...props });
  const {
    isDisabled: isDisabled26 = group == null ? void 0 : group.isDisabled,
    isLoading,
    isActive,
    children,
    leftIcon,
    rightIcon,
    loadingText,
    iconSpacing: iconSpacing3 = "0.5rem",
    type,
    spinner,
    spinnerPlacement = "start",
    className,
    as,
    ...rest
  } = omitThemingProps(props);
  const buttonStyles = (0, import_react151.useMemo)(() => {
    const _focus = { ...styles3 == null ? void 0 : styles3["_focus"], zIndex: 1 };
    return {
      display: "inline-flex",
      appearance: "none",
      alignItems: "center",
      justifyContent: "center",
      userSelect: "none",
      position: "relative",
      whiteSpace: "nowrap",
      verticalAlign: "middle",
      outline: "none",
      ...styles3,
      ...!!group && { _focus }
    };
  }, [styles3, group]);
  const { ref: _ref2, type: defaultType } = useButtonType(as);
  const contentProps = { rightIcon, leftIcon, iconSpacing: iconSpacing3, children };
  return (0, import_jsx_runtime53.jsxs)(
    chakra7.button,
    {
      ref: useMergeRefs2(ref, _ref2),
      as,
      type: type != null ? type : defaultType,
      "data-active": dataAttr(isActive),
      "data-loading": dataAttr(isLoading),
      __css: buttonStyles,
      className: cx("chakra-button", className),
      ...rest,
      disabled: isDisabled26 || isLoading,
      children: [
        isLoading && spinnerPlacement === "start" && (0, import_jsx_runtime53.jsx)(
          ButtonSpinner,
          {
            className: "chakra-button__spinner--start",
            label: loadingText,
            placement: "start",
            spacing: iconSpacing3,
            children: spinner
          }
        ),
        isLoading ? loadingText || (0, import_jsx_runtime53.jsx)(chakra7.span, { opacity: 0, children: (0, import_jsx_runtime53.jsx)(ButtonContent, { ...contentProps }) }) : (0, import_jsx_runtime53.jsx)(ButtonContent, { ...contentProps }),
        isLoading && spinnerPlacement === "end" && (0, import_jsx_runtime53.jsx)(
          ButtonSpinner,
          {
            className: "chakra-button__spinner--end",
            label: loadingText,
            placement: "end",
            spacing: iconSpacing3,
            children: spinner
          }
        )
      ]
    }
  );
});
Button.displayName = "Button";
function ButtonContent(props) {
  const { leftIcon, rightIcon, children, iconSpacing: iconSpacing3 } = props;
  return (0, import_jsx_runtime53.jsxs)(import_jsx_runtime53.Fragment, { children: [
    leftIcon && (0, import_jsx_runtime53.jsx)(ButtonIcon, { marginEnd: iconSpacing3, children: leftIcon }),
    children,
    rightIcon && (0, import_jsx_runtime53.jsx)(ButtonIcon, { marginStart: iconSpacing3, children: rightIcon })
  ] });
}

// node_modules/@chakra-ui/button/dist/chunk-3HSDMH4Y.mjs
var import_react152 = __toESM(require_react(), 1);
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var IconButton = forwardRef15(
  (props, ref) => {
    const { icon, children, isRound, "aria-label": ariaLabel, ...rest } = props;
    const element = icon || children;
    const _children = (0, import_react152.isValidElement)(element) ? (0, import_react152.cloneElement)(element, {
      "aria-hidden": true,
      focusable: false
    }) : null;
    return (0, import_jsx_runtime54.jsx)(
      Button,
      {
        padding: "0",
        borderRadius: isRound ? "full" : void 0,
        ref,
        "aria-label": ariaLabel,
        ...rest,
        children: _children
      }
    );
  }
);
IconButton.displayName = "IconButton";

// node_modules/@chakra-ui/card/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/card/dist/chunk-KKEJMMX3.mjs
init_shim();

// node_modules/@chakra-ui/card/dist/chunk-4DHADF5X.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react154 = __toESM(require_react(), 1);
function useTheme8() {
  const theme3 = (0, import_react154.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra8() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme8();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM8() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser9 = canUseDOM8();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash13 = __toESM(require_lodash(), 1);
function omit10(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get9(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize9 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet9 = memoize9(get9);
function objectFilter8(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined8 = (object2) => objectFilter8(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction11(value) {
  return typeof value === "function";
}
var __DEV__8 = import_process.default.env.NODE_ENV !== "production";
var __TEST__8 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn11(valueOrFn, ...args) {
  return isFunction11(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once8(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn9 = once8((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__8) {
    console.warn(message);
  }
});
var error8 = once8((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__8) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger8 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger8 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep8 = 1 / 60 * 1e3;
var getCurrentTime8 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame8 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime8()), defaultTimestep8);

// node_modules/@chakra-ui/card/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep9(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/card/node_modules/framesync/dist/es/index.mjs
var maxElapsed9 = 40;
var useDefaultElapsed9 = true;
var runNextFrame9 = false;
var isProcessing8 = false;
var frame9 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder9 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps9 = stepsOrder9.reduce((acc, key) => {
  acc[key] = createRenderStep9(() => runNextFrame9 = true);
  return acc;
}, {});
var sync9 = stepsOrder9.reduce((acc, key) => {
  const step = steps9[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame9)
      startLoop9();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync9 = stepsOrder9.reduce((acc, key) => {
  acc[key] = steps9[key].cancel;
  return acc;
}, {});
var flushSync8 = stepsOrder9.reduce((acc, key) => {
  acc[key] = () => steps9[key].process(frame9);
  return acc;
}, {});
var processStep9 = (stepId) => steps9[stepId].process(frame9);
var processFrame9 = (timestamp) => {
  runNextFrame9 = false;
  frame9.delta = useDefaultElapsed9 ? defaultTimestep8 : Math.max(Math.min(timestamp - frame9.timestamp, maxElapsed9), 1);
  frame9.timestamp = timestamp;
  isProcessing8 = true;
  stepsOrder9.forEach(processStep9);
  isProcessing8 = false;
  if (runNextFrame9) {
    useDefaultElapsed9 = false;
    onNextFrame8(processFrame9);
  }
};
var startLoop9 = () => {
  runNextFrame9 = true;
  useDefaultElapsed9 = true;
  if (!isProcessing8)
    onNextFrame8(processFrame9);
};

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints10 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList8 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector8 = focusableElList8.join();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react155 = __toESM(require_react(), 1);
var import_react_fast_compare8 = __toESM(require_react_fast_compare8(), 1);
function useStyleConfigImpl7(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra8();
  const themeStyleConfig = themeKey ? memoizedGet9(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash13.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined8(omit10(rest, ["children"]))
  );
  const stylesRef = (0, import_react155.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare8.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useMultiStyleConfig8(themeKey, props = {}) {
  return useStyleConfigImpl7(themeKey, props);
}

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames8 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps8 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp8(prop) {
  return validHTMLProps8.has(prop) || !allPropNames8.has(prop);
}

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react156 = __toESM(require_react(), 1);
var _a16;
var emotion_styled8 = (_a16 = emotion_styled_browser_esm_default.default) != null ? _a16 : emotion_styled_browser_esm_default;
var toCSSObject8 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter8(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn11(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined8(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled8(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp8;
  }
  const styleObject = toCSSObject8({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled8(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react156.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react156.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory8() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled8, {
    apply(target, thisArg, argArray) {
      return styled8(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled8(element));
      }
      return cache.get(element);
    }
  });
}
var chakra8 = factory8();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react157 = __toESM(require_react(), 1);
function forwardRef16(component) {
  return (0, import_react157.forwardRef)(component);
}

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react158 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react159 = __toESM(require_react(), 1);
function createContext19(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react159.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react159.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react161 = __toESM(require_react(), 1);
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider8, useStyles8] = createContext19({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});
function createStylesContext8(componentName) {
  return createContext19({
    name: `${componentName}StylesContext`,
    errorMessage: `useStyles: "styles" is undefined. Seems you forgot to wrap the components in "<${componentName} />" `
  });
}

// node_modules/@chakra-ui/card/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/card/dist/chunk-4DHADF5X.mjs
var [CardStylesProvider, useCardStyles] = createStylesContext8("Card");

// node_modules/@chakra-ui/card/dist/chunk-KKEJMMX3.mjs
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
var CardBody = forwardRef16(function CardBody2(props, ref) {
  const { className, ...rest } = props;
  const styles3 = useCardStyles();
  return (0, import_jsx_runtime56.jsx)(
    chakra8.div,
    {
      ref,
      className: cx("chakra-card__body", className),
      __css: styles3.body,
      ...rest
    }
  );
});

// node_modules/@chakra-ui/card/dist/chunk-V3HPETQ4.mjs
init_shim();
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
var CardFooter = forwardRef16(
  function CardFooter2(props, ref) {
    const { className, justify, ...rest } = props;
    const styles3 = useCardStyles();
    return (0, import_jsx_runtime57.jsx)(
      chakra8.div,
      {
        ref,
        className: cx("chakra-card__footer", className),
        __css: {
          display: "flex",
          justifyContent: justify,
          ...styles3.footer
        },
        ...rest
      }
    );
  }
);

// node_modules/@chakra-ui/card/dist/chunk-W3H6TFKV.mjs
init_shim();
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var CardHeader = forwardRef16(
  function CardHeader2(props, ref) {
    const { className, ...rest } = props;
    const styles3 = useCardStyles();
    return (0, import_jsx_runtime58.jsx)(
      chakra8.div,
      {
        ref,
        className: cx("chakra-card__header", className),
        __css: styles3.header,
        ...rest
      }
    );
  }
);

// node_modules/@chakra-ui/card/dist/chunk-S432VF2S.mjs
init_shim();
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var Card = forwardRef16(function Card2(props, ref) {
  const {
    className,
    children,
    direction: direction3 = "column",
    justify,
    align,
    ...rest
  } = omitThemingProps(props);
  const styles3 = useMultiStyleConfig8("Card", props);
  return (0, import_jsx_runtime59.jsx)(
    chakra8.div,
    {
      ref,
      className: cx("chakra-card", className),
      __css: {
        display: "flex",
        flexDirection: direction3,
        justifyContent: justify,
        alignItems: align,
        position: "relative",
        minWidth: 0,
        wordWrap: "break-word",
        ...styles3.container
      },
      ...rest,
      children: (0, import_jsx_runtime59.jsx)(CardStylesProvider, { value: styles3, children })
    }
  );
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/checkbox/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/checkbox/dist/chunk-Y65KPFRX.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/checkbox/dist/chunk-6XFPBTDN.mjs
init_shim();
var [CheckboxGroupProvider, useCheckboxGroupContext] = createContext({
  name: "CheckboxGroupContext",
  strict: false
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/checkbox/dist/chunk-5F7ST2TT.mjs
init_shim();
var import_react163 = __toESM(require_react(), 1);
function isInputEvent9(value) {
  return value && isObject(value) && isObject(value.target);
}
function useCheckboxGroup(props = {}) {
  const {
    defaultValue,
    value: valueProp,
    onChange,
    isDisabled: isDisabled26,
    isNative
  } = props;
  const onChangeProp = useCallbackRef(onChange);
  const [value, setValue] = useControllableState({
    value: valueProp,
    defaultValue: defaultValue || [],
    onChange: onChangeProp
  });
  const handleChange = (0, import_react163.useCallback)(
    (eventOrValue) => {
      if (!value)
        return;
      const isChecked = isInputEvent9(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);
      const selectedValue = isInputEvent9(eventOrValue) ? eventOrValue.target.value : eventOrValue;
      const nextValue = isChecked ? [...value, selectedValue] : value.filter((v) => String(v) !== String(selectedValue));
      setValue(nextValue);
    },
    [setValue, value]
  );
  const getCheckboxProps = (0, import_react163.useCallback)(
    (props2 = {}) => {
      const checkedKey = isNative ? "checked" : "isChecked";
      return {
        ...props2,
        [checkedKey]: value.some((val) => String(props2.value) === String(val)),
        onChange: handleChange
      };
    },
    [handleChange, isNative, value]
  );
  return {
    value,
    isDisabled: isDisabled26,
    onChange: handleChange,
    setValue,
    getCheckboxProps
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/checkbox/dist/chunk-Y65KPFRX.mjs
var import_react164 = __toESM(require_react(), 1);
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
function CheckboxGroup(props) {
  const { colorScheme, size: size3, variant, children, isDisabled: isDisabled26 } = props;
  const { value, onChange } = useCheckboxGroup(props);
  const group = (0, import_react164.useMemo)(
    () => ({
      size: size3,
      onChange,
      colorScheme,
      value,
      variant,
      isDisabled: isDisabled26
    }),
    [size3, onChange, colorScheme, value, variant, isDisabled26]
  );
  return (0, import_jsx_runtime60.jsx)(CheckboxGroupProvider, { value: group, children });
}
CheckboxGroup.displayName = "CheckboxGroup";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/checkbox/dist/chunk-RVJOM3YK.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/checkbox/dist/chunk-DFEUIRKX.mjs
init_shim();
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
function CheckIcon2(props) {
  return (0, import_jsx_runtime61.jsx)(
    chakra2.svg,
    {
      width: "1.2em",
      viewBox: "0 0 12 10",
      style: {
        fill: "none",
        strokeWidth: 2,
        stroke: "currentColor",
        strokeDasharray: 16
      },
      ...props,
      children: (0, import_jsx_runtime61.jsx)("polyline", { points: "1.5 6 4.5 9 10.5 1" })
    }
  );
}
function IndeterminateIcon(props) {
  return (0, import_jsx_runtime61.jsx)(
    chakra2.svg,
    {
      width: "1.2em",
      viewBox: "0 0 24 24",
      style: { stroke: "currentColor", strokeWidth: 4 },
      ...props,
      children: (0, import_jsx_runtime61.jsx)("line", { x1: "21", x2: "3", y1: "12", y2: "12" })
    }
  );
}
function CheckboxIcon(props) {
  const { isIndeterminate, isChecked, ...rest } = props;
  const BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon2;
  return isChecked || isIndeterminate ? (0, import_jsx_runtime61.jsx)(
    chakra2.div,
    {
      style: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        height: "100%"
      },
      children: (0, import_jsx_runtime61.jsx)(BaseIcon, { ...rest })
    }
  ) : null;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/checkbox/dist/chunk-H6UVDIE7.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/form-control/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/form-control/dist/chunk-6ZNYZUDD.mjs
init_shim();
var import_react165 = __toESM(require_react(), 1);
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
var [FormControlStylesProvider, useFormControlStyles] = createContext({
  name: `FormControlStylesContext`,
  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
});
var [FormControlProvider, useFormControlContext] = createContext({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider(props) {
  const {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled: isDisabled26,
    isReadOnly,
    ...htmlProps
  } = props;
  const uuid = (0, import_react165.useId)();
  const id4 = idProp || `field-${uuid}`;
  const labelId = `${id4}-label`;
  const feedbackId = `${id4}-feedback`;
  const helpTextId = `${id4}-helptext`;
  const [hasFeedbackText, setHasFeedbackText] = (0, import_react165.useState)(false);
  const [hasHelpText, setHasHelpText] = (0, import_react165.useState)(false);
  const [isFocused, setFocus2] = (0, import_react165.useState)(false);
  const getHelpTextProps = (0, import_react165.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: helpTextId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasHelpText(true);
      })
    }),
    [helpTextId]
  );
  const getLabelProps = (0, import_react165.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled26),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: props2.id !== void 0 ? props2.id : labelId,
      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id4
    }),
    [id4, isDisabled26, isFocused, isInvalid, isReadOnly, labelId]
  );
  const getErrorMessageProps = (0, import_react165.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: feedbackId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    }),
    [feedbackId]
  );
  const getRootProps = (0, import_react165.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ...htmlProps,
      ref: forwardedRef,
      role: "group"
    }),
    [htmlProps]
  );
  const getRequiredIndicatorProps = (0, import_react165.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    }),
    []
  );
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled26,
    isFocused: !!isFocused,
    onFocus: () => setFocus2(true),
    onBlur: () => setFocus2(false),
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id: id4,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl = forwardRef5(
  function FormControl2(props, ref) {
    const styles3 = useMultiStyleConfig2("Form", props);
    const ownProps = omitThemingProps(props);
    const {
      getRootProps,
      htmlProps: _,
      ...context
    } = useFormControlProvider(ownProps);
    const className = cx("chakra-form-control", props.className);
    return (0, import_jsx_runtime62.jsx)(FormControlProvider, { value: context, children: (0, import_jsx_runtime62.jsx)(FormControlStylesProvider, { value: styles3, children: (0, import_jsx_runtime62.jsx)(
      chakra2.div,
      {
        ...getRootProps({}, ref),
        className,
        __css: styles3["container"]
      }
    ) }) });
  }
);
FormControl.displayName = "FormControl";
var FormHelperText = forwardRef5(
  function FormHelperText2(props, ref) {
    const field = useFormControlContext();
    const styles3 = useFormControlStyles();
    const className = cx("chakra-form__helper-text", props.className);
    return (0, import_jsx_runtime62.jsx)(
      chakra2.div,
      {
        ...field == null ? void 0 : field.getHelpTextProps(props, ref),
        __css: styles3.helperText,
        className
      }
    );
  }
);
FormHelperText.displayName = "FormHelperText";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var [FormErrorStylesProvider, useFormErrorStyles] = createContext({
  name: `FormErrorStylesContext`,
  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormError />" `
});
var FormErrorMessage = forwardRef5(
  (props, ref) => {
    const styles3 = useMultiStyleConfig2("FormError", props);
    const ownProps = omitThemingProps(props);
    const field = useFormControlContext();
    if (!(field == null ? void 0 : field.isInvalid))
      return null;
    return (0, import_jsx_runtime63.jsx)(FormErrorStylesProvider, { value: styles3, children: (0, import_jsx_runtime63.jsx)(
      chakra2.div,
      {
        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),
        className: cx("chakra-form__error-message", props.className),
        __css: {
          display: "flex",
          alignItems: "center",
          ...styles3.text
        }
      }
    ) });
  }
);
FormErrorMessage.displayName = "FormErrorMessage";
var FormErrorIcon = forwardRef5((props, ref) => {
  const styles3 = useFormErrorStyles();
  const field = useFormControlContext();
  if (!(field == null ? void 0 : field.isInvalid))
    return null;
  const _className = cx("chakra-form__error-icon", props.className);
  return (0, import_jsx_runtime63.jsx)(
    Icon,
    {
      ref,
      "aria-hidden": true,
      ...props,
      __css: styles3.icon,
      className: _className,
      children: (0, import_jsx_runtime63.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        }
      )
    }
  );
});
FormErrorIcon.displayName = "FormErrorIcon";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs
init_shim();
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
var FormLabel = forwardRef5(function FormLabel2(passedProps, ref) {
  var _a40;
  const styles3 = useStyleConfig2("FormLabel", passedProps);
  const props = omitThemingProps(passedProps);
  const {
    className,
    children,
    requiredIndicator = (0, import_jsx_runtime64.jsx)(RequiredIndicator, {}),
    optionalIndicator = null,
    ...rest
  } = props;
  const field = useFormControlContext();
  const ownProps = (_a40 = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a40 : { ref, ...rest };
  return (0, import_jsx_runtime64.jsxs)(
    chakra2.label,
    {
      ...ownProps,
      className: cx("chakra-form__label", props.className),
      __css: {
        display: "block",
        textAlign: "start",
        ...styles3
      },
      children: [
        children,
        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator
      ]
    }
  );
});
FormLabel.displayName = "FormLabel";
var RequiredIndicator = forwardRef5(
  function RequiredIndicator2(props, ref) {
    const field = useFormControlContext();
    const styles3 = useFormControlStyles();
    if (!(field == null ? void 0 : field.isRequired))
      return null;
    const className = cx("chakra-form__required-indicator", props.className);
    return (0, import_jsx_runtime64.jsx)(
      chakra2.span,
      {
        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),
        __css: styles3.requiredIndicator,
        className
      }
    );
  }
);
RequiredIndicator.displayName = "RequiredIndicator";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/form-control/dist/chunk-IJBC3YLI.mjs
init_shim();
function useFormControl(props) {
  const { isDisabled: isDisabled26, isInvalid, isReadOnly, isRequired, ...rest } = useFormControlProps(props);
  return {
    ...rest,
    disabled: isDisabled26,
    readOnly: isReadOnly,
    required: isRequired,
    "aria-invalid": ariaAttr(isInvalid),
    "aria-required": ariaAttr(isRequired),
    "aria-readonly": ariaAttr(isReadOnly)
  };
}
function useFormControlProps(props) {
  var _a40, _b8, _c5;
  const field = useFormControlContext();
  const {
    id: id4,
    disabled,
    readOnly,
    required,
    isRequired,
    isInvalid,
    isReadOnly,
    isDisabled: isDisabled26,
    onFocus: onFocus3,
    onBlur: onBlur3,
    ...rest
  } = props;
  const labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {
    labelIds.push(field.feedbackId);
  }
  if (field == null ? void 0 : field.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return {
    ...rest,
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id4 != null ? id4 : field == null ? void 0 : field.id,
    isDisabled: (_a40 = disabled != null ? disabled : isDisabled26) != null ? _a40 : field == null ? void 0 : field.isDisabled,
    isReadOnly: (_b8 = readOnly != null ? readOnly : isReadOnly) != null ? _b8 : field == null ? void 0 : field.isReadOnly,
    isRequired: (_c5 = required != null ? required : isRequired) != null ? _c5 : field == null ? void 0 : field.isRequired,
    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus3),
    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur3)
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/visually-hidden/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/visually-hidden/dist/chunk-74U3PXFJ.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/visually-hidden/dist/chunk-RSUMUOHR.mjs
init_shim();
var visuallyHiddenStyle = {
  border: "0",
  clip: "rect(0, 0, 0, 0)",
  height: "1px",
  width: "1px",
  margin: "-1px",
  padding: "0",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/visually-hidden/dist/chunk-74U3PXFJ.mjs
var VisuallyHidden = chakra2("span", {
  baseStyle: visuallyHiddenStyle
});
VisuallyHidden.displayName = "VisuallyHidden";
var VisuallyHiddenInput = chakra2("input", {
  baseStyle: visuallyHiddenStyle
});
VisuallyHiddenInput.displayName = "VisuallyHiddenInput";

// node_modules/@zag-js/focus-visible/dist/index.mjs
init_shim();
var hasSetup = false;
var modality = null;
var hasEventBeforeFocus = false;
var hasBlurredWindowRecently = false;
var handlers = /* @__PURE__ */ new Set();
function trigger(modality2, event) {
  handlers.forEach((handler) => handler(modality2, event));
}
var isMac = typeof window !== "undefined" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;
function isValidKey(e) {
  return !(e.metaKey || !isMac && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function onKeyboardEvent(event) {
  hasEventBeforeFocus = true;
  if (isValidKey(event)) {
    modality = "keyboard";
    trigger("keyboard", event);
  }
}
function onPointerEvent(event) {
  modality = "pointer";
  if (event.type === "mousedown" || event.type === "pointerdown") {
    hasEventBeforeFocus = true;
    const target = event.composedPath ? event.composedPath()[0] : event.target;
    let matches = false;
    try {
      matches = target.matches(":focus-visible");
    } catch {
    }
    if (matches)
      return;
    trigger("pointer", event);
  }
}
function isVirtualClick(event) {
  if (event.mozInputSource === 0 && event.isTrusted)
    return true;
  return event.detail === 0 && !event.pointerType;
}
function onClickEvent(e) {
  if (isVirtualClick(e)) {
    hasEventBeforeFocus = true;
    modality = "virtual";
  }
}
function onWindowFocus(event) {
  if (event.target === window || event.target === document) {
    return;
  }
  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {
    modality = "virtual";
    trigger("virtual", event);
  }
  hasEventBeforeFocus = false;
  hasBlurredWindowRecently = false;
}
function onWindowBlur() {
  hasEventBeforeFocus = false;
  hasBlurredWindowRecently = true;
}
function isFocusVisible() {
  return modality !== "pointer";
}
function setupGlobalFocusEvents() {
  if (typeof window === "undefined" || hasSetup) {
    return;
  }
  const { focus: focus25 } = HTMLElement.prototype;
  HTMLElement.prototype.focus = function focusElement(...args) {
    hasEventBeforeFocus = true;
    focus25.apply(this, args);
  };
  document.addEventListener("keydown", onKeyboardEvent, true);
  document.addEventListener("keyup", onKeyboardEvent, true);
  document.addEventListener("click", onClickEvent, true);
  window.addEventListener("focus", onWindowFocus, true);
  window.addEventListener("blur", onWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    document.addEventListener("pointerdown", onPointerEvent, true);
    document.addEventListener("pointermove", onPointerEvent, true);
    document.addEventListener("pointerup", onPointerEvent, true);
  } else {
    document.addEventListener("mousedown", onPointerEvent, true);
    document.addEventListener("mousemove", onPointerEvent, true);
    document.addEventListener("mouseup", onPointerEvent, true);
  }
  hasSetup = true;
}
function trackFocusVisible(fn) {
  setupGlobalFocusEvents();
  fn(isFocusVisible());
  const handler = () => fn(isFocusVisible());
  handlers.add(handler);
  return () => {
    handlers.delete(handler);
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/checkbox/dist/chunk-H6UVDIE7.mjs
var import_react166 = __toESM(require_react(), 1);
function omit11(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key of keysToOmit) {
    if (key in clone) {
      delete clone[key];
    }
  }
  return clone;
}
function useCheckbox(props = {}) {
  const formControlProps = useFormControlProps(props);
  const {
    isDisabled: isDisabled26,
    isReadOnly,
    isRequired,
    isInvalid,
    id: id4,
    onBlur: onBlur3,
    onFocus: onFocus3,
    "aria-describedby": ariaDescribedBy
  } = formControlProps;
  const {
    defaultChecked,
    isChecked: checkedProp,
    isFocusable: isFocusable26,
    onChange,
    isIndeterminate,
    name,
    value,
    tabIndex = void 0,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-invalid": ariaInvalid,
    ...rest
  } = props;
  const htmlProps = omit11(rest, [
    "isDisabled",
    "isReadOnly",
    "isRequired",
    "isInvalid",
    "id",
    "onBlur",
    "onFocus",
    "aria-describedby"
  ]);
  const onChangeProp = useCallbackRef(onChange);
  const onBlurProp = useCallbackRef(onBlur3);
  const onFocusProp = useCallbackRef(onFocus3);
  const [isFocusVisible2, setIsFocusVisible] = (0, import_react166.useState)(false);
  const [isFocused, setFocused] = (0, import_react166.useState)(false);
  const [isHovered, setHovered] = (0, import_react166.useState)(false);
  const [isActive, setActive] = (0, import_react166.useState)(false);
  (0, import_react166.useEffect)(() => {
    return trackFocusVisible(setIsFocusVisible);
  }, []);
  const inputRef = (0, import_react166.useRef)(null);
  const [rootIsLabelElement, setRootIsLabelElement] = (0, import_react166.useState)(true);
  const [checkedState, setCheckedState] = (0, import_react166.useState)(!!defaultChecked);
  const isControlled = checkedProp !== void 0;
  const isChecked = isControlled ? checkedProp : checkedState;
  const handleChange = (0, import_react166.useCallback)(
    (event) => {
      if (isReadOnly || isDisabled26) {
        event.preventDefault();
        return;
      }
      if (!isControlled) {
        if (isChecked) {
          setCheckedState(event.target.checked);
        } else {
          setCheckedState(isIndeterminate ? true : event.target.checked);
        }
      }
      onChangeProp == null ? void 0 : onChangeProp(event);
    },
    [
      isReadOnly,
      isDisabled26,
      isChecked,
      isControlled,
      isIndeterminate,
      onChangeProp
    ]
  );
  useSafeLayoutEffect(() => {
    if (inputRef.current) {
      inputRef.current.indeterminate = Boolean(isIndeterminate);
    }
  }, [isIndeterminate]);
  useUpdateEffect(() => {
    if (isDisabled26) {
      setFocused(false);
    }
  }, [isDisabled26, setFocused]);
  useSafeLayoutEffect(() => {
    const el = inputRef.current;
    if (!(el == null ? void 0 : el.form))
      return;
    el.form.onreset = () => {
      setCheckedState(!!defaultChecked);
    };
  }, []);
  const trulyDisabled = isDisabled26 && !isFocusable26;
  const onKeyDown = (0, import_react166.useCallback)(
    (event) => {
      if (event.key === " ") {
        setActive(true);
      }
    },
    [setActive]
  );
  const onKeyUp = (0, import_react166.useCallback)(
    (event) => {
      if (event.key === " ") {
        setActive(false);
      }
    },
    [setActive]
  );
  useSafeLayoutEffect(() => {
    if (!inputRef.current)
      return;
    const notInSync = inputRef.current.checked !== isChecked;
    if (notInSync) {
      setCheckedState(inputRef.current.checked);
    }
  }, [inputRef.current]);
  const getCheckboxProps = (0, import_react166.useCallback)(
    (props2 = {}, forwardedRef = null) => {
      const onPressDown = (event) => {
        if (isFocused) {
          event.preventDefault();
        }
        setActive(true);
      };
      return {
        ...props2,
        ref: forwardedRef,
        "data-active": dataAttr(isActive),
        "data-hover": dataAttr(isHovered),
        "data-checked": dataAttr(isChecked),
        "data-focus": dataAttr(isFocused),
        "data-focus-visible": dataAttr(isFocused && isFocusVisible2),
        "data-indeterminate": dataAttr(isIndeterminate),
        "data-disabled": dataAttr(isDisabled26),
        "data-invalid": dataAttr(isInvalid),
        "data-readonly": dataAttr(isReadOnly),
        "aria-hidden": true,
        onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),
        onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),
        onMouseEnter: callAllHandlers(
          props2.onMouseEnter,
          () => setHovered(true)
        ),
        onMouseLeave: callAllHandlers(
          props2.onMouseLeave,
          () => setHovered(false)
        )
      };
    },
    [
      isActive,
      isChecked,
      isDisabled26,
      isFocused,
      isFocusVisible2,
      isHovered,
      isIndeterminate,
      isInvalid,
      isReadOnly
    ]
  );
  const getRootProps = (0, import_react166.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...htmlProps,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setRootIsLabelElement(node2.tagName === "LABEL");
      }),
      onClick: callAllHandlers(props2.onClick, () => {
        var _a40;
        if (!rootIsLabelElement) {
          (_a40 = inputRef.current) == null ? void 0 : _a40.click();
          requestAnimationFrame(() => {
            var _a210;
            (_a210 = inputRef.current) == null ? void 0 : _a210.focus();
          });
        }
      }),
      "data-disabled": dataAttr(isDisabled26),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    }),
    [htmlProps, isDisabled26, isChecked, isInvalid, rootIsLabelElement]
  );
  const getInputProps = (0, import_react166.useCallback)(
    (props2 = {}, forwardedRef = null) => {
      return {
        ...props2,
        ref: mergeRefs4(inputRef, forwardedRef),
        type: "checkbox",
        name,
        value,
        id: id4,
        tabIndex,
        onChange: callAllHandlers(props2.onChange, handleChange),
        onBlur: callAllHandlers(
          props2.onBlur,
          onBlurProp,
          () => setFocused(false)
        ),
        onFocus: callAllHandlers(
          props2.onFocus,
          onFocusProp,
          () => setFocused(true)
        ),
        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
        onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
        required: isRequired,
        checked: isChecked,
        disabled: trulyDisabled,
        readOnly: isReadOnly,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        "aria-invalid": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,
        "aria-describedby": ariaDescribedBy,
        "aria-disabled": isDisabled26,
        style: visuallyHiddenStyle
      };
    },
    [
      name,
      value,
      id4,
      handleChange,
      onBlurProp,
      onFocusProp,
      onKeyDown,
      onKeyUp,
      isRequired,
      isChecked,
      trulyDisabled,
      isReadOnly,
      ariaLabel,
      ariaLabelledBy,
      ariaInvalid,
      isInvalid,
      ariaDescribedBy,
      isDisabled26,
      tabIndex
    ]
  );
  const getLabelProps = (0, import_react166.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),
      "data-disabled": dataAttr(isDisabled26),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    }),
    [isChecked, isDisabled26, isInvalid]
  );
  const state2 = {
    isInvalid,
    isFocused,
    isChecked,
    isActive,
    isHovered,
    isIndeterminate,
    isDisabled: isDisabled26,
    isReadOnly,
    isRequired
  };
  return {
    state: state2,
    getRootProps,
    getCheckboxProps,
    getInputProps,
    getLabelProps,
    htmlProps
  };
}
function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/checkbox/dist/chunk-RVJOM3YK.mjs
var import_react167 = __toESM(require_react(), 1);
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var controlStyles = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  verticalAlign: "top",
  userSelect: "none",
  flexShrink: 0
};
var rootStyles = {
  cursor: "pointer",
  display: "inline-flex",
  alignItems: "center",
  verticalAlign: "top",
  position: "relative"
};
var checkAnim = keyframes({
  from: {
    opacity: 0,
    strokeDashoffset: 16,
    transform: "scale(0.95)"
  },
  to: {
    opacity: 1,
    strokeDashoffset: 0,
    transform: "scale(1)"
  }
});
var indeterminateOpacityAnim = keyframes({
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
});
var indeterminateScaleAnim = keyframes({
  from: {
    transform: "scaleX(0.65)"
  },
  to: {
    transform: "scaleX(1)"
  }
});
var Checkbox = forwardRef5(function Checkbox2(props, ref) {
  const group = useCheckboxGroupContext();
  const mergedProps = { ...group, ...props };
  const styles3 = useMultiStyleConfig2("Checkbox", mergedProps);
  const ownProps = omitThemingProps(props);
  const {
    spacing: spacing3 = "0.5rem",
    className,
    children,
    iconColor,
    iconSize,
    icon = (0, import_jsx_runtime65.jsx)(CheckboxIcon, {}),
    isChecked: isCheckedProp,
    isDisabled: isDisabled26 = group == null ? void 0 : group.isDisabled,
    onChange: onChangeProp,
    inputProps,
    ...rest
  } = ownProps;
  let isChecked = isCheckedProp;
  if ((group == null ? void 0 : group.value) && ownProps.value) {
    isChecked = group.value.includes(ownProps.value);
  }
  let onChange = onChangeProp;
  if ((group == null ? void 0 : group.onChange) && ownProps.value) {
    onChange = callAll(group.onChange, onChangeProp);
  }
  const {
    state: state2,
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    getRootProps
  } = useCheckbox({
    ...rest,
    isDisabled: isDisabled26,
    isChecked,
    onChange
  });
  const iconStyles = (0, import_react167.useMemo)(
    () => ({
      animation: state2.isIndeterminate ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear` : `${checkAnim} 200ms linear`,
      fontSize: iconSize,
      color: iconColor,
      ...styles3.icon
    }),
    [iconColor, iconSize, state2.isIndeterminate, styles3.icon]
  );
  const clonedIcon = (0, import_react167.cloneElement)(icon, {
    __css: iconStyles,
    isIndeterminate: state2.isIndeterminate,
    isChecked: state2.isChecked
  });
  return (0, import_jsx_runtime65.jsxs)(
    chakra2.label,
    {
      __css: { ...rootStyles, ...styles3.container },
      className: cx("chakra-checkbox", className),
      ...getRootProps(),
      children: [
        (0, import_jsx_runtime65.jsx)(
          "input",
          {
            className: "chakra-checkbox__input",
            ...getInputProps(inputProps, ref)
          }
        ),
        (0, import_jsx_runtime65.jsx)(
          chakra2.span,
          {
            __css: { ...controlStyles, ...styles3.control },
            className: "chakra-checkbox__control",
            ...getCheckboxProps(),
            children: clonedIcon
          }
        ),
        children && (0, import_jsx_runtime65.jsx)(
          chakra2.span,
          {
            className: "chakra-checkbox__label",
            ...getLabelProps(),
            __css: {
              marginStart: spacing3,
              ...styles3.label
            },
            children
          }
        )
      ]
    }
  );
});
Checkbox.displayName = "Checkbox";

// node_modules/@chakra-ui/control-box/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/control-box/dist/chunk-POK5SEAG.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react169 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM9() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser10 = canUseDOM9();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash14 = __toESM(require_lodash(), 1);
function get10(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize10 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet10 = memoize10(get10);
function objectFilter9(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined9 = (object2) => objectFilter9(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction12(value) {
  return typeof value === "function";
}
var __DEV__9 = import_process.default.env.NODE_ENV !== "production";
var __TEST__9 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn12(valueOrFn, ...args) {
  return isFunction12(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once9(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn10 = once9((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__9) {
    console.warn(message);
  }
});
var error9 = once9((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__9) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger9 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger9 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep9 = 1 / 60 * 1e3;
var getCurrentTime9 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame9 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime9()), defaultTimestep9);

// node_modules/@chakra-ui/control-box/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep10(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/control-box/node_modules/framesync/dist/es/index.mjs
var maxElapsed10 = 40;
var useDefaultElapsed10 = true;
var runNextFrame10 = false;
var isProcessing9 = false;
var frame10 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder10 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps10 = stepsOrder10.reduce((acc, key) => {
  acc[key] = createRenderStep10(() => runNextFrame10 = true);
  return acc;
}, {});
var sync10 = stepsOrder10.reduce((acc, key) => {
  const step = steps10[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame10)
      startLoop10();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync10 = stepsOrder10.reduce((acc, key) => {
  acc[key] = steps10[key].cancel;
  return acc;
}, {});
var flushSync9 = stepsOrder10.reduce((acc, key) => {
  acc[key] = () => steps10[key].process(frame10);
  return acc;
}, {});
var processStep10 = (stepId) => steps10[stepId].process(frame10);
var processFrame10 = (timestamp) => {
  runNextFrame10 = false;
  frame10.delta = useDefaultElapsed10 ? defaultTimestep9 : Math.max(Math.min(timestamp - frame10.timestamp, maxElapsed10), 1);
  frame10.timestamp = timestamp;
  isProcessing9 = true;
  stepsOrder10.forEach(processStep10);
  isProcessing9 = false;
  if (runNextFrame10) {
    useDefaultElapsed10 = false;
    onNextFrame9(processFrame10);
  }
};
var startLoop10 = () => {
  runNextFrame10 = true;
  useDefaultElapsed10 = true;
  if (!isProcessing9)
    onNextFrame9(processFrame10);
};

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints11 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList9 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector9 = focusableElList9.join();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react170 = __toESM(require_react(), 1);
var import_react_fast_compare9 = __toESM(require_react_fast_compare9(), 1);

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames9 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps9 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp9(prop) {
  return validHTMLProps9.has(prop) || !allPropNames9.has(prop);
}

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react171 = __toESM(require_react(), 1);
var _a17;
var emotion_styled9 = (_a17 = emotion_styled_browser_esm_default.default) != null ? _a17 : emotion_styled_browser_esm_default;
var toCSSObject9 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter9(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn12(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined9(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled9(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp9;
  }
  const styleObject = toCSSObject9({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled9(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react171.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react171.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory9() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled9, {
    apply(target, thisArg, argArray) {
      return styled9(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled9(element));
      }
      return cache.get(element);
    }
  });
}
var chakra9 = factory9();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react172 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react173 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react174 = __toESM(require_react(), 1);
function createContext20(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react174.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react174.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react176 = __toESM(require_react(), 1);
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider9, useStyles9] = createContext20({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/control-box/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/control-box/dist/chunk-POK5SEAG.mjs
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
var ControlBox = (props) => {
  const {
    type = "checkbox",
    _hover,
    _invalid,
    _disabled,
    _focus,
    _checked,
    _child = { opacity: 0 },
    _checkedAndChild = { opacity: 1 },
    _checkedAndDisabled,
    _checkedAndFocus,
    _checkedAndHover,
    children,
    ...rest
  } = props;
  const checkedAndDisabled = `input[type=${type}]:checked:disabled + &`;
  const checkedAndHover = `input[type=${type}]:checked:hover:not(:disabled) + &`;
  const checkedAndFocus = `input[type=${type}]:checked:focus + &`;
  const disabled = `input[type=${type}]:disabled + &`;
  const focus25 = `input[type=${type}]:focus + &`;
  const hover = `input[type=${type}]:hover:not(:disabled):not(:checked) + &`;
  const checked = `input[type=${type}]:checked + &, input[type=${type}][aria-checked=mixed] + &`;
  const invalid = `input[type=${type}][aria-invalid=true] + &`;
  const child = `& > *`;
  return (0, import_jsx_runtime67.jsx)(
    chakra9.div,
    {
      ...rest,
      "aria-hidden": true,
      __css: {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        transitionProperty: "common",
        transitionDuration: "fast",
        flexShrink: 0,
        [focus25]: _focus,
        [hover]: _hover,
        [disabled]: _disabled,
        [invalid]: _invalid,
        [checkedAndDisabled]: _checkedAndDisabled,
        [checkedAndFocus]: _checkedAndFocus,
        [checkedAndHover]: _checkedAndHover,
        [child]: _child,
        [checked]: {
          ..._checked,
          [child]: _checkedAndChild
        }
      },
      children
    }
  );
};
ControlBox.displayName = "ControlBox";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/counter/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/counter/dist/chunk-O3YOOUZ7.mjs
init_shim();

// node_modules/@chakra-ui/number-utils/dist/index.mjs
init_shim();
function toNumber(value) {
  const num = parseFloat(value);
  return typeof num !== "number" || Number.isNaN(num) ? 0 : num;
}
function toPrecision10(value, precision) {
  let nextValue = toNumber(value);
  const scaleFactor = 10 ** (precision != null ? precision : 10);
  nextValue = Math.round(nextValue * scaleFactor) / scaleFactor;
  return precision ? nextValue.toFixed(precision) : nextValue.toString();
}
function countDecimalPlaces10(value) {
  if (!Number.isFinite(value))
    return 0;
  let e = 1;
  let p = 0;
  while (Math.round(value * e) / e !== value) {
    e *= 10;
    p += 1;
  }
  return p;
}
function valueToPercent10(value, min, max) {
  return (value - min) * 100 / (max - min);
}
function percentToValue10(percent2, min, max) {
  return (max - min) * percent2 + min;
}
function roundValueToStep10(value, from, step) {
  const nextValue = Math.round((value - from) / step) * step + from;
  const precision = countDecimalPlaces10(step);
  return toPrecision10(nextValue, precision);
}
function clampValue10(value, min, max) {
  if (value == null)
    return value;
  if (max < min) {
    console.warn("clamp: max cannot be less than min");
  }
  return Math.min(Math.max(value, min), max);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/counter/dist/chunk-O3YOOUZ7.mjs
var import_react178 = __toESM(require_react(), 1);
function useCounter(props = {}) {
  const {
    onChange,
    precision: precisionProp,
    defaultValue,
    value: valueProp,
    step: stepProp = 1,
    min = Number.MIN_SAFE_INTEGER,
    max = Number.MAX_SAFE_INTEGER,
    keepWithinRange = true
  } = props;
  const onChangeProp = useCallbackRef(onChange);
  const [valueState, setValue] = (0, import_react178.useState)(() => {
    var _a40;
    if (defaultValue == null)
      return "";
    return (_a40 = cast2(defaultValue, stepProp, precisionProp)) != null ? _a40 : "";
  });
  const isControlled = typeof valueProp !== "undefined";
  const value = isControlled ? valueProp : valueState;
  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);
  const precision = precisionProp != null ? precisionProp : decimalPlaces;
  const update = (0, import_react178.useCallback)(
    (next) => {
      if (next === value)
        return;
      if (!isControlled) {
        setValue(next.toString());
      }
      onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));
    },
    [onChangeProp, isControlled, value]
  );
  const clamp2 = (0, import_react178.useCallback)(
    (value2) => {
      let nextValue = value2;
      if (keepWithinRange) {
        nextValue = clampValue10(nextValue, min, max);
      }
      return toPrecision10(nextValue, precision);
    },
    [precision, keepWithinRange, max, min]
  );
  const increment = (0, import_react178.useCallback)(
    (step = stepProp) => {
      let next;
      if (value === "") {
        next = parse(step);
      } else {
        next = parse(value) + step;
      }
      next = clamp2(next);
      update(next);
    },
    [clamp2, stepProp, update, value]
  );
  const decrement = (0, import_react178.useCallback)(
    (step = stepProp) => {
      let next;
      if (value === "") {
        next = parse(-step);
      } else {
        next = parse(value) - step;
      }
      next = clamp2(next);
      update(next);
    },
    [clamp2, stepProp, update, value]
  );
  const reset = (0, import_react178.useCallback)(() => {
    var _a40;
    let next;
    if (defaultValue == null) {
      next = "";
    } else {
      next = (_a40 = cast2(defaultValue, stepProp, precisionProp)) != null ? _a40 : min;
    }
    update(next);
  }, [defaultValue, precisionProp, stepProp, update, min]);
  const castValue = (0, import_react178.useCallback)(
    (value2) => {
      var _a40;
      const nextValue = (_a40 = cast2(value2, stepProp, precision)) != null ? _a40 : min;
      update(nextValue);
    },
    [precision, stepProp, update, min]
  );
  const valueAsNumber = parse(value);
  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;
  const isAtMax = valueAsNumber === max;
  const isAtMin = valueAsNumber === min;
  return {
    isOutOfRange,
    isAtMax,
    isAtMin,
    precision,
    value,
    valueAsNumber,
    update,
    reset,
    increment,
    decrement,
    clamp: clamp2,
    cast: castValue,
    setValue
  };
}
function parse(value) {
  return parseFloat(value.toString().replace(/[^\w.-]+/g, ""));
}
function getDecimalPlaces(value, step) {
  return Math.max(countDecimalPlaces10(step), countDecimalPlaces10(value));
}
function cast2(value, step, precision) {
  const parsedValue = parse(value);
  if (Number.isNaN(parsedValue))
    return void 0;
  const decimalPlaces = getDecimalPlaces(parsedValue, step);
  return toPrecision10(parsedValue, precision != null ? precision : decimalPlaces);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/css-reset/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/css-reset/dist/chunk-ZGCVOC2V.mjs
init_shim();
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
var css3 = String.raw;
var vhPolyfill2 = css3`
  :root,
  :host {
    --chakra-vh: 100vh;
  }

  @supports (height: -webkit-fill-available) {
    :root,
    :host {
      --chakra-vh: -webkit-fill-available;
    }
  }

  @supports (height: -moz-fill-available) {
    :root,
    :host {
      --chakra-vh: -moz-fill-available;
    }
  }

  @supports (height: 100dvh) {
    :root,
    :host {
      --chakra-vh: 100dvh;
    }
  }
`;
var CSSPolyfill2 = () => (0, import_jsx_runtime68.jsx)(Global, { styles: vhPolyfill2 });
var CSSReset2 = ({ scope = "" }) => (0, import_jsx_runtime68.jsx)(
  Global,
  {
    styles: css3`
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        margin: 0;
        font-feature-settings: "kern";
      }

      ${scope} :where(*, *::before, *::after) {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
        word-wrap: break-word;
      }

      main {
        display: block;
      }

      ${scope} hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      ${scope} :where(pre, code, kbd,samp) {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      ${scope} a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      ${scope} abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      ${scope} :where(b, strong) {
        font-weight: bold;
      }

      ${scope} small {
        font-size: 80%;
      }

      ${scope} :where(sub,sup) {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      ${scope} sub {
        bottom: -0.25em;
      }

      ${scope} sup {
        top: -0.5em;
      }

      ${scope} img {
        border-style: none;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      ${scope} :where(button, input) {
        overflow: visible;
      }

      ${scope} :where(button, select) {
        text-transform: none;
      }

      ${scope} :where(
          button::-moz-focus-inner,
          [type="button"]::-moz-focus-inner,
          [type="reset"]::-moz-focus-inner,
          [type="submit"]::-moz-focus-inner
        ) {
        border-style: none;
        padding: 0;
      }

      ${scope} fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      ${scope} legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      ${scope} progress {
        vertical-align: baseline;
      }

      ${scope} textarea {
        overflow: auto;
      }

      ${scope} :where([type="checkbox"], [type="radio"]) {
        box-sizing: border-box;
        padding: 0;
      }

      ${scope} input[type="number"]::-webkit-inner-spin-button,
      ${scope} input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      ${scope} input[type="number"] {
        -moz-appearance: textfield;
      }

      ${scope} input[type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      ${scope} input[type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ${scope} ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      ${scope} details {
        display: block;
      }

      ${scope} summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      ${scope} :where(
          blockquote,
          dl,
          dd,
          h1,
          h2,
          h3,
          h4,
          h5,
          h6,
          hr,
          figure,
          p,
          pre
        ) {
        margin: 0;
      }

      ${scope} button {
        background: transparent;
        padding: 0;
      }

      ${scope} fieldset {
        margin: 0;
        padding: 0;
      }

      ${scope} :where(ol, ul) {
        margin: 0;
        padding: 0;
      }

      ${scope} textarea {
        resize: vertical;
      }

      ${scope} :where(button, [role="button"]) {
        cursor: pointer;
      }

      ${scope} button::-moz-focus-inner {
        border: 0 !important;
      }

      ${scope} table {
        border-collapse: collapse;
      }

      ${scope} :where(h1, h2, h3, h4, h5, h6) {
        font-size: inherit;
        font-weight: inherit;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      ${scope} :where(img, svg, video, canvas, audio, iframe, embed, object) {
        display: block;
      }

      ${scope} :where(img, video) {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible]
        :focus:not([data-focus-visible-added]):not(
          [data-focus-visible-disabled]
        ) {
        outline: none;
        box-shadow: none;
      }

      ${scope} select::-ms-expand {
        display: none;
      }

      ${vhPolyfill2}
    `
  }
);

// node_modules/@chakra-ui/editable/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/editable/dist/chunk-ZPXE4ZLM.mjs
init_shim();

// node_modules/@chakra-ui/editable/dist/chunk-WADSSRGF.mjs
init_shim();
var [EditableStylesProvider, useEditableStyles] = createContext({
  name: `EditableStylesContext`,
  errorMessage: `useEditableStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Editable />" `
});
var [EditableProvider, useEditableContext] = createContext({
  name: "EditableContext",
  errorMessage: "useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`"
});

// node_modules/@chakra-ui/editable/dist/chunk-ZPXE4ZLM.mjs
function useEditableState() {
  const { isEditing, onSubmit, onCancel, onEdit, isDisabled: isDisabled26 } = useEditableContext();
  return {
    isEditing,
    onSubmit,
    onCancel,
    onEdit,
    isDisabled: isDisabled26
  };
}

// node_modules/@chakra-ui/editable/dist/chunk-6EW6LXRD.mjs
init_shim();

// node_modules/@chakra-ui/editable/dist/chunk-LA6GBQAD.mjs
init_shim();
var commonStyles = {
  fontSize: "inherit",
  fontWeight: "inherit",
  textAlign: "inherit",
  bg: "transparent"
};

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react181 = __toESM(require_react(), 1);
function useTheme10() {
  const theme3 = (0, import_react181.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra10() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme10();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM10() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser11 = canUseDOM10();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash15 = __toESM(require_lodash(), 1);
function omit13(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get11(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize11 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet11 = memoize11(get11);
function objectFilter10(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined10 = (object2) => objectFilter10(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction13(value) {
  return typeof value === "function";
}
var __DEV__10 = import_process.default.env.NODE_ENV !== "production";
var __TEST__10 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn13(valueOrFn, ...args) {
  return isFunction13(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once10(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn11 = once10((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__10) {
    console.warn(message);
  }
});
var error10 = once10((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__10) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger10 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger10 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep10 = 1 / 60 * 1e3;
var getCurrentTime10 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame10 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime10()), defaultTimestep10);

// node_modules/@chakra-ui/editable/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep11(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/editable/node_modules/framesync/dist/es/index.mjs
var maxElapsed11 = 40;
var useDefaultElapsed11 = true;
var runNextFrame11 = false;
var isProcessing10 = false;
var frame11 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder11 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps11 = stepsOrder11.reduce((acc, key) => {
  acc[key] = createRenderStep11(() => runNextFrame11 = true);
  return acc;
}, {});
var sync11 = stepsOrder11.reduce((acc, key) => {
  const step = steps11[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame11)
      startLoop11();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync11 = stepsOrder11.reduce((acc, key) => {
  acc[key] = steps11[key].cancel;
  return acc;
}, {});
var flushSync10 = stepsOrder11.reduce((acc, key) => {
  acc[key] = () => steps11[key].process(frame11);
  return acc;
}, {});
var processStep11 = (stepId) => steps11[stepId].process(frame11);
var processFrame11 = (timestamp) => {
  runNextFrame11 = false;
  frame11.delta = useDefaultElapsed11 ? defaultTimestep10 : Math.max(Math.min(timestamp - frame11.timestamp, maxElapsed11), 1);
  frame11.timestamp = timestamp;
  isProcessing10 = true;
  stepsOrder11.forEach(processStep11);
  isProcessing10 = false;
  if (runNextFrame11) {
    useDefaultElapsed11 = false;
    onNextFrame10(processFrame11);
  }
};
var startLoop11 = () => {
  runNextFrame11 = true;
  useDefaultElapsed11 = true;
  if (!isProcessing10)
    onNextFrame10(processFrame11);
};

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints12 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList10 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector10 = focusableElList10.join();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react182 = __toESM(require_react(), 1);
var import_react_fast_compare10 = __toESM(require_react_fast_compare10(), 1);
function useStyleConfigImpl8(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra10();
  const themeStyleConfig = themeKey ? memoizedGet11(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash15.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined10(omit13(rest, ["children"]))
  );
  const stylesRef = (0, import_react182.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare10.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useMultiStyleConfig10(themeKey, props = {}) {
  return useStyleConfigImpl8(themeKey, props);
}

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames10 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps10 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp10(prop) {
  return validHTMLProps10.has(prop) || !allPropNames10.has(prop);
}

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react183 = __toESM(require_react(), 1);
var _a18;
var emotion_styled10 = (_a18 = emotion_styled_browser_esm_default.default) != null ? _a18 : emotion_styled_browser_esm_default;
var toCSSObject10 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter10(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn13(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined10(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled10(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp10;
  }
  const styleObject = toCSSObject10({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled10(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react183.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react183.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory10() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled10, {
    apply(target, thisArg, argArray) {
      return styled10(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled10(element));
      }
      return cache.get(element);
    }
  });
}
var chakra10 = factory10();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react184 = __toESM(require_react(), 1);
function forwardRef18(component) {
  return (0, import_react184.forwardRef)(component);
}

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react185 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react186 = __toESM(require_react(), 1);
function createContext21(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react186.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react186.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react188 = __toESM(require_react(), 1);
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider10, useStyles10] = createContext21({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/editable/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/editable/dist/chunk-6EW6LXRD.mjs
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
var EditableInput = forwardRef18(
  function EditableInput2(props, ref) {
    const { getInputProps } = useEditableContext();
    const styles3 = useEditableStyles();
    const inputProps = getInputProps(props, ref);
    const _className = cx("chakra-editable__input", props.className);
    return (0, import_jsx_runtime70.jsx)(
      chakra10.input,
      {
        ...inputProps,
        __css: {
          outline: 0,
          ...commonStyles,
          ...styles3.input
        },
        className: _className
      }
    );
  }
);
EditableInput.displayName = "EditableInput";

// node_modules/@chakra-ui/editable/dist/chunk-E6ECLSN7.mjs
init_shim();
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
var EditablePreview = forwardRef18(
  function EditablePreview2(props, ref) {
    const { getPreviewProps } = useEditableContext();
    const styles3 = useEditableStyles();
    const previewProps = getPreviewProps(props, ref);
    const _className = cx("chakra-editable__preview", props.className);
    return (0, import_jsx_runtime71.jsx)(
      chakra10.span,
      {
        ...previewProps,
        __css: {
          cursor: "text",
          display: "inline-block",
          ...commonStyles,
          ...styles3.preview
        },
        className: _className
      }
    );
  }
);
EditablePreview.displayName = "EditablePreview";

// node_modules/@chakra-ui/editable/dist/chunk-J2WJP66L.mjs
init_shim();
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
var EditableTextarea = forwardRef18(
  function EditableTextarea2(props, ref) {
    const { getTextareaProps } = useEditableContext();
    const styles3 = useEditableStyles();
    const textareaProps = getTextareaProps(props, ref);
    const _className = cx("chakra-editable__textarea", props.className);
    return (0, import_jsx_runtime72.jsx)(
      chakra10.textarea,
      {
        ...textareaProps,
        __css: {
          outline: 0,
          ...commonStyles,
          ...styles3.textarea
        },
        className: _className
      }
    );
  }
);
EditableTextarea.displayName = "EditableTextarea";

// node_modules/@chakra-ui/editable/dist/chunk-QPHHI44J.mjs
init_shim();

// node_modules/@chakra-ui/editable/dist/chunk-DFL5UVBL.mjs
init_shim();

// node_modules/@chakra-ui/react-use-focus-on-pointer-down/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react-use-event-listener/dist/index.mjs
init_shim();
var import_react190 = __toESM(require_react(), 1);
function useEventListener(target, event, handler, options) {
  const listener = useCallbackRef(handler);
  (0, import_react190.useEffect)(() => {
    const node2 = typeof target === "function" ? target() : target != null ? target : document;
    if (!handler || !node2)
      return;
    node2.addEventListener(event, listener, options);
    return () => {
      node2.removeEventListener(event, listener, options);
    };
  }, [event, target, options, listener, handler]);
  return () => {
    const node2 = typeof target === "function" ? target() : target != null ? target : document;
    node2 == null ? void 0 : node2.removeEventListener(event, listener, options);
  };
}

// node_modules/@chakra-ui/react-use-focus-on-pointer-down/dist/index.mjs
function isRefObject12(val) {
  return "current" in val;
}
var isDom = () => typeof window !== "undefined";
function getPlatform() {
  var _a40;
  const agent = navigator.userAgentData;
  return (_a40 = agent == null ? void 0 : agent.platform) != null ? _a40 : navigator.platform;
}
var vn = (v) => isDom() && v.test(navigator.vendor);
var pt = (v) => isDom() && v.test(getPlatform());
var isApple = () => pt(/mac|iphone|ipad|ipod/i);
var isSafari = () => isApple() && vn(/apple/i);
function useFocusOnPointerDown(props) {
  const { ref, elements, enabled } = props;
  const doc = () => {
    var _a40, _b8;
    return (_b8 = (_a40 = ref.current) == null ? void 0 : _a40.ownerDocument) != null ? _b8 : document;
  };
  useEventListener(doc, "pointerdown", (event) => {
    if (!isSafari() || !enabled)
      return;
    const target = event.target;
    const els = elements != null ? elements : [ref];
    const isValidTarget = els.some((elementOrRef) => {
      const el = isRefObject12(elementOrRef) ? elementOrRef.current : elementOrRef;
      return (el == null ? void 0 : el.contains(target)) || el === target;
    });
    if (doc().activeElement !== target && isValidTarget) {
      event.preventDefault();
      target.focus();
    }
  });
}

// node_modules/@chakra-ui/editable/dist/chunk-DFL5UVBL.mjs
var import_react191 = __toESM(require_react(), 1);
function contains11(parent, child) {
  if (!parent)
    return false;
  return parent === child || parent.contains(child);
}
function useEditable(props = {}) {
  const {
    onChange: onChangeProp,
    onCancel: onCancelProp,
    onSubmit: onSubmitProp,
    value: valueProp,
    isDisabled: isDisabled26,
    defaultValue,
    startWithEditView,
    isPreviewFocusable = true,
    submitOnBlur = true,
    selectAllOnFocus = true,
    placeholder,
    onEdit: onEditCallback,
    ...htmlProps
  } = props;
  const onEditProp = useCallbackRef(onEditCallback);
  const defaultIsEditing = Boolean(startWithEditView && !isDisabled26);
  const [isEditing, setIsEditing] = (0, import_react191.useState)(defaultIsEditing);
  const [value, setValue] = useControllableState({
    defaultValue: defaultValue || "",
    value: valueProp,
    onChange: onChangeProp
  });
  const [prevValue, setPrevValue] = (0, import_react191.useState)(value);
  const inputRef = (0, import_react191.useRef)(null);
  const previewRef = (0, import_react191.useRef)(null);
  const editButtonRef = (0, import_react191.useRef)(null);
  const cancelButtonRef = (0, import_react191.useRef)(null);
  const submitButtonRef = (0, import_react191.useRef)(null);
  useFocusOnPointerDown({
    ref: inputRef,
    enabled: isEditing,
    elements: [cancelButtonRef, submitButtonRef]
  });
  const isInteractive = !isEditing && !isDisabled26;
  useSafeLayoutEffect(() => {
    var _a40, _b8;
    if (isEditing) {
      (_a40 = inputRef.current) == null ? void 0 : _a40.focus();
      if (selectAllOnFocus)
        (_b8 = inputRef.current) == null ? void 0 : _b8.select();
    }
  }, []);
  useUpdateEffect(() => {
    var _a40, _b8, _c5;
    if (!isEditing) {
      (_a40 = editButtonRef.current) == null ? void 0 : _a40.focus();
      return;
    }
    (_b8 = inputRef.current) == null ? void 0 : _b8.focus();
    if (selectAllOnFocus) {
      (_c5 = inputRef.current) == null ? void 0 : _c5.select();
    }
    onEditProp == null ? void 0 : onEditProp();
  }, [isEditing, onEditProp, selectAllOnFocus]);
  const onEdit = (0, import_react191.useCallback)(() => {
    if (isInteractive) {
      setIsEditing(true);
    }
  }, [isInteractive]);
  const onUpdatePrevValue = (0, import_react191.useCallback)(() => {
    setPrevValue(value);
  }, [value]);
  const onCancel = (0, import_react191.useCallback)(() => {
    setIsEditing(false);
    setValue(prevValue);
    onCancelProp == null ? void 0 : onCancelProp(prevValue);
  }, [onCancelProp, setValue, prevValue]);
  const onSubmit = (0, import_react191.useCallback)(() => {
    setIsEditing(false);
    setPrevValue(value);
    onSubmitProp == null ? void 0 : onSubmitProp(value);
  }, [value, onSubmitProp]);
  (0, import_react191.useEffect)(() => {
    if (isEditing)
      return;
    const inputEl = inputRef.current;
    if ((inputEl == null ? void 0 : inputEl.ownerDocument.activeElement) === inputEl) {
      inputEl == null ? void 0 : inputEl.blur();
    }
  }, [isEditing]);
  const onChange = (0, import_react191.useCallback)(
    (event) => {
      setValue(event.currentTarget.value);
    },
    [setValue]
  );
  const onKeyDown = (0, import_react191.useCallback)(
    (event) => {
      const eventKey = event.key;
      const keyMap = {
        Escape: onCancel,
        Enter: (event2) => {
          if (!event2.shiftKey && !event2.metaKey) {
            onSubmit();
          }
        }
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        action(event);
      }
    },
    [onCancel, onSubmit]
  );
  const onKeyDownWithoutSubmit = (0, import_react191.useCallback)(
    (event) => {
      const eventKey = event.key;
      const keyMap = {
        Escape: onCancel
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        action(event);
      }
    },
    [onCancel]
  );
  const isValueEmpty = value.length === 0;
  const onBlur3 = (0, import_react191.useCallback)(
    (event) => {
      var _a40;
      if (!isEditing)
        return;
      const doc = event.currentTarget.ownerDocument;
      const relatedTarget = (_a40 = event.relatedTarget) != null ? _a40 : doc.activeElement;
      const targetIsCancel = contains11(cancelButtonRef.current, relatedTarget);
      const targetIsSubmit = contains11(submitButtonRef.current, relatedTarget);
      const isValidBlur = !targetIsCancel && !targetIsSubmit;
      if (isValidBlur) {
        if (submitOnBlur) {
          onSubmit();
        } else {
          onCancel();
        }
      }
    },
    [submitOnBlur, onSubmit, onCancel, isEditing]
  );
  const getPreviewProps = (0, import_react191.useCallback)(
    (props2 = {}, ref = null) => {
      const tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;
      return {
        ...props2,
        ref: mergeRefs4(ref, previewRef),
        children: isValueEmpty ? placeholder : value,
        hidden: isEditing,
        "aria-disabled": ariaAttr(isDisabled26),
        tabIndex,
        onFocus: callAllHandlers(props2.onFocus, onEdit, onUpdatePrevValue)
      };
    },
    [
      isDisabled26,
      isEditing,
      isInteractive,
      isPreviewFocusable,
      isValueEmpty,
      onEdit,
      onUpdatePrevValue,
      placeholder,
      value
    ]
  );
  const getInputProps = (0, import_react191.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      hidden: !isEditing,
      placeholder,
      ref: mergeRefs4(ref, inputRef),
      disabled: isDisabled26,
      "aria-disabled": ariaAttr(isDisabled26),
      value,
      onBlur: callAllHandlers(props2.onBlur, onBlur3),
      onChange: callAllHandlers(props2.onChange, onChange),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)
    }),
    [
      isDisabled26,
      isEditing,
      onBlur3,
      onChange,
      onKeyDown,
      onUpdatePrevValue,
      placeholder,
      value
    ]
  );
  const getTextareaProps = (0, import_react191.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      hidden: !isEditing,
      placeholder,
      ref: mergeRefs4(ref, inputRef),
      disabled: isDisabled26,
      "aria-disabled": ariaAttr(isDisabled26),
      value,
      onBlur: callAllHandlers(props2.onBlur, onBlur3),
      onChange: callAllHandlers(props2.onChange, onChange),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDownWithoutSubmit),
      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)
    }),
    [
      isDisabled26,
      isEditing,
      onBlur3,
      onChange,
      onKeyDownWithoutSubmit,
      onUpdatePrevValue,
      placeholder,
      value
    ]
  );
  const getEditButtonProps = (0, import_react191.useCallback)(
    (props2 = {}, ref = null) => ({
      "aria-label": "Edit",
      ...props2,
      type: "button",
      onClick: callAllHandlers(props2.onClick, onEdit),
      ref: mergeRefs4(ref, editButtonRef),
      disabled: isDisabled26
    }),
    [onEdit, isDisabled26]
  );
  const getSubmitButtonProps = (0, import_react191.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      "aria-label": "Submit",
      ref: mergeRefs4(submitButtonRef, ref),
      type: "button",
      onClick: callAllHandlers(props2.onClick, onSubmit),
      disabled: isDisabled26
    }),
    [onSubmit, isDisabled26]
  );
  const getCancelButtonProps = (0, import_react191.useCallback)(
    (props2 = {}, ref = null) => ({
      "aria-label": "Cancel",
      id: "cancel",
      ...props2,
      ref: mergeRefs4(cancelButtonRef, ref),
      type: "button",
      onClick: callAllHandlers(props2.onClick, onCancel),
      disabled: isDisabled26
    }),
    [onCancel, isDisabled26]
  );
  return {
    isEditing,
    isDisabled: isDisabled26,
    isValueEmpty,
    value,
    onEdit,
    onCancel,
    onSubmit,
    getPreviewProps,
    getInputProps,
    getTextareaProps,
    getEditButtonProps,
    getSubmitButtonProps,
    getCancelButtonProps,
    htmlProps
  };
}

// node_modules/@chakra-ui/editable/dist/chunk-QPHHI44J.mjs
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
var Editable = forwardRef18(function Editable2(props, ref) {
  const styles3 = useMultiStyleConfig10("Editable", props);
  const ownProps = omitThemingProps(props);
  const { htmlProps, ...context } = useEditable(ownProps);
  const { isEditing, onSubmit, onCancel, onEdit } = context;
  const _className = cx("chakra-editable", props.className);
  const children = runIfFn(props.children, {
    isEditing,
    onSubmit,
    onCancel,
    onEdit
  });
  return (0, import_jsx_runtime73.jsx)(EditableProvider, { value: context, children: (0, import_jsx_runtime73.jsx)(EditableStylesProvider, { value: styles3, children: (0, import_jsx_runtime73.jsx)(
    chakra10.div,
    {
      ref,
      ...htmlProps,
      className: _className,
      children
    }
  ) }) });
});
Editable.displayName = "Editable";

// node_modules/@chakra-ui/editable/dist/chunk-CPGHDSNL.mjs
init_shim();
function useEditableControls() {
  const {
    isEditing,
    getEditButtonProps,
    getCancelButtonProps,
    getSubmitButtonProps
  } = useEditableContext();
  return {
    isEditing,
    getEditButtonProps,
    getCancelButtonProps,
    getSubmitButtonProps
  };
}

// node_modules/@chakra-ui/focus-lock/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/focus-lock/dist/chunk-CG74IXYP.mjs
init_shim();

// node_modules/react-focus-lock/dist/es2015/index.js
init_shim();

// node_modules/react-focus-lock/dist/es2015/Combination.js
init_shim();
init_objectWithoutPropertiesLoose();
init_extends();
var React25 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/Lock.js
init_shim();
init_extends();
var React23 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/focus-lock/dist/es2015/constants.js
init_shim();
var FOCUS_GROUP = "data-focus-lock";
var FOCUS_DISABLED = "data-focus-lock-disabled";
var FOCUS_ALLOW = "data-no-focus-lock";
var FOCUS_AUTO = "data-autofocus-inside";
var FOCUS_NO_AUTOFOCUS = "data-no-autofocus";

// node_modules/react-focus-lock/dist/es2015/Lock.js
init_es2015();
var import_react192 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/FocusGuard.js
init_shim();
var React22 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var hiddenGuard = {
  width: "1px",
  height: "0px",
  padding: 0,
  overflow: "hidden",
  position: "fixed",
  top: "1px",
  left: "1px"
};
var InFocusGuard = function InFocusGuard2(_ref2) {
  var children = _ref2.children;
  return React22.createElement(React22.Fragment, null, React22.createElement("div", {
    key: "guard-first",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }), children, children && React22.createElement("div", {
    key: "guard-last",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }));
};
InFocusGuard.propTypes = import_process.default.env.NODE_ENV !== "production" ? {
  children: import_prop_types.default.node
} : {};
InFocusGuard.defaultProps = {
  children: null
};

// node_modules/react-focus-lock/dist/es2015/medium.js
init_shim();
init_es20152();
var mediumFocus = createMedium({}, function(_ref2) {
  var target = _ref2.target, currentTarget = _ref2.currentTarget;
  return {
    target,
    currentTarget
  };
});
var mediumBlur = createMedium();
var mediumEffect = createMedium();
var mediumSidecar = createSidecarMedium({
  async: true
});

// node_modules/react-focus-lock/dist/es2015/Lock.js
var emptyArray = [];
var FocusLock = React23.forwardRef(function FocusLockUI(props, parentRef) {
  var _extends2;
  var _React$useState = React23.useState(), realObserved = _React$useState[0], setObserved = _React$useState[1];
  var observed = React23.useRef();
  var isActive = React23.useRef(false);
  var originalFocusedElement = React23.useRef(null);
  var children = props.children, disabled = props.disabled, noFocusGuards = props.noFocusGuards, persistentFocus = props.persistentFocus, crossFrame = props.crossFrame, autoFocus = props.autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, hasPositiveIndices = props.hasPositiveIndices, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container3 = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar = props.sideCar, shouldReturnFocus = props.returnFocus, focusOptions = props.focusOptions, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
  var _React$useState2 = React23.useState({}), id4 = _React$useState2[0];
  var onActivation = React23.useCallback(function() {
    originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;
    if (observed.current && onActivationCallback) {
      onActivationCallback(observed.current);
    }
    isActive.current = true;
  }, [onActivationCallback]);
  var onDeactivation = React23.useCallback(function() {
    isActive.current = false;
    if (onDeactivationCallback) {
      onDeactivationCallback(observed.current);
    }
  }, [onDeactivationCallback]);
  (0, import_react192.useEffect)(function() {
    if (!disabled) {
      originalFocusedElement.current = null;
    }
  }, []);
  var returnFocus = React23.useCallback(function(allowDefer) {
    var returnFocusTo = originalFocusedElement.current;
    if (returnFocusTo && returnFocusTo.focus) {
      var howToReturnFocus = typeof shouldReturnFocus === "function" ? shouldReturnFocus(returnFocusTo) : shouldReturnFocus;
      if (howToReturnFocus) {
        var returnFocusOptions = typeof howToReturnFocus === "object" ? howToReturnFocus : void 0;
        originalFocusedElement.current = null;
        if (allowDefer) {
          Promise.resolve().then(function() {
            return returnFocusTo.focus(returnFocusOptions);
          });
        } else {
          returnFocusTo.focus(returnFocusOptions);
        }
      }
    }
  }, [shouldReturnFocus]);
  var onFocus3 = React23.useCallback(function(event) {
    if (isActive.current) {
      mediumFocus.useMedium(event);
    }
  }, []);
  var onBlur3 = mediumBlur.useMedium;
  var setObserveNode = React23.useCallback(function(newObserved) {
    if (observed.current !== newObserved) {
      observed.current = newObserved;
      setObserved(newObserved);
    }
  }, []);
  if (import_process.default.env.NODE_ENV !== "production") {
    if (typeof allowTextSelection !== "undefined") {
      console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default");
    }
    React23.useEffect(function() {
      if (!observed.current && typeof Container3 !== "string") {
        console.error("FocusLock: could not obtain ref to internal node");
      }
    }, []);
  }
  var lockProps = _extends((_extends2 = {}, _extends2[FOCUS_DISABLED] = disabled && "disabled", _extends2[FOCUS_GROUP] = group, _extends2), containerProps);
  var hasLeadingGuards = noFocusGuards !== true;
  var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
  var mergedRef = useMergeRefs([parentRef, setObserveNode]);
  return React23.createElement(React23.Fragment, null, hasLeadingGuards && [
    React23.createElement("div", {
      key: "guard-first",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 0,
      style: hiddenGuard
    }),
    hasPositiveIndices ? React23.createElement("div", {
      key: "guard-nearest",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 1,
      style: hiddenGuard
    }) : null
  ], !disabled && React23.createElement(SideCar, {
    id: id4,
    sideCar: mediumSidecar,
    observed: realObserved,
    disabled,
    persistentFocus,
    crossFrame,
    autoFocus,
    whiteList,
    shards,
    onActivation,
    onDeactivation,
    returnFocus,
    focusOptions
  }), React23.createElement(Container3, _extends({
    ref: mergedRef
  }, lockProps, {
    className,
    onBlur: onBlur3,
    onFocus: onFocus3
  }), children), hasTailingGuards && React23.createElement("div", {
    "data-focus-guard": true,
    tabIndex: disabled ? -1 : 0,
    style: hiddenGuard
  }));
});
FocusLock.propTypes = import_process.default.env.NODE_ENV !== "production" ? {
  children: import_prop_types2.node,
  disabled: import_prop_types2.bool,
  returnFocus: (0, import_prop_types2.oneOfType)([import_prop_types2.bool, import_prop_types2.object, import_prop_types2.func]),
  focusOptions: import_prop_types2.object,
  noFocusGuards: import_prop_types2.bool,
  hasPositiveIndices: import_prop_types2.bool,
  allowTextSelection: import_prop_types2.bool,
  autoFocus: import_prop_types2.bool,
  persistentFocus: import_prop_types2.bool,
  crossFrame: import_prop_types2.bool,
  group: import_prop_types2.string,
  className: import_prop_types2.string,
  whiteList: import_prop_types2.func,
  shards: (0, import_prop_types2.arrayOf)(import_prop_types2.any),
  as: (0, import_prop_types2.oneOfType)([import_prop_types2.string, import_prop_types2.func, import_prop_types2.object]),
  lockProps: import_prop_types2.object,
  onActivation: import_prop_types2.func,
  onDeactivation: import_prop_types2.func,
  sideCar: import_prop_types2.any.isRequired
} : {};
FocusLock.defaultProps = {
  children: void 0,
  disabled: false,
  returnFocus: false,
  focusOptions: void 0,
  noFocusGuards: false,
  autoFocus: true,
  persistentFocus: false,
  crossFrame: true,
  hasPositiveIndices: void 0,
  allowTextSelection: void 0,
  group: void 0,
  className: void 0,
  whiteList: void 0,
  shards: void 0,
  as: "div",
  lockProps: {},
  onActivation: void 0,
  onDeactivation: void 0
};
var Lock_default = FocusLock;

// node_modules/react-focus-lock/dist/es2015/Trap.js
init_shim();
var React24 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
init_index_es();

// node_modules/focus-lock/dist/es2015/index.js
init_shim();

// node_modules/focus-lock/dist/es2015/focusInside.js
init_shim();

// node_modules/focus-lock/dist/es2015/utils/DOMutils.js
init_shim();

// node_modules/focus-lock/dist/es2015/utils/array.js
init_shim();
var toArray = function(a) {
  var ret = Array(a.length);
  for (var i = 0; i < a.length; ++i) {
    ret[i] = a[i];
  }
  return ret;
};
var asArray = function(a) {
  return Array.isArray(a) ? a : [a];
};
var getFirst = function(a) {
  return Array.isArray(a) ? a[0] : a;
};

// node_modules/focus-lock/dist/es2015/utils/is.js
init_shim();
var isElementHidden = function(node2) {
  if (node2.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }
  var computedStyle = window.getComputedStyle(node2, null);
  if (!computedStyle || !computedStyle.getPropertyValue) {
    return false;
  }
  return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
};
var getParentNode = function(node2) {
  return node2.parentNode && node2.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? node2.parentNode.host : node2.parentNode;
};
var isTopNode = function(node2) {
  return node2 === document || node2 && node2.nodeType === Node.DOCUMENT_NODE;
};
var isVisibleUncached = function(node2, checkParent) {
  return !node2 || isTopNode(node2) || !isElementHidden(node2) && checkParent(getParentNode(node2));
};
var isVisibleCached = function(visibilityCache, node2) {
  var cached = visibilityCache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isVisibleUncached(node2, isVisibleCached.bind(void 0, visibilityCache));
  visibilityCache.set(node2, result);
  return result;
};
var isAutoFocusAllowedUncached = function(node2, checkParent) {
  return node2 && !isTopNode(node2) ? isAutoFocusAllowed(node2) ? checkParent(getParentNode(node2)) : false : true;
};
var isAutoFocusAllowedCached = function(cache, node2) {
  var cached = cache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isAutoFocusAllowedUncached(node2, isAutoFocusAllowedCached.bind(void 0, cache));
  cache.set(node2, result);
  return result;
};
var getDataset = function(node2) {
  return node2.dataset;
};
var isHTMLButtonElement = function(node2) {
  return node2.tagName === "BUTTON";
};
var isHTMLInputElement = function(node2) {
  return node2.tagName === "INPUT";
};
var isRadioElement = function(node2) {
  return isHTMLInputElement(node2) && node2.type === "radio";
};
var notHiddenInput = function(node2) {
  return !((isHTMLInputElement(node2) || isHTMLButtonElement(node2)) && (node2.type === "hidden" || node2.disabled));
};
var isAutoFocusAllowed = function(node2) {
  var attribute = node2.getAttribute(FOCUS_NO_AUTOFOCUS);
  return ![true, "true", ""].includes(attribute);
};
var isGuard = function(node2) {
  var _a40;
  return Boolean(node2 && ((_a40 = getDataset(node2)) === null || _a40 === void 0 ? void 0 : _a40.focusGuard));
};
var isNotAGuard = function(node2) {
  return !isGuard(node2);
};
var isDefined11 = function(x) {
  return Boolean(x);
};

// node_modules/focus-lock/dist/es2015/utils/tabOrder.js
init_shim();
var tabSort = function(a, b) {
  var tabDiff = a.tabIndex - b.tabIndex;
  var indexDiff = a.index - b.index;
  if (tabDiff) {
    if (!a.tabIndex) {
      return 1;
    }
    if (!b.tabIndex) {
      return -1;
    }
  }
  return tabDiff || indexDiff;
};
var orderByTabIndex = function(nodes, filterNegative, keepGuards) {
  return toArray(nodes).map(function(node2, index) {
    return {
      node: node2,
      index,
      tabIndex: keepGuards && node2.tabIndex === -1 ? (node2.dataset || {}).focusGuard ? 0 : -1 : node2.tabIndex
    };
  }).filter(function(data) {
    return !filterNegative || data.tabIndex >= 0;
  }).sort(tabSort);
};

// node_modules/focus-lock/dist/es2015/utils/tabUtils.js
init_shim();

// node_modules/focus-lock/dist/es2015/utils/tabbables.js
init_shim();
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
];

// node_modules/focus-lock/dist/es2015/utils/tabUtils.js
var queryTabbables = tabbables.join(",");
var queryGuardTabbables = "".concat(queryTabbables, ", [data-focus-guard]");
var getFocusablesWithShadowDom = function(parent, withGuards) {
  return toArray((parent.shadowRoot || parent).children).reduce(function(acc, child) {
    return acc.concat(child.matches(withGuards ? queryGuardTabbables : queryTabbables) ? [child] : [], getFocusablesWithShadowDom(child));
  }, []);
};
var getFocusablesWithIFrame = function(parent, withGuards) {
  var _a40;
  if (parent instanceof HTMLIFrameElement && ((_a40 = parent.contentDocument) === null || _a40 === void 0 ? void 0 : _a40.body)) {
    return getFocusables([parent.contentDocument.body], withGuards);
  }
  return [parent];
};
var getFocusables = function(parents, withGuards) {
  return parents.reduce(function(acc, parent) {
    var _a40;
    var focusableWithShadowDom = getFocusablesWithShadowDom(parent, withGuards);
    var focusableWithIframes = (_a40 = []).concat.apply(_a40, focusableWithShadowDom.map(function(node2) {
      return getFocusablesWithIFrame(node2, withGuards);
    }));
    return acc.concat(
      focusableWithIframes,
      parent.parentNode ? toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node2) {
        return node2 === parent;
      }) : []
    );
  }, []);
};
var getParentAutofocusables = function(parent) {
  var parentFocus = parent.querySelectorAll("[".concat(FOCUS_AUTO, "]"));
  return toArray(parentFocus).map(function(node2) {
    return getFocusables([node2]);
  }).reduce(function(acc, nodes) {
    return acc.concat(nodes);
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/DOMutils.js
var filterFocusable = function(nodes, visibilityCache) {
  return toArray(nodes).filter(function(node2) {
    return isVisibleCached(visibilityCache, node2);
  }).filter(function(node2) {
    return notHiddenInput(node2);
  });
};
var filterAutoFocusable = function(nodes, cache) {
  if (cache === void 0) {
    cache = /* @__PURE__ */ new Map();
  }
  return toArray(nodes).filter(function(node2) {
    return isAutoFocusAllowedCached(cache, node2);
  });
};
var getTabbableNodes = function(topNodes, visibilityCache, withGuards) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
};
var getAllTabbableNodes = function(topNodes, visibilityCache) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
};
var parentAutofocusables = function(topNode, visibilityCache) {
  return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
};
var contains12 = function(scope, element) {
  if (scope.shadowRoot) {
    return contains12(scope.shadowRoot, element);
  } else {
    if (Object.getPrototypeOf(scope).contains !== void 0 && Object.getPrototypeOf(scope).contains.call(scope, element)) {
      return true;
    }
    return toArray(scope.children).some(function(child) {
      var _a40;
      if (child instanceof HTMLIFrameElement) {
        var iframeBody = (_a40 = child.contentDocument) === null || _a40 === void 0 ? void 0 : _a40.body;
        if (iframeBody) {
          return contains12(iframeBody, element);
        }
        return false;
      }
      return contains12(child, element);
    });
  }
};

// node_modules/focus-lock/dist/es2015/utils/all-affected.js
init_shim();
var filterNested = function(nodes) {
  var contained = /* @__PURE__ */ new Set();
  var l = nodes.length;
  for (var i = 0; i < l; i += 1) {
    for (var j = i + 1; j < l; j += 1) {
      var position2 = nodes[i].compareDocumentPosition(nodes[j]);
      if ((position2 & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
        contained.add(j);
      }
      if ((position2 & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
        contained.add(i);
      }
    }
  }
  return nodes.filter(function(_, index) {
    return !contained.has(index);
  });
};
var getTopParent = function(node2) {
  return node2.parentNode ? getTopParent(node2.parentNode) : node2;
};
var getAllAffectedNodes = function(node2) {
  var nodes = asArray(node2);
  return nodes.filter(Boolean).reduce(function(acc, currentNode) {
    var group = currentNode.getAttribute(FOCUS_GROUP);
    acc.push.apply(acc, group ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[".concat(FOCUS_GROUP, '="').concat(group, '"]:not([').concat(FOCUS_DISABLED, '="disabled"])')))) : [currentNode]);
    return acc;
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/getActiveElement.js
init_shim();

// node_modules/focus-lock/dist/es2015/utils/safe.js
init_shim();
var safeProbe = function(cb) {
  try {
    return cb();
  } catch (e) {
    return void 0;
  }
};

// node_modules/focus-lock/dist/es2015/utils/getActiveElement.js
var getActiveElement11 = function(inDocument) {
  if (inDocument === void 0) {
    inDocument = document;
  }
  if (!inDocument || !inDocument.activeElement) {
    return void 0;
  }
  var activeElement = inDocument.activeElement;
  return activeElement.shadowRoot ? getActiveElement11(activeElement.shadowRoot) : activeElement instanceof HTMLIFrameElement && safeProbe(function() {
    return activeElement.contentWindow.document;
  }) ? getActiveElement11(activeElement.contentWindow.document) : activeElement;
};

// node_modules/focus-lock/dist/es2015/focusInside.js
var focusInFrame = function(frame27, activeElement) {
  return frame27 === activeElement;
};
var focusInsideIframe = function(topNode, activeElement) {
  return Boolean(toArray(topNode.querySelectorAll("iframe")).some(function(node2) {
    return focusInFrame(node2, activeElement);
  }));
};
var focusInside = function(topNode, activeElement) {
  if (activeElement === void 0) {
    activeElement = getActiveElement11(getFirst(topNode).ownerDocument);
  }
  if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
    return false;
  }
  return getAllAffectedNodes(topNode).some(function(node2) {
    return contains12(node2, activeElement) || focusInsideIframe(node2, activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/focusIsHidden.js
init_shim();
var focusIsHidden = function(inDocument) {
  if (inDocument === void 0) {
    inDocument = document;
  }
  var activeElement = getActiveElement11(inDocument);
  if (!activeElement) {
    return false;
  }
  return toArray(inDocument.querySelectorAll("[".concat(FOCUS_ALLOW, "]"))).some(function(node2) {
    return contains12(node2, activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/focusMerge.js
init_shim();

// node_modules/focus-lock/dist/es2015/solver.js
init_shim();

// node_modules/focus-lock/dist/es2015/utils/correctFocus.js
init_shim();
var findSelectedRadio = function(node2, nodes) {
  return nodes.filter(isRadioElement).filter(function(el) {
    return el.name === node2.name;
  }).filter(function(el) {
    return el.checked;
  })[0] || node2;
};
var correctNode = function(node2, nodes) {
  if (isRadioElement(node2) && node2.name) {
    return findSelectedRadio(node2, nodes);
  }
  return node2;
};
var correctNodes = function(nodes) {
  var resultSet = /* @__PURE__ */ new Set();
  nodes.forEach(function(node2) {
    return resultSet.add(correctNode(node2, nodes));
  });
  return nodes.filter(function(node2) {
    return resultSet.has(node2);
  });
};

// node_modules/focus-lock/dist/es2015/utils/firstFocus.js
init_shim();
var pickFirstFocus = function(nodes) {
  if (nodes[0] && nodes.length > 1) {
    return correctNode(nodes[0], nodes);
  }
  return nodes[0];
};
var pickFocusable = function(nodes, index) {
  if (nodes.length > 1) {
    return nodes.indexOf(correctNode(nodes[index], nodes));
  }
  return index;
};

// node_modules/focus-lock/dist/es2015/solver.js
var NEW_FOCUS = "NEW_FOCUS";
var newFocus = function(innerNodes, outerNodes, activeElement, lastNode) {
  var cnt = innerNodes.length;
  var firstFocus = innerNodes[0];
  var lastFocus = innerNodes[cnt - 1];
  var isOnGuard = isGuard(activeElement);
  if (activeElement && innerNodes.indexOf(activeElement) >= 0) {
    return void 0;
  }
  var activeIndex = activeElement !== void 0 ? outerNodes.indexOf(activeElement) : -1;
  var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
  var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
  var indexDiff = activeIndex - lastIndex;
  var firstNodeIndex = outerNodes.indexOf(firstFocus);
  var lastNodeIndex = outerNodes.indexOf(lastFocus);
  var correctedNodes = correctNodes(outerNodes);
  var correctedIndex = activeElement !== void 0 ? correctedNodes.indexOf(activeElement) : -1;
  var correctedIndexDiff = correctedIndex - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
  var returnFirstNode = pickFocusable(innerNodes, 0);
  var returnLastNode = pickFocusable(innerNodes, cnt - 1);
  if (activeIndex === -1 || lastNodeInside === -1) {
    return NEW_FOCUS;
  }
  if (!indexDiff && lastNodeInside >= 0) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnLastNode;
  }
  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnFirstNode;
  }
  if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex) {
    return returnLastNode;
  }
  if (activeIndex > lastNodeIndex) {
    return returnFirstNode;
  }
  if (indexDiff) {
    if (Math.abs(indexDiff) > 1) {
      return lastNodeInside;
    }
    return (cnt + lastNodeInside + indexDiff) % cnt;
  }
  return void 0;
};

// node_modules/focus-lock/dist/es2015/utils/auto-focus.js
init_shim();
var findAutoFocused = function(autoFocusables) {
  return function(node2) {
    var _a40;
    var autofocus = (_a40 = getDataset(node2)) === null || _a40 === void 0 ? void 0 : _a40.autofocus;
    return node2.autofocus || autofocus !== void 0 && autofocus !== "false" || autoFocusables.indexOf(node2) >= 0;
  };
};
var pickAutofocus = function(nodesIndexes, orderedNodes, groups) {
  var nodes = nodesIndexes.map(function(_a40) {
    var node2 = _a40.node;
    return node2;
  });
  var autoFocusable = filterAutoFocusable(nodes.filter(findAutoFocused(groups)));
  if (autoFocusable && autoFocusable.length) {
    return pickFirstFocus(autoFocusable);
  }
  return pickFirstFocus(filterAutoFocusable(orderedNodes));
};

// node_modules/focus-lock/dist/es2015/utils/parenting.js
init_shim();
var getParents = function(node2, parents) {
  if (parents === void 0) {
    parents = [];
  }
  parents.push(node2);
  if (node2.parentNode) {
    getParents(node2.parentNode.host || node2.parentNode, parents);
  }
  return parents;
};
var getCommonParent = function(nodeA, nodeB) {
  var parentsA = getParents(nodeA);
  var parentsB = getParents(nodeB);
  for (var i = 0; i < parentsA.length; i += 1) {
    var currentParent = parentsA[i];
    if (parentsB.indexOf(currentParent) >= 0) {
      return currentParent;
    }
  }
  return false;
};
var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
  var activeElements = asArray(baseActiveElement);
  var leftEntries = asArray(leftEntry);
  var activeElement = activeElements[0];
  var topCommon = false;
  leftEntries.filter(Boolean).forEach(function(entry) {
    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
    rightEntries.filter(Boolean).forEach(function(subEntry) {
      var common = getCommonParent(activeElement, subEntry);
      if (common) {
        if (!topCommon || contains12(common, topCommon)) {
          topCommon = common;
        } else {
          topCommon = getCommonParent(common, topCommon);
        }
      }
    });
  });
  return topCommon;
};
var allParentAutofocusables = function(entries, visibilityCache) {
  return entries.reduce(function(acc, node2) {
    return acc.concat(parentAutofocusables(node2, visibilityCache));
  }, []);
};

// node_modules/focus-lock/dist/es2015/focusMerge.js
var reorderNodes = function(srcNodes, dstNodes) {
  var remap = /* @__PURE__ */ new Map();
  dstNodes.forEach(function(entity) {
    return remap.set(entity.node, entity);
  });
  return srcNodes.map(function(node2) {
    return remap.get(node2);
  }).filter(isDefined11);
};
var getFocusMerge = function(topNode, lastNode) {
  var activeElement = getActiveElement11(asArray(topNode).length > 0 ? document : getFirst(topNode).ownerDocument);
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var anyFocusable = getAllTabbableNodes(entries, visibilityCache);
  var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a40) {
    var node2 = _a40.node;
    return isNotAGuard(node2);
  });
  if (!innerElements[0]) {
    innerElements = anyFocusable;
    if (!innerElements[0]) {
      return void 0;
    }
  }
  var outerNodes = getAllTabbableNodes([commonParent], visibilityCache).map(function(_a40) {
    var node2 = _a40.node;
    return node2;
  });
  var orderedInnerElements = reorderNodes(outerNodes, innerElements);
  var innerNodes = orderedInnerElements.map(function(_a40) {
    var node2 = _a40.node;
    return node2;
  });
  var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);
  if (newId === NEW_FOCUS) {
    var focusNode = pickAutofocus(anyFocusable, innerNodes, allParentAutofocusables(entries, visibilityCache));
    if (focusNode) {
      return { node: focusNode };
    } else {
      console.warn("focus-lock: cannot find any node to move focus into");
      return void 0;
    }
  }
  if (newId === void 0) {
    return newId;
  }
  return orderedInnerElements[newId];
};

// node_modules/focus-lock/dist/es2015/focusables.js
init_shim();
var getFocusabledIn = function(topNode) {
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var outerNodes = getTabbableNodes([commonParent], visibilityCache, true);
  var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a40) {
    var node2 = _a40.node;
    return isNotAGuard(node2);
  }).map(function(_a40) {
    var node2 = _a40.node;
    return node2;
  });
  return outerNodes.map(function(_a40) {
    var node2 = _a40.node, index = _a40.index;
    return {
      node: node2,
      index,
      lockItem: innerElements.indexOf(node2) >= 0,
      guard: isGuard(node2)
    };
  });
};

// node_modules/focus-lock/dist/es2015/setFocus.js
init_shim();
var focusOn = function(target, focusOptions) {
  if ("focus" in target) {
    target.focus(focusOptions);
  }
  if ("contentWindow" in target && target.contentWindow) {
    target.contentWindow.focus();
  }
};
var guardCount = 0;
var lockDisabled = false;
var setFocus = function(topNode, lastNode, options) {
  if (options === void 0) {
    options = {};
  }
  var focusable = getFocusMerge(topNode, lastNode);
  if (lockDisabled) {
    return;
  }
  if (focusable) {
    if (guardCount > 2) {
      console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
      lockDisabled = true;
      setTimeout(function() {
        lockDisabled = false;
      }, 1);
      return;
    }
    guardCount++;
    focusOn(focusable.node, options.focusOptions);
    guardCount--;
  }
};

// node_modules/focus-lock/dist/es2015/sibling.js
init_shim();

// node_modules/focus-lock/dist/es2015/tabHook.js
init_shim();

// node_modules/focus-lock/dist/es2015/index.js
var es2015_default = setFocus;

// node_modules/react-focus-lock/dist/es2015/util.js
init_shim();
function deferAction(action) {
  var _window = window, setImmediate = _window.setImmediate;
  if (typeof setImmediate !== "undefined") {
    setImmediate(action);
  } else {
    setTimeout(action, 1);
  }
}
var inlineProp = function inlineProp2(name, value) {
  var obj = {};
  obj[name] = value;
  return obj;
};

// node_modules/react-focus-lock/dist/es2015/Trap.js
var focusOnBody = function focusOnBody2() {
  return document && document.activeElement === document.body;
};
var isFreeFocus = function isFreeFocus2() {
  return focusOnBody() || focusIsHidden();
};
var lastActiveTrap = null;
var lastActiveFocus = null;
var lastPortaledElement = null;
var focusWasOutsideWindow = false;
var defaultWhitelist = function defaultWhitelist2() {
  return true;
};
var focusWhitelisted = function focusWhitelisted2(activeElement) {
  return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
};
var recordPortal = function recordPortal2(observerNode, portaledElement) {
  lastPortaledElement = {
    observerNode,
    portaledElement
  };
};
var focusIsPortaledPair = function focusIsPortaledPair2(element) {
  return lastPortaledElement && lastPortaledElement.portaledElement === element;
};
function autoGuard(startIndex, end, step, allNodes) {
  var lastGuard = null;
  var i = startIndex;
  do {
    var item = allNodes[i];
    if (item.guard) {
      if (item.node.dataset.focusAutoGuard) {
        lastGuard = item;
      }
    } else if (item.lockItem) {
      if (i !== startIndex) {
        return;
      }
      lastGuard = null;
    } else {
      break;
    }
  } while ((i += step) !== end);
  if (lastGuard) {
    lastGuard.node.tabIndex = 0;
  }
}
var extractRef = function extractRef2(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var focusWasOutside = function focusWasOutside2(crossFrameOption) {
  if (crossFrameOption) {
    return Boolean(focusWasOutsideWindow);
  }
  return focusWasOutsideWindow === "meanwhile";
};
var checkInHost = function checkInHost2(check, el, boundary) {
  return el && (el.host === check && (!el.activeElement || boundary.contains(el.activeElement)) || el.parentNode && checkInHost2(check, el.parentNode, boundary));
};
var withinHost = function withinHost2(activeElement, workingArea) {
  return workingArea.some(function(area) {
    return checkInHost(activeElement, area, area);
  });
};
var activateTrap = function activateTrap2() {
  var result = false;
  if (lastActiveTrap) {
    var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame, focusOptions = _lastActiveTrap.focusOptions;
    var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
    var activeElement = document && document.activeElement;
    if (workingNode) {
      var workingArea = [workingNode].concat(shards.map(extractRef).filter(Boolean));
      if (!activeElement || focusWhitelisted(activeElement)) {
        if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
          if (workingNode && !(focusInside(workingArea) || activeElement && withinHost(activeElement, workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
            if (document && !lastActiveFocus && activeElement && !autoFocus) {
              if (activeElement.blur) {
                activeElement.blur();
              }
              document.body.focus();
            } else {
              result = es2015_default(workingArea, lastActiveFocus, {
                focusOptions
              });
              lastPortaledElement = {};
            }
          }
          focusWasOutsideWindow = false;
          lastActiveFocus = document && document.activeElement;
        }
      }
      if (document) {
        var newActiveElement = document && document.activeElement;
        var allNodes = getFocusabledIn(workingArea);
        var focusedIndex = allNodes.map(function(_ref2) {
          var node2 = _ref2.node;
          return node2;
        }).indexOf(newActiveElement);
        if (focusedIndex > -1) {
          allNodes.filter(function(_ref2) {
            var guard2 = _ref2.guard, node2 = _ref2.node;
            return guard2 && node2.dataset.focusAutoGuard;
          }).forEach(function(_ref3) {
            var node2 = _ref3.node;
            return node2.removeAttribute("tabIndex");
          });
          autoGuard(focusedIndex, allNodes.length, 1, allNodes);
          autoGuard(focusedIndex, -1, -1, allNodes);
        }
      }
    }
  }
  return result;
};
var onTrap = function onTrap2(event) {
  if (activateTrap() && event) {
    event.stopPropagation();
    event.preventDefault();
  }
};
var onBlur = function onBlur2() {
  return deferAction(activateTrap);
};
var onFocus = function onFocus2(event) {
  var source = event.target;
  var currentNode = event.currentTarget;
  if (!currentNode.contains(source)) {
    recordPortal(currentNode, source);
  }
};
var FocusWatcher = function FocusWatcher2() {
  return null;
};
var FocusTrap = function FocusTrap2(_ref4) {
  var children = _ref4.children;
  return React24.createElement("div", {
    onBlur,
    onFocus
  }, children);
};
FocusTrap.propTypes = import_process.default.env.NODE_ENV !== "production" ? {
  children: import_prop_types3.default.node.isRequired
} : {};
var onWindowBlur2 = function onWindowBlur3() {
  focusWasOutsideWindow = "just";
  setTimeout(function() {
    focusWasOutsideWindow = "meanwhile";
  }, 0);
};
var attachHandler = function attachHandler2() {
  document.addEventListener("focusin", onTrap);
  document.addEventListener("focusout", onBlur);
  window.addEventListener("blur", onWindowBlur2);
};
var detachHandler = function detachHandler2() {
  document.removeEventListener("focusin", onTrap);
  document.removeEventListener("focusout", onBlur);
  window.removeEventListener("blur", onWindowBlur2);
};
function reducePropsToState(propsList) {
  return propsList.filter(function(_ref5) {
    var disabled = _ref5.disabled;
    return !disabled;
  });
}
function handleStateChangeOnClient(traps) {
  var trap = traps.slice(-1)[0];
  if (trap && !lastActiveTrap) {
    attachHandler();
  }
  var lastTrap = lastActiveTrap;
  var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
  lastActiveTrap = trap;
  if (lastTrap && !sameTrap) {
    lastTrap.onDeactivation();
    if (!traps.filter(function(_ref6) {
      var id4 = _ref6.id;
      return id4 === lastTrap.id;
    }).length) {
      lastTrap.returnFocus(!trap);
    }
  }
  if (trap) {
    lastActiveFocus = null;
    if (!sameTrap || lastTrap.observed !== trap.observed) {
      trap.onActivation();
    }
    activateTrap(true);
    deferAction(activateTrap);
  } else {
    detachHandler();
    lastActiveFocus = null;
  }
}
mediumFocus.assignSyncMedium(onFocus);
mediumBlur.assignMedium(onBlur);
mediumEffect.assignMedium(function(cb) {
  return cb({
    moveFocusInside: es2015_default,
    focusInside
  });
});
var Trap_default = index_es_default(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

// node_modules/react-focus-lock/dist/es2015/Combination.js
var FocusLockCombination = React25.forwardRef(function FocusLockUICombination(props, ref) {
  return React25.createElement(Lock_default, _extends({
    sideCar: Trap_default,
    ref
  }, props));
});
var _ref = Lock_default.propTypes || {};
var sideCar = _ref.sideCar;
var propTypes = _objectWithoutPropertiesLoose(_ref, ["sideCar"]);
FocusLockCombination.propTypes = import_process.default.env.NODE_ENV !== "production" ? propTypes : {};
var Combination_default2 = FocusLockCombination;

// node_modules/react-focus-lock/dist/es2015/UI.js
init_shim();

// node_modules/react-focus-lock/dist/es2015/AutoFocusInside.js
init_shim();
init_extends();
var React26 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var AutoFocusInside = function AutoFocusInside2(_ref2) {
  var _ref$disabled = _ref2.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, children = _ref2.children, _ref$className = _ref2.className, className = _ref$className === void 0 ? void 0 : _ref$className;
  return React26.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !disabled), {
    className
  }), children);
};
AutoFocusInside.propTypes = import_process.default.env.NODE_ENV !== "production" ? {
  children: import_prop_types4.default.node.isRequired,
  disabled: import_prop_types4.default.bool,
  className: import_prop_types4.default.string
} : {};

// node_modules/react-focus-lock/dist/es2015/MoveFocusInside.js
init_shim();
init_extends();
var React27 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
var useFocusInside = function useFocusInside2(observedRef) {
  React27.useEffect(function() {
    var enabled = true;
    mediumEffect.useMedium(function(car) {
      var observed = observedRef && observedRef.current;
      if (enabled && observed) {
        if (!car.focusInside(observed)) {
          car.moveFocusInside(observed, null);
        }
      }
    });
    return function() {
      enabled = false;
    };
  }, [observedRef]);
};
function MoveFocusInside(_ref2) {
  var isDisabled26 = _ref2.disabled, className = _ref2.className, children = _ref2.children;
  var ref = React27.useRef(null);
  useFocusInside(isDisabled26 ? void 0 : ref);
  return React27.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !isDisabled26), {
    ref,
    className
  }), children);
}
MoveFocusInside.propTypes = import_process.default.env.NODE_ENV !== "production" ? {
  children: import_prop_types5.default.node.isRequired,
  disabled: import_prop_types5.default.bool,
  className: import_prop_types5.default.string
} : {};
MoveFocusInside.defaultProps = {
  disabled: false,
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/FreeFocusInside.js
init_shim();
init_extends();
var React28 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var FreeFocusInside = function FreeFocusInside2(_ref2) {
  var children = _ref2.children, className = _ref2.className;
  return React28.createElement("div", _extends({}, inlineProp(FOCUS_ALLOW, true), {
    className
  }), children);
};
FreeFocusInside.propTypes = import_process.default.env.NODE_ENV !== "production" ? {
  children: import_prop_types6.default.node.isRequired,
  className: import_prop_types6.default.string
} : {};
FreeFocusInside.defaultProps = {
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/index.js
var es2015_default2 = Combination_default2;

// node_modules/@chakra-ui/dom-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/dom-utils/dist/chunk-ROURZMX4.mjs
init_shim();

// node_modules/@chakra-ui/dom-utils/dist/chunk-3XANSPY5.mjs
init_shim();
function isElement12(el) {
  return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}
function isHTMLElement11(el) {
  var _a40;
  if (!isElement12(el))
    return false;
  const win = (_a40 = el.ownerDocument.defaultView) != null ? _a40 : window;
  return el instanceof win.HTMLElement;
}
function getOwnerWindow11(node2) {
  var _a40, _b8;
  return (_b8 = (_a40 = getOwnerDocument11(node2)) == null ? void 0 : _a40.defaultView) != null ? _b8 : window;
}
function getOwnerDocument11(node2) {
  return isElement12(node2) ? node2.ownerDocument : document;
}
function getActiveElement12(node2) {
  return getOwnerDocument11(node2).activeElement;
}

// node_modules/@chakra-ui/dom-utils/dist/chunk-ROURZMX4.mjs
var hasTabIndex11 = (element) => element.hasAttribute("tabindex");
var hasNegativeTabIndex11 = (element) => hasTabIndex11(element) && element.tabIndex === -1;
function isDisabled11(element) {
  return Boolean(element.getAttribute("disabled")) === true || Boolean(element.getAttribute("aria-disabled")) === true;
}
function isHidden11(element) {
  if (element.parentElement && isHidden11(element.parentElement))
    return true;
  return element.hidden;
}
function isContentEditable11(element) {
  const value = element.getAttribute("contenteditable");
  return value !== "false" && value != null;
}
function isFocusable11(element) {
  if (!isHTMLElement11(element) || isHidden11(element) || isDisabled11(element)) {
    return false;
  }
  const { localName } = element;
  const focusableTags = ["input", "select", "textarea", "button"];
  if (focusableTags.indexOf(localName) >= 0)
    return true;
  const others2 = {
    a: () => element.hasAttribute("href"),
    audio: () => element.hasAttribute("controls"),
    video: () => element.hasAttribute("controls")
  };
  if (localName in others2) {
    return others2[localName]();
  }
  if (isContentEditable11(element))
    return true;
  return hasTabIndex11(element);
}
function isTabbable11(element) {
  if (!element)
    return false;
  return isHTMLElement11(element) && isFocusable11(element) && !hasNegativeTabIndex11(element);
}

// node_modules/@chakra-ui/dom-utils/dist/index.mjs
var focusableElList11 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector11 = focusableElList11.join();
var isVisible2 = (el) => el.offsetWidth > 0 && el.offsetHeight > 0;
function getAllFocusable11(container3) {
  const focusableEls = Array.from(
    container3.querySelectorAll(focusableElSelector11)
  );
  focusableEls.unshift(container3);
  return focusableEls.filter((el) => isFocusable11(el) && isVisible2(el));
}

// node_modules/@chakra-ui/focus-lock/dist/chunk-CG74IXYP.mjs
var import_react193 = __toESM(require_react(), 1);
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
var _a19;
var FocusTrap3 = (_a19 = es2015_default2.default) != null ? _a19 : es2015_default2;
var FocusLock2 = (props) => {
  const {
    initialFocusRef,
    finalFocusRef,
    contentRef,
    restoreFocus,
    children,
    isDisabled: isDisabled26,
    autoFocus,
    persistentFocus,
    lockFocusAcrossFrames
  } = props;
  const onActivation = (0, import_react193.useCallback)(() => {
    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {
      initialFocusRef.current.focus();
    } else if (contentRef == null ? void 0 : contentRef.current) {
      const focusables = getAllFocusable11(contentRef.current);
      if (focusables.length === 0) {
        requestAnimationFrame(() => {
          var _a210;
          (_a210 = contentRef.current) == null ? void 0 : _a210.focus();
        });
      }
    }
  }, [initialFocusRef, contentRef]);
  const onDeactivation = (0, import_react193.useCallback)(() => {
    var _a210;
    (_a210 = finalFocusRef == null ? void 0 : finalFocusRef.current) == null ? void 0 : _a210.focus();
  }, [finalFocusRef]);
  const returnFocus = restoreFocus && !finalFocusRef;
  return (0, import_jsx_runtime74.jsx)(
    FocusTrap3,
    {
      crossFrame: lockFocusAcrossFrames,
      persistentFocus,
      autoFocus,
      disabled: isDisabled26,
      onActivation,
      onDeactivation,
      returnFocus,
      children
    }
  );
};
FocusLock2.displayName = "FocusLock";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-R4O7V45P.mjs
init_shim();
var import_react194 = __toESM(require_react(), 1);
function usePrevious(value) {
  const ref = (0, import_react194.useRef)();
  (0, import_react194.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-CLDV4JKZ.mjs
init_shim();
var import_react195 = __toESM(require_react(), 1);
function isPrintableCharacter(event) {
  const { key } = event;
  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);
}
function useShortcut(props = {}) {
  const { timeout = 300, preventDefault = () => true } = props;
  const [keys2, setKeys] = (0, import_react195.useState)([]);
  const timeoutRef = (0, import_react195.useRef)();
  const flush = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };
  const clearKeysAfterDelay = () => {
    flush();
    timeoutRef.current = setTimeout(() => {
      setKeys([]);
      timeoutRef.current = null;
    }, timeout);
  };
  (0, import_react195.useEffect)(() => flush, []);
  function onKeyDown(fn) {
    return (event) => {
      if (event.key === "Backspace") {
        const keysCopy = [...keys2];
        keysCopy.pop();
        setKeys(keysCopy);
        return;
      }
      if (isPrintableCharacter(event)) {
        const keysCopy = keys2.concat(event.key);
        if (preventDefault(event)) {
          event.preventDefault();
          event.stopPropagation();
        }
        setKeys(keysCopy);
        fn(keysCopy.join(""));
        clearKeysAfterDelay();
      }
    };
  }
  return onKeyDown;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-7LXDCNGU.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-TFWETJDV.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-IYF65QR3.mjs
init_shim();
var import_react196 = __toESM(require_react(), 1);
var useSafeLayoutEffect3 = isBrowser3 ? import_react196.useLayoutEffect : import_react196.useEffect;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-TFWETJDV.mjs
var import_react197 = __toESM(require_react(), 1);
function useCallbackRef2(fn, deps = []) {
  const ref = (0, import_react197.useRef)(fn);
  useSafeLayoutEffect3(() => {
    ref.current = fn;
  });
  return (0, import_react197.useCallback)((...args) => {
    var _a40;
    return (_a40 = ref.current) == null ? void 0 : _a40.call(ref, ...args);
  }, deps);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-7LXDCNGU.mjs
var import_react198 = __toESM(require_react(), 1);
function useTimeout2(callback, delay2) {
  const fn = useCallbackRef2(callback);
  (0, import_react198.useEffect)(() => {
    if (delay2 == null)
      return void 0;
    let timeoutId = null;
    timeoutId = window.setTimeout(() => {
      fn();
    }, delay2);
    return () => {
      if (timeoutId) {
        window.clearTimeout(timeoutId);
      }
    };
  }, [delay2, fn]);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-R3AU57R3.mjs
init_shim();
var import_react199 = __toESM(require_react(), 1);
function useWhyDidYouUpdate(name, props) {
  const previousProps = (0, import_react199.useRef)();
  (0, import_react199.useEffect)(() => {
    if (previousProps.current) {
      const allKeys = Object.keys({ ...previousProps.current, ...props });
      const changesObj = {};
      allKeys.forEach((key) => {
        if (previousProps.current[key] !== props[key]) {
          changesObj[key] = {
            from: previousProps.current[key],
            to: props[key]
          };
        }
      });
      if (Object.keys(changesObj).length) {
        console.log("[why-did-you-update]", name, changesObj);
      }
    }
    previousProps.current = props;
  });
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-VHPIVGMD.mjs
init_shim();
var import_react200 = __toESM(require_react(), 1);
function useInterval(callback, delay2) {
  const fn = useCallbackRef2(callback);
  (0, import_react200.useEffect)(() => {
    let intervalId = null;
    const tick = () => fn();
    if (delay2 !== null) {
      intervalId = window.setInterval(tick, delay2);
    }
    return () => {
      if (intervalId) {
        window.clearInterval(intervalId);
      }
    };
  }, [delay2, fn]);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-R6ZZD2KB.mjs
init_shim();
var import_react201 = __toESM(require_react(), 1);
function useLatestRef(value) {
  const ref = (0, import_react201.useRef)(null);
  ref.current = value;
  return ref;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-QJA5SDDN.mjs
init_shim();
var import_react202 = __toESM(require_react(), 1);
function assignRef12(ref, value) {
  if (ref == null)
    return;
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  try {
    ref.current = value;
  } catch (error25) {
    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
  }
}
function useMergeRefs3(...refs) {
  return (0, import_react202.useMemo)(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (node2) => {
      refs.forEach((ref) => {
        if (ref)
          assignRef12(ref, node2);
      });
    };
  }, refs);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-5DGH2NZZ.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-34PRFZWK.mjs
init_shim();
var import_react203 = __toESM(require_react(), 1);
function useEventListener2(event, handler, env, options) {
  const listener = useCallbackRef2(handler);
  (0, import_react203.useEffect)(() => {
    var _a40;
    const node2 = (_a40 = runIfFn5(env)) != null ? _a40 : document;
    if (!handler) {
      return;
    }
    node2.addEventListener(event, listener, options);
    return () => {
      node2.removeEventListener(event, listener, options);
    };
  }, [event, env, options, listener, handler]);
  return () => {
    var _a40;
    const node2 = (_a40 = runIfFn5(env)) != null ? _a40 : document;
    node2.removeEventListener(event, listener, options);
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-5DGH2NZZ.mjs
var import_react204 = __toESM(require_react(), 1);
function useMouseDownRef(shouldListen = true) {
  const mouseDownRef = (0, import_react204.useRef)();
  useEventListener2("mousedown", (event) => {
    if (shouldListen) {
      mouseDownRef.current = event.target;
    }
  });
  return mouseDownRef;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-HIFPCJML.mjs
init_shim();
var import_react205 = __toESM(require_react(), 1);
function useOutsideClick(props) {
  const { ref, handler, enabled = true } = props;
  const savedHandler = useCallbackRef2(handler);
  const stateRef = (0, import_react205.useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false
  });
  const state2 = stateRef.current;
  (0, import_react205.useEffect)(() => {
    if (!enabled)
      return;
    const onPointerDown = (e) => {
      if (isValidEvent(e, ref)) {
        state2.isPointerDown = true;
      }
    };
    const onMouseUp = (event) => {
      if (state2.ignoreEmulatedMouseEvents) {
        state2.ignoreEmulatedMouseEvents = false;
        return;
      }
      if (state2.isPointerDown && handler && isValidEvent(event, ref)) {
        state2.isPointerDown = false;
        savedHandler(event);
      }
    };
    const onTouchEnd = (event) => {
      state2.ignoreEmulatedMouseEvents = true;
      if (handler && state2.isPointerDown && isValidEvent(event, ref)) {
        state2.isPointerDown = false;
        savedHandler(event);
      }
    };
    const doc = getOwnerDocument2(ref.current);
    doc.addEventListener("mousedown", onPointerDown, true);
    doc.addEventListener("mouseup", onMouseUp, true);
    doc.addEventListener("touchstart", onPointerDown, true);
    doc.addEventListener("touchend", onTouchEnd, true);
    return () => {
      doc.removeEventListener("mousedown", onPointerDown, true);
      doc.removeEventListener("mouseup", onMouseUp, true);
      doc.removeEventListener("touchstart", onPointerDown, true);
      doc.removeEventListener("touchend", onTouchEnd, true);
    };
  }, [handler, ref, savedHandler, state2, enabled]);
}
function isValidEvent(event, ref) {
  var _a40;
  const target = event.target;
  if (event.button > 0)
    return false;
  if (target) {
    const doc = getOwnerDocument2(target);
    if (!doc.contains(target))
      return false;
  }
  return !((_a40 = ref.current) == null ? void 0 : _a40.contains(target));
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-OQ6S7YI3.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-CF2OMLUG.mjs
init_shim();
function usePointerEvent(env, eventName, handler, options) {
  return useEventListener2(
    getPointerEventName2(eventName),
    wrapPointerEventHandler2(handler, eventName === "pointerdown"),
    env,
    options
  );
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-3YZIECTS.mjs
init_shim();
var import_react206 = __toESM(require_react(), 1);
function useUnmountEffect2(fn, deps = []) {
  return (0, import_react206.useEffect)(
    () => () => fn(),
    deps
  );
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-OQ6S7YI3.mjs
var import_react207 = __toESM(require_react(), 1);
function usePanGesture(ref, props) {
  const {
    onPan,
    onPanStart,
    onPanEnd,
    onPanSessionStart,
    onPanSessionEnd,
    threshold
  } = props;
  const hasPanEvents = Boolean(
    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd
  );
  const panSession = (0, import_react207.useRef)(null);
  const handlers2 = {
    onSessionStart: onPanSessionStart,
    onSessionEnd: onPanSessionEnd,
    onStart: onPanStart,
    onMove: onPan,
    onEnd(event, info) {
      panSession.current = null;
      onPanEnd == null ? void 0 : onPanEnd(event, info);
    }
  };
  (0, import_react207.useEffect)(() => {
    var _a40;
    (_a40 = panSession.current) == null ? void 0 : _a40.updateHandlers(handlers2);
  });
  function onPointerDown(event) {
    panSession.current = new PanSession3(event, handlers2, threshold);
  }
  usePointerEvent(
    () => ref.current,
    "pointerdown",
    hasPanEvents ? onPointerDown : noop4
  );
  useUnmountEffect2(() => {
    var _a40;
    (_a40 = panSession.current) == null ? void 0 : _a40.end();
    panSession.current = null;
  });
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-CHB4ZXZG.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-EGV7XMQK.mjs
init_shim();
var import_react208 = __toESM(require_react(), 1);
function useId6(idProp, prefix) {
  const id4 = (0, import_react208.useId)();
  return (0, import_react208.useMemo)(
    () => idProp || [prefix, id4].filter(Boolean).join("-"),
    [idProp, prefix, id4]
  );
}
function useIds(idProp, ...prefixes) {
  const id4 = useId6(idProp);
  return (0, import_react208.useMemo)(() => {
    return prefixes.map((prefix) => `${prefix}-${id4}`);
  }, [id4, prefixes]);
}
function useOptionalPart(partId) {
  const [id4, setId] = (0, import_react208.useState)(null);
  const ref = (0, import_react208.useCallback)(
    (node2) => {
      setId(node2 ? partId : null);
    },
    [partId]
  );
  return { ref, id: id4, isRendered: Boolean(id4) };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-NUQE4USX.mjs
init_shim();
var import_react209 = __toESM(require_react(), 1);
function useControllableProp(prop, state2) {
  const isControlled = prop !== void 0;
  const value = isControlled && typeof prop !== "undefined" ? prop : state2;
  return [isControlled, value];
}
function useControllableState2(props) {
  const {
    value: valueProp,
    defaultValue,
    onChange,
    shouldUpdate = (prev, next) => prev !== next
  } = props;
  const onChangeProp = useCallbackRef2(onChange);
  const shouldUpdateProp = useCallbackRef2(shouldUpdate);
  const [valueState, setValue] = (0, import_react209.useState)(defaultValue);
  const isControlled = valueProp !== void 0;
  const value = isControlled ? valueProp : valueState;
  const updateValue = (0, import_react209.useCallback)(
    (next) => {
      const nextValue = runIfFn5(next, value);
      if (!shouldUpdateProp(value, nextValue)) {
        return;
      }
      if (!isControlled) {
        setValue(nextValue);
      }
      onChangeProp(nextValue);
    },
    [isControlled, onChangeProp, value, shouldUpdateProp]
  );
  return [value, updateValue];
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-CHB4ZXZG.mjs
var import_react210 = __toESM(require_react(), 1);
function useDisclosure(props = {}) {
  const {
    onClose: onCloseProp,
    onOpen: onOpenProp,
    isOpen: isOpenProp,
    id: idProp
  } = props;
  const onOpenPropCallbackRef = useCallbackRef2(onOpenProp);
  const onClosePropCallbackRef = useCallbackRef2(onCloseProp);
  const [isOpenState, setIsOpen] = (0, import_react210.useState)(props.defaultIsOpen || false);
  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);
  const id4 = useId6(idProp, "disclosure");
  const onClose = (0, import_react210.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(false);
    }
    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();
  }, [isControlled, onClosePropCallbackRef]);
  const onOpen = (0, import_react210.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(true);
    }
    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();
  }, [isControlled, onOpenPropCallbackRef]);
  const onToggle = (0, import_react210.useCallback)(() => {
    const action = isOpen ? onClose : onOpen;
    action();
  }, [isOpen, onOpen, onClose]);
  return {
    isOpen: !!isOpen,
    onOpen,
    onClose,
    onToggle,
    isControlled,
    getButtonProps: (props2 = {}) => ({
      ...props2,
      "aria-expanded": isOpen,
      "aria-controls": id4,
      onClick: callAllHandlers3(props2.onClick, onToggle)
    }),
    getDisclosureProps: (props2 = {}) => ({
      ...props2,
      hidden: !isOpen,
      id: id4
    })
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-6QJ3DAN2.mjs
init_shim();
var import_react211 = __toESM(require_react(), 1);
function useEventListenerMap() {
  const listeners = (0, import_react211.useRef)(/* @__PURE__ */ new Map());
  const currentListeners = listeners.current;
  const add4 = (0, import_react211.useCallback)((el, type, listener, options) => {
    const pointerEventListener = wrapPointerEventHandler2(
      listener,
      type === "pointerdown"
    );
    listeners.current.set(listener, {
      __listener: pointerEventListener,
      type: getPointerEventName2(type),
      el,
      options
    });
    el.addEventListener(type, pointerEventListener, options);
  }, []);
  const remove = (0, import_react211.useCallback)(
    (el, type, listener, options) => {
      const { __listener: pointerEventListener } = listeners.current.get(listener);
      el.removeEventListener(type, pointerEventListener, options);
      listeners.current.delete(pointerEventListener);
    },
    []
  );
  (0, import_react211.useEffect)(
    () => () => {
      currentListeners.forEach((value, key) => {
        remove(value.el, value.type, key, value.options);
      });
    },
    [remove, currentListeners]
  );
  return { add: add4, remove };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-MQIGJ23T.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-5AOLTBA4.mjs
init_shim();
var import_react212 = __toESM(require_react(), 1);
var useUpdateEffect2 = (effect2, deps) => {
  const renderCycleRef = (0, import_react212.useRef)(false);
  const effectCycleRef = (0, import_react212.useRef)(false);
  (0, import_react212.useEffect)(() => {
    const isMounted = renderCycleRef.current;
    const shouldRun = isMounted && effectCycleRef.current;
    if (shouldRun) {
      return effect2();
    }
    effectCycleRef.current = true;
  }, deps);
  (0, import_react212.useEffect)(() => {
    renderCycleRef.current = true;
    return () => {
      renderCycleRef.current = false;
    };
  }, []);
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-MQIGJ23T.mjs
function useFocusEffect(ref, options) {
  const { shouldFocus, preventScroll } = options;
  useUpdateEffect2(() => {
    const node2 = ref.current;
    if (!node2 || !shouldFocus)
      return;
    if (!hasFocusWithin2(node2)) {
      focus2(node2, { preventScroll, nextTick: true });
    }
  }, [shouldFocus, ref, preventScroll]);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-H54GS5SN.mjs
init_shim();
function preventReturnFocus(containerRef) {
  const el = containerRef.current;
  if (!el)
    return false;
  const activeElement = getActiveElement2(el);
  if (!activeElement)
    return false;
  if (contains2(el, activeElement))
    return false;
  if (isTabbable2(activeElement))
    return true;
  return false;
}
function useFocusOnHide(containerRef, options) {
  const { shouldFocus: shouldFocusProp, visible, focusRef } = options;
  const shouldFocus = shouldFocusProp && !visible;
  useUpdateEffect2(() => {
    if (!shouldFocus)
      return;
    if (preventReturnFocus(containerRef)) {
      return;
    }
    const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;
    if (el) {
      focus2(el, { nextTick: true });
    }
  }, [shouldFocus, containerRef, focusRef]);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-4DMQJ6FO.mjs
init_shim();
function useFocusOnPointerDown2(props) {
  const { ref, elements, enabled } = props;
  const isSafari2 = detectBrowser2("Safari");
  const doc = () => getOwnerDocument2(ref.current);
  usePointerEvent(doc, "pointerdown", (event) => {
    if (!isSafari2 || !enabled)
      return;
    const target = event.target;
    const els = elements != null ? elements : [ref];
    const isValidTarget = els.some((elementOrRef) => {
      const el = isRefObject3(elementOrRef) ? elementOrRef.current : elementOrRef;
      return contains2(el, target);
    });
    if (!isActiveElement2(target) && isValidTarget) {
      event.preventDefault();
      focus2(target);
    }
  });
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-S5MINBBA.mjs
init_shim();
var import_react213 = __toESM(require_react(), 1);
var defaultOptions = {
  preventScroll: true,
  shouldFocus: false
};
function useFocusOnShow(target, options = defaultOptions) {
  const { focusRef, preventScroll, shouldFocus, visible } = options;
  const element = isRefObject3(target) ? target.current : target;
  const autoFocusValue = shouldFocus && visible;
  const autoFocusRef = (0, import_react213.useRef)(autoFocusValue);
  const lastVisibleRef = (0, import_react213.useRef)(visible);
  useSafeLayoutEffect3(() => {
    if (!lastVisibleRef.current && visible) {
      autoFocusRef.current = autoFocusValue;
    }
    lastVisibleRef.current = visible;
  }, [visible, autoFocusValue]);
  const onFocus3 = (0, import_react213.useCallback)(() => {
    if (!visible || !element || !autoFocusRef.current)
      return;
    autoFocusRef.current = false;
    if (contains2(element, document.activeElement))
      return;
    if (focusRef == null ? void 0 : focusRef.current) {
      focus2(focusRef.current, { preventScroll, nextTick: true });
    } else {
      const tabbableEls = getAllFocusable2(element);
      if (tabbableEls.length > 0) {
        focus2(tabbableEls[0], { preventScroll, nextTick: true });
      }
    }
  }, [visible, preventScroll, element, focusRef]);
  useUpdateEffect2(() => {
    onFocus3();
  }, [onFocus3]);
  useEventListener2("transitionend", onFocus3, element);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-XB3WN4FS.mjs
init_shim();
var import_react214 = __toESM(require_react(), 1);
function useForceUpdate2() {
  const unloadingRef = (0, import_react214.useRef)(false);
  const [count, setCount] = (0, import_react214.useState)(0);
  useUnmountEffect2(() => {
    unloadingRef.current = true;
  });
  return (0, import_react214.useCallback)(() => {
    if (!unloadingRef.current) {
      setCount(count + 1);
    }
  }, [count]);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-F6ZRLFYH.mjs
init_shim();
var import_react215 = __toESM(require_react(), 1);
function useAnimationState(props) {
  const { isOpen, ref } = props;
  const [mounted, setMounted] = (0, import_react215.useState)(isOpen);
  const [once25, setOnce] = (0, import_react215.useState)(false);
  (0, import_react215.useEffect)(() => {
    if (!once25) {
      setMounted(isOpen);
      setOnce(true);
    }
  }, [isOpen, once25, mounted]);
  useEventListener2(
    "animationend",
    () => {
      setMounted(isOpen);
    },
    () => ref.current
  );
  const hidden = isOpen ? false : !mounted;
  return {
    present: !hidden,
    onComplete() {
      var _a40;
      const win = getOwnerWindow2(ref.current);
      const evt = new win.CustomEvent("animationend", { bubbles: true });
      (_a40 = ref.current) == null ? void 0 : _a40.dispatchEvent(evt);
    }
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-4EVXJTLA.mjs
init_shim();
var import_react216 = __toESM(require_react(), 1);
function useBoolean(initialState2 = false) {
  const [value, setValue] = (0, import_react216.useState)(initialState2);
  const callbacks = (0, import_react216.useMemo)(
    () => ({
      on: () => setValue(true),
      off: () => setValue(false),
      toggle: () => setValue((prev) => !prev)
    }),
    []
  );
  return [value, callbacks];
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-RK6YFQX6.mjs
init_shim();
var import_react217 = __toESM(require_react(), 1);
var import_copy_to_clipboard = __toESM(require_copy_to_clipboard(), 1);
function useClipboard(value, optionsOrTimeout = {}) {
  const [hasCopied, setHasCopied] = (0, import_react217.useState)(false);
  const [valueState, setValueState] = (0, import_react217.useState)(value);
  (0, import_react217.useEffect)(() => setValueState(value), [value]);
  const { timeout = 1500, ...copyOptions } = typeof optionsOrTimeout === "number" ? { timeout: optionsOrTimeout } : optionsOrTimeout;
  const onCopy = (0, import_react217.useCallback)(() => {
    const didCopy = (0, import_copy_to_clipboard.default)(valueState, copyOptions);
    setHasCopied(didCopy);
  }, [valueState, copyOptions]);
  (0, import_react217.useEffect)(() => {
    let timeoutId = null;
    if (hasCopied) {
      timeoutId = window.setTimeout(() => {
        setHasCopied(false);
      }, timeout);
    }
    return () => {
      if (timeoutId) {
        window.clearTimeout(timeoutId);
      }
    };
  }, [timeout, hasCopied]);
  return {
    value: valueState,
    setValue: setValueState,
    onCopy,
    hasCopied
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-Y4UXA3TD.mjs
init_shim();
var import_react218 = __toESM(require_react(), 1);
function useConst(init) {
  const ref = (0, import_react218.useRef)(null);
  if (ref.current === null) {
    ref.current = typeof init === "function" ? init() : init;
  }
  return ref.current;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/chunk-D4LAKZ32.mjs
init_shim();
var import_react219 = __toESM(require_react(), 1);
function useDimensions(ref, observe) {
  const [dimensions, setDimensions] = (0, import_react219.useState)(null);
  const rafId = (0, import_react219.useRef)();
  useSafeLayoutEffect3(() => {
    function measure() {
      const node2 = ref.current;
      if (!node2)
        return;
      rafId.current = requestAnimationFrame(() => {
        const boxModel = getBox(node2);
        setDimensions(boxModel);
      });
    }
    measure();
    if (observe) {
      window.addEventListener("resize", measure);
      window.addEventListener("scroll", measure);
    }
    return () => {
      if (observe) {
        window.removeEventListener("resize", measure);
        window.removeEventListener("scroll", measure);
      }
      if (rafId.current) {
        cancelAnimationFrame(rafId.current);
      }
    };
  }, [observe]);
  return dimensions;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/image/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/image/dist/chunk-E77276RR.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/image/dist/chunk-QBIO4VEB.mjs
init_shim();
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
var NativeImage3 = forwardRef5(function NativeImage22(props, ref) {
  const { htmlWidth, htmlHeight, alt, ...rest } = props;
  return (0, import_jsx_runtime75.jsx)("img", { width: htmlWidth, height: htmlHeight, ref, alt, ...rest });
});
NativeImage3.displayName = "NativeImage";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/image/dist/chunk-HR33I6FK.mjs
init_shim();
var import_react220 = __toESM(require_react(), 1);
function useImage2(props) {
  const {
    loading,
    src,
    srcSet,
    onLoad,
    onError,
    crossOrigin,
    sizes: sizes47,
    ignoreFallback
  } = props;
  const [status, setStatus] = (0, import_react220.useState)("pending");
  (0, import_react220.useEffect)(() => {
    setStatus(src ? "loading" : "pending");
  }, [src]);
  const imageRef = (0, import_react220.useRef)();
  const load = (0, import_react220.useCallback)(() => {
    if (!src)
      return;
    flush();
    const img = new Image();
    img.src = src;
    if (crossOrigin)
      img.crossOrigin = crossOrigin;
    if (srcSet)
      img.srcset = srcSet;
    if (sizes47)
      img.sizes = sizes47;
    if (loading)
      img.loading = loading;
    img.onload = (event) => {
      flush();
      setStatus("loaded");
      onLoad == null ? void 0 : onLoad(event);
    };
    img.onerror = (error25) => {
      flush();
      setStatus("failed");
      onError == null ? void 0 : onError(error25);
    };
    imageRef.current = img;
  }, [src, crossOrigin, srcSet, sizes47, onLoad, onError, loading]);
  const flush = () => {
    if (imageRef.current) {
      imageRef.current.onload = null;
      imageRef.current.onerror = null;
      imageRef.current = null;
    }
  };
  useSafeLayoutEffect(() => {
    if (ignoreFallback)
      return void 0;
    if (status === "loading") {
      load();
    }
    return () => {
      flush();
    };
  }, [status, load, ignoreFallback]);
  return ignoreFallback ? "loaded" : status;
}
var shouldShowFallbackImage2 = (status, fallbackStrategy) => status !== "loaded" && fallbackStrategy === "beforeLoadOrError" || status === "failed" && fallbackStrategy === "onError";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/image/dist/chunk-E77276RR.mjs
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
function omit14(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key of keysToOmit) {
    if (key in clone) {
      delete clone[key];
    }
  }
  return clone;
}
var Image3 = forwardRef5(function Image23(props, ref) {
  const {
    fallbackSrc,
    fallback,
    src,
    srcSet,
    align,
    fit,
    loading,
    ignoreFallback,
    crossOrigin,
    fallbackStrategy = "beforeLoadOrError",
    referrerPolicy,
    ...rest
  } = props;
  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;
  const shouldIgnoreFallbackImage = loading != null || ignoreFallback || !providedFallback;
  const status = useImage2({
    ...props,
    ignoreFallback: shouldIgnoreFallbackImage
  });
  const showFallbackImage = shouldShowFallbackImage2(status, fallbackStrategy);
  const shared = {
    ref,
    objectFit: fit,
    objectPosition: align,
    ...shouldIgnoreFallbackImage ? rest : omit14(rest, ["onError", "onLoad"])
  };
  if (showFallbackImage) {
    if (fallback)
      return fallback;
    return (0, import_jsx_runtime76.jsx)(
      chakra2.img,
      {
        as: NativeImage3,
        className: "chakra-image__placeholder",
        src: fallbackSrc,
        ...shared
      }
    );
  }
  return (0, import_jsx_runtime76.jsx)(
    chakra2.img,
    {
      as: NativeImage3,
      src,
      srcSet,
      crossOrigin,
      loading,
      referrerPolicy,
      className: "chakra-image",
      ...shared
    }
  );
});
Image3.displayName = "Image";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/image/dist/chunk-E3YVMML4.mjs
init_shim();
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
var Img2 = forwardRef5((props, ref) => (0, import_jsx_runtime77.jsx)(chakra2.img, { ref, as: NativeImage3, className: "chakra-image", ...props }));

// node_modules/@chakra-ui/input/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/input/dist/chunk-ARKOWLPR.mjs
init_shim();

// node_modules/@chakra-ui/input/dist/chunk-6XCF7NSR.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react222 = __toESM(require_react(), 1);
function useTheme11() {
  const theme3 = (0, import_react222.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra11() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme11();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM11() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser13 = canUseDOM11();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash16 = __toESM(require_lodash(), 1);
function omit15(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get12(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize12 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet12 = memoize12(get12);
function objectFilter11(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined11 = (object2) => objectFilter11(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction14(value) {
  return typeof value === "function";
}
var __DEV__11 = import_process.default.env.NODE_ENV !== "production";
var __TEST__11 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn14(valueOrFn, ...args) {
  return isFunction14(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once11(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn12 = once11((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__11) {
    console.warn(message);
  }
});
var error11 = once11((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__11) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger11 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger11 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep11 = 1 / 60 * 1e3;
var getCurrentTime11 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame11 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime11()), defaultTimestep11);

// node_modules/@chakra-ui/input/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep12(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/input/node_modules/framesync/dist/es/index.mjs
var maxElapsed12 = 40;
var useDefaultElapsed12 = true;
var runNextFrame12 = false;
var isProcessing11 = false;
var frame12 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder12 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps12 = stepsOrder12.reduce((acc, key) => {
  acc[key] = createRenderStep12(() => runNextFrame12 = true);
  return acc;
}, {});
var sync12 = stepsOrder12.reduce((acc, key) => {
  const step = steps12[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame12)
      startLoop12();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync12 = stepsOrder12.reduce((acc, key) => {
  acc[key] = steps12[key].cancel;
  return acc;
}, {});
var flushSync11 = stepsOrder12.reduce((acc, key) => {
  acc[key] = () => steps12[key].process(frame12);
  return acc;
}, {});
var processStep12 = (stepId) => steps12[stepId].process(frame12);
var processFrame12 = (timestamp) => {
  runNextFrame12 = false;
  frame12.delta = useDefaultElapsed12 ? defaultTimestep11 : Math.max(Math.min(timestamp - frame12.timestamp, maxElapsed12), 1);
  frame12.timestamp = timestamp;
  isProcessing11 = true;
  stepsOrder12.forEach(processStep12);
  isProcessing11 = false;
  if (runNextFrame12) {
    useDefaultElapsed12 = false;
    onNextFrame11(processFrame12);
  }
};
var startLoop12 = () => {
  runNextFrame12 = true;
  useDefaultElapsed12 = true;
  if (!isProcessing11)
    onNextFrame11(processFrame12);
};

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints13 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList12 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector12 = focusableElList12.join();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react223 = __toESM(require_react(), 1);
var import_react_fast_compare11 = __toESM(require_react_fast_compare11(), 1);
function useStyleConfigImpl9(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra11();
  const themeStyleConfig = themeKey ? memoizedGet12(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash16.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined11(omit15(rest, ["children"]))
  );
  const stylesRef = (0, import_react223.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare11.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig11(themeKey, props = {}) {
  return useStyleConfigImpl9(themeKey, props);
}
function useMultiStyleConfig11(themeKey, props = {}) {
  return useStyleConfigImpl9(themeKey, props);
}

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames11 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps11 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp11(prop) {
  return validHTMLProps11.has(prop) || !allPropNames11.has(prop);
}

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react224 = __toESM(require_react(), 1);
var _a20;
var emotion_styled11 = (_a20 = emotion_styled_browser_esm_default.default) != null ? _a20 : emotion_styled_browser_esm_default;
var toCSSObject11 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter11(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn14(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined11(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled11(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp11;
  }
  const styleObject = toCSSObject11({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled11(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react224.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react224.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory11() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled11, {
    apply(target, thisArg, argArray) {
      return styled11(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled11(element));
      }
      return cache.get(element);
    }
  });
}
var chakra11 = factory11();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react225 = __toESM(require_react(), 1);
function forwardRef21(component) {
  return (0, import_react225.forwardRef)(component);
}

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react226 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react227 = __toESM(require_react(), 1);
function createContext22(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react227.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react227.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react229 = __toESM(require_react(), 1);
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider11, useStyles11] = createContext22({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/input/dist/chunk-6XCF7NSR.mjs
var import_react231 = __toESM(require_react(), 1);
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
var [InputGroupStylesProvider, useInputGroupStyles] = createContext({
  name: `InputGroupStylesContext`,
  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in "<InputGroup />" `
});
var InputGroup = forwardRef21(
  function InputGroup2(props, ref) {
    const styles3 = useMultiStyleConfig11("Input", props);
    const { children, className, ...rest } = omitThemingProps(props);
    const _className = cx("chakra-input__group", className);
    const groupStyles = {};
    const validChildren = getValidChildren6(children);
    const input = styles3.field;
    validChildren.forEach((child) => {
      var _a40, _b8;
      if (!styles3)
        return;
      if (input && child.type.id === "InputLeftElement") {
        groupStyles.paddingStart = (_a40 = input.height) != null ? _a40 : input.h;
      }
      if (input && child.type.id === "InputRightElement") {
        groupStyles.paddingEnd = (_b8 = input.height) != null ? _b8 : input.h;
      }
      if (child.type.id === "InputRightAddon") {
        groupStyles.borderEndRadius = 0;
      }
      if (child.type.id === "InputLeftAddon") {
        groupStyles.borderStartRadius = 0;
      }
    });
    const clones = validChildren.map((child) => {
      var _a40, _b8;
      const theming = compact({
        size: ((_a40 = child.props) == null ? void 0 : _a40.size) || props.size,
        variant: ((_b8 = child.props) == null ? void 0 : _b8.variant) || props.variant
      });
      return child.type.id !== "Input" ? (0, import_react231.cloneElement)(child, theming) : (0, import_react231.cloneElement)(child, Object.assign(theming, groupStyles, child.props));
    });
    return (0, import_jsx_runtime79.jsx)(
      chakra11.div,
      {
        className: _className,
        ref,
        __css: {
          width: "100%",
          display: "flex",
          position: "relative",
          isolation: "isolate"
        },
        "data-group": true,
        ...rest,
        children: (0, import_jsx_runtime79.jsx)(InputGroupStylesProvider, { value: styles3, children: clones })
      }
    );
  }
);
InputGroup.displayName = "InputGroup";

// node_modules/@chakra-ui/input/dist/chunk-ARKOWLPR.mjs
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
var placements = {
  left: {
    marginEnd: "-1px",
    borderEndRadius: 0,
    borderEndColor: "transparent"
  },
  right: {
    marginStart: "-1px",
    borderStartRadius: 0,
    borderStartColor: "transparent"
  }
};
var StyledAddon = chakra11("div", {
  baseStyle: {
    flex: "0 0 auto",
    width: "auto",
    display: "flex",
    alignItems: "center",
    whiteSpace: "nowrap"
  }
});
var InputAddon = forwardRef21(
  function InputAddon2(props, ref) {
    var _a40;
    const { placement = "left", ...rest } = props;
    const placementStyles = (_a40 = placements[placement]) != null ? _a40 : {};
    const styles3 = useInputGroupStyles();
    return (0, import_jsx_runtime80.jsx)(
      StyledAddon,
      {
        ref,
        ...rest,
        __css: {
          ...styles3.addon,
          ...placementStyles
        }
      }
    );
  }
);
InputAddon.displayName = "InputAddon";
var InputLeftAddon = forwardRef21(
  function InputLeftAddon2(props, ref) {
    return (0, import_jsx_runtime80.jsx)(
      InputAddon,
      {
        ref,
        placement: "left",
        ...props,
        className: cx("chakra-input__left-addon", props.className)
      }
    );
  }
);
InputLeftAddon.displayName = "InputLeftAddon";
InputLeftAddon.id = "InputLeftAddon";
var InputRightAddon = forwardRef21(
  function InputRightAddon2(props, ref) {
    return (0, import_jsx_runtime80.jsx)(
      InputAddon,
      {
        ref,
        placement: "right",
        ...props,
        className: cx("chakra-input__right-addon", props.className)
      }
    );
  }
);
InputRightAddon.displayName = "InputRightAddon";
InputRightAddon.id = "InputRightAddon";

// node_modules/@chakra-ui/input/dist/chunk-J356FWKS.mjs
init_shim();
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
var StyledInputElement = chakra11("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    top: "0",
    zIndex: 2
  }
});
var InputElement = forwardRef21(function InputElement2(props, ref) {
  var _a40, _b8;
  const { placement = "left", ...rest } = props;
  const styles3 = useInputGroupStyles();
  const input = styles3.field;
  const attr = placement === "left" ? "insetStart" : "insetEnd";
  const elementStyles = {
    [attr]: "0",
    width: (_a40 = input == null ? void 0 : input.height) != null ? _a40 : input == null ? void 0 : input.h,
    height: (_b8 = input == null ? void 0 : input.height) != null ? _b8 : input == null ? void 0 : input.h,
    fontSize: input == null ? void 0 : input.fontSize,
    ...styles3.element
  };
  return (0, import_jsx_runtime81.jsx)(StyledInputElement, { ref, __css: elementStyles, ...rest });
});
InputElement.id = "InputElement";
InputElement.displayName = "InputElement";
var InputLeftElement = forwardRef21(
  function InputLeftElement2(props, ref) {
    const { className, ...rest } = props;
    const _className = cx("chakra-input__left-element", className);
    return (0, import_jsx_runtime81.jsx)(
      InputElement,
      {
        ref,
        placement: "left",
        className: _className,
        ...rest
      }
    );
  }
);
InputLeftElement.id = "InputLeftElement";
InputLeftElement.displayName = "InputLeftElement";
var InputRightElement = forwardRef21(
  function InputRightElement2(props, ref) {
    const { className, ...rest } = props;
    const _className = cx("chakra-input__right-element", className);
    return (0, import_jsx_runtime81.jsx)(
      InputElement,
      {
        ref,
        placement: "right",
        className: _className,
        ...rest
      }
    );
  }
);
InputRightElement.id = "InputRightElement";
InputRightElement.displayName = "InputRightElement";

// node_modules/@chakra-ui/input/dist/chunk-GYFRIY2Z.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/form-control/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
init_shim();

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/form-control/dist/chunk-6ZNYZUDD.mjs
init_shim();
var import_react232 = __toESM(require_react(), 1);
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
var [FormControlStylesProvider2, useFormControlStyles2] = createContext({
  name: `FormControlStylesContext`,
  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
});
var [FormControlProvider2, useFormControlContext2] = createContext({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider2(props) {
  const {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled: isDisabled26,
    isReadOnly,
    ...htmlProps
  } = props;
  const uuid = (0, import_react232.useId)();
  const id4 = idProp || `field-${uuid}`;
  const labelId = `${id4}-label`;
  const feedbackId = `${id4}-feedback`;
  const helpTextId = `${id4}-helptext`;
  const [hasFeedbackText, setHasFeedbackText] = (0, import_react232.useState)(false);
  const [hasHelpText, setHasHelpText] = (0, import_react232.useState)(false);
  const [isFocused, setFocus2] = (0, import_react232.useState)(false);
  const getHelpTextProps = (0, import_react232.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: helpTextId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasHelpText(true);
      })
    }),
    [helpTextId]
  );
  const getLabelProps = (0, import_react232.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled26),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: props2.id !== void 0 ? props2.id : labelId,
      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id4
    }),
    [id4, isDisabled26, isFocused, isInvalid, isReadOnly, labelId]
  );
  const getErrorMessageProps = (0, import_react232.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: feedbackId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    }),
    [feedbackId]
  );
  const getRootProps = (0, import_react232.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ...htmlProps,
      ref: forwardedRef,
      role: "group"
    }),
    [htmlProps]
  );
  const getRequiredIndicatorProps = (0, import_react232.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    }),
    []
  );
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled26,
    isFocused: !!isFocused,
    onFocus: () => setFocus2(true),
    onBlur: () => setFocus2(false),
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id: id4,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl3 = forwardRef21(
  function FormControl22(props, ref) {
    const styles3 = useMultiStyleConfig11("Form", props);
    const ownProps = omitThemingProps(props);
    const {
      getRootProps,
      htmlProps: _,
      ...context
    } = useFormControlProvider2(ownProps);
    const className = cx("chakra-form-control", props.className);
    return (0, import_jsx_runtime82.jsx)(FormControlProvider2, { value: context, children: (0, import_jsx_runtime82.jsx)(FormControlStylesProvider2, { value: styles3, children: (0, import_jsx_runtime82.jsx)(
      chakra11.div,
      {
        ...getRootProps({}, ref),
        className,
        __css: styles3["container"]
      }
    ) }) });
  }
);
FormControl3.displayName = "FormControl";
var FormHelperText3 = forwardRef21(
  function FormHelperText22(props, ref) {
    const field = useFormControlContext2();
    const styles3 = useFormControlStyles2();
    const className = cx("chakra-form__helper-text", props.className);
    return (0, import_jsx_runtime82.jsx)(
      chakra11.div,
      {
        ...field == null ? void 0 : field.getHelpTextProps(props, ref),
        __css: styles3.helperText,
        className
      }
    );
  }
);
FormHelperText3.displayName = "FormHelperText";

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
var [FormErrorStylesProvider2, useFormErrorStyles2] = createContext({
  name: `FormErrorStylesContext`,
  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormError />" `
});
var FormErrorMessage2 = forwardRef21(
  (props, ref) => {
    const styles3 = useMultiStyleConfig11("FormError", props);
    const ownProps = omitThemingProps(props);
    const field = useFormControlContext2();
    if (!(field == null ? void 0 : field.isInvalid))
      return null;
    return (0, import_jsx_runtime83.jsx)(FormErrorStylesProvider2, { value: styles3, children: (0, import_jsx_runtime83.jsx)(
      chakra11.div,
      {
        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),
        className: cx("chakra-form__error-message", props.className),
        __css: {
          display: "flex",
          alignItems: "center",
          ...styles3.text
        }
      }
    ) });
  }
);
FormErrorMessage2.displayName = "FormErrorMessage";
var FormErrorIcon2 = forwardRef21((props, ref) => {
  const styles3 = useFormErrorStyles2();
  const field = useFormControlContext2();
  if (!(field == null ? void 0 : field.isInvalid))
    return null;
  const _className = cx("chakra-form__error-icon", props.className);
  return (0, import_jsx_runtime83.jsx)(
    Icon,
    {
      ref,
      "aria-hidden": true,
      ...props,
      __css: styles3.icon,
      className: _className,
      children: (0, import_jsx_runtime83.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        }
      )
    }
  );
});
FormErrorIcon2.displayName = "FormErrorIcon";

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs
init_shim();
var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
var FormLabel3 = forwardRef21(function FormLabel22(passedProps, ref) {
  var _a40;
  const styles3 = useStyleConfig11("FormLabel", passedProps);
  const props = omitThemingProps(passedProps);
  const {
    className,
    children,
    requiredIndicator = (0, import_jsx_runtime84.jsx)(RequiredIndicator3, {}),
    optionalIndicator = null,
    ...rest
  } = props;
  const field = useFormControlContext2();
  const ownProps = (_a40 = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a40 : { ref, ...rest };
  return (0, import_jsx_runtime84.jsxs)(
    chakra11.label,
    {
      ...ownProps,
      className: cx("chakra-form__label", props.className),
      __css: {
        display: "block",
        textAlign: "start",
        ...styles3
      },
      children: [
        children,
        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator
      ]
    }
  );
});
FormLabel3.displayName = "FormLabel";
var RequiredIndicator3 = forwardRef21(
  function RequiredIndicator22(props, ref) {
    const field = useFormControlContext2();
    const styles3 = useFormControlStyles2();
    if (!(field == null ? void 0 : field.isRequired))
      return null;
    const className = cx("chakra-form__required-indicator", props.className);
    return (0, import_jsx_runtime84.jsx)(
      chakra11.span,
      {
        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),
        __css: styles3.requiredIndicator,
        className
      }
    );
  }
);
RequiredIndicator3.displayName = "RequiredIndicator";

// node_modules/@chakra-ui/input/node_modules/@chakra-ui/form-control/dist/chunk-IJBC3YLI.mjs
init_shim();
function useFormControl2(props) {
  const { isDisabled: isDisabled26, isInvalid, isReadOnly, isRequired, ...rest } = useFormControlProps2(props);
  return {
    ...rest,
    disabled: isDisabled26,
    readOnly: isReadOnly,
    required: isRequired,
    "aria-invalid": ariaAttr(isInvalid),
    "aria-required": ariaAttr(isRequired),
    "aria-readonly": ariaAttr(isReadOnly)
  };
}
function useFormControlProps2(props) {
  var _a40, _b8, _c5;
  const field = useFormControlContext2();
  const {
    id: id4,
    disabled,
    readOnly,
    required,
    isRequired,
    isInvalid,
    isReadOnly,
    isDisabled: isDisabled26,
    onFocus: onFocus3,
    onBlur: onBlur3,
    ...rest
  } = props;
  const labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {
    labelIds.push(field.feedbackId);
  }
  if (field == null ? void 0 : field.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return {
    ...rest,
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id4 != null ? id4 : field == null ? void 0 : field.id,
    isDisabled: (_a40 = disabled != null ? disabled : isDisabled26) != null ? _a40 : field == null ? void 0 : field.isDisabled,
    isReadOnly: (_b8 = readOnly != null ? readOnly : isReadOnly) != null ? _b8 : field == null ? void 0 : field.isReadOnly,
    isRequired: (_c5 = required != null ? required : isRequired) != null ? _c5 : field == null ? void 0 : field.isRequired,
    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus3),
    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur3)
  };
}

// node_modules/@chakra-ui/input/dist/chunk-GYFRIY2Z.mjs
var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
var Input = forwardRef21(function Input2(props, ref) {
  const { htmlSize, ...rest } = props;
  const styles3 = useMultiStyleConfig11("Input", rest);
  const ownProps = omitThemingProps(rest);
  const input = useFormControl2(ownProps);
  const _className = cx("chakra-input", props.className);
  return (0, import_jsx_runtime85.jsx)(
    chakra11.input,
    {
      size: htmlSize,
      ...input,
      __css: styles3.field,
      ref,
      className: _className
    }
  );
});
Input.displayName = "Input";
Input.id = "Input";

// node_modules/@chakra-ui/layout/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/layout/dist/chunk-Z47J5YMH.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react234 = __toESM(require_react(), 1);
function useTheme12() {
  const theme3 = (0, import_react234.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra12() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme12();
  return { ...colorModeResult, theme: theme3 };
}
function getBreakpointValue2(theme3, value, fallback) {
  var _a40, _b8;
  if (value == null)
    return value;
  const getValue2 = (val) => {
    var _a210, _b23;
    return (_b23 = (_a210 = theme3.__breakpoints) == null ? void 0 : _a210.asArray) == null ? void 0 : _b23[val];
  };
  return (_b8 = (_a40 = getValue2(value)) != null ? _a40 : getValue2(fallback)) != null ? _b8 : fallback;
}
function getTokenValue2(theme3, value, fallback) {
  var _a40, _b8;
  if (value == null)
    return value;
  const getValue2 = (val) => {
    var _a210, _b23;
    return (_b23 = (_a210 = theme3.__cssMap) == null ? void 0 : _a210[val]) == null ? void 0 : _b23.value;
  };
  return (_b8 = (_a40 = getValue2(value)) != null ? _a40 : getValue2(fallback)) != null ? _b8 : fallback;
}
function getToken12(scale3, token, fallback) {
  const _token = Array.isArray(token) ? token : [token];
  const _fallback = Array.isArray(fallback) ? fallback : [fallback];
  return (theme3) => {
    const fallbackArr = _fallback.filter(Boolean);
    const result = _token.map((token2, index) => {
      var _a40, _b8;
      if (scale3 === "breakpoints") {
        return getBreakpointValue2(theme3, token2, (_a40 = fallbackArr[index]) != null ? _a40 : token2);
      }
      const path = `${scale3}.${token2}`;
      return getTokenValue2(theme3, path, (_b8 = fallbackArr[index]) != null ? _b8 : token2);
    });
    return Array.isArray(token) ? result : result[0];
  };
}

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM12() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser14 = canUseDOM12();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash17 = __toESM(require_lodash(), 1);
function omit16(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get13(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize13 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet13 = memoize13(get13);
function objectFilter12(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined12 = (object2) => objectFilter12(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction15(value) {
  return typeof value === "function";
}
var __DEV__12 = import_process.default.env.NODE_ENV !== "production";
var __TEST__12 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn15(valueOrFn, ...args) {
  return isFunction15(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once12(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn13 = once12((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__12) {
    console.warn(message);
  }
});
var error12 = once12((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__12) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger12 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger12 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep12 = 1 / 60 * 1e3;
var getCurrentTime12 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame12 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime12()), defaultTimestep12);

// node_modules/@chakra-ui/layout/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep13(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/layout/node_modules/framesync/dist/es/index.mjs
var maxElapsed13 = 40;
var useDefaultElapsed13 = true;
var runNextFrame13 = false;
var isProcessing12 = false;
var frame13 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder13 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps13 = stepsOrder13.reduce((acc, key) => {
  acc[key] = createRenderStep13(() => runNextFrame13 = true);
  return acc;
}, {});
var sync13 = stepsOrder13.reduce((acc, key) => {
  const step = steps13[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame13)
      startLoop13();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync13 = stepsOrder13.reduce((acc, key) => {
  acc[key] = steps13[key].cancel;
  return acc;
}, {});
var flushSync12 = stepsOrder13.reduce((acc, key) => {
  acc[key] = () => steps13[key].process(frame13);
  return acc;
}, {});
var processStep13 = (stepId) => steps13[stepId].process(frame13);
var processFrame13 = (timestamp) => {
  runNextFrame13 = false;
  frame13.delta = useDefaultElapsed13 ? defaultTimestep12 : Math.max(Math.min(timestamp - frame13.timestamp, maxElapsed13), 1);
  frame13.timestamp = timestamp;
  isProcessing12 = true;
  stepsOrder13.forEach(processStep13);
  isProcessing12 = false;
  if (runNextFrame13) {
    useDefaultElapsed13 = false;
    onNextFrame12(processFrame13);
  }
};
var startLoop13 = () => {
  runNextFrame13 = true;
  useDefaultElapsed13 = true;
  if (!isProcessing12)
    onNextFrame12(processFrame13);
};

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints14 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList13 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector13 = focusableElList13.join();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react235 = __toESM(require_react(), 1);
var import_react_fast_compare12 = __toESM(require_react_fast_compare12(), 1);
function useStyleConfigImpl10(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra12();
  const themeStyleConfig = themeKey ? memoizedGet13(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash17.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined12(omit16(rest, ["children"]))
  );
  const stylesRef = (0, import_react235.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare12.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig12(themeKey, props = {}) {
  return useStyleConfigImpl10(themeKey, props);
}
function useMultiStyleConfig12(themeKey, props = {}) {
  return useStyleConfigImpl10(themeKey, props);
}

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames12 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps12 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp12(prop) {
  return validHTMLProps12.has(prop) || !allPropNames12.has(prop);
}

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react236 = __toESM(require_react(), 1);
var _a21;
var emotion_styled12 = (_a21 = emotion_styled_browser_esm_default.default) != null ? _a21 : emotion_styled_browser_esm_default;
var toCSSObject12 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter12(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn15(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined12(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled12(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp12;
  }
  const styleObject = toCSSObject12({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled12(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react236.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react236.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory12() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled12, {
    apply(target, thisArg, argArray) {
      return styled12(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled12(element));
      }
      return cache.get(element);
    }
  });
}
var chakra12 = factory12();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react237 = __toESM(require_react(), 1);
function forwardRef22(component) {
  return (0, import_react237.forwardRef)(component);
}

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react238 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react239 = __toESM(require_react(), 1);
function createContext23(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react239.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react239.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react241 = __toESM(require_react(), 1);
var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider12, useStyles12] = createContext23({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/layout/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/layout/dist/chunk-Z47J5YMH.mjs
var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
var [ListStylesProvider, useListStyles] = createContext({
  name: `ListStylesContext`,
  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in "<List />" `
});
var List = forwardRef22(function List2(props, ref) {
  const styles3 = useMultiStyleConfig12("List", props);
  const {
    children,
    styleType = "none",
    stylePosition,
    spacing: spacing3,
    ...rest
  } = omitThemingProps(props);
  const validChildren = getValidChildren6(children);
  const selector2 = "& > *:not(style) ~ *:not(style)";
  const spacingStyle = spacing3 ? { [selector2]: { mt: spacing3 } } : {};
  return (0, import_jsx_runtime87.jsx)(ListStylesProvider, { value: styles3, children: (0, import_jsx_runtime87.jsx)(
    chakra12.ul,
    {
      ref,
      listStyleType: styleType,
      listStylePosition: stylePosition,
      role: "list",
      __css: { ...styles3.container, ...spacingStyle },
      ...rest,
      children: validChildren
    }
  ) });
});
List.displayName = "List";
var OrderedList = forwardRef22((props, ref) => {
  const { as, ...rest } = props;
  return (0, import_jsx_runtime87.jsx)(List, { ref, as: "ol", styleType: "decimal", marginStart: "1em", ...rest });
});
OrderedList.displayName = "OrderedList";
var UnorderedList = forwardRef22(function UnorderedList2(props, ref) {
  const { as, ...rest } = props;
  return (0, import_jsx_runtime87.jsx)(List, { ref, as: "ul", styleType: "initial", marginStart: "1em", ...rest });
});
UnorderedList.displayName = "UnorderedList";
var ListItem = forwardRef22(function ListItem2(props, ref) {
  const styles3 = useListStyles();
  return (0, import_jsx_runtime87.jsx)(chakra12.li, { ref, ...props, __css: styles3.item });
});
ListItem.displayName = "ListItem";
var ListIcon = forwardRef22(function ListIcon2(props, ref) {
  const styles3 = useListStyles();
  return (0, import_jsx_runtime87.jsx)(Icon, { ref, role: "presentation", ...props, __css: styles3.icon });
});
ListIcon.displayName = "ListIcon";

// node_modules/@chakra-ui/layout/dist/chunk-QJDVAY5Z.mjs
init_shim();

// node_modules/@chakra-ui/layout/dist/chunk-5FO2ZLZM.mjs
init_shim();
var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
var Grid = forwardRef22(function Grid2(props, ref) {
  const {
    templateAreas,
    gap,
    rowGap,
    columnGap,
    column,
    row,
    autoFlow,
    autoRows,
    templateRows,
    autoColumns,
    templateColumns,
    ...rest
  } = props;
  const styles3 = {
    display: "grid",
    gridTemplateAreas: templateAreas,
    gridGap: gap,
    gridRowGap: rowGap,
    gridColumnGap: columnGap,
    gridAutoColumns: autoColumns,
    gridColumn: column,
    gridRow: row,
    gridAutoFlow: autoFlow,
    gridAutoRows: autoRows,
    gridTemplateRows: templateRows,
    gridTemplateColumns: templateColumns
  };
  return (0, import_jsx_runtime88.jsx)(chakra12.div, { ref, __css: styles3, ...rest });
});
Grid.displayName = "Grid";

// node_modules/@chakra-ui/breakpoint-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/breakpoint-utils/dist/chunk-FWBNTPAC.mjs
init_shim();

// node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs
init_shim();
var breakpoints15 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);
function mapResponsive13(prop, mapper) {
  if (Array.isArray(prop)) {
    return prop.map((item) => item === null ? null : mapper(item));
  }
  if (isObject(prop)) {
    return Object.keys(prop).reduce((result, key) => {
      result[key] = mapper(prop[key]);
      return result;
    }, {});
  }
  if (prop != null) {
    return mapper(prop);
  }
  return null;
}
function arrayToObjectNotation13(values, bps = breakpoints15) {
  const result = {};
  values.forEach((value, index) => {
    const key = bps[index];
    if (value == null)
      return;
    result[key] = value;
  });
  return result;
}

// node_modules/@chakra-ui/layout/dist/chunk-QJDVAY5Z.mjs
var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
var SimpleGrid = forwardRef22(
  function SimpleGrid2(props, ref) {
    const { columns, spacingX, spacingY, spacing: spacing3, minChildWidth, ...rest } = props;
    const theme3 = useTheme12();
    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme3) : countToColumns(columns);
    return (0, import_jsx_runtime89.jsx)(
      Grid,
      {
        ref,
        gap: spacing3,
        columnGap: spacingX,
        rowGap: spacingY,
        templateColumns,
        ...rest
      }
    );
  }
);
SimpleGrid.displayName = "SimpleGrid";
function toPx(n) {
  return typeof n === "number" ? `${n}px` : n;
}
function widthToColumns(width, theme3) {
  return mapResponsive13(width, (value) => {
    const _value = getToken12("sizes", value, toPx(value))(theme3);
    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;
  });
}
function countToColumns(count) {
  return mapResponsive13(
    count,
    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`
  );
}

// node_modules/@chakra-ui/layout/dist/chunk-6FWJQRCB.mjs
init_shim();
var Spacer = chakra12("div", {
  baseStyle: {
    flex: 1,
    justifySelf: "stretch",
    alignSelf: "stretch"
  }
});
Spacer.displayName = "Spacer";

// node_modules/@chakra-ui/layout/dist/chunk-P74GIWPW.mjs
init_shim();
var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
var Text = forwardRef22(function Text2(props, ref) {
  const styles3 = useStyleConfig12("Text", props);
  const { className, align, decoration, casing, ...rest } = omitThemingProps(props);
  const aliasedProps = compact({
    textAlign: props.align,
    textDecoration: props.decoration,
    textTransform: props.casing
  });
  return (0, import_jsx_runtime90.jsx)(
    chakra12.p,
    {
      ref,
      className: cx("chakra-text", props.className),
      ...aliasedProps,
      ...rest,
      __css: styles3
    }
  );
});
Text.displayName = "Text";

// node_modules/@chakra-ui/layout/dist/chunk-CRIDK7KT.mjs
init_shim();
var import_react243 = __toESM(require_react(), 1);
var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
function px16(value) {
  return typeof value === "number" ? `${value}px` : value;
}
var Wrap = forwardRef22(function Wrap2(props, ref) {
  const {
    spacing: spacing3 = "0.5rem",
    spacingX,
    spacingY,
    children,
    justify,
    direction: direction3,
    align,
    className,
    shouldWrapChildren,
    ...rest
  } = props;
  const styles3 = (0, import_react243.useMemo)(() => {
    const { spacingX: x = spacing3, spacingY: y = spacing3 } = {
      spacingX,
      spacingY
    };
    return {
      "--chakra-wrap-x-spacing": (theme3) => mapResponsive13(x, (value) => px16(tokenToCSSVar("space", value)(theme3))),
      "--chakra-wrap-y-spacing": (theme3) => mapResponsive13(y, (value) => px16(tokenToCSSVar("space", value)(theme3))),
      "--wrap-x-spacing": "calc(var(--chakra-wrap-x-spacing) / 2)",
      "--wrap-y-spacing": "calc(var(--chakra-wrap-y-spacing) / 2)",
      display: "flex",
      flexWrap: "wrap",
      justifyContent: justify,
      alignItems: align,
      flexDirection: direction3,
      listStyleType: "none",
      padding: "0",
      margin: "calc(var(--wrap-y-spacing) * -1) calc(var(--wrap-x-spacing) * -1)",
      "& > *:not(style)": {
        margin: "var(--wrap-y-spacing) var(--wrap-x-spacing)"
      }
    };
  }, [spacing3, spacingX, spacingY, justify, align, direction3]);
  const childrenToRender = (0, import_react243.useMemo)(
    () => shouldWrapChildren ? import_react243.Children.map(children, (child, index) => (0, import_jsx_runtime91.jsx)(WrapItem, { children: child }, index)) : children,
    [children, shouldWrapChildren]
  );
  return (0, import_jsx_runtime91.jsx)(
    chakra12.div,
    {
      ref,
      className: cx("chakra-wrap", className),
      overflow: "hidden",
      ...rest,
      children: (0, import_jsx_runtime91.jsx)(chakra12.ul, { className: "chakra-wrap__list", __css: styles3, children: childrenToRender })
    }
  );
});
Wrap.displayName = "Wrap";
var WrapItem = forwardRef22(function WrapItem2(props, ref) {
  const { className, ...rest } = props;
  return (0, import_jsx_runtime91.jsx)(
    chakra12.li,
    {
      ref,
      __css: { display: "flex", alignItems: "flex-start" },
      className: cx("chakra-wrap__listitem", className),
      ...rest
    }
  );
});
WrapItem.displayName = "WrapItem";

// node_modules/@chakra-ui/layout/dist/chunk-GCMP4FVN.mjs
init_shim();

// node_modules/@chakra-ui/layout/dist/chunk-MUMUYFOI.mjs
init_shim();

// node_modules/@chakra-ui/layout/dist/chunk-O5CRURSQ.mjs
init_shim();

// node_modules/@chakra-ui/layout/dist/chunk-AMDSPU3E.mjs
init_shim();
var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
var StackItem = (props) => (0, import_jsx_runtime92.jsx)(
  chakra12.div,
  {
    className: "chakra-stack__item",
    ...props,
    __css: {
      display: "inline-block",
      flex: "0 0 auto",
      minWidth: 0,
      ...props["__css"]
    }
  }
);
StackItem.displayName = "StackItem";

// node_modules/@chakra-ui/layout/dist/chunk-V4DIVZKN.mjs
init_shim();
var selector = "& > *:not(style) ~ *:not(style)";
function getStackStyles(options) {
  const { spacing: spacing3, direction: direction3 } = options;
  const directionStyles = {
    column: {
      marginTop: spacing3,
      marginEnd: 0,
      marginBottom: 0,
      marginStart: 0
    },
    row: { marginTop: 0, marginEnd: 0, marginBottom: 0, marginStart: spacing3 },
    "column-reverse": {
      marginTop: 0,
      marginEnd: 0,
      marginBottom: spacing3,
      marginStart: 0
    },
    "row-reverse": {
      marginTop: 0,
      marginEnd: spacing3,
      marginBottom: 0,
      marginStart: 0
    }
  };
  return {
    flexDirection: direction3,
    [selector]: mapResponsive13(
      direction3,
      (value) => directionStyles[value]
    )
  };
}
function getDividerStyles(options) {
  const { spacing: spacing3, direction: direction3 } = options;
  const dividerStyles = {
    column: {
      my: spacing3,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    "column-reverse": {
      my: spacing3,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    row: {
      mx: spacing3,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    },
    "row-reverse": {
      mx: spacing3,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    }
  };
  return {
    "&": mapResponsive13(
      direction3,
      (value) => dividerStyles[value]
    )
  };
}

// node_modules/@chakra-ui/layout/dist/chunk-O5CRURSQ.mjs
var import_react244 = __toESM(require_react(), 1);
var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
var Stack = forwardRef22((props, ref) => {
  const {
    isInline,
    direction: directionProp,
    align,
    justify,
    spacing: spacing3 = "0.5rem",
    wrap: wrap4,
    children,
    divider,
    className,
    shouldWrapChildren,
    ...rest
  } = props;
  const direction3 = isInline ? "row" : directionProp != null ? directionProp : "column";
  const styles3 = (0, import_react244.useMemo)(
    () => getStackStyles({ direction: direction3, spacing: spacing3 }),
    [direction3, spacing3]
  );
  const dividerStyle = (0, import_react244.useMemo)(
    () => getDividerStyles({ spacing: spacing3, direction: direction3 }),
    [spacing3, direction3]
  );
  const hasDivider = !!divider;
  const shouldUseChildren = !shouldWrapChildren && !hasDivider;
  const clones = (0, import_react244.useMemo)(() => {
    const validChildren = getValidChildren6(children);
    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {
      const key = typeof child.key !== "undefined" ? child.key : index;
      const isLast = index + 1 === validChildren.length;
      const wrappedChild = (0, import_jsx_runtime93.jsx)(StackItem, { children: child }, key);
      const _child = shouldWrapChildren ? wrappedChild : child;
      if (!hasDivider)
        return _child;
      const clonedDivider = (0, import_react244.cloneElement)(
        divider,
        {
          __css: dividerStyle
        }
      );
      const _divider = isLast ? null : clonedDivider;
      return (0, import_jsx_runtime93.jsxs)(import_react244.Fragment, { children: [
        _child,
        _divider
      ] }, key);
    });
  }, [
    divider,
    dividerStyle,
    hasDivider,
    shouldUseChildren,
    shouldWrapChildren,
    children
  ]);
  const _className = cx("chakra-stack", className);
  return (0, import_jsx_runtime93.jsx)(
    chakra12.div,
    {
      ref,
      display: "flex",
      alignItems: align,
      justifyContent: justify,
      flexDirection: styles3.flexDirection,
      flexWrap: wrap4,
      className: _className,
      __css: hasDivider ? {} : { [selector]: styles3[selector] },
      ...rest,
      children: clones
    }
  );
});
Stack.displayName = "Stack";

// node_modules/@chakra-ui/layout/dist/chunk-MUMUYFOI.mjs
var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);
var VStack = forwardRef22((props, ref) => (0, import_jsx_runtime94.jsx)(Stack, { align: "center", ...props, direction: "column", ref }));
VStack.displayName = "VStack";

// node_modules/@chakra-ui/layout/dist/chunk-HUQHYERK.mjs
init_shim();
var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
var HStack = forwardRef22((props, ref) => (0, import_jsx_runtime95.jsx)(Stack, { align: "center", ...props, direction: "row", ref }));
HStack.displayName = "HStack";

// node_modules/@chakra-ui/layout/dist/chunk-MZBQPWGD.mjs
init_shim();
var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
var StackDivider = (props) => (0, import_jsx_runtime96.jsx)(
  chakra12.div,
  {
    className: "chakra-stack__divider",
    ...props,
    __css: {
      ...props["__css"],
      borderWidth: 0,
      alignSelf: "stretch",
      borderColor: "inherit",
      width: "auto",
      height: "auto"
    }
  }
);
StackDivider.displayName = "StackDivider";

// node_modules/@chakra-ui/layout/dist/chunk-IWVFML3N.mjs
init_shim();
var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
function spanFn(span) {
  return mapResponsive13(
    span,
    (value) => value === "auto" ? "auto" : `span ${value}/span ${value}`
  );
}
var GridItem = forwardRef22(function GridItem2(props, ref) {
  const {
    area,
    colSpan,
    colStart,
    colEnd,
    rowEnd,
    rowSpan,
    rowStart,
    ...rest
  } = props;
  const styles3 = compact({
    gridArea: area,
    gridColumn: spanFn(colSpan),
    gridRow: spanFn(rowSpan),
    gridColumnStart: colStart,
    gridColumnEnd: colEnd,
    gridRowStart: rowStart,
    gridRowEnd: rowEnd
  });
  return (0, import_jsx_runtime97.jsx)(chakra12.div, { ref, __css: styles3, ...rest });
});
GridItem.displayName = "GridItem";

// node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs
init_shim();
var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
var Heading = forwardRef22(function Heading2(props, ref) {
  const styles3 = useStyleConfig12("Heading", props);
  const { className, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime98.jsx)(
    chakra12.h2,
    {
      ref,
      className: cx("chakra-heading", props.className),
      ...rest,
      __css: styles3
    }
  );
});
Heading.displayName = "Heading";

// node_modules/@chakra-ui/layout/dist/chunk-U2ZO4DDB.mjs
init_shim();

// node_modules/@chakra-ui/layout/dist/chunk-6CSUKJP7.mjs
init_shim();
var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
var Box = chakra12("div");
Box.displayName = "Box";
var Square = forwardRef22(function Square2(props, ref) {
  const { size: size3, centerContent = true, ...rest } = props;
  const styles3 = centerContent ? { display: "flex", alignItems: "center", justifyContent: "center" } : {};
  return (0, import_jsx_runtime99.jsx)(
    Box,
    {
      ref,
      boxSize: size3,
      __css: {
        ...styles3,
        flexShrink: 0,
        flexGrow: 0
      },
      ...rest
    }
  );
});
Square.displayName = "Square";
var Circle = forwardRef22(function Circle2(props, ref) {
  const { size: size3, ...rest } = props;
  return (0, import_jsx_runtime99.jsx)(Square, { size: size3, ref, borderRadius: "9999px", ...rest });
});
Circle.displayName = "Circle";

// node_modules/@chakra-ui/layout/dist/chunk-U2ZO4DDB.mjs
var import_react245 = __toESM(require_react(), 1);
var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);
var escapeRegexp = (term) => term.replace(/[|\\{}()[\]^$+*?.-]/g, (char) => `\\${char}`);
function buildRegex(query) {
  const _query = query.filter((text) => text.length !== 0).map((text) => escapeRegexp(text.trim()));
  if (!_query.length) {
    return null;
  }
  return new RegExp(`(${_query.join("|")})`, "ig");
}
function highlightWords({ text, query }) {
  const regex = buildRegex(Array.isArray(query) ? query : [query]);
  if (!regex) {
    return [{ text, match: false }];
  }
  const result = text.split(regex).filter(Boolean);
  return result.map((str) => ({ text: str, match: regex.test(str) }));
}
function useHighlight(props) {
  const { text, query } = props;
  return (0, import_react245.useMemo)(() => highlightWords({ text, query }), [text, query]);
}
var Mark = forwardRef22(function Mark2(props, ref) {
  const styles3 = useStyleConfig12("Mark", props);
  const ownProps = omitThemingProps(props);
  return (0, import_jsx_runtime100.jsx)(
    Box,
    {
      ref,
      ...ownProps,
      as: "mark",
      __css: { bg: "transparent", whiteSpace: "nowrap", ...styles3 }
    }
  );
});
function Highlight(props) {
  const { children, query, styles: styles3 } = props;
  if (typeof children !== "string") {
    throw new Error("The children prop of Highlight must be a string");
  }
  const chunks = useHighlight({ query, text: children });
  return (0, import_jsx_runtime100.jsx)(import_jsx_runtime100.Fragment, { children: chunks.map((chunk25, index) => {
    return chunk25.match ? (0, import_jsx_runtime100.jsx)(Mark, { sx: styles3, children: chunk25.text }, index) : (0, import_jsx_runtime100.jsx)(import_react245.Fragment, { children: chunk25.text }, index);
  }) });
}

// node_modules/@chakra-ui/layout/dist/chunk-YV2Z46CE.mjs
init_shim();
var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);
var Kbd = forwardRef22(function Kbd2(props, ref) {
  const styles3 = useStyleConfig12("Kbd", props);
  const { className, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime101.jsx)(
    chakra12.kbd,
    {
      ref,
      className: cx("chakra-kbd", className),
      ...rest,
      __css: {
        fontFamily: "mono",
        ...styles3
      }
    }
  );
});
Kbd.displayName = "Kbd";

// node_modules/@chakra-ui/layout/dist/chunk-UNOISFZK.mjs
init_shim();
var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
var LinkOverlay = forwardRef22(
  function LinkOverlay2(props, ref) {
    const { isExternal, target, rel, className, ...rest } = props;
    return (0, import_jsx_runtime102.jsx)(
      chakra12.a,
      {
        ...rest,
        ref,
        className: cx("chakra-linkbox__overlay", className),
        rel: isExternal ? "noopener noreferrer" : rel,
        target: isExternal ? "_blank" : target,
        __css: {
          position: "static",
          "&::before": {
            content: "''",
            cursor: "inherit",
            display: "block",
            position: "absolute",
            top: 0,
            left: 0,
            zIndex: 0,
            width: "100%",
            height: "100%"
          }
        }
      }
    );
  }
);
var LinkBox = forwardRef22(function LinkBox2(props, ref) {
  const { className, ...rest } = props;
  return (0, import_jsx_runtime102.jsx)(
    chakra12.div,
    {
      ref,
      position: "relative",
      ...rest,
      className: cx("chakra-linkbox", className),
      __css: {
        "a[href]:not(.chakra-linkbox__overlay), abbr[title]": {
          position: "relative",
          zIndex: 1
        }
      }
    }
  );
});

// node_modules/@chakra-ui/layout/dist/chunk-YTV6DHKL.mjs
init_shim();
var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
var Link = forwardRef22(function Link2(props, ref) {
  const styles3 = useStyleConfig12("Link", props);
  const { className, isExternal, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime103.jsx)(
    chakra12.a,
    {
      target: isExternal ? "_blank" : void 0,
      rel: isExternal ? "noopener" : void 0,
      ref,
      className: cx("chakra-link", className),
      ...rest,
      __css: styles3
    }
  );
});
Link.displayName = "Link";

// node_modules/@chakra-ui/layout/dist/chunk-DPSEBQMG.mjs
init_shim();
var import_react246 = __toESM(require_react(), 1);
var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
var AspectRatio = forwardRef22(function(props, ref) {
  const { ratio = 4 / 3, children, className, ...rest } = props;
  const child = import_react246.Children.only(children);
  const _className = cx("chakra-aspect-ratio", className);
  return (0, import_jsx_runtime104.jsx)(
    chakra12.div,
    {
      ref,
      position: "relative",
      className: _className,
      _before: {
        height: 0,
        content: `""`,
        display: "block",
        paddingBottom: mapResponsive13(ratio, (r2) => `${1 / r2 * 100}%`)
      },
      __css: {
        "& > *:not(style)": {
          overflow: "hidden",
          position: "absolute",
          top: "0",
          right: "0",
          bottom: "0",
          left: "0",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
          height: "100%"
        },
        "& > img, & > video": {
          objectFit: "cover"
        }
      },
      ...rest,
      children: child
    }
  );
});
AspectRatio.displayName = "AspectRatio";

// node_modules/@chakra-ui/layout/dist/chunk-FQXH56BT.mjs
init_shim();
var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);
var Badge = forwardRef22(function Badge2(props, ref) {
  const styles3 = useStyleConfig12("Badge", props);
  const { className, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime105.jsx)(
    chakra12.span,
    {
      ref,
      className: cx("chakra-badge", props.className),
      ...rest,
      __css: {
        display: "inline-block",
        whiteSpace: "nowrap",
        verticalAlign: "middle",
        ...styles3
      }
    }
  );
});
Badge.displayName = "Badge";

// node_modules/@chakra-ui/layout/dist/chunk-3V5HNFOM.mjs
init_shim();
var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);
var Center = chakra12("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }
});
Center.displayName = "Center";
var centerStyles = {
  horizontal: {
    insetStart: "50%",
    transform: "translateX(-50%)"
  },
  vertical: {
    top: "50%",
    transform: "translateY(-50%)"
  },
  both: {
    insetStart: "50%",
    top: "50%",
    transform: "translate(-50%, -50%)"
  }
};
var AbsoluteCenter = forwardRef22(
  function AbsoluteCenter2(props, ref) {
    const { axis = "both", ...rest } = props;
    return (0, import_jsx_runtime106.jsx)(
      chakra12.div,
      {
        ref,
        __css: centerStyles[axis],
        ...rest,
        position: "absolute"
      }
    );
  }
);

// node_modules/@chakra-ui/layout/dist/chunk-MVNZWEQB.mjs
init_shim();
var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);
var Code = forwardRef22(function Code2(props, ref) {
  const styles3 = useStyleConfig12("Code", props);
  const { className, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime107.jsx)(
    chakra12.code,
    {
      ref,
      className: cx("chakra-code", props.className),
      ...rest,
      __css: {
        display: "inline-block",
        ...styles3
      }
    }
  );
});
Code.displayName = "Code";

// node_modules/@chakra-ui/layout/dist/chunk-SRMZVY4F.mjs
init_shim();
var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);
var Container2 = forwardRef22(function Container22(props, ref) {
  const { className, centerContent, ...rest } = omitThemingProps(props);
  const styles3 = useStyleConfig12("Container", props);
  return (0, import_jsx_runtime108.jsx)(
    chakra12.div,
    {
      ref,
      className: cx("chakra-container", className),
      ...rest,
      __css: {
        ...styles3,
        ...centerContent && {
          display: "flex",
          flexDirection: "column",
          alignItems: "center"
        }
      }
    }
  );
});
Container2.displayName = "Container";

// node_modules/@chakra-ui/layout/dist/chunk-YGVX4ESO.mjs
init_shim();
var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);
var Divider = forwardRef22(function Divider2(props, ref) {
  const {
    borderLeftWidth,
    borderBottomWidth,
    borderTopWidth,
    borderRightWidth,
    borderWidth,
    borderStyle,
    borderColor,
    ...styles3
  } = useStyleConfig12("Divider", props);
  const {
    className,
    orientation = "horizontal",
    __css,
    ...rest
  } = omitThemingProps(props);
  const dividerStyles = {
    vertical: {
      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
      height: "100%"
    },
    horizontal: {
      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
      width: "100%"
    }
  };
  return (0, import_jsx_runtime109.jsx)(
    chakra12.hr,
    {
      ref,
      "aria-orientation": orientation,
      ...rest,
      __css: {
        ...styles3,
        border: "0",
        borderColor,
        borderStyle,
        ...dividerStyles[orientation],
        ...__css
      },
      className: cx("chakra-divider", className)
    }
  );
});
Divider.displayName = "Divider";

// node_modules/@chakra-ui/layout/dist/chunk-MPFPK3CX.mjs
init_shim();
var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);
var Flex = forwardRef22(function Flex2(props, ref) {
  const { direction: direction3, align, justify, wrap: wrap4, basis, grow, shrink, ...rest } = props;
  const styles3 = {
    display: "flex",
    flexDirection: direction3,
    alignItems: align,
    justifyContent: justify,
    flexWrap: wrap4,
    flexBasis: basis,
    flexGrow: grow,
    flexShrink: shrink
  };
  return (0, import_jsx_runtime110.jsx)(chakra12.div, { ref, __css: styles3, ...rest });
});
Flex.displayName = "Flex";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-VVU6AIWW.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-DZU5YH7Z.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-MG6WC47T.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/react-env/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/react-env/dist/chunk-23XYWYLU.mjs
init_shim();
var import_react247 = __toESM(require_react(), 1);
var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);
var EnvironmentContext2 = (0, import_react247.createContext)({
  getDocument() {
    return document;
  },
  getWindow() {
    return window;
  }
});
EnvironmentContext2.displayName = "EnvironmentContext";
function useEnvironment2({ defer } = {}) {
  const [, forceUpdate] = (0, import_react247.useReducer)((c) => c + 1, 0);
  useSafeLayoutEffect(() => {
    if (!defer)
      return;
    forceUpdate();
  }, [defer]);
  return (0, import_react247.useContext)(EnvironmentContext2);
}
function EnvironmentProvider2(props) {
  const { children, environment: environmentProp, disabled } = props;
  const ref = (0, import_react247.useRef)(null);
  const context = (0, import_react247.useMemo)(() => {
    if (environmentProp)
      return environmentProp;
    return {
      getDocument: () => {
        var _a40, _b8;
        return (_b8 = (_a40 = ref.current) == null ? void 0 : _a40.ownerDocument) != null ? _b8 : document;
      },
      getWindow: () => {
        var _a40, _b8;
        return (_b8 = (_a40 = ref.current) == null ? void 0 : _a40.ownerDocument.defaultView) != null ? _b8 : window;
      }
    };
  }, [environmentProp]);
  const showSpan = !disabled || !environmentProp;
  return (0, import_jsx_runtime111.jsxs)(EnvironmentContext2.Provider, { value: context, children: [
    children,
    showSpan && (0, import_jsx_runtime111.jsx)("span", { id: "__chakra_env", hidden: true, ref })
  ] });
}
EnvironmentProvider2.displayName = "EnvironmentProvider";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-MG6WC47T.mjs
var import_react248 = __toESM(require_react(), 1);
function useMediaQuery(query, options = {}) {
  const { ssr = true, fallback } = options;
  const { getWindow } = useEnvironment2();
  const queries = Array.isArray(query) ? query : [query];
  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];
  fallbackValues = fallbackValues.filter((v) => v != null);
  const [value, setValue] = (0, import_react248.useState)(() => {
    return queries.map((query2, index) => ({
      media: query2,
      matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches
    }));
  });
  (0, import_react248.useEffect)(() => {
    const win = getWindow();
    setValue(
      queries.map((query2) => ({
        media: query2,
        matches: win.matchMedia(query2).matches
      }))
    );
    const mql = queries.map((query2) => win.matchMedia(query2));
    const handler = (evt) => {
      setValue((prev) => {
        return prev.slice().map((item) => {
          if (item.media === evt.media)
            return { ...item, matches: evt.matches };
          return item;
        });
      });
    };
    mql.forEach((mql2) => {
      if (typeof mql2.addListener === "function") {
        mql2.addListener(handler);
      } else {
        mql2.addEventListener("change", handler);
      }
    });
    return () => {
      mql.forEach((mql2) => {
        if (typeof mql2.removeListener === "function") {
          mql2.removeListener(handler);
        } else {
          mql2.removeEventListener("change", handler);
        }
      });
    };
  }, [getWindow]);
  return value.map((item) => item.matches);
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-DZU5YH7Z.mjs
function Visibility(props) {
  const { breakpoint, hide, children, ssr } = props;
  const [show] = useMediaQuery(breakpoint, { ssr });
  const isVisible3 = hide ? !show : show;
  const rendered = isVisible3 ? children : null;
  return rendered;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-R3K6W4OF.mjs
init_shim();
var getBreakpoint = (theme3, value) => {
  var _a40, _b8;
  return (_b8 = (_a40 = theme3 == null ? void 0 : theme3.breakpoints) == null ? void 0 : _a40[value]) != null ? _b8 : value;
};
function useQuery(props) {
  const { breakpoint = "", below, above } = props;
  const theme3 = useTheme2();
  const bpBelow = getBreakpoint(theme3, below);
  const bpAbove = getBreakpoint(theme3, above);
  let query = breakpoint;
  if (bpBelow) {
    query = `(max-width: ${bpBelow})`;
  } else if (bpAbove) {
    query = `(min-width: ${bpAbove})`;
  }
  return query;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-VVU6AIWW.mjs
var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
function Hide(props) {
  const { children, ssr } = props;
  const query = useQuery(props);
  return (0, import_jsx_runtime112.jsx)(Visibility, { breakpoint: query, hide: true, ssr, children });
}
Hide.displayName = "Hide";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-VNAUZPVA.mjs
init_shim();
function usePrefersReducedMotion(options) {
  const [prefersReducedMotion2] = useMediaQuery(
    "(prefers-reduced-motion: reduce)",
    options
  );
  return prefersReducedMotion2;
}
function useColorModePreference(options) {
  const [isLight3, isDark3] = useMediaQuery(
    ["(prefers-color-scheme: light)", "(prefers-color-scheme: dark)"],
    options
  );
  if (isLight3)
    return "light";
  if (isDark3)
    return "dark";
  return void 0;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-OLSEFBIG.mjs
init_shim();
var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);
function Show(props) {
  const { children, ssr } = props;
  const query = useQuery(props);
  return (0, import_jsx_runtime113.jsx)(Visibility, { breakpoint: query, ssr, children });
}
Show.displayName = "Show";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-KSQA4OTT.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-G4WB2JLN.mjs
init_shim();
function getClosestValue(values, breakpoint, breakpoints28 = breakpoints15) {
  let index = Object.keys(values).indexOf(breakpoint);
  if (index !== -1) {
    return values[breakpoint];
  }
  let stopIndex = breakpoints28.indexOf(breakpoint);
  while (stopIndex >= 0) {
    const key = breakpoints28[stopIndex];
    if (values.hasOwnProperty(key)) {
      index = stopIndex;
      break;
    }
    stopIndex -= 1;
  }
  if (index !== -1) {
    const key = breakpoints28[index];
    return values[key];
  }
  return void 0;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-CI3LDA6F.mjs
init_shim();
function useBreakpoint(arg) {
  var _a40, _b8;
  const opts = isObject(arg) ? arg : { fallback: arg != null ? arg : "base" };
  const theme3 = useTheme2();
  const breakpoints28 = theme3.__breakpoints.details.map(
    ({ minMaxQuery, breakpoint }) => ({
      breakpoint,
      query: minMaxQuery.replace("@media screen and ", "")
    })
  );
  const fallback = breakpoints28.map((bp) => bp.breakpoint === opts.fallback);
  const values = useMediaQuery(
    breakpoints28.map((bp) => bp.query),
    { fallback, ssr: opts.ssr }
  );
  const index = values.findIndex((value) => value == true);
  return (_b8 = (_a40 = breakpoints28[index]) == null ? void 0 : _a40.breakpoint) != null ? _b8 : opts.fallback;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/media-query/dist/chunk-KSQA4OTT.mjs
function useBreakpointValue(values, arg) {
  var _a40;
  const opts = isObject(arg) ? arg : { fallback: arg != null ? arg : "base" };
  const breakpoint = useBreakpoint(opts);
  const theme3 = useTheme2();
  if (!breakpoint)
    return;
  const breakpoints28 = Array.from(((_a40 = theme3.__breakpoints) == null ? void 0 : _a40.keys) || []);
  const obj = Array.isArray(values) ? Object.fromEntries(
    Object.entries(arrayToObjectNotation13(values, breakpoints28)).map(
      ([key, value]) => [key, value]
    )
  ) : values;
  return getClosestValue(obj, breakpoint, breakpoints28);
}

// node_modules/@chakra-ui/menu/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/menu/dist/chunk-AMNETMCR.mjs
init_shim();

// node_modules/@chakra-ui/menu/dist/chunk-2PVUH2BB.mjs
init_shim();

// node_modules/@chakra-ui/menu/dist/chunk-6BD5HRZF.mjs
init_shim();

// node_modules/@chakra-ui/menu/dist/chunk-FLBSN5ZT.mjs
init_shim();

// node_modules/@chakra-ui/menu/dist/chunk-CLDV4JKZ.mjs
init_shim();
var import_react249 = __toESM(require_react(), 1);
function isPrintableCharacter2(event) {
  const { key } = event;
  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);
}
function useShortcut2(props = {}) {
  const { timeout = 300, preventDefault = () => true } = props;
  const [keys2, setKeys] = (0, import_react249.useState)([]);
  const timeoutRef = (0, import_react249.useRef)();
  const flush = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };
  const clearKeysAfterDelay = () => {
    flush();
    timeoutRef.current = setTimeout(() => {
      setKeys([]);
      timeoutRef.current = null;
    }, timeout);
  };
  (0, import_react249.useEffect)(() => flush, []);
  function onKeyDown(fn) {
    return (event) => {
      if (event.key === "Backspace") {
        const keysCopy = [...keys2];
        keysCopy.pop();
        setKeys(keysCopy);
        return;
      }
      if (isPrintableCharacter2(event)) {
        const keysCopy = keys2.concat(event.key);
        if (preventDefault(event)) {
          event.preventDefault();
          event.stopPropagation();
        }
        setKeys(keysCopy);
        fn(keysCopy.join(""));
        clearKeysAfterDelay();
      }
    };
  }
  return onKeyDown;
}

// node_modules/@chakra-ui/menu/dist/chunk-B4RAWM5W.mjs
init_shim();
function getNextItemFromSearch13(items, searchString, itemToString, currentItem) {
  if (searchString == null) {
    return currentItem;
  }
  if (!currentItem) {
    const foundItem = items.find(
      (item) => itemToString(item).toLowerCase().startsWith(searchString.toLowerCase())
    );
    return foundItem;
  }
  const matchingItems = items.filter(
    (item) => itemToString(item).toLowerCase().startsWith(searchString.toLowerCase())
  );
  if (matchingItems.length > 0) {
    let nextIndex;
    if (matchingItems.includes(currentItem)) {
      const currentIndex = matchingItems.indexOf(currentItem);
      nextIndex = currentIndex + 1;
      if (nextIndex === matchingItems.length) {
        nextIndex = 0;
      }
      return matchingItems[nextIndex];
    }
    nextIndex = items.indexOf(matchingItems[0]);
    return items[nextIndex];
  }
  return currentItem;
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/clickable/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/clickable/dist/chunk-XHZNOLJR.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/clickable/dist/chunk-YGQKU5RK.mjs
init_shim();
var import_react250 = __toESM(require_react(), 1);
function useEventListeners() {
  const listeners = (0, import_react250.useRef)(/* @__PURE__ */ new Map());
  const currentListeners = listeners.current;
  const add4 = (0, import_react250.useCallback)((el, type, listener, options) => {
    listeners.current.set(listener, { type, el, options });
    el.addEventListener(type, listener, options);
  }, []);
  const remove = (0, import_react250.useCallback)(
    (el, type, listener, options) => {
      el.removeEventListener(type, listener, options);
      listeners.current.delete(listener);
    },
    []
  );
  (0, import_react250.useEffect)(
    () => () => {
      currentListeners.forEach((value, key) => {
        remove(value.el, value.type, key, value.options);
      });
    },
    [remove, currentListeners]
  );
  return { add: add4, remove };
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/clickable/dist/chunk-XHZNOLJR.mjs
var import_react251 = __toESM(require_react(), 1);
function isValidElement17(event) {
  const element = event.target;
  const { tagName, isContentEditable: isContentEditable26 } = element;
  return tagName !== "INPUT" && tagName !== "TEXTAREA" && isContentEditable26 !== true;
}
function useClickable(props = {}) {
  const {
    ref: htmlRef,
    isDisabled: isDisabled26,
    isFocusable: isFocusable26,
    clickOnEnter = true,
    clickOnSpace = true,
    onMouseDown,
    onMouseUp,
    onClick,
    onKeyDown,
    onKeyUp,
    tabIndex: tabIndexProp,
    onMouseOver,
    onMouseLeave,
    ...htmlProps
  } = props;
  const [isButton, setIsButton] = (0, import_react251.useState)(true);
  const [isPressed, setIsPressed] = (0, import_react251.useState)(false);
  const listeners = useEventListeners();
  const refCallback = (node2) => {
    if (!node2)
      return;
    if (node2.tagName !== "BUTTON") {
      setIsButton(false);
    }
  };
  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;
  const trulyDisabled = isDisabled26 && !isFocusable26;
  const handleClick = (0, import_react251.useCallback)(
    (event) => {
      if (isDisabled26) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }
      const self = event.currentTarget;
      self.focus();
      onClick == null ? void 0 : onClick(event);
    },
    [isDisabled26, onClick]
  );
  const onDocumentKeyUp = (0, import_react251.useCallback)(
    (e) => {
      if (isPressed && isValidElement17(e)) {
        e.preventDefault();
        e.stopPropagation();
        setIsPressed(false);
        listeners.remove(document, "keyup", onDocumentKeyUp, false);
      }
    },
    [isPressed, listeners]
  );
  const handleKeyDown = (0, import_react251.useCallback)(
    (event) => {
      onKeyDown == null ? void 0 : onKeyDown(event);
      if (isDisabled26 || event.defaultPrevented || event.metaKey) {
        return;
      }
      if (!isValidElement17(event.nativeEvent) || isButton)
        return;
      const shouldClickOnEnter = clickOnEnter && event.key === "Enter";
      const shouldClickOnSpace = clickOnSpace && event.key === " ";
      if (shouldClickOnSpace) {
        event.preventDefault();
        setIsPressed(true);
      }
      if (shouldClickOnEnter) {
        event.preventDefault();
        const self = event.currentTarget;
        self.click();
      }
      listeners.add(document, "keyup", onDocumentKeyUp, false);
    },
    [
      isDisabled26,
      isButton,
      onKeyDown,
      clickOnEnter,
      clickOnSpace,
      listeners,
      onDocumentKeyUp
    ]
  );
  const handleKeyUp = (0, import_react251.useCallback)(
    (event) => {
      onKeyUp == null ? void 0 : onKeyUp(event);
      if (isDisabled26 || event.defaultPrevented || event.metaKey)
        return;
      if (!isValidElement17(event.nativeEvent) || isButton)
        return;
      const shouldClickOnSpace = clickOnSpace && event.key === " ";
      if (shouldClickOnSpace) {
        event.preventDefault();
        setIsPressed(false);
        const self = event.currentTarget;
        self.click();
      }
    },
    [clickOnSpace, isButton, isDisabled26, onKeyUp]
  );
  const onDocumentMouseUp = (0, import_react251.useCallback)(
    (event) => {
      if (event.button !== 0)
        return;
      setIsPressed(false);
      listeners.remove(document, "mouseup", onDocumentMouseUp, false);
    },
    [listeners]
  );
  const handleMouseDown = (0, import_react251.useCallback)(
    (event) => {
      if (event.button !== 0)
        return;
      if (isDisabled26) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }
      if (!isButton) {
        setIsPressed(true);
      }
      const target = event.currentTarget;
      target.focus({ preventScroll: true });
      listeners.add(document, "mouseup", onDocumentMouseUp, false);
      onMouseDown == null ? void 0 : onMouseDown(event);
    },
    [isDisabled26, isButton, onMouseDown, listeners, onDocumentMouseUp]
  );
  const handleMouseUp = (0, import_react251.useCallback)(
    (event) => {
      if (event.button !== 0)
        return;
      if (!isButton) {
        setIsPressed(false);
      }
      onMouseUp == null ? void 0 : onMouseUp(event);
    },
    [onMouseUp, isButton]
  );
  const handleMouseOver = (0, import_react251.useCallback)(
    (event) => {
      if (isDisabled26) {
        event.preventDefault();
        return;
      }
      onMouseOver == null ? void 0 : onMouseOver(event);
    },
    [isDisabled26, onMouseOver]
  );
  const handleMouseLeave = (0, import_react251.useCallback)(
    (event) => {
      if (isPressed) {
        event.preventDefault();
        setIsPressed(false);
      }
      onMouseLeave == null ? void 0 : onMouseLeave(event);
    },
    [isPressed, onMouseLeave]
  );
  const ref = mergeRefs4(htmlRef, refCallback);
  if (isButton) {
    return {
      ...htmlProps,
      ref,
      type: "button",
      "aria-disabled": trulyDisabled ? void 0 : isDisabled26,
      disabled: trulyDisabled,
      onClick: handleClick,
      onMouseDown,
      onMouseUp,
      onKeyUp,
      onKeyDown,
      onMouseOver,
      onMouseLeave
    };
  }
  return {
    ...htmlProps,
    ref,
    role: "button",
    "data-active": dataAttr(isPressed),
    "aria-disabled": isDisabled26 ? "true" : void 0,
    tabIndex: trulyDisabled ? void 0 : tabIndex,
    onClick: handleClick,
    onMouseDown: handleMouseDown,
    onMouseUp: handleMouseUp,
    onKeyUp: handleKeyUp,
    onKeyDown: handleKeyDown,
    onMouseOver: handleMouseOver,
    onMouseLeave: handleMouseLeave
  };
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/descendant/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/descendant/dist/chunk-D5UZ3RNN.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/descendant/dist/chunk-P6SLLHUK.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/descendant/dist/chunk-N7WDF4QK.mjs
init_shim();
var import_react252 = __toESM(require_react(), 1);
var __defProp3 = Object.defineProperty;
var __defNormalProp3 = (obj, key, value) => key in obj ? __defProp3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField14 = (obj, key, value) => {
  __defNormalProp3(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
function sortNodes2(nodes) {
  return nodes.sort((a, b) => {
    const compare = a.compareDocumentPosition(b);
    if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY) {
      return -1;
    }
    if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS) {
      return 1;
    }
    if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) {
      throw Error("Cannot sort the given nodes.");
    } else {
      return 0;
    }
  });
}
var isElement15 = (el) => typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
function getNextIndex15(current, max, loop) {
  let next = current + 1;
  if (loop && next >= max)
    next = 0;
  return next;
}
function getPrevIndex14(current, max, loop) {
  let next = current - 1;
  if (loop && next < 0)
    next = max;
  return next;
}
var useSafeLayoutEffect4 = typeof window !== "undefined" ? import_react252.useLayoutEffect : import_react252.useEffect;
var cast3 = (value) => value;

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/descendant/dist/chunk-P6SLLHUK.mjs
var DescendantsManager2 = class {
  constructor() {
    __publicField14(this, "descendants", /* @__PURE__ */ new Map());
    __publicField14(this, "register", (nodeOrOptions) => {
      if (nodeOrOptions == null)
        return;
      if (isElement15(nodeOrOptions)) {
        return this.registerNode(nodeOrOptions);
      }
      return (node2) => {
        this.registerNode(node2, nodeOrOptions);
      };
    });
    __publicField14(this, "unregister", (node2) => {
      this.descendants.delete(node2);
      const sorted = sortNodes2(Array.from(this.descendants.keys()));
      this.assignIndex(sorted);
    });
    __publicField14(this, "destroy", () => {
      this.descendants.clear();
    });
    __publicField14(this, "assignIndex", (descendants) => {
      this.descendants.forEach((descendant) => {
        const index = descendants.indexOf(descendant.node);
        descendant.index = index;
        descendant.node.dataset["index"] = descendant.index.toString();
      });
    });
    __publicField14(this, "count", () => this.descendants.size);
    __publicField14(this, "enabledCount", () => this.enabledValues().length);
    __publicField14(this, "values", () => {
      const values = Array.from(this.descendants.values());
      return values.sort((a, b) => a.index - b.index);
    });
    __publicField14(this, "enabledValues", () => {
      return this.values().filter((descendant) => !descendant.disabled);
    });
    __publicField14(this, "item", (index) => {
      if (this.count() === 0)
        return void 0;
      return this.values()[index];
    });
    __publicField14(this, "enabledItem", (index) => {
      if (this.enabledCount() === 0)
        return void 0;
      return this.enabledValues()[index];
    });
    __publicField14(this, "first", () => this.item(0));
    __publicField14(this, "firstEnabled", () => this.enabledItem(0));
    __publicField14(this, "last", () => this.item(this.descendants.size - 1));
    __publicField14(this, "lastEnabled", () => {
      const lastIndex = this.enabledValues().length - 1;
      return this.enabledItem(lastIndex);
    });
    __publicField14(this, "indexOf", (node2) => {
      var _a40, _b8;
      if (!node2)
        return -1;
      return (_b8 = (_a40 = this.descendants.get(node2)) == null ? void 0 : _a40.index) != null ? _b8 : -1;
    });
    __publicField14(this, "enabledIndexOf", (node2) => {
      if (node2 == null)
        return -1;
      return this.enabledValues().findIndex((i) => i.node.isSameNode(node2));
    });
    __publicField14(this, "next", (index, loop = true) => {
      const next = getNextIndex15(index, this.count(), loop);
      return this.item(next);
    });
    __publicField14(this, "nextEnabled", (index, loop = true) => {
      const item = this.item(index);
      if (!item)
        return;
      const enabledIndex = this.enabledIndexOf(item.node);
      const nextEnabledIndex = getNextIndex15(
        enabledIndex,
        this.enabledCount(),
        loop
      );
      return this.enabledItem(nextEnabledIndex);
    });
    __publicField14(this, "prev", (index, loop = true) => {
      const prev = getPrevIndex14(index, this.count() - 1, loop);
      return this.item(prev);
    });
    __publicField14(this, "prevEnabled", (index, loop = true) => {
      const item = this.item(index);
      if (!item)
        return;
      const enabledIndex = this.enabledIndexOf(item.node);
      const prevEnabledIndex = getPrevIndex14(
        enabledIndex,
        this.enabledCount() - 1,
        loop
      );
      return this.enabledItem(prevEnabledIndex);
    });
    __publicField14(this, "registerNode", (node2, options) => {
      if (!node2 || this.descendants.has(node2))
        return;
      const keys2 = Array.from(this.descendants.keys()).concat(node2);
      const sorted = sortNodes2(keys2);
      if (options == null ? void 0 : options.disabled) {
        options.disabled = !!options.disabled;
      }
      const descendant = { node: node2, index: -1, ...options };
      this.descendants.set(node2, descendant);
      this.assignIndex(sorted);
    });
  }
};

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/descendant/dist/chunk-D5UZ3RNN.mjs
var import_react253 = __toESM(require_react(), 1);
function useDescendants2() {
  const descendants = (0, import_react253.useRef)(new DescendantsManager2());
  useSafeLayoutEffect4(() => {
    return () => descendants.current.destroy();
  });
  return descendants.current;
}
var [DescendantsContextProvider2, useDescendantsContext2] = createContext({
  name: "DescendantsProvider",
  errorMessage: "useDescendantsContext must be used within DescendantsProvider"
});
function useDescendant2(options) {
  const descendants = useDescendantsContext2();
  const [index, setIndex] = (0, import_react253.useState)(-1);
  const ref = (0, import_react253.useRef)(null);
  useSafeLayoutEffect4(() => {
    return () => {
      if (!ref.current)
        return;
      descendants.unregister(ref.current);
    };
  }, []);
  useSafeLayoutEffect4(() => {
    if (!ref.current)
      return;
    const dataIndex = Number(ref.current.dataset["index"]);
    if (index != dataIndex && !Number.isNaN(dataIndex)) {
      setIndex(dataIndex);
    }
  });
  const refCallback = options ? cast3(descendants.register(options)) : cast3(descendants.register);
  return {
    descendants,
    index,
    enabledIndex: descendants.enabledIndexOf(ref.current),
    register: mergeRefs4(refCallback, ref)
  };
}
function createDescendantContext2() {
  const ContextProvider = cast3(DescendantsContextProvider2);
  const _useDescendantsContext = () => cast3(useDescendantsContext2());
  const _useDescendant = (options) => useDescendant2(options);
  const _useDescendants = () => useDescendants2();
  return [
    ContextProvider,
    _useDescendantsContext,
    _useDescendants,
    _useDescendant
  ];
}

// node_modules/@chakra-ui/react-use-focus-effect/dist/index.mjs
init_shim();
var import_react254 = __toESM(require_react(), 1);
function preventReturnFocus2(containerRef) {
  const el = containerRef.current;
  if (!el)
    return false;
  const activeElement = getActiveElement12(el);
  if (!activeElement)
    return false;
  if (el.contains(activeElement))
    return false;
  if (isTabbable11(activeElement))
    return true;
  return false;
}
function useFocusOnHide2(containerRef, options) {
  const { shouldFocus: shouldFocusProp, visible, focusRef } = options;
  const shouldFocus = shouldFocusProp && !visible;
  useUpdateEffect(() => {
    if (!shouldFocus)
      return;
    if (preventReturnFocus2(containerRef)) {
      return;
    }
    const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;
    if (el) {
      requestAnimationFrame(() => {
        el.focus();
      });
    }
  }, [shouldFocus, containerRef, focusRef]);
}
var defaultOptions2 = {
  preventScroll: true,
  shouldFocus: false
};
function useFocusOnShow2(target, options = defaultOptions2) {
  const { focusRef, preventScroll, shouldFocus, visible } = options;
  const element = isRefObject15(target) ? target.current : target;
  const autoFocusValue = shouldFocus && visible;
  const autoFocusRef = (0, import_react254.useRef)(autoFocusValue);
  const lastVisibleRef = (0, import_react254.useRef)(visible);
  useSafeLayoutEffect(() => {
    if (!lastVisibleRef.current && visible) {
      autoFocusRef.current = autoFocusValue;
    }
    lastVisibleRef.current = visible;
  }, [visible, autoFocusValue]);
  const onFocus3 = (0, import_react254.useCallback)(() => {
    if (!visible || !element || !autoFocusRef.current)
      return;
    autoFocusRef.current = false;
    if (element.contains(document.activeElement))
      return;
    if (focusRef == null ? void 0 : focusRef.current) {
      requestAnimationFrame(() => {
        var _a40;
        (_a40 = focusRef.current) == null ? void 0 : _a40.focus({ preventScroll });
      });
    } else {
      const tabbableEls = getAllFocusable11(element);
      if (tabbableEls.length > 0) {
        requestAnimationFrame(() => {
          tabbableEls[0].focus({ preventScroll });
        });
      }
    }
  }, [visible, preventScroll, element, focusRef]);
  useUpdateEffect(() => {
    onFocus3();
  }, [onFocus3]);
  useEventListener(element, "transitionend", onFocus3);
}
function isRefObject15(val) {
  return "current" in val;
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/popper/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/popper/dist/chunk-HJWVQQGO.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/popper/dist/chunk-SSFABIB2.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/popper/dist/chunk-QAKUNGSB.mjs
init_shim();
var toVar3 = (value, fallback) => ({
  var: value,
  varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`
});
var cssVars = {
  arrowShadowColor: toVar3("--popper-arrow-shadow-color"),
  arrowSize: toVar3("--popper-arrow-size", "8px"),
  arrowSizeHalf: toVar3("--popper-arrow-size-half"),
  arrowBg: toVar3("--popper-arrow-bg"),
  transformOrigin: toVar3("--popper-transform-origin"),
  arrowOffset: toVar3("--popper-arrow-offset")
};
function getBoxShadow(placement) {
  if (placement.includes("top"))
    return `1px 1px 1px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("bottom"))
    return `-1px -1px 1px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("right"))
    return `-1px 1px 1px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("left"))
    return `1px -1px 1px 0 var(--popper-arrow-shadow-color)`;
}
var transforms = {
  top: "bottom center",
  "top-start": "bottom left",
  "top-end": "bottom right",
  bottom: "top center",
  "bottom-start": "top left",
  "bottom-end": "top right",
  left: "right center",
  "left-start": "right top",
  "left-end": "right bottom",
  right: "left center",
  "right-start": "left top",
  "right-end": "left bottom"
};
var toTransformOrigin = (placement) => transforms[placement];
var defaultEventListeners = {
  scroll: true,
  resize: true
};
function getEventListenerOptions(value) {
  let eventListeners;
  if (typeof value === "object") {
    eventListeners = {
      enabled: true,
      options: { ...defaultEventListeners, ...value }
    };
  } else {
    eventListeners = {
      enabled: value,
      options: defaultEventListeners
    };
  }
  return eventListeners;
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/popper/dist/chunk-SSFABIB2.mjs
var matchWidth = {
  name: "matchWidth",
  enabled: true,
  phase: "beforeWrite",
  requires: ["computeStyles"],
  fn: ({ state: state2 }) => {
    state2.styles.popper.width = `${state2.rects.reference.width}px`;
  },
  effect: ({ state: state2 }) => () => {
    const reference = state2.elements.reference;
    state2.elements.popper.style.width = `${reference.offsetWidth}px`;
  }
};
var transformOrigin = {
  name: "transformOrigin",
  enabled: true,
  phase: "write",
  fn: ({ state: state2 }) => {
    setTransformOrigin(state2);
  },
  effect: ({ state: state2 }) => () => {
    setTransformOrigin(state2);
  }
};
var setTransformOrigin = (state2) => {
  state2.elements.popper.style.setProperty(
    cssVars.transformOrigin.var,
    toTransformOrigin(state2.placement)
  );
};
var positionArrow = {
  name: "positionArrow",
  enabled: true,
  phase: "afterWrite",
  fn: ({ state: state2 }) => {
    setArrowStyles(state2);
  }
};
var setArrowStyles = (state2) => {
  var _a40;
  if (!state2.placement)
    return;
  const overrides = getArrowStyle(state2.placement);
  if (((_a40 = state2.elements) == null ? void 0 : _a40.arrow) && overrides) {
    Object.assign(state2.elements.arrow.style, {
      [overrides.property]: overrides.value,
      width: cssVars.arrowSize.varRef,
      height: cssVars.arrowSize.varRef,
      zIndex: -1
    });
    const vars3 = {
      [cssVars.arrowSizeHalf.var]: `calc(${cssVars.arrowSize.varRef} / 2)`,
      [cssVars.arrowOffset.var]: `calc(${cssVars.arrowSizeHalf.varRef} * -1)`
    };
    for (const property in vars3) {
      state2.elements.arrow.style.setProperty(property, vars3[property]);
    }
  }
};
var getArrowStyle = (placement) => {
  if (placement.startsWith("top")) {
    return { property: "bottom", value: cssVars.arrowOffset.varRef };
  }
  if (placement.startsWith("bottom")) {
    return { property: "top", value: cssVars.arrowOffset.varRef };
  }
  if (placement.startsWith("left")) {
    return { property: "right", value: cssVars.arrowOffset.varRef };
  }
  if (placement.startsWith("right")) {
    return { property: "left", value: cssVars.arrowOffset.varRef };
  }
};
var innerArrow = {
  name: "innerArrow",
  enabled: true,
  phase: "main",
  requires: ["arrow"],
  fn: ({ state: state2 }) => {
    setInnerArrowStyles(state2);
  },
  effect: ({ state: state2 }) => () => {
    setInnerArrowStyles(state2);
  }
};
var setInnerArrowStyles = (state2) => {
  if (!state2.elements.arrow)
    return;
  const inner = state2.elements.arrow.querySelector(
    "[data-popper-arrow-inner]"
  );
  if (!inner)
    return;
  const boxShadow = getBoxShadow(state2.placement);
  if (boxShadow) {
    inner.style.setProperty("--popper-arrow-default-shadow", boxShadow);
  }
  Object.assign(inner.style, {
    transform: "rotate(45deg)",
    background: cssVars.arrowBg.varRef,
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    position: "absolute",
    zIndex: "inherit",
    boxShadow: `var(--popper-arrow-shadow, var(--popper-arrow-default-shadow))`
  });
};

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/popper/dist/chunk-6DG2E3QO.mjs
init_shim();
var logicals = {
  "start-start": { ltr: "left-start", rtl: "right-start" },
  "start-end": { ltr: "left-end", rtl: "right-end" },
  "end-start": { ltr: "right-start", rtl: "left-start" },
  "end-end": { ltr: "right-end", rtl: "left-end" },
  start: { ltr: "left", rtl: "right" },
  end: { ltr: "right", rtl: "left" }
};
var opposites = {
  "auto-start": "auto-end",
  "auto-end": "auto-start",
  "top-start": "top-end",
  "top-end": "top-start",
  "bottom-start": "bottom-end",
  "bottom-end": "bottom-start"
};
function getPopperPlacement(placement, dir = "ltr") {
  var _a40, _b8;
  const value = ((_a40 = logicals[placement]) == null ? void 0 : _a40[dir]) || placement;
  if (dir === "ltr")
    return value;
  return (_b8 = opposites[placement]) != null ? _b8 : value;
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/popper/dist/chunk-HJWVQQGO.mjs
init_lib();
var import_react255 = __toESM(require_react(), 1);
function usePopper(props = {}) {
  const {
    enabled = true,
    modifiers,
    placement: placementProp = "bottom",
    strategy = "absolute",
    arrowPadding = 8,
    eventListeners = true,
    offset,
    gutter = 8,
    flip = true,
    boundary = "clippingParents",
    preventOverflow = true,
    matchWidth: matchWidth22,
    direction: direction3 = "ltr"
  } = props;
  const reference = (0, import_react255.useRef)(null);
  const popper = (0, import_react255.useRef)(null);
  const instance = (0, import_react255.useRef)(null);
  const placement = getPopperPlacement(placementProp, direction3);
  const cleanup = (0, import_react255.useRef)(() => {
  });
  const setupPopper = (0, import_react255.useCallback)(() => {
    var _a40;
    if (!enabled || !reference.current || !popper.current)
      return;
    (_a40 = cleanup.current) == null ? void 0 : _a40.call(cleanup);
    instance.current = createPopper(reference.current, popper.current, {
      placement,
      modifiers: [
        innerArrow,
        positionArrow,
        transformOrigin,
        {
          ...matchWidth,
          enabled: !!matchWidth22
        },
        {
          name: "eventListeners",
          ...getEventListenerOptions(eventListeners)
        },
        {
          name: "arrow",
          options: { padding: arrowPadding }
        },
        {
          name: "offset",
          options: {
            offset: offset != null ? offset : [0, gutter]
          }
        },
        {
          name: "flip",
          enabled: !!flip,
          options: { padding: 8 }
        },
        {
          name: "preventOverflow",
          enabled: !!preventOverflow,
          options: { boundary }
        },
        ...modifiers != null ? modifiers : []
      ],
      strategy
    });
    instance.current.forceUpdate();
    cleanup.current = instance.current.destroy;
  }, [
    placement,
    enabled,
    modifiers,
    matchWidth22,
    eventListeners,
    arrowPadding,
    offset,
    gutter,
    flip,
    preventOverflow,
    boundary,
    strategy
  ]);
  (0, import_react255.useEffect)(() => {
    return () => {
      var _a40;
      if (!reference.current && !popper.current) {
        (_a40 = instance.current) == null ? void 0 : _a40.destroy();
        instance.current = null;
      }
    };
  }, []);
  const referenceRef = (0, import_react255.useCallback)(
    (node2) => {
      reference.current = node2;
      setupPopper();
    },
    [setupPopper]
  );
  const getReferenceProps = (0, import_react255.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs4(referenceRef, ref)
    }),
    [referenceRef]
  );
  const popperRef = (0, import_react255.useCallback)(
    (node2) => {
      popper.current = node2;
      setupPopper();
    },
    [setupPopper]
  );
  const getPopperProps = (0, import_react255.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs4(popperRef, ref),
      style: {
        ...props2.style,
        position: strategy,
        minWidth: matchWidth22 ? void 0 : "max-content",
        inset: "0 auto auto 0"
      }
    }),
    [strategy, popperRef, matchWidth22]
  );
  const getArrowProps = (0, import_react255.useCallback)((props2 = {}, ref = null) => {
    const { size: size3, shadowColor, bg, style, ...rest } = props2;
    return {
      ...rest,
      ref,
      "data-popper-arrow": "",
      style: getArrowStyle2(props2)
    };
  }, []);
  const getArrowInnerProps = (0, import_react255.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref,
      "data-popper-arrow-inner": ""
    }),
    []
  );
  return {
    update() {
      var _a40;
      (_a40 = instance.current) == null ? void 0 : _a40.update();
    },
    forceUpdate() {
      var _a40;
      (_a40 = instance.current) == null ? void 0 : _a40.forceUpdate();
    },
    transformOrigin: cssVars.transformOrigin.varRef,
    referenceRef,
    popperRef,
    getPopperProps,
    getArrowProps,
    getArrowInnerProps,
    getReferenceProps
  };
}
function getArrowStyle2(props) {
  const { size: size3, shadowColor, bg, style } = props;
  const computedStyle = { ...style, position: "absolute" };
  if (size3) {
    computedStyle["--popper-arrow-size"] = size3;
  }
  if (shadowColor) {
    computedStyle["--popper-arrow-shadow-color"] = shadowColor;
  }
  if (bg) {
    computedStyle["--popper-arrow-bg"] = bg;
  }
  return computedStyle;
}

// node_modules/@chakra-ui/react-use-disclosure/dist/index.mjs
init_shim();
var import_react256 = __toESM(require_react(), 1);
function useDisclosure2(props = {}) {
  const {
    onClose: onCloseProp,
    onOpen: onOpenProp,
    isOpen: isOpenProp,
    id: idProp
  } = props;
  const handleOpen = useCallbackRef(onOpenProp);
  const handleClose = useCallbackRef(onCloseProp);
  const [isOpenState, setIsOpen] = (0, import_react256.useState)(props.defaultIsOpen || false);
  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;
  const isControlled = isOpenProp !== void 0;
  const uid = (0, import_react256.useId)();
  const id4 = idProp != null ? idProp : `disclosure-${uid}`;
  const onClose = (0, import_react256.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(false);
    }
    handleClose == null ? void 0 : handleClose();
  }, [isControlled, handleClose]);
  const onOpen = (0, import_react256.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(true);
    }
    handleOpen == null ? void 0 : handleOpen();
  }, [isControlled, handleOpen]);
  const onToggle = (0, import_react256.useCallback)(() => {
    if (isOpen) {
      onClose();
    } else {
      onOpen();
    }
  }, [isOpen, onOpen, onClose]);
  function getButtonProps(props2 = {}) {
    return {
      ...props2,
      "aria-expanded": isOpen,
      "aria-controls": id4,
      onClick(event) {
        var _a40;
        (_a40 = props2.onClick) == null ? void 0 : _a40.call(props2, event);
        onToggle();
      }
    };
  }
  function getDisclosureProps(props2 = {}) {
    return {
      ...props2,
      hidden: !isOpen,
      id: id4
    };
  }
  return {
    isOpen,
    onOpen,
    onClose,
    onToggle,
    isControlled,
    getButtonProps,
    getDisclosureProps
  };
}

// node_modules/@chakra-ui/react-use-outside-click/dist/index.mjs
init_shim();
var import_react257 = __toESM(require_react(), 1);
function useOutsideClick2(props) {
  const { ref, handler, enabled = true } = props;
  const savedHandler = useCallbackRef(handler);
  const stateRef = (0, import_react257.useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false
  });
  const state2 = stateRef.current;
  (0, import_react257.useEffect)(() => {
    if (!enabled)
      return;
    const onPointerDown = (e) => {
      if (isValidEvent2(e, ref)) {
        state2.isPointerDown = true;
      }
    };
    const onMouseUp = (event) => {
      if (state2.ignoreEmulatedMouseEvents) {
        state2.ignoreEmulatedMouseEvents = false;
        return;
      }
      if (state2.isPointerDown && handler && isValidEvent2(event, ref)) {
        state2.isPointerDown = false;
        savedHandler(event);
      }
    };
    const onTouchEnd = (event) => {
      state2.ignoreEmulatedMouseEvents = true;
      if (handler && state2.isPointerDown && isValidEvent2(event, ref)) {
        state2.isPointerDown = false;
        savedHandler(event);
      }
    };
    const doc = getOwnerDocument14(ref.current);
    doc.addEventListener("mousedown", onPointerDown, true);
    doc.addEventListener("mouseup", onMouseUp, true);
    doc.addEventListener("touchstart", onPointerDown, true);
    doc.addEventListener("touchend", onTouchEnd, true);
    return () => {
      doc.removeEventListener("mousedown", onPointerDown, true);
      doc.removeEventListener("mouseup", onMouseUp, true);
      doc.removeEventListener("touchstart", onPointerDown, true);
      doc.removeEventListener("touchend", onTouchEnd, true);
    };
  }, [handler, ref, savedHandler, state2, enabled]);
}
function isValidEvent2(event, ref) {
  var _a40;
  const target = event.target;
  if (event.button > 0)
    return false;
  if (target) {
    const doc = getOwnerDocument14(target);
    if (!doc.contains(target))
      return false;
  }
  return !((_a40 = ref.current) == null ? void 0 : _a40.contains(target));
}
function getOwnerDocument14(node2) {
  var _a40;
  return (_a40 = node2 == null ? void 0 : node2.ownerDocument) != null ? _a40 : document;
}

// node_modules/@chakra-ui/react-use-animation-state/dist/index.mjs
init_shim();
var import_react258 = __toESM(require_react(), 1);
function useAnimationState2(props) {
  const { isOpen, ref } = props;
  const [mounted, setMounted] = (0, import_react258.useState)(isOpen);
  const [once25, setOnce] = (0, import_react258.useState)(false);
  (0, import_react258.useEffect)(() => {
    if (!once25) {
      setMounted(isOpen);
      setOnce(true);
    }
  }, [isOpen, once25, mounted]);
  useEventListener(
    () => ref.current,
    "animationend",
    () => {
      setMounted(isOpen);
    }
  );
  const hidden = isOpen ? false : !mounted;
  return {
    present: !hidden,
    onComplete() {
      var _a40;
      const win = getOwnerWindow11(ref.current);
      const evt = new win.CustomEvent("animationend", { bubbles: true });
      (_a40 = ref.current) == null ? void 0 : _a40.dispatchEvent(evt);
    }
  };
}

// node_modules/@chakra-ui/lazy-utils/dist/index.mjs
init_shim();
function lazyDisclosure(options) {
  const { wasSelected, enabled, isSelected, mode: mode3 = "unmount" } = options;
  if (!enabled)
    return true;
  if (isSelected)
    return true;
  if (mode3 === "keepMounted" && wasSelected)
    return true;
  return false;
}

// node_modules/@chakra-ui/menu/dist/chunk-FLBSN5ZT.mjs
var import_react259 = __toESM(require_react(), 1);
var [
  MenuDescendantsProvider,
  useMenuDescendantsContext,
  useMenuDescendants,
  useMenuDescendant
] = createDescendantContext2();
var [MenuProvider, useMenuContext] = createContext({
  strict: false,
  name: "MenuContext"
});
function useIds2(idProp, ...prefixes) {
  const reactId = (0, import_react259.useId)();
  const id4 = idProp || reactId;
  return (0, import_react259.useMemo)(() => {
    return prefixes.map((prefix) => `${prefix}-${id4}`);
  }, [id4, prefixes]);
}
function getOwnerDocument15(node2) {
  var _a40;
  return (_a40 = node2 == null ? void 0 : node2.ownerDocument) != null ? _a40 : document;
}
function isActiveElement14(element) {
  const doc = getOwnerDocument15(element);
  return doc.activeElement === element;
}
function useMenu(props = {}) {
  const {
    id: id4,
    closeOnSelect = true,
    closeOnBlur = true,
    initialFocusRef,
    autoSelect = true,
    isLazy,
    isOpen: isOpenProp,
    defaultIsOpen,
    onClose: onCloseProp,
    onOpen: onOpenProp,
    placement = "bottom-start",
    lazyBehavior = "unmount",
    direction: direction3,
    computePositionOnMount = false,
    ...popperProps
  } = props;
  const menuRef = (0, import_react259.useRef)(null);
  const buttonRef = (0, import_react259.useRef)(null);
  const descendants = useMenuDescendants();
  const focusMenu = (0, import_react259.useCallback)(() => {
    requestAnimationFrame(() => {
      var _a40;
      (_a40 = menuRef.current) == null ? void 0 : _a40.focus({ preventScroll: false });
    });
  }, []);
  const focusFirstItem = (0, import_react259.useCallback)(() => {
    const id22 = setTimeout(() => {
      var _a40;
      if (initialFocusRef) {
        (_a40 = initialFocusRef.current) == null ? void 0 : _a40.focus();
      } else {
        const first = descendants.firstEnabled();
        if (first)
          setFocusedIndex(first.index);
      }
    });
    timeoutIds.current.add(id22);
  }, [descendants, initialFocusRef]);
  const focusLastItem = (0, import_react259.useCallback)(() => {
    const id22 = setTimeout(() => {
      const last = descendants.lastEnabled();
      if (last)
        setFocusedIndex(last.index);
    });
    timeoutIds.current.add(id22);
  }, [descendants]);
  const onOpenInternal = (0, import_react259.useCallback)(() => {
    onOpenProp == null ? void 0 : onOpenProp();
    if (autoSelect) {
      focusFirstItem();
    } else {
      focusMenu();
    }
  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp]);
  const { isOpen, onOpen, onClose, onToggle } = useDisclosure2({
    isOpen: isOpenProp,
    defaultIsOpen,
    onClose: onCloseProp,
    onOpen: onOpenInternal
  });
  useOutsideClick2({
    enabled: isOpen && closeOnBlur,
    ref: menuRef,
    handler: (event) => {
      var _a40;
      if (!((_a40 = buttonRef.current) == null ? void 0 : _a40.contains(event.target))) {
        onClose();
      }
    }
  });
  const popper = usePopper({
    ...popperProps,
    enabled: isOpen || computePositionOnMount,
    placement,
    direction: direction3
  });
  const [focusedIndex, setFocusedIndex] = (0, import_react259.useState)(-1);
  useUpdateEffect(() => {
    if (!isOpen) {
      setFocusedIndex(-1);
    }
  }, [isOpen]);
  useFocusOnHide2(menuRef, {
    focusRef: buttonRef,
    visible: isOpen,
    shouldFocus: true
  });
  const animationState = useAnimationState2({ isOpen, ref: menuRef });
  const [buttonId, menuId] = useIds2(id4, `menu-button`, `menu-list`);
  const openAndFocusMenu = (0, import_react259.useCallback)(() => {
    onOpen();
    focusMenu();
  }, [onOpen, focusMenu]);
  const timeoutIds = (0, import_react259.useRef)(/* @__PURE__ */ new Set([]));
  useUnmountEffect3(() => {
    timeoutIds.current.forEach((id22) => clearTimeout(id22));
    timeoutIds.current.clear();
  });
  const openAndFocusFirstItem = (0, import_react259.useCallback)(() => {
    onOpen();
    focusFirstItem();
  }, [focusFirstItem, onOpen]);
  const openAndFocusLastItem = (0, import_react259.useCallback)(() => {
    onOpen();
    focusLastItem();
  }, [onOpen, focusLastItem]);
  const refocus = (0, import_react259.useCallback)(() => {
    var _a40, _b8;
    const doc = getOwnerDocument15(menuRef.current);
    const hasFocusWithin26 = (_a40 = menuRef.current) == null ? void 0 : _a40.contains(doc.activeElement);
    const shouldRefocus = isOpen && !hasFocusWithin26;
    if (!shouldRefocus)
      return;
    const node2 = (_b8 = descendants.item(focusedIndex)) == null ? void 0 : _b8.node;
    node2 == null ? void 0 : node2.focus();
  }, [isOpen, focusedIndex, descendants]);
  const rafId = (0, import_react259.useRef)(null);
  return {
    openAndFocusMenu,
    openAndFocusFirstItem,
    openAndFocusLastItem,
    onTransitionEnd: refocus,
    unstable__animationState: animationState,
    descendants,
    popper,
    buttonId,
    menuId,
    forceUpdate: popper.forceUpdate,
    orientation: "vertical",
    isOpen,
    onToggle,
    onOpen,
    onClose,
    menuRef,
    buttonRef,
    focusedIndex,
    closeOnSelect,
    closeOnBlur,
    autoSelect,
    setFocusedIndex,
    isLazy,
    lazyBehavior,
    initialFocusRef,
    rafId
  };
}
function useMenuButton(props = {}, externalRef = null) {
  const menu = useMenuContext();
  const { onToggle, popper, openAndFocusFirstItem, openAndFocusLastItem } = menu;
  const onKeyDown = (0, import_react259.useCallback)(
    (event) => {
      const eventKey = event.key;
      const keyMap = {
        Enter: openAndFocusFirstItem,
        ArrowDown: openAndFocusFirstItem,
        ArrowUp: openAndFocusLastItem
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        event.stopPropagation();
        action(event);
      }
    },
    [openAndFocusFirstItem, openAndFocusLastItem]
  );
  return {
    ...props,
    ref: mergeRefs4(menu.buttonRef, externalRef, popper.referenceRef),
    id: menu.buttonId,
    "data-active": dataAttr(menu.isOpen),
    "aria-expanded": menu.isOpen,
    "aria-haspopup": "menu",
    "aria-controls": menu.menuId,
    onClick: callAllHandlers(props.onClick, onToggle),
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  };
}
function isTargetMenuItem(target) {
  var _a40;
  return isHTMLElement14(target) && !!((_a40 = target == null ? void 0 : target.getAttribute("role")) == null ? void 0 : _a40.startsWith("menuitem"));
}
function useMenuList(props = {}, ref = null) {
  const menu = useMenuContext();
  if (!menu) {
    throw new Error(
      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`
    );
  }
  const {
    focusedIndex,
    setFocusedIndex,
    menuRef,
    isOpen,
    onClose,
    menuId,
    isLazy,
    lazyBehavior,
    unstable__animationState: animated
  } = menu;
  const descendants = useMenuDescendantsContext();
  const createTypeaheadHandler = useShortcut2({
    preventDefault: (event) => event.key !== " " && isTargetMenuItem(event.target)
  });
  const onKeyDown = (0, import_react259.useCallback)(
    (event) => {
      const eventKey = event.key;
      const keyMap = {
        Tab: (event2) => event2.preventDefault(),
        Escape: onClose,
        ArrowDown: () => {
          const next = descendants.nextEnabled(focusedIndex);
          if (next)
            setFocusedIndex(next.index);
        },
        ArrowUp: () => {
          const prev = descendants.prevEnabled(focusedIndex);
          if (prev)
            setFocusedIndex(prev.index);
        }
      };
      const fn = keyMap[eventKey];
      if (fn) {
        event.preventDefault();
        fn(event);
        return;
      }
      const onTypeahead = createTypeaheadHandler((character) => {
        const nextItem = getNextItemFromSearch13(
          descendants.values(),
          character,
          (item) => {
            var _a40, _b8;
            return (_b8 = (_a40 = item == null ? void 0 : item.node) == null ? void 0 : _a40.textContent) != null ? _b8 : "";
          },
          descendants.item(focusedIndex)
        );
        if (nextItem) {
          const index = descendants.indexOf(nextItem.node);
          setFocusedIndex(index);
        }
      });
      if (isTargetMenuItem(event.target)) {
        onTypeahead(event);
      }
    },
    [
      descendants,
      focusedIndex,
      createTypeaheadHandler,
      onClose,
      setFocusedIndex
    ]
  );
  const hasBeenOpened = (0, import_react259.useRef)(false);
  if (isOpen) {
    hasBeenOpened.current = true;
  }
  const shouldRenderChildren = lazyDisclosure({
    wasSelected: hasBeenOpened.current,
    enabled: isLazy,
    mode: lazyBehavior,
    isSelected: animated.present
  });
  return {
    ...props,
    ref: mergeRefs4(menuRef, ref),
    children: shouldRenderChildren ? props.children : null,
    tabIndex: -1,
    role: "menu",
    id: menuId,
    style: {
      ...props.style,
      transformOrigin: "var(--popper-transform-origin)"
    },
    "aria-orientation": "vertical",
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  };
}
function useMenuPositioner(props = {}) {
  const { popper, isOpen } = useMenuContext();
  return popper.getPopperProps({
    ...props,
    style: {
      visibility: isOpen ? "visible" : "hidden",
      ...props.style
    }
  });
}
function useMenuItem(props = {}, externalRef = null) {
  const {
    onMouseEnter: onMouseEnterProp,
    onMouseMove: onMouseMoveProp,
    onMouseLeave: onMouseLeaveProp,
    onClick: onClickProp,
    onFocus: onFocusProp,
    isDisabled: isDisabled26,
    isFocusable: isFocusable26,
    closeOnSelect,
    type: typeProp,
    ...htmlProps
  } = props;
  const menu = useMenuContext();
  const {
    setFocusedIndex,
    focusedIndex,
    closeOnSelect: menuCloseOnSelect,
    onClose,
    menuRef,
    isOpen,
    menuId,
    rafId
  } = menu;
  const ref = (0, import_react259.useRef)(null);
  const id4 = `${menuId}-menuitem-${(0, import_react259.useId)()}`;
  const { index, register } = useMenuDescendant({
    disabled: isDisabled26 && !isFocusable26
  });
  const onMouseEnter = (0, import_react259.useCallback)(
    (event) => {
      onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
      if (isDisabled26)
        return;
      setFocusedIndex(index);
    },
    [setFocusedIndex, index, isDisabled26, onMouseEnterProp]
  );
  const onMouseMove = (0, import_react259.useCallback)(
    (event) => {
      onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
      if (ref.current && !isActiveElement14(ref.current)) {
        onMouseEnter(event);
      }
    },
    [onMouseEnter, onMouseMoveProp]
  );
  const onMouseLeave = (0, import_react259.useCallback)(
    (event) => {
      onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
      if (isDisabled26)
        return;
      setFocusedIndex(-1);
    },
    [setFocusedIndex, isDisabled26, onMouseLeaveProp]
  );
  const onClick = (0, import_react259.useCallback)(
    (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (!isTargetMenuItem(event.currentTarget))
        return;
      if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {
        onClose();
      }
    },
    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]
  );
  const onFocus3 = (0, import_react259.useCallback)(
    (event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      setFocusedIndex(index);
    },
    [setFocusedIndex, onFocusProp, index]
  );
  const isFocused = index === focusedIndex;
  const trulyDisabled = isDisabled26 && !isFocusable26;
  useUpdateEffect(() => {
    if (!isOpen)
      return;
    if (isFocused && !trulyDisabled && ref.current) {
      if (rafId.current) {
        cancelAnimationFrame(rafId.current);
      }
      rafId.current = requestAnimationFrame(() => {
        var _a40;
        (_a40 = ref.current) == null ? void 0 : _a40.focus();
        rafId.current = null;
      });
    } else if (menuRef.current && !isActiveElement14(menuRef.current)) {
      menuRef.current.focus();
    }
  }, [isFocused, trulyDisabled, menuRef, isOpen]);
  const clickableProps = useClickable({
    onClick,
    onFocus: onFocus3,
    onMouseEnter,
    onMouseMove,
    onMouseLeave,
    ref: mergeRefs4(register, ref, externalRef),
    isDisabled: isDisabled26,
    isFocusable: isFocusable26
  });
  return {
    ...htmlProps,
    ...clickableProps,
    type: typeProp != null ? typeProp : clickableProps.type,
    id: id4,
    role: "menuitem",
    tabIndex: isFocused ? 0 : -1
  };
}
function useMenuOption(props = {}, ref = null) {
  const { type = "radio", isChecked, ...rest } = props;
  const ownProps = useMenuItem(rest, ref);
  return {
    ...ownProps,
    role: `menuitem${type}`,
    "aria-checked": isChecked
  };
}
function useMenuOptionGroup(props = {}) {
  const {
    children,
    type = "radio",
    value: valueProp,
    defaultValue,
    onChange: onChangeProp,
    ...htmlProps
  } = props;
  const isRadio = type === "radio";
  const fallback = isRadio ? "" : [];
  const [value, setValue] = useControllableState({
    defaultValue: defaultValue != null ? defaultValue : fallback,
    value: valueProp,
    onChange: onChangeProp
  });
  const onChange = (0, import_react259.useCallback)(
    (selectedValue) => {
      if (type === "radio" && typeof value === "string") {
        setValue(selectedValue);
      }
      if (type === "checkbox" && Array.isArray(value)) {
        const nextValue = value.includes(selectedValue) ? value.filter((item) => item !== selectedValue) : value.concat(selectedValue);
        setValue(nextValue);
      }
    },
    [value, setValue, type]
  );
  const validChildren = getValidChildren6(children);
  const clones = validChildren.map((child) => {
    if (child.type.id !== "MenuItemOption")
      return child;
    const onClick = (event) => {
      var _a40, _b8;
      onChange(child.props.value);
      (_b8 = (_a40 = child.props).onClick) == null ? void 0 : _b8.call(_a40, event);
    };
    const isChecked = type === "radio" ? child.props.value === value : value.includes(child.props.value);
    return (0, import_react259.cloneElement)(child, {
      type,
      onClick,
      isChecked
    });
  });
  return {
    ...htmlProps,
    children: clones
  };
}
function useMenuState() {
  const { isOpen, onClose } = useMenuContext();
  return { isOpen, onClose };
}
function isHTMLElement14(el) {
  var _a40;
  if (!isElement16(el))
    return false;
  const win = (_a40 = el.ownerDocument.defaultView) != null ? _a40 : window;
  return el instanceof win.HTMLElement;
}
function isElement16(el) {
  return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
}
function useUnmountEffect3(fn, deps = []) {
  return (0, import_react259.useEffect)(
    () => () => fn(),
    deps
  );
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react261 = __toESM(require_react(), 1);
function useTheme13() {
  const theme3 = (0, import_react261.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra13() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme13();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM13() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser15 = canUseDOM13();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash18 = __toESM(require_lodash(), 1);
function omit17(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get14(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize14 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet14 = memoize14(get14);
function objectFilter13(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined13 = (object2) => objectFilter13(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction16(value) {
  return typeof value === "function";
}
var __DEV__13 = import_process.default.env.NODE_ENV !== "production";
var __TEST__13 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn16(valueOrFn, ...args) {
  return isFunction16(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once13(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn14 = once13((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__13) {
    console.warn(message);
  }
});
var error13 = once13((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__13) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger13 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger13 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep13 = 1 / 60 * 1e3;
var getCurrentTime13 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame13 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime13()), defaultTimestep13);

// node_modules/@chakra-ui/menu/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep14(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/menu/node_modules/framesync/dist/es/index.mjs
var maxElapsed14 = 40;
var useDefaultElapsed14 = true;
var runNextFrame14 = false;
var isProcessing13 = false;
var frame14 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder14 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps14 = stepsOrder14.reduce((acc, key) => {
  acc[key] = createRenderStep14(() => runNextFrame14 = true);
  return acc;
}, {});
var sync14 = stepsOrder14.reduce((acc, key) => {
  const step = steps14[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame14)
      startLoop14();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync14 = stepsOrder14.reduce((acc, key) => {
  acc[key] = steps14[key].cancel;
  return acc;
}, {});
var flushSync13 = stepsOrder14.reduce((acc, key) => {
  acc[key] = () => steps14[key].process(frame14);
  return acc;
}, {});
var processStep14 = (stepId) => steps14[stepId].process(frame14);
var processFrame14 = (timestamp) => {
  runNextFrame14 = false;
  frame14.delta = useDefaultElapsed14 ? defaultTimestep13 : Math.max(Math.min(timestamp - frame14.timestamp, maxElapsed14), 1);
  frame14.timestamp = timestamp;
  isProcessing13 = true;
  stepsOrder14.forEach(processStep14);
  isProcessing13 = false;
  if (runNextFrame14) {
    useDefaultElapsed14 = false;
    onNextFrame13(processFrame14);
  }
};
var startLoop14 = () => {
  runNextFrame14 = true;
  useDefaultElapsed14 = true;
  if (!isProcessing13)
    onNextFrame13(processFrame14);
};

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints16 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList14 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector14 = focusableElList14.join();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react262 = __toESM(require_react(), 1);
var import_react_fast_compare13 = __toESM(require_react_fast_compare13(), 1);
function useStyleConfigImpl11(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra13();
  const themeStyleConfig = themeKey ? memoizedGet14(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash18.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined13(omit17(rest, ["children"]))
  );
  const stylesRef = (0, import_react262.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare13.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useMultiStyleConfig13(themeKey, props = {}) {
  return useStyleConfigImpl11(themeKey, props);
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames13 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps13 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp13(prop) {
  return validHTMLProps13.has(prop) || !allPropNames13.has(prop);
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react263 = __toESM(require_react(), 1);
var _a27;
var emotion_styled13 = (_a27 = emotion_styled_browser_esm_default.default) != null ? _a27 : emotion_styled_browser_esm_default;
var toCSSObject13 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter13(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn16(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined13(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled13(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp13;
  }
  const styleObject = toCSSObject13({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled13(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react263.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react263.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory13() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled13, {
    apply(target, thisArg, argArray) {
      return styled13(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled13(element));
      }
      return cache.get(element);
    }
  });
}
var chakra13 = factory13();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react264 = __toESM(require_react(), 1);
function forwardRef23(component) {
  return (0, import_react264.forwardRef)(component);
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react265 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react266 = __toESM(require_react(), 1);
function createContext25(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react266.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react266.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react268 = __toESM(require_react(), 1);
var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider13, useStyles13] = createContext25({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/menu/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/menu/dist/chunk-6BD5HRZF.mjs
var import_react270 = __toESM(require_react(), 1);
var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
var [MenuStylesProvider, useMenuStyles] = createContext({
  name: `MenuStylesContext`,
  errorMessage: `useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Menu />" `
});
var Menu = (props) => {
  const { children } = props;
  const styles3 = useMultiStyleConfig13("Menu", props);
  const ownProps = omitThemingProps(props);
  const { direction: direction3 } = useTheme13();
  const { descendants, ...ctx } = useMenu({ ...ownProps, direction: direction3 });
  const context = (0, import_react270.useMemo)(() => ctx, [ctx]);
  const { isOpen, onClose, forceUpdate } = context;
  return (0, import_jsx_runtime115.jsx)(MenuDescendantsProvider, { value: descendants, children: (0, import_jsx_runtime115.jsx)(MenuProvider, { value: context, children: (0, import_jsx_runtime115.jsx)(MenuStylesProvider, { value: styles3, children: runIfFn(children, { isOpen, onClose, forceUpdate }) }) }) });
};
Menu.displayName = "Menu";

// node_modules/@chakra-ui/menu/dist/chunk-2PVUH2BB.mjs
var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);
var MenuCommand = forwardRef23(
  (props, ref) => {
    const styles3 = useMenuStyles();
    return (0, import_jsx_runtime116.jsx)(
      chakra13.span,
      {
        ref,
        ...props,
        __css: styles3.command,
        className: "chakra-menu__command"
      }
    );
  }
);
MenuCommand.displayName = "MenuCommand";

// node_modules/@chakra-ui/menu/dist/chunk-6HALNP4G.mjs
init_shim();
var import_react271 = __toESM(require_react(), 1);
var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);
var StyledMenuItem = forwardRef23(
  (props, ref) => {
    const { type, ...rest } = props;
    const styles3 = useMenuStyles();
    const btnType = rest.as || type ? type != null ? type : void 0 : "button";
    const buttonStyles = (0, import_react271.useMemo)(
      () => ({
        textDecoration: "none",
        color: "inherit",
        userSelect: "none",
        display: "flex",
        width: "100%",
        alignItems: "center",
        textAlign: "start",
        flex: "0 0 auto",
        outline: 0,
        ...styles3.item
      }),
      [styles3.item]
    );
    return (0, import_jsx_runtime117.jsx)(chakra13.button, { ref, type: btnType, ...rest, __css: buttonStyles });
  }
);

// node_modules/@chakra-ui/menu/dist/chunk-I3AUOXDN.mjs
init_shim();
var import_react272 = __toESM(require_react(), 1);
var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);
var MenuIcon = (props) => {
  const { className, children, ...rest } = props;
  const child = import_react272.Children.only(children);
  const clone = (0, import_react272.isValidElement)(child) ? (0, import_react272.cloneElement)(child, {
    focusable: "false",
    "aria-hidden": true,
    className: cx("chakra-menu__icon", child.props.className)
  }) : null;
  const _className = cx("chakra-menu__icon-wrapper", className);
  return (0, import_jsx_runtime118.jsx)(
    chakra13.span,
    {
      className: _className,
      ...rest,
      __css: {
        flexShrink: 0
      },
      children: clone
    }
  );
};
MenuIcon.displayName = "MenuIcon";

// node_modules/@chakra-ui/menu/dist/chunk-AMNETMCR.mjs
var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
var MenuItem = forwardRef23((props, ref) => {
  const {
    icon,
    iconSpacing: iconSpacing3 = "0.75rem",
    command,
    commandSpacing = "0.75rem",
    children,
    ...rest
  } = props;
  const menuitemProps = useMenuItem(rest, ref);
  const shouldWrap = icon || command;
  const _children = shouldWrap ? (0, import_jsx_runtime119.jsx)("span", { style: { pointerEvents: "none", flex: 1 }, children }) : children;
  return (0, import_jsx_runtime119.jsxs)(
    StyledMenuItem,
    {
      ...menuitemProps,
      className: cx("chakra-menu__menuitem", menuitemProps.className),
      children: [
        icon && (0, import_jsx_runtime119.jsx)(MenuIcon, { fontSize: "0.8em", marginEnd: iconSpacing3, children: icon }),
        _children,
        command && (0, import_jsx_runtime119.jsx)(MenuCommand, { marginStart: commandSpacing, children: command })
      ]
    }
  );
});
MenuItem.displayName = "MenuItem";

// node_modules/@chakra-ui/menu/dist/chunk-CE6C7IBM.mjs
init_shim();
var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);
var motionVariants = {
  enter: {
    visibility: "visible",
    opacity: 1,
    scale: 1,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    transitionEnd: {
      visibility: "hidden"
    },
    opacity: 0,
    scale: 0.8,
    transition: {
      duration: 0.1,
      easings: "easeOut"
    }
  }
};
var MenuTransition = chakra13(motion.div);
var MenuList = forwardRef23(function MenuList2(props, ref) {
  var _a40, _b8;
  const { rootProps, motionProps, ...rest } = props;
  const {
    isOpen,
    onTransitionEnd,
    unstable__animationState: animated
  } = useMenuContext();
  const listProps = useMenuList(rest, ref);
  const positionerProps = useMenuPositioner(rootProps);
  const styles3 = useMenuStyles();
  return (0, import_jsx_runtime120.jsx)(
    chakra13.div,
    {
      ...positionerProps,
      __css: { zIndex: (_b8 = props.zIndex) != null ? _b8 : (_a40 = styles3.list) == null ? void 0 : _a40.zIndex },
      children: (0, import_jsx_runtime120.jsx)(
        MenuTransition,
        {
          variants: motionVariants,
          initial: false,
          animate: isOpen ? "enter" : "exit",
          __css: { outline: 0, ...styles3.list },
          ...motionProps,
          className: cx("chakra-menu__menu-list", listProps.className),
          ...listProps,
          onUpdate: onTransitionEnd,
          onAnimationComplete: callAll(
            animated.onComplete,
            listProps.onAnimationComplete
          )
        }
      )
    }
  );
});
MenuList.displayName = "MenuList";

// node_modules/@chakra-ui/menu/dist/chunk-JKDCSSU5.mjs
init_shim();

// node_modules/@chakra-ui/menu/dist/chunk-SQI4IQGP.mjs
init_shim();
var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
var MenuGroup = forwardRef23((props, ref) => {
  const { title, children, className, ...rest } = props;
  const _className = cx("chakra-menu__group__title", className);
  const styles3 = useMenuStyles();
  return (0, import_jsx_runtime121.jsxs)("div", { ref, className: "chakra-menu__group", role: "group", children: [
    title && (0, import_jsx_runtime121.jsx)(chakra13.p, { className: _className, ...rest, __css: styles3.groupTitle, children: title }),
    children
  ] });
});
MenuGroup.displayName = "MenuGroup";

// node_modules/@chakra-ui/menu/dist/chunk-JKDCSSU5.mjs
var import_jsx_runtime122 = __toESM(require_jsx_runtime(), 1);
var MenuOptionGroup = (props) => {
  const { className, title, ...rest } = props;
  const ownProps = useMenuOptionGroup(rest);
  return (0, import_jsx_runtime122.jsx)(
    MenuGroup,
    {
      title,
      className: cx("chakra-menu__option-group", className),
      ...ownProps
    }
  );
};
MenuOptionGroup.displayName = "MenuOptionGroup";

// node_modules/@chakra-ui/menu/dist/chunk-WO74RHXC.mjs
init_shim();
var import_jsx_runtime123 = __toESM(require_jsx_runtime(), 1);
var StyledMenuButton = forwardRef23((props, ref) => {
  const styles3 = useMenuStyles();
  return (0, import_jsx_runtime123.jsx)(
    chakra13.button,
    {
      ref,
      ...props,
      __css: {
        display: "inline-flex",
        appearance: "none",
        alignItems: "center",
        outline: 0,
        ...styles3.button
      }
    }
  );
});
var MenuButton = forwardRef23(
  (props, ref) => {
    const { children, as: As, ...rest } = props;
    const buttonProps = useMenuButton(rest, ref);
    const Element2 = As || StyledMenuButton;
    return (0, import_jsx_runtime123.jsx)(
      Element2,
      {
        ...buttonProps,
        className: cx("chakra-menu__menu-button", props.className),
        children: (0, import_jsx_runtime123.jsx)(
          chakra13.span,
          {
            __css: { pointerEvents: "none", flex: "1 1 auto", minW: 0 },
            children: props.children
          }
        )
      }
    );
  }
);
MenuButton.displayName = "MenuButton";

// node_modules/@chakra-ui/menu/dist/chunk-GQDAXL2G.mjs
init_shim();
var import_jsx_runtime124 = __toESM(require_jsx_runtime(), 1);
var MenuDivider = (props) => {
  const { className, ...rest } = props;
  const styles3 = useMenuStyles();
  return (0, import_jsx_runtime124.jsx)(
    chakra13.hr,
    {
      "aria-orientation": "horizontal",
      className: cx("chakra-menu__divider", className),
      ...rest,
      __css: styles3.divider
    }
  );
};
MenuDivider.displayName = "MenuDivider";

// node_modules/@chakra-ui/menu/dist/chunk-I2PJQYUR.mjs
init_shim();
var import_jsx_runtime125 = __toESM(require_jsx_runtime(), 1);
var CheckIcon3 = (props) => (0, import_jsx_runtime125.jsx)("svg", { viewBox: "0 0 14 14", width: "1em", height: "1em", ...props, children: (0, import_jsx_runtime125.jsx)(
  "polygon",
  {
    fill: "currentColor",
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }
) });
var MenuItemOption = forwardRef23(
  (props, ref) => {
    const { icon, iconSpacing: iconSpacing3 = "0.75rem", ...rest } = props;
    const optionProps = useMenuOption(rest, ref);
    return (0, import_jsx_runtime125.jsxs)(
      StyledMenuItem,
      {
        ...optionProps,
        className: cx("chakra-menu__menuitem-option", rest.className),
        children: [
          icon !== null && (0, import_jsx_runtime125.jsx)(
            MenuIcon,
            {
              fontSize: "0.8em",
              marginEnd: iconSpacing3,
              opacity: props.isChecked ? 1 : 0,
              children: icon || (0, import_jsx_runtime125.jsx)(CheckIcon3, {})
            }
          ),
          (0, import_jsx_runtime125.jsx)("span", { style: { flex: 1 }, children: optionProps.children })
        ]
      }
    );
  }
);
MenuItemOption.id = "MenuItemOption";
MenuItemOption.displayName = "MenuItemOption";

// node_modules/@chakra-ui/modal/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/modal/dist/chunk-BPJV7R7V.mjs
init_shim();

// node_modules/@chakra-ui/modal/dist/chunk-66WFFNY3.mjs
init_shim();

// node_modules/@chakra-ui/modal/dist/chunk-XV7ZWFID.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react274 = __toESM(require_react(), 1);
function useTheme14() {
  const theme3 = (0, import_react274.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra14() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme14();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM14() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser16 = canUseDOM14();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash19 = __toESM(require_lodash(), 1);
function omit18(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get15(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize15 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet15 = memoize15(get15);
function objectFilter14(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined14 = (object2) => objectFilter14(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction17(value) {
  return typeof value === "function";
}
var __DEV__14 = import_process.default.env.NODE_ENV !== "production";
var __TEST__14 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn17(valueOrFn, ...args) {
  return isFunction17(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once14(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn15 = once14((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__14) {
    console.warn(message);
  }
});
var error14 = once14((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__14) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger14 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger14 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep14 = 1 / 60 * 1e3;
var getCurrentTime14 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame14 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime14()), defaultTimestep14);

// node_modules/@chakra-ui/modal/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep15(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/modal/node_modules/framesync/dist/es/index.mjs
var maxElapsed15 = 40;
var useDefaultElapsed15 = true;
var runNextFrame15 = false;
var isProcessing14 = false;
var frame15 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder15 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps15 = stepsOrder15.reduce((acc, key) => {
  acc[key] = createRenderStep15(() => runNextFrame15 = true);
  return acc;
}, {});
var sync15 = stepsOrder15.reduce((acc, key) => {
  const step = steps15[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame15)
      startLoop15();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync15 = stepsOrder15.reduce((acc, key) => {
  acc[key] = steps15[key].cancel;
  return acc;
}, {});
var flushSync14 = stepsOrder15.reduce((acc, key) => {
  acc[key] = () => steps15[key].process(frame15);
  return acc;
}, {});
var processStep15 = (stepId) => steps15[stepId].process(frame15);
var processFrame15 = (timestamp) => {
  runNextFrame15 = false;
  frame15.delta = useDefaultElapsed15 ? defaultTimestep14 : Math.max(Math.min(timestamp - frame15.timestamp, maxElapsed15), 1);
  frame15.timestamp = timestamp;
  isProcessing14 = true;
  stepsOrder15.forEach(processStep15);
  isProcessing14 = false;
  if (runNextFrame15) {
    useDefaultElapsed15 = false;
    onNextFrame14(processFrame15);
  }
};
var startLoop15 = () => {
  runNextFrame15 = true;
  useDefaultElapsed15 = true;
  if (!isProcessing14)
    onNextFrame14(processFrame15);
};

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints17 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList15 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector15 = focusableElList15.join();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react275 = __toESM(require_react(), 1);
var import_react_fast_compare14 = __toESM(require_react_fast_compare14(), 1);
function useStyleConfigImpl12(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra14();
  const themeStyleConfig = themeKey ? memoizedGet15(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash19.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined14(omit18(rest, ["children"]))
  );
  const stylesRef = (0, import_react275.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare14.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig14(themeKey, props = {}) {
  return useStyleConfigImpl12(themeKey, props);
}
function useMultiStyleConfig14(themeKey, props = {}) {
  return useStyleConfigImpl12(themeKey, props);
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames14 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps14 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp14(prop) {
  return validHTMLProps14.has(prop) || !allPropNames14.has(prop);
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react276 = __toESM(require_react(), 1);
var _a28;
var emotion_styled14 = (_a28 = emotion_styled_browser_esm_default.default) != null ? _a28 : emotion_styled_browser_esm_default;
var toCSSObject14 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter14(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn17(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined14(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled14(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp14;
  }
  const styleObject = toCSSObject14({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled14(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react276.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react276.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory14() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled14, {
    apply(target, thisArg, argArray) {
      return styled14(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled14(element));
      }
      return cache.get(element);
    }
  });
}
var chakra14 = factory14();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react277 = __toESM(require_react(), 1);
function forwardRef24(component) {
  return (0, import_react277.forwardRef)(component);
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react278 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react279 = __toESM(require_react(), 1);
function createContext26(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react279.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react279.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react281 = __toESM(require_react(), 1);
var import_jsx_runtime126 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider14, useStyles14] = createContext26({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/transition/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/transition/dist/chunk-LRMLOJAR.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/transition/dist/chunk-LB6CWFOC.mjs
init_shim();
var TRANSITION_EASINGS2 = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
var TRANSITION_VARIANTS2 = {
  scale: {
    enter: { scale: 1 },
    exit: { scale: 0.95 }
  },
  fade: {
    enter: { opacity: 1 },
    exit: { opacity: 0 }
  },
  pushLeft: {
    enter: { x: "100%" },
    exit: { x: "-30%" }
  },
  pushRight: {
    enter: { x: "-100%" },
    exit: { x: "30%" }
  },
  pushUp: {
    enter: { y: "100%" },
    exit: { y: "-30%" }
  },
  pushDown: {
    enter: { y: "-100%" },
    exit: { y: "30%" }
  },
  slideLeft: {
    position: { left: 0, top: 0, bottom: 0, width: "100%" },
    enter: { x: 0, y: 0 },
    exit: { x: "-100%", y: 0 }
  },
  slideRight: {
    position: { right: 0, top: 0, bottom: 0, width: "100%" },
    enter: { x: 0, y: 0 },
    exit: { x: "100%", y: 0 }
  },
  slideUp: {
    position: { top: 0, left: 0, right: 0, maxWidth: "100vw" },
    enter: { x: 0, y: 0 },
    exit: { x: 0, y: "-100%" }
  },
  slideDown: {
    position: { bottom: 0, left: 0, right: 0, maxWidth: "100vw" },
    enter: { x: 0, y: 0 },
    exit: { x: 0, y: "100%" }
  }
};
function getSlideTransition2(options) {
  var _a40;
  const side = (_a40 = options == null ? void 0 : options.direction) != null ? _a40 : "right";
  switch (side) {
    case "right":
      return TRANSITION_VARIANTS2.slideRight;
    case "left":
      return TRANSITION_VARIANTS2.slideLeft;
    case "bottom":
      return TRANSITION_VARIANTS2.slideDown;
    case "top":
      return TRANSITION_VARIANTS2.slideUp;
    default:
      return TRANSITION_VARIANTS2.slideRight;
  }
}
var TRANSITION_DEFAULTS2 = {
  enter: {
    duration: 0.2,
    ease: TRANSITION_EASINGS2.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TRANSITION_EASINGS2.easeIn
  }
};
var withDelay2 = {
  enter: (transition4, delay2) => ({
    ...transition4,
    delay: typeof delay2 === "number" ? delay2 : delay2 == null ? void 0 : delay2["enter"]
  }),
  exit: (transition4, delay2) => ({
    ...transition4,
    delay: typeof delay2 === "number" ? delay2 : delay2 == null ? void 0 : delay2["exit"]
  })
};

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/transition/dist/chunk-LRMLOJAR.mjs
var import_react283 = __toESM(require_react(), 1);
var import_jsx_runtime127 = __toESM(require_jsx_runtime(), 1);
var isNumeric16 = (value) => value != null && parseInt(value.toString(), 10) > 0;
var defaultTransitions2 = {
  exit: {
    height: { duration: 0.2, ease: TRANSITION_EASINGS2.ease },
    opacity: { duration: 0.3, ease: TRANSITION_EASINGS2.ease }
  },
  enter: {
    height: { duration: 0.3, ease: TRANSITION_EASINGS2.ease },
    opacity: { duration: 0.4, ease: TRANSITION_EASINGS2.ease }
  }
};
var variants30 = {
  exit: ({
    animateOpacity,
    startingHeight,
    transition: transition4,
    transitionEnd,
    delay: delay2
  }) => {
    var _a40;
    return {
      ...animateOpacity && { opacity: isNumeric16(startingHeight) ? 1 : 0 },
      height: startingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay2.exit(defaultTransitions2.exit, delay2)
    };
  },
  enter: ({
    animateOpacity,
    endingHeight,
    transition: transition4,
    transitionEnd,
    delay: delay2
  }) => {
    var _a40;
    return {
      ...animateOpacity && { opacity: 1 },
      height: endingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay2.enter(defaultTransitions2.enter, delay2)
    };
  }
};
var Collapse2 = (0, import_react283.forwardRef)(
  (props, ref) => {
    const {
      in: isOpen,
      unmountOnExit,
      animateOpacity = true,
      startingHeight = 0,
      endingHeight = "auto",
      style,
      className,
      transition: transition4,
      transitionEnd,
      ...rest
    } = props;
    const [mounted, setMounted] = (0, import_react283.useState)(false);
    (0, import_react283.useEffect)(() => {
      const timeout = setTimeout(() => {
        setMounted(true);
      });
      return () => clearTimeout(timeout);
    }, []);
    warn({
      condition: Number(startingHeight) > 0 && !!unmountOnExit,
      message: `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`
    });
    const hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
    const custom = {
      startingHeight,
      endingHeight,
      animateOpacity,
      transition: !mounted ? { enter: { duration: 0 } } : transition4,
      transitionEnd: {
        enter: transitionEnd == null ? void 0 : transitionEnd.enter,
        exit: unmountOnExit ? transitionEnd == null ? void 0 : transitionEnd.exit : {
          ...transitionEnd == null ? void 0 : transitionEnd.exit,
          display: hasStartingHeight ? "block" : "none"
        }
      }
    };
    const show = unmountOnExit ? isOpen : true;
    const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
    return (0, import_jsx_runtime127.jsx)(AnimatePresence, { initial: false, custom, children: show && (0, import_jsx_runtime127.jsx)(
      motion.div,
      {
        ref,
        ...rest,
        className: cx("chakra-collapse", className),
        style: {
          overflow: "hidden",
          display: "block",
          ...style
        },
        custom,
        variants: variants30,
        initial: unmountOnExit ? "exit" : false,
        animate: animate2,
        exit: "exit"
      }
    ) });
  }
);
Collapse2.displayName = "Collapse";

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/transition/dist/chunk-NBEP2PWU.mjs
init_shim();
var import_react284 = __toESM(require_react(), 1);
var import_jsx_runtime128 = __toESM(require_jsx_runtime(), 1);
var variants31 = {
  enter: ({ transition: transition4, transitionEnd, delay: delay2 } = {}) => {
    var _a40;
    return {
      opacity: 1,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay2.enter(TRANSITION_DEFAULTS2.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: ({ transition: transition4, transitionEnd, delay: delay2 } = {}) => {
    var _a40;
    return {
      opacity: 0,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay2.exit(TRANSITION_DEFAULTS2.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  }
};
var fadeConfig2 = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants31
};
var Fade3 = (0, import_react284.forwardRef)(function Fade22(props, ref) {
  const {
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition4,
    transitionEnd,
    delay: delay2,
    ...rest
  } = props;
  const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const custom = { transition: transition4, transitionEnd, delay: delay2 };
  return (0, import_jsx_runtime128.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime128.jsx)(
    motion.div,
    {
      ref,
      className: cx("chakra-fade", className),
      custom,
      ...fadeConfig2,
      animate: animate2,
      ...rest
    }
  ) });
});
Fade3.displayName = "Fade";

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/transition/dist/chunk-462CPKWM.mjs
init_shim();
var import_react285 = __toESM(require_react(), 1);
var import_jsx_runtime129 = __toESM(require_jsx_runtime(), 1);
var variants32 = {
  exit: ({ reverse, initialScale, transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 0,
      ...reverse ? { scale: initialScale, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { scale: initialScale, ...transitionEnd == null ? void 0 : transitionEnd.exit } },
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay2.exit(TRANSITION_DEFAULTS2.exit, delay2)
    };
  },
  enter: ({ transitionEnd, transition: transition4, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 1,
      scale: 1,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay2.enter(TRANSITION_DEFAULTS2.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var scaleFadeConfig2 = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants32
};
var ScaleFade3 = (0, import_react285.forwardRef)(
  function ScaleFade22(props, ref) {
    const {
      unmountOnExit,
      in: isOpen,
      reverse = true,
      initialScale = 0.95,
      className,
      transition: transition4,
      transitionEnd,
      delay: delay2,
      ...rest
    } = props;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = { initialScale, reverse, transition: transition4, transitionEnd, delay: delay2 };
    return (0, import_jsx_runtime129.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime129.jsx)(
      motion.div,
      {
        ref,
        className: cx("chakra-offset-slide", className),
        ...scaleFadeConfig2,
        animate: animate2,
        custom,
        ...rest
      }
    ) });
  }
);
ScaleFade3.displayName = "ScaleFade";

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/transition/dist/chunk-Z2TCYYTS.mjs
init_shim();
var import_react286 = __toESM(require_react(), 1);
var import_jsx_runtime130 = __toESM(require_jsx_runtime(), 1);
var variants33 = {
  initial: ({ offsetX, offsetY, transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 0,
      x: offsetX,
      y: offsetY,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay2.exit(TRANSITION_DEFAULTS2.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: ({ transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 1,
      x: 0,
      y: 0,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay2.enter(TRANSITION_DEFAULTS2.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: ({ offsetY, offsetX, transition: transition4, transitionEnd, reverse, delay: delay2 }) => {
    var _a40;
    const offset = { x: offsetX, y: offsetY };
    return {
      opacity: 0,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay2.exit(TRANSITION_DEFAULTS2.exit, delay2),
      ...reverse ? { ...offset, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { ...offset, ...transitionEnd == null ? void 0 : transitionEnd.exit } }
    };
  }
};
var slideFadeConfig2 = {
  initial: "initial",
  animate: "enter",
  exit: "exit",
  variants: variants33
};
var SlideFade3 = (0, import_react286.forwardRef)(
  function SlideFade22(props, ref) {
    const {
      unmountOnExit,
      in: isOpen,
      reverse = true,
      className,
      offsetX = 0,
      offsetY = 8,
      transition: transition4,
      transitionEnd,
      delay: delay2,
      ...rest
    } = props;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = {
      offsetX,
      offsetY,
      reverse,
      transition: transition4,
      transitionEnd,
      delay: delay2
    };
    return (0, import_jsx_runtime130.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime130.jsx)(
      motion.div,
      {
        ref,
        className: cx("chakra-offset-slide", className),
        custom,
        ...slideFadeConfig2,
        animate: animate2,
        ...rest
      }
    ) });
  }
);
SlideFade3.displayName = "SlideFade";

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/transition/dist/chunk-D35G6FNO.mjs
init_shim();
var import_react287 = __toESM(require_react(), 1);
var import_jsx_runtime131 = __toESM(require_jsx_runtime(), 1);
var defaultTransition2 = {
  exit: {
    duration: 0.15,
    ease: TRANSITION_EASINGS2.easeInOut
  },
  enter: {
    type: "spring",
    damping: 25,
    stiffness: 180
  }
};
var variants34 = {
  exit: ({ direction: direction3, transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    const { exit: exitStyles } = getSlideTransition2({ direction: direction3 });
    return {
      ...exitStyles,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay2.exit(defaultTransition2.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: ({ direction: direction3, transitionEnd, transition: transition4, delay: delay2 }) => {
    var _a40;
    const { enter: enterStyles } = getSlideTransition2({ direction: direction3 });
    return {
      ...enterStyles,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay2.enter(defaultTransition2.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var Slide3 = (0, import_react287.forwardRef)(function Slide22(props, ref) {
  const {
    direction: direction3 = "right",
    style,
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition4,
    transitionEnd,
    delay: delay2,
    motionProps,
    ...rest
  } = props;
  const transitionStyles = getSlideTransition2({ direction: direction3 });
  const computedStyle = Object.assign(
    { position: "fixed" },
    transitionStyles.position,
    style
  );
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
  const custom = { transitionEnd, transition: transition4, direction: direction3, delay: delay2 };
  return (0, import_jsx_runtime131.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime131.jsx)(
    motion.div,
    {
      ...rest,
      ref,
      initial: "exit",
      className: cx("chakra-slide", className),
      animate: animate2,
      exit: "exit",
      custom,
      variants: variants34,
      style: computedStyle,
      ...motionProps
    }
  ) });
});
Slide3.displayName = "Slide";

// node_modules/@chakra-ui/modal/dist/chunk-XV7ZWFID.mjs
var import_react288 = __toESM(require_react(), 1);
var import_jsx_runtime132 = __toESM(require_jsx_runtime(), 1);
var transitions = {
  slideInBottom: {
    ...slideFadeConfig2,
    custom: { offsetY: 16, reverse: true }
  },
  slideInRight: {
    ...slideFadeConfig2,
    custom: { offsetX: 16, reverse: true }
  },
  scale: {
    ...scaleFadeConfig2,
    custom: { initialScale: 0.95, reverse: true }
  },
  none: {}
};
var MotionSection = chakra14(motion.section);
var getMotionProps = (preset) => {
  return transitions[preset || "none"];
};
var ModalTransition = (0, import_react288.forwardRef)(
  (props, ref) => {
    const { preset, motionProps = getMotionProps(preset), ...rest } = props;
    return (0, import_jsx_runtime132.jsx)(MotionSection, { ref, ...motionProps, ...rest });
  }
);
ModalTransition.displayName = "ModalTransition";

// node_modules/@chakra-ui/modal/dist/chunk-CJQLKBLU.mjs
init_shim();

// node_modules/@chakra-ui/modal/dist/chunk-UUGUEMMH.mjs
init_shim();

// node_modules/@chakra-ui/modal/dist/chunk-R5DTDXZR.mjs
init_shim();

// node_modules/@chakra-ui/modal/dist/chunk-474T57YK.mjs
init_shim();

// node_modules/@chakra-ui/modal/dist/chunk-NHABU752.mjs
init_shim();
var __defProp4 = Object.defineProperty;
var __defNormalProp4 = (obj, key, value) => key in obj ? __defProp4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField17 = (obj, key, value) => {
  __defNormalProp4(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/@chakra-ui/modal/dist/chunk-474T57YK.mjs
var import_react289 = __toESM(require_react(), 1);
var ModalManager = class {
  constructor() {
    __publicField17(this, "modals");
    this.modals = /* @__PURE__ */ new Map();
  }
  add(modal) {
    this.modals.set(modal, this.modals.size + 1);
    return this.modals.size;
  }
  remove(modal) {
    this.modals.delete(modal);
  }
  isTopModal(modal) {
    if (!modal)
      return false;
    return this.modals.get(modal) === this.modals.size;
  }
};
var manager = new ModalManager();
function useModalManager(ref, isOpen) {
  const [index, setIndex] = (0, import_react289.useState)(0);
  (0, import_react289.useEffect)(() => {
    const node2 = ref.current;
    if (!node2)
      return;
    if (isOpen) {
      const index2 = manager.add(node2);
      setIndex(index2);
    }
    return () => {
      manager.remove(node2);
      setIndex(0);
    };
  }, [isOpen, ref]);
  return index;
}

// node_modules/@chakra-ui/modal/dist/chunk-R5DTDXZR.mjs
init_es20153();
var import_react290 = __toESM(require_react(), 1);
function useModal(props) {
  const {
    isOpen,
    onClose,
    id: id4,
    closeOnOverlayClick = true,
    closeOnEsc = true,
    useInert = true,
    onOverlayClick: onOverlayClickProp,
    onEsc
  } = props;
  const dialogRef = (0, import_react290.useRef)(null);
  const overlayRef = (0, import_react290.useRef)(null);
  const [dialogId, headerId, bodyId] = useIds3(
    id4,
    `chakra-modal`,
    `chakra-modal--header`,
    `chakra-modal--body`
  );
  useAriaHidden(dialogRef, isOpen && useInert);
  useModalManager(dialogRef, isOpen);
  const mouseDownTarget = (0, import_react290.useRef)(null);
  const onMouseDown = (0, import_react290.useCallback)((event) => {
    mouseDownTarget.current = event.target;
  }, []);
  const onKeyDown = (0, import_react290.useCallback)(
    (event) => {
      if (event.key === "Escape") {
        event.stopPropagation();
        if (closeOnEsc) {
          onClose == null ? void 0 : onClose();
        }
        onEsc == null ? void 0 : onEsc();
      }
    },
    [closeOnEsc, onClose, onEsc]
  );
  const [headerMounted, setHeaderMounted] = (0, import_react290.useState)(false);
  const [bodyMounted, setBodyMounted] = (0, import_react290.useState)(false);
  const getDialogProps = (0, import_react290.useCallback)(
    (props2 = {}, ref = null) => ({
      role: "dialog",
      ...props2,
      ref: mergeRefs4(ref, dialogRef),
      id: dialogId,
      tabIndex: -1,
      "aria-modal": true,
      "aria-labelledby": headerMounted ? headerId : void 0,
      "aria-describedby": bodyMounted ? bodyId : void 0,
      onClick: callAllHandlers(
        props2.onClick,
        (event) => event.stopPropagation()
      )
    }),
    [bodyId, bodyMounted, dialogId, headerId, headerMounted]
  );
  const onOverlayClick = (0, import_react290.useCallback)(
    (event) => {
      event.stopPropagation();
      if (mouseDownTarget.current !== event.target)
        return;
      if (!manager.isTopModal(dialogRef.current))
        return;
      if (closeOnOverlayClick) {
        onClose == null ? void 0 : onClose();
      }
      onOverlayClickProp == null ? void 0 : onOverlayClickProp();
    },
    [onClose, closeOnOverlayClick, onOverlayClickProp]
  );
  const getDialogContainerProps = (0, import_react290.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs4(ref, overlayRef),
      onClick: callAllHandlers(props2.onClick, onOverlayClick),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)
    }),
    [onKeyDown, onMouseDown, onOverlayClick]
  );
  return {
    isOpen,
    onClose,
    headerId,
    bodyId,
    setBodyMounted,
    setHeaderMounted,
    dialogRef,
    overlayRef,
    getDialogProps,
    getDialogContainerProps
  };
}
function useAriaHidden(ref, shouldHide) {
  const currentElement = ref.current;
  (0, import_react290.useEffect)(() => {
    if (!ref.current || !shouldHide)
      return void 0;
    return hideOthers(ref.current);
  }, [shouldHide, ref, currentElement]);
}
function useIds3(idProp, ...prefixes) {
  const reactId = (0, import_react290.useId)();
  const id4 = idProp || reactId;
  return (0, import_react290.useMemo)(() => {
    return prefixes.map((prefix) => `${prefix}-${id4}`);
  }, [id4, prefixes]);
}

// node_modules/@chakra-ui/modal/dist/chunk-UUGUEMMH.mjs
var import_jsx_runtime133 = __toESM(require_jsx_runtime(), 1);
var [ModalStylesProvider, useModalStyles] = createContext({
  name: `ModalStylesContext`,
  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Modal />" `
});
var [ModalContextProvider, useModalContext] = createContext({
  strict: true,
  name: "ModalContext",
  errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
});
var Modal = (props) => {
  const modalProps = {
    scrollBehavior: "outside",
    autoFocus: true,
    trapFocus: true,
    returnFocusOnClose: true,
    blockScrollOnMount: true,
    allowPinchZoom: false,
    motionPreset: "scale",
    lockFocusAcrossFrames: true,
    ...props
  };
  const {
    portalProps,
    children,
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames,
    onCloseComplete
  } = modalProps;
  const styles3 = useMultiStyleConfig14("Modal", modalProps);
  const modal = useModal(modalProps);
  const context = {
    ...modal,
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames
  };
  return (0, import_jsx_runtime133.jsx)(ModalContextProvider, { value: context, children: (0, import_jsx_runtime133.jsx)(ModalStylesProvider, { value: styles3, children: (0, import_jsx_runtime133.jsx)(AnimatePresence, { onExitComplete: onCloseComplete, children: context.isOpen && (0, import_jsx_runtime133.jsx)(Portal, { ...portalProps, children }) }) }) });
};
Modal.displayName = "Modal";

// node_modules/@chakra-ui/modal/dist/chunk-CJQLKBLU.mjs
var import_react291 = __toESM(require_react(), 1);
var import_jsx_runtime134 = __toESM(require_jsx_runtime(), 1);
function ModalFocusScope(props) {
  const {
    autoFocus,
    trapFocus,
    dialogRef,
    initialFocusRef,
    blockScrollOnMount,
    allowPinchZoom,
    finalFocusRef,
    returnFocusOnClose,
    preserveScrollBarGap,
    lockFocusAcrossFrames,
    isOpen
  } = useModalContext();
  const [isPresent2, safeToRemove] = usePresence();
  (0, import_react291.useEffect)(() => {
    if (!isPresent2 && safeToRemove) {
      setTimeout(safeToRemove);
    }
  }, [isPresent2, safeToRemove]);
  const index = useModalManager(dialogRef, isOpen);
  return (0, import_jsx_runtime134.jsx)(
    FocusLock2,
    {
      autoFocus,
      isDisabled: !trapFocus,
      initialFocusRef,
      finalFocusRef,
      restoreFocus: returnFocusOnClose,
      contentRef: dialogRef,
      lockFocusAcrossFrames,
      children: (0, import_jsx_runtime134.jsx)(
        Combination_default,
        {
          removeScrollBar: !preserveScrollBarGap,
          allowPinchZoom,
          enabled: index === 1 && blockScrollOnMount,
          forwardProps: true,
          children: props.children
        }
      )
    }
  );
}

// node_modules/@chakra-ui/modal/dist/chunk-66WFFNY3.mjs
var import_jsx_runtime135 = __toESM(require_jsx_runtime(), 1);
var ModalContent = forwardRef24(
  (props, ref) => {
    const {
      className,
      children,
      containerProps: rootProps,
      motionProps,
      ...rest
    } = props;
    const { getDialogProps, getDialogContainerProps } = useModalContext();
    const dialogProps = getDialogProps(rest, ref);
    const containerProps = getDialogContainerProps(rootProps);
    const _className = cx("chakra-modal__content", className);
    const styles3 = useModalStyles();
    const dialogStyles = {
      display: "flex",
      flexDirection: "column",
      position: "relative",
      width: "100%",
      outline: 0,
      ...styles3.dialog
    };
    const dialogContainerStyles = {
      display: "flex",
      width: "100vw",
      height: "$100vh",
      position: "fixed",
      left: 0,
      top: 0,
      ...styles3.dialogContainer
    };
    const { motionPreset } = useModalContext();
    return (0, import_jsx_runtime135.jsx)(ModalFocusScope, { children: (0, import_jsx_runtime135.jsx)(
      chakra14.div,
      {
        ...containerProps,
        className: "chakra-modal__content-container",
        tabIndex: -1,
        __css: dialogContainerStyles,
        children: (0, import_jsx_runtime135.jsx)(
          ModalTransition,
          {
            preset: motionPreset,
            motionProps,
            className: _className,
            ...dialogProps,
            __css: dialogStyles,
            children
          }
        )
      }
    ) });
  }
);
ModalContent.displayName = "ModalContent";

// node_modules/@chakra-ui/modal/dist/chunk-BPJV7R7V.mjs
var import_jsx_runtime136 = __toESM(require_jsx_runtime(), 1);
function AlertDialog(props) {
  const { leastDestructiveRef, ...rest } = props;
  return (0, import_jsx_runtime136.jsx)(Modal, { ...rest, initialFocusRef: leastDestructiveRef });
}
var AlertDialogContent = forwardRef24(
  (props, ref) => (0, import_jsx_runtime136.jsx)(ModalContent, { ref, role: "alertdialog", ...props })
);

// node_modules/@chakra-ui/modal/dist/chunk-7PTKRZFZ.mjs
init_shim();

// node_modules/@chakra-ui/modal/dist/chunk-VRAQ7LO3.mjs
init_shim();
var import_jsx_runtime137 = __toESM(require_jsx_runtime(), 1);
var [DrawerContextProvider, useDrawerContext] = createContext();
var placementMap2 = {
  start: { ltr: "left", rtl: "right" },
  end: { ltr: "right", rtl: "left" }
};
function getDrawerPlacement(placement, dir) {
  var _a40, _b8;
  if (!placement)
    return;
  return (_b8 = (_a40 = placementMap2[placement]) == null ? void 0 : _a40[dir]) != null ? _b8 : placement;
}
function Drawer(props) {
  var _a40;
  const {
    isOpen,
    onClose,
    placement: placementProp = "right",
    children,
    ...rest
  } = props;
  const theme3 = useTheme14();
  const drawerStyleConfig = (_a40 = theme3.components) == null ? void 0 : _a40.Drawer;
  const placement = getDrawerPlacement(placementProp, theme3.direction);
  return (0, import_jsx_runtime137.jsx)(DrawerContextProvider, { value: { placement }, children: (0, import_jsx_runtime137.jsx)(
    Modal,
    {
      isOpen,
      onClose,
      styleConfig: drawerStyleConfig,
      ...rest,
      children
    }
  ) });
}

// node_modules/@chakra-ui/modal/dist/chunk-7PTKRZFZ.mjs
var import_jsx_runtime138 = __toESM(require_jsx_runtime(), 1);
var MotionDiv = chakra14(Slide3);
var DrawerContent = forwardRef24(
  (props, ref) => {
    const {
      className,
      children,
      motionProps,
      containerProps: rootProps,
      ...rest
    } = props;
    const { getDialogProps, getDialogContainerProps, isOpen } = useModalContext();
    const dialogProps = getDialogProps(rest, ref);
    const containerProps = getDialogContainerProps(rootProps);
    const _className = cx("chakra-modal__content", className);
    const styles3 = useModalStyles();
    const dialogStyles = {
      display: "flex",
      flexDirection: "column",
      position: "relative",
      width: "100%",
      outline: 0,
      ...styles3.dialog
    };
    const dialogContainerStyles = {
      display: "flex",
      width: "100vw",
      height: "$100vh",
      position: "fixed",
      left: 0,
      top: 0,
      ...styles3.dialogContainer
    };
    const { placement } = useDrawerContext();
    return (0, import_jsx_runtime138.jsx)(ModalFocusScope, { children: (0, import_jsx_runtime138.jsx)(
      chakra14.div,
      {
        ...containerProps,
        className: "chakra-modal__content-container",
        __css: dialogContainerStyles,
        children: (0, import_jsx_runtime138.jsx)(
          MotionDiv,
          {
            motionProps,
            direction: placement,
            in: isOpen,
            className: _className,
            ...dialogProps,
            __css: dialogStyles,
            children
          }
        )
      }
    ) });
  }
);
DrawerContent.displayName = "DrawerContent";

// node_modules/@chakra-ui/modal/dist/chunk-YI7XFFAC.mjs
init_shim();
var import_jsx_runtime139 = __toESM(require_jsx_runtime(), 1);
var ModalFooter = forwardRef24(
  (props, ref) => {
    const { className, ...rest } = props;
    const _className = cx("chakra-modal__footer", className);
    const styles3 = useModalStyles();
    const footerStyles = {
      display: "flex",
      alignItems: "center",
      justifyContent: "flex-end",
      ...styles3.footer
    };
    return (0, import_jsx_runtime139.jsx)(
      chakra14.footer,
      {
        ref,
        ...rest,
        __css: footerStyles,
        className: _className
      }
    );
  }
);
ModalFooter.displayName = "ModalFooter";

// node_modules/@chakra-ui/modal/dist/chunk-YBA5A33G.mjs
init_shim();
var import_react292 = __toESM(require_react(), 1);
var import_jsx_runtime140 = __toESM(require_jsx_runtime(), 1);
var ModalHeader = forwardRef24(
  (props, ref) => {
    const { className, ...rest } = props;
    const { headerId, setHeaderMounted } = useModalContext();
    (0, import_react292.useEffect)(() => {
      setHeaderMounted(true);
      return () => setHeaderMounted(false);
    }, [setHeaderMounted]);
    const _className = cx("chakra-modal__header", className);
    const styles3 = useModalStyles();
    const headerStyles = {
      flex: 0,
      ...styles3.header
    };
    return (0, import_jsx_runtime140.jsx)(
      chakra14.header,
      {
        ref,
        className: _className,
        id: headerId,
        ...rest,
        __css: headerStyles
      }
    );
  }
);
ModalHeader.displayName = "ModalHeader";

// node_modules/@chakra-ui/modal/dist/chunk-OWW5MU75.mjs
init_shim();
var import_jsx_runtime141 = __toESM(require_jsx_runtime(), 1);
var MotionDiv2 = chakra14(motion.div);
var ModalOverlay = forwardRef24(
  (props, ref) => {
    const { className, transition: transition4, motionProps: _motionProps, ...rest } = props;
    const _className = cx("chakra-modal__overlay", className);
    const styles3 = useModalStyles();
    const overlayStyle = {
      pos: "fixed",
      left: "0",
      top: "0",
      w: "100vw",
      h: "100vh",
      ...styles3.overlay
    };
    const { motionPreset } = useModalContext();
    const defaultMotionProps = motionPreset === "none" ? {} : fadeConfig2;
    const motionProps = _motionProps || defaultMotionProps;
    return (0, import_jsx_runtime141.jsx)(
      MotionDiv2,
      {
        ...motionProps,
        __css: overlayStyle,
        ref,
        className: _className,
        ...rest
      }
    );
  }
);
ModalOverlay.displayName = "ModalOverlay";

// node_modules/@chakra-ui/modal/dist/chunk-PVJ72NKC.mjs
init_shim();
var import_react293 = __toESM(require_react(), 1);
var import_jsx_runtime142 = __toESM(require_jsx_runtime(), 1);
var ModalBody = forwardRef24((props, ref) => {
  const { className, ...rest } = props;
  const { bodyId, setBodyMounted } = useModalContext();
  (0, import_react293.useEffect)(() => {
    setBodyMounted(true);
    return () => setBodyMounted(false);
  }, [setBodyMounted]);
  const _className = cx("chakra-modal__body", className);
  const styles3 = useModalStyles();
  return (0, import_jsx_runtime142.jsx)(
    chakra14.div,
    {
      ref,
      className: _className,
      id: bodyId,
      ...rest,
      __css: styles3.body
    }
  );
});
ModalBody.displayName = "ModalBody";

// node_modules/@chakra-ui/modal/dist/chunk-YLPWWAYV.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/close-button/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/modal/node_modules/@chakra-ui/close-button/dist/chunk-DUEJD2BE.mjs
init_shim();
var import_jsx_runtime143 = __toESM(require_jsx_runtime(), 1);
function CloseIcon2(props) {
  return (0, import_jsx_runtime143.jsx)(Icon, { focusable: "false", "aria-hidden": true, ...props, children: (0, import_jsx_runtime143.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
    }
  ) });
}
var CloseButton3 = forwardRef24(
  function CloseButton22(props, ref) {
    const styles3 = useStyleConfig14("CloseButton", props);
    const { children, isDisabled: isDisabled26, __css, ...rest } = omitThemingProps(props);
    const baseStyle84 = {
      outline: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0
    };
    return (0, import_jsx_runtime143.jsx)(
      chakra14.button,
      {
        type: "button",
        "aria-label": "Close",
        ref,
        disabled: isDisabled26,
        __css: {
          ...baseStyle84,
          ...styles3,
          ...__css
        },
        ...rest,
        children: children || (0, import_jsx_runtime143.jsx)(CloseIcon2, { width: "1em", height: "1em" })
      }
    );
  }
);
CloseButton3.displayName = "CloseButton";

// node_modules/@chakra-ui/modal/dist/chunk-YLPWWAYV.mjs
var import_jsx_runtime144 = __toESM(require_jsx_runtime(), 1);
var ModalCloseButton = forwardRef24(
  (props, ref) => {
    const { onClick, className, ...rest } = props;
    const { onClose } = useModalContext();
    const _className = cx("chakra-modal__close-btn", className);
    const styles3 = useModalStyles();
    return (0, import_jsx_runtime144.jsx)(
      CloseButton3,
      {
        ref,
        __css: styles3.closeButton,
        className: _className,
        onClick: callAllHandlers(onClick, (event) => {
          event.stopPropagation();
          onClose();
        }),
        ...rest
      }
    );
  }
);
ModalCloseButton.displayName = "ModalCloseButton";

// node_modules/@chakra-ui/number-input/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/number-input/dist/chunk-GIDWA67N.mjs
init_shim();

// node_modules/@chakra-ui/number-input/dist/chunk-ATDT5RFJ.mjs
init_shim();
var import_jsx_runtime145 = __toESM(require_jsx_runtime(), 1);
var TriangleDownIcon = (props) => (0, import_jsx_runtime145.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime145.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
  }
) });
var TriangleUpIcon = (props) => (0, import_jsx_runtime145.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime145.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
  }
) });

// node_modules/@chakra-ui/number-input/dist/chunk-RBDW77H4.mjs
init_shim();

// node_modules/@chakra-ui/number-input/dist/chunk-XRH675A5.mjs
init_shim();
var import_react294 = __toESM(require_react(), 1);
function useAttributeObserver(ref, attributes, fn, enabled) {
  (0, import_react294.useEffect)(() => {
    var _a40;
    if (!ref.current || !enabled)
      return;
    const win = (_a40 = ref.current.ownerDocument.defaultView) != null ? _a40 : window;
    const attrs = Array.isArray(attributes) ? attributes : [attributes];
    const obs = new win.MutationObserver((changes) => {
      for (const change of changes) {
        if (change.type === "attributes" && change.attributeName && attrs.includes(change.attributeName)) {
          fn(change);
        }
      }
    });
    obs.observe(ref.current, { attributes: true, attributeFilter: attrs });
    return () => obs.disconnect();
  });
}

// node_modules/@chakra-ui/number-input/dist/chunk-JCNYS6PS.mjs
init_shim();

// node_modules/@chakra-ui/react-use-interval/dist/index.mjs
init_shim();
var import_react295 = __toESM(require_react(), 1);
function useInterval2(callback, delay2) {
  const fn = useCallbackRef(callback);
  (0, import_react295.useEffect)(() => {
    let intervalId = null;
    const tick = () => fn();
    if (delay2 !== null) {
      intervalId = window.setInterval(tick, delay2);
    }
    return () => {
      if (intervalId) {
        window.clearInterval(intervalId);
      }
    };
  }, [delay2, fn]);
}

// node_modules/@chakra-ui/number-input/dist/chunk-JCNYS6PS.mjs
var import_react296 = __toESM(require_react(), 1);
var CONTINUOUS_CHANGE_INTERVAL = 50;
var CONTINUOUS_CHANGE_DELAY = 300;
function useSpinner(increment, decrement) {
  const [isSpinning, setIsSpinning] = (0, import_react296.useState)(false);
  const [action, setAction] = (0, import_react296.useState)(null);
  const [runOnce, setRunOnce] = (0, import_react296.useState)(true);
  const timeoutRef = (0, import_react296.useRef)(null);
  const removeTimeout = () => clearTimeout(timeoutRef.current);
  useInterval2(
    () => {
      if (action === "increment") {
        increment();
      }
      if (action === "decrement") {
        decrement();
      }
    },
    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null
  );
  const up = (0, import_react296.useCallback)(() => {
    if (runOnce) {
      increment();
    }
    timeoutRef.current = setTimeout(() => {
      setRunOnce(false);
      setIsSpinning(true);
      setAction("increment");
    }, CONTINUOUS_CHANGE_DELAY);
  }, [increment, runOnce]);
  const down = (0, import_react296.useCallback)(() => {
    if (runOnce) {
      decrement();
    }
    timeoutRef.current = setTimeout(() => {
      setRunOnce(false);
      setIsSpinning(true);
      setAction("decrement");
    }, CONTINUOUS_CHANGE_DELAY);
  }, [decrement, runOnce]);
  const stop = (0, import_react296.useCallback)(() => {
    setRunOnce(true);
    setIsSpinning(false);
    removeTimeout();
  }, []);
  (0, import_react296.useEffect)(() => {
    return () => removeTimeout();
  }, []);
  return { up, down, stop, isSpinning };
}

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/counter/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/counter/dist/chunk-O3YOOUZ7.mjs
init_shim();
var import_react297 = __toESM(require_react(), 1);
function useCounter2(props = {}) {
  const {
    onChange,
    precision: precisionProp,
    defaultValue,
    value: valueProp,
    step: stepProp = 1,
    min = Number.MIN_SAFE_INTEGER,
    max = Number.MAX_SAFE_INTEGER,
    keepWithinRange = true
  } = props;
  const onChangeProp = useCallbackRef(onChange);
  const [valueState, setValue] = (0, import_react297.useState)(() => {
    var _a40;
    if (defaultValue == null)
      return "";
    return (_a40 = cast4(defaultValue, stepProp, precisionProp)) != null ? _a40 : "";
  });
  const isControlled = typeof valueProp !== "undefined";
  const value = isControlled ? valueProp : valueState;
  const decimalPlaces = getDecimalPlaces2(parse2(value), stepProp);
  const precision = precisionProp != null ? precisionProp : decimalPlaces;
  const update = (0, import_react297.useCallback)(
    (next) => {
      if (next === value)
        return;
      if (!isControlled) {
        setValue(next.toString());
      }
      onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse2(next));
    },
    [onChangeProp, isControlled, value]
  );
  const clamp2 = (0, import_react297.useCallback)(
    (value2) => {
      let nextValue = value2;
      if (keepWithinRange) {
        nextValue = clampValue10(nextValue, min, max);
      }
      return toPrecision10(nextValue, precision);
    },
    [precision, keepWithinRange, max, min]
  );
  const increment = (0, import_react297.useCallback)(
    (step = stepProp) => {
      let next;
      if (value === "") {
        next = parse2(step);
      } else {
        next = parse2(value) + step;
      }
      next = clamp2(next);
      update(next);
    },
    [clamp2, stepProp, update, value]
  );
  const decrement = (0, import_react297.useCallback)(
    (step = stepProp) => {
      let next;
      if (value === "") {
        next = parse2(-step);
      } else {
        next = parse2(value) - step;
      }
      next = clamp2(next);
      update(next);
    },
    [clamp2, stepProp, update, value]
  );
  const reset = (0, import_react297.useCallback)(() => {
    var _a40;
    let next;
    if (defaultValue == null) {
      next = "";
    } else {
      next = (_a40 = cast4(defaultValue, stepProp, precisionProp)) != null ? _a40 : min;
    }
    update(next);
  }, [defaultValue, precisionProp, stepProp, update, min]);
  const castValue = (0, import_react297.useCallback)(
    (value2) => {
      var _a40;
      const nextValue = (_a40 = cast4(value2, stepProp, precision)) != null ? _a40 : min;
      update(nextValue);
    },
    [precision, stepProp, update, min]
  );
  const valueAsNumber = parse2(value);
  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;
  const isAtMax = valueAsNumber === max;
  const isAtMin = valueAsNumber === min;
  return {
    isOutOfRange,
    isAtMax,
    isAtMin,
    precision,
    value,
    valueAsNumber,
    update,
    reset,
    increment,
    decrement,
    clamp: clamp2,
    cast: castValue,
    setValue
  };
}
function parse2(value) {
  return parseFloat(value.toString().replace(/[^\w.-]+/g, ""));
}
function getDecimalPlaces2(value, step) {
  return Math.max(countDecimalPlaces10(step), countDecimalPlaces10(value));
}
function cast4(value, step, precision) {
  const parsedValue = parse2(value);
  if (Number.isNaN(parsedValue))
    return void 0;
  const decimalPlaces = getDecimalPlaces2(parsedValue, step);
  return toPrecision10(parsedValue, precision != null ? precision : decimalPlaces);
}

// node_modules/@chakra-ui/number-input/dist/chunk-RBDW77H4.mjs
var import_react298 = __toESM(require_react(), 1);
var FLOATING_POINT_REGEX = /^[Ee0-9+\-.]$/;
function isFloatingPointNumericCharacter(character) {
  return FLOATING_POINT_REGEX.test(character);
}
function isValidNumericKeyboardEvent(event, isValid) {
  if (event.key == null)
    return true;
  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
  const isSingleCharacterKey = event.key.length === 1;
  if (!isSingleCharacterKey || isModifierKey)
    return true;
  return isValid(event.key);
}
function useNumberInput(props = {}) {
  const {
    focusInputOnChange = true,
    clampValueOnBlur = true,
    keepWithinRange = true,
    min = Number.MIN_SAFE_INTEGER,
    max = Number.MAX_SAFE_INTEGER,
    step: stepProp = 1,
    isReadOnly,
    isDisabled: isDisabled26,
    isRequired,
    isInvalid,
    pattern = "[0-9]*(.[0-9]+)?",
    inputMode = "decimal",
    allowMouseWheel,
    id: id4,
    onChange: _,
    precision,
    name,
    "aria-describedby": ariaDescBy,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    onFocus: onFocusProp,
    onBlur: onBlurProp,
    onInvalid: onInvalidProp,
    getAriaValueText: getAriaValueTextProp,
    isValidCharacter: isValidCharacterProp,
    format: formatValue,
    parse: parseValue,
    ...htmlProps
  } = props;
  const onFocus3 = useCallbackRef(onFocusProp);
  const onBlur3 = useCallbackRef(onBlurProp);
  const onInvalid = useCallbackRef(onInvalidProp);
  const isValidCharacter = useCallbackRef(
    isValidCharacterProp != null ? isValidCharacterProp : isFloatingPointNumericCharacter
  );
  const getAriaValueText = useCallbackRef(getAriaValueTextProp);
  const counter2 = useCounter2(props);
  const {
    update: updateFn,
    increment: incrementFn,
    decrement: decrementFn
  } = counter2;
  const [isFocused, setFocused] = (0, import_react298.useState)(false);
  const isInteractive = !(isReadOnly || isDisabled26);
  const inputRef = (0, import_react298.useRef)(null);
  const inputSelectionRef = (0, import_react298.useRef)(null);
  const incrementButtonRef = (0, import_react298.useRef)(null);
  const decrementButtonRef = (0, import_react298.useRef)(null);
  const sanitize2 = (0, import_react298.useCallback)(
    (value) => value.split("").filter(isValidCharacter).join(""),
    [isValidCharacter]
  );
  const parse3 = (0, import_react298.useCallback)(
    (value) => {
      var _a40;
      return (_a40 = parseValue == null ? void 0 : parseValue(value)) != null ? _a40 : value;
    },
    [parseValue]
  );
  const format = (0, import_react298.useCallback)(
    (value) => {
      var _a40;
      return ((_a40 = formatValue == null ? void 0 : formatValue(value)) != null ? _a40 : value).toString();
    },
    [formatValue]
  );
  useUpdateEffect(() => {
    if (counter2.valueAsNumber > max) {
      onInvalid == null ? void 0 : onInvalid("rangeOverflow", format(counter2.value), counter2.valueAsNumber);
    } else if (counter2.valueAsNumber < min) {
      onInvalid == null ? void 0 : onInvalid("rangeOverflow", format(counter2.value), counter2.valueAsNumber);
    }
  }, [counter2.valueAsNumber, counter2.value, format, onInvalid]);
  useSafeLayoutEffect(() => {
    if (!inputRef.current)
      return;
    const notInSync = inputRef.current.value != counter2.value;
    if (notInSync) {
      const parsedInput = parse3(inputRef.current.value);
      counter2.setValue(sanitize2(parsedInput));
    }
  }, [parse3, sanitize2]);
  const increment = (0, import_react298.useCallback)(
    (step = stepProp) => {
      if (isInteractive) {
        incrementFn(step);
      }
    },
    [incrementFn, isInteractive, stepProp]
  );
  const decrement = (0, import_react298.useCallback)(
    (step = stepProp) => {
      if (isInteractive) {
        decrementFn(step);
      }
    },
    [decrementFn, isInteractive, stepProp]
  );
  const spinner = useSpinner(increment, decrement);
  useAttributeObserver(
    incrementButtonRef,
    "disabled",
    spinner.stop,
    spinner.isSpinning
  );
  useAttributeObserver(
    decrementButtonRef,
    "disabled",
    spinner.stop,
    spinner.isSpinning
  );
  const onChange = (0, import_react298.useCallback)(
    (event) => {
      const evt = event.nativeEvent;
      if (evt.isComposing)
        return;
      const parsedInput = parse3(event.currentTarget.value);
      updateFn(sanitize2(parsedInput));
      inputSelectionRef.current = {
        start: event.currentTarget.selectionStart,
        end: event.currentTarget.selectionEnd
      };
    },
    [updateFn, sanitize2, parse3]
  );
  const _onFocus = (0, import_react298.useCallback)(
    (event) => {
      var _a40, _b8, _c5;
      onFocus3 == null ? void 0 : onFocus3(event);
      if (!inputSelectionRef.current)
        return;
      event.target.selectionStart = (_b8 = inputSelectionRef.current.start) != null ? _b8 : (_a40 = event.currentTarget.value) == null ? void 0 : _a40.length;
      event.currentTarget.selectionEnd = (_c5 = inputSelectionRef.current.end) != null ? _c5 : event.currentTarget.selectionStart;
    },
    [onFocus3]
  );
  const onKeyDown = (0, import_react298.useCallback)(
    (event) => {
      if (event.nativeEvent.isComposing)
        return;
      if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {
        event.preventDefault();
      }
      const stepFactor = getStepFactor(event) * stepProp;
      const eventKey = event.key;
      const keyMap = {
        ArrowUp: () => increment(stepFactor),
        ArrowDown: () => decrement(stepFactor),
        Home: () => updateFn(min),
        End: () => updateFn(max)
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        action(event);
      }
    },
    [isValidCharacter, stepProp, increment, decrement, updateFn, min, max]
  );
  const getStepFactor = (event) => {
    let ratio = 1;
    if (event.metaKey || event.ctrlKey) {
      ratio = 0.1;
    }
    if (event.shiftKey) {
      ratio = 10;
    }
    return ratio;
  };
  const ariaValueText = (0, import_react298.useMemo)(() => {
    const text = getAriaValueText == null ? void 0 : getAriaValueText(counter2.value);
    if (text != null)
      return text;
    const defaultText = counter2.value.toString();
    return !defaultText ? void 0 : defaultText;
  }, [counter2.value, getAriaValueText]);
  const validateAndClamp = (0, import_react298.useCallback)(() => {
    let next = counter2.value;
    if (counter2.value === "")
      return;
    const valueStartsWithE = /^[eE]/.test(counter2.value.toString());
    if (valueStartsWithE) {
      counter2.setValue("");
    } else {
      if (counter2.valueAsNumber < min) {
        next = min;
      }
      if (counter2.valueAsNumber > max) {
        next = max;
      }
      counter2.cast(next);
    }
  }, [counter2, max, min]);
  const onInputBlur = (0, import_react298.useCallback)(() => {
    setFocused(false);
    if (clampValueOnBlur) {
      validateAndClamp();
    }
  }, [clampValueOnBlur, setFocused, validateAndClamp]);
  const focusInput = (0, import_react298.useCallback)(() => {
    if (focusInputOnChange) {
      requestAnimationFrame(() => {
        var _a40;
        (_a40 = inputRef.current) == null ? void 0 : _a40.focus();
      });
    }
  }, [focusInputOnChange]);
  const spinUp = (0, import_react298.useCallback)(
    (event) => {
      event.preventDefault();
      spinner.up();
      focusInput();
    },
    [focusInput, spinner]
  );
  const spinDown = (0, import_react298.useCallback)(
    (event) => {
      event.preventDefault();
      spinner.down();
      focusInput();
    },
    [focusInput, spinner]
  );
  useEventListener(
    () => inputRef.current,
    "wheel",
    (event) => {
      var _a40, _b8;
      const doc = (_b8 = (_a40 = inputRef.current) == null ? void 0 : _a40.ownerDocument) != null ? _b8 : document;
      const isInputFocused = doc.activeElement === inputRef.current;
      if (!allowMouseWheel || !isInputFocused)
        return;
      event.preventDefault();
      const stepFactor = getStepFactor(event) * stepProp;
      const direction3 = Math.sign(event.deltaY);
      if (direction3 === -1) {
        increment(stepFactor);
      } else if (direction3 === 1) {
        decrement(stepFactor);
      }
    },
    { passive: false }
  );
  const getIncrementButtonProps = (0, import_react298.useCallback)(
    (props2 = {}, ref = null) => {
      const disabled = isDisabled26 || keepWithinRange && counter2.isAtMax;
      return {
        ...props2,
        ref: mergeRefs4(ref, incrementButtonRef),
        role: "button",
        tabIndex: -1,
        onPointerDown: callAllHandlers(props2.onPointerDown, (event) => {
          if (event.button !== 0 || disabled)
            return;
          spinUp(event);
        }),
        onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),
        onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),
        disabled,
        "aria-disabled": ariaAttr(disabled)
      };
    },
    [counter2.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled26]
  );
  const getDecrementButtonProps = (0, import_react298.useCallback)(
    (props2 = {}, ref = null) => {
      const disabled = isDisabled26 || keepWithinRange && counter2.isAtMin;
      return {
        ...props2,
        ref: mergeRefs4(ref, decrementButtonRef),
        role: "button",
        tabIndex: -1,
        onPointerDown: callAllHandlers(props2.onPointerDown, (event) => {
          if (event.button !== 0 || disabled)
            return;
          spinDown(event);
        }),
        onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),
        onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),
        disabled,
        "aria-disabled": ariaAttr(disabled)
      };
    },
    [counter2.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled26]
  );
  const getInputProps = (0, import_react298.useCallback)(
    (props2 = {}, ref = null) => {
      var _a40, _b8, _c5, _d5;
      return {
        name,
        inputMode,
        type: "text",
        pattern,
        "aria-labelledby": ariaLabelledBy,
        "aria-label": ariaLabel,
        "aria-describedby": ariaDescBy,
        id: id4,
        disabled: isDisabled26,
        ...props2,
        readOnly: (_a40 = props2.readOnly) != null ? _a40 : isReadOnly,
        "aria-readonly": (_b8 = props2.readOnly) != null ? _b8 : isReadOnly,
        "aria-required": (_c5 = props2.required) != null ? _c5 : isRequired,
        required: (_d5 = props2.required) != null ? _d5 : isRequired,
        ref: mergeRefs4(inputRef, ref),
        value: format(counter2.value),
        role: "spinbutton",
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": Number.isNaN(counter2.valueAsNumber) ? void 0 : counter2.valueAsNumber,
        "aria-invalid": ariaAttr(isInvalid != null ? isInvalid : counter2.isOutOfRange),
        "aria-valuetext": ariaValueText,
        autoComplete: "off",
        autoCorrect: "off",
        onChange: callAllHandlers(props2.onChange, onChange),
        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
        onFocus: callAllHandlers(
          props2.onFocus,
          _onFocus,
          () => setFocused(true)
        ),
        onBlur: callAllHandlers(props2.onBlur, onBlur3, onInputBlur)
      };
    },
    [
      name,
      inputMode,
      pattern,
      ariaLabelledBy,
      ariaLabel,
      format,
      ariaDescBy,
      id4,
      isDisabled26,
      isRequired,
      isReadOnly,
      isInvalid,
      counter2.value,
      counter2.valueAsNumber,
      counter2.isOutOfRange,
      min,
      max,
      ariaValueText,
      onChange,
      onKeyDown,
      _onFocus,
      onBlur3,
      onInputBlur
    ]
  );
  return {
    value: format(counter2.value),
    valueAsNumber: counter2.valueAsNumber,
    isFocused,
    isDisabled: isDisabled26,
    isReadOnly,
    getIncrementButtonProps,
    getDecrementButtonProps,
    getInputProps,
    htmlProps
  };
}

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/form-control/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/form-control/dist/chunk-6ZNYZUDD.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react300 = __toESM(require_react(), 1);
function useTheme15() {
  const theme3 = (0, import_react300.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra15() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme15();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM15() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser17 = canUseDOM15();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash20 = __toESM(require_lodash(), 1);
function omit19(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get16(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize16 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet16 = memoize16(get16);
function objectFilter15(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined15 = (object2) => objectFilter15(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction18(value) {
  return typeof value === "function";
}
var __DEV__15 = import_process.default.env.NODE_ENV !== "production";
var __TEST__15 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn18(valueOrFn, ...args) {
  return isFunction18(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once15(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn16 = once15((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__15) {
    console.warn(message);
  }
});
var error15 = once15((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__15) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger15 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger15 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep15 = 1 / 60 * 1e3;
var getCurrentTime15 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame15 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime15()), defaultTimestep15);

// node_modules/@chakra-ui/number-input/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep16(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/number-input/node_modules/framesync/dist/es/index.mjs
var maxElapsed16 = 40;
var useDefaultElapsed16 = true;
var runNextFrame16 = false;
var isProcessing15 = false;
var frame16 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder16 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps16 = stepsOrder16.reduce((acc, key) => {
  acc[key] = createRenderStep16(() => runNextFrame16 = true);
  return acc;
}, {});
var sync16 = stepsOrder16.reduce((acc, key) => {
  const step = steps16[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame16)
      startLoop16();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync16 = stepsOrder16.reduce((acc, key) => {
  acc[key] = steps16[key].cancel;
  return acc;
}, {});
var flushSync15 = stepsOrder16.reduce((acc, key) => {
  acc[key] = () => steps16[key].process(frame16);
  return acc;
}, {});
var processStep16 = (stepId) => steps16[stepId].process(frame16);
var processFrame16 = (timestamp) => {
  runNextFrame16 = false;
  frame16.delta = useDefaultElapsed16 ? defaultTimestep15 : Math.max(Math.min(timestamp - frame16.timestamp, maxElapsed16), 1);
  frame16.timestamp = timestamp;
  isProcessing15 = true;
  stepsOrder16.forEach(processStep16);
  isProcessing15 = false;
  if (runNextFrame16) {
    useDefaultElapsed16 = false;
    onNextFrame15(processFrame16);
  }
};
var startLoop16 = () => {
  runNextFrame16 = true;
  useDefaultElapsed16 = true;
  if (!isProcessing15)
    onNextFrame15(processFrame16);
};

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints18 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList16 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector16 = focusableElList16.join();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react301 = __toESM(require_react(), 1);
var import_react_fast_compare15 = __toESM(require_react_fast_compare15(), 1);
function useStyleConfigImpl13(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra15();
  const themeStyleConfig = themeKey ? memoizedGet16(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash20.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined15(omit19(rest, ["children"]))
  );
  const stylesRef = (0, import_react301.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare15.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig15(themeKey, props = {}) {
  return useStyleConfigImpl13(themeKey, props);
}
function useMultiStyleConfig15(themeKey, props = {}) {
  return useStyleConfigImpl13(themeKey, props);
}

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames15 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps15 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp15(prop) {
  return validHTMLProps15.has(prop) || !allPropNames15.has(prop);
}

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react302 = __toESM(require_react(), 1);
var _a29;
var emotion_styled15 = (_a29 = emotion_styled_browser_esm_default.default) != null ? _a29 : emotion_styled_browser_esm_default;
var toCSSObject15 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter15(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn18(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined15(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled15(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp15;
  }
  const styleObject = toCSSObject15({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled15(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react302.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react302.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory15() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled15, {
    apply(target, thisArg, argArray) {
      return styled15(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled15(element));
      }
      return cache.get(element);
    }
  });
}
var chakra15 = factory15();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react303 = __toESM(require_react(), 1);
function forwardRef31(component) {
  return (0, import_react303.forwardRef)(component);
}

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react304 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react305 = __toESM(require_react(), 1);
function createContext27(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react305.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react305.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react307 = __toESM(require_react(), 1);
var import_jsx_runtime146 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider15, useStyles15] = createContext27({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/form-control/dist/chunk-6ZNYZUDD.mjs
var import_react309 = __toESM(require_react(), 1);
var import_jsx_runtime147 = __toESM(require_jsx_runtime(), 1);
var [FormControlStylesProvider3, useFormControlStyles3] = createContext({
  name: `FormControlStylesContext`,
  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
});
var [FormControlProvider3, useFormControlContext3] = createContext({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider3(props) {
  const {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled: isDisabled26,
    isReadOnly,
    ...htmlProps
  } = props;
  const uuid = (0, import_react309.useId)();
  const id4 = idProp || `field-${uuid}`;
  const labelId = `${id4}-label`;
  const feedbackId = `${id4}-feedback`;
  const helpTextId = `${id4}-helptext`;
  const [hasFeedbackText, setHasFeedbackText] = (0, import_react309.useState)(false);
  const [hasHelpText, setHasHelpText] = (0, import_react309.useState)(false);
  const [isFocused, setFocus2] = (0, import_react309.useState)(false);
  const getHelpTextProps = (0, import_react309.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: helpTextId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasHelpText(true);
      })
    }),
    [helpTextId]
  );
  const getLabelProps = (0, import_react309.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled26),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: props2.id !== void 0 ? props2.id : labelId,
      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id4
    }),
    [id4, isDisabled26, isFocused, isInvalid, isReadOnly, labelId]
  );
  const getErrorMessageProps = (0, import_react309.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: feedbackId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    }),
    [feedbackId]
  );
  const getRootProps = (0, import_react309.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ...htmlProps,
      ref: forwardedRef,
      role: "group"
    }),
    [htmlProps]
  );
  const getRequiredIndicatorProps = (0, import_react309.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    }),
    []
  );
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled26,
    isFocused: !!isFocused,
    onFocus: () => setFocus2(true),
    onBlur: () => setFocus2(false),
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id: id4,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl4 = forwardRef31(
  function FormControl23(props, ref) {
    const styles3 = useMultiStyleConfig15("Form", props);
    const ownProps = omitThemingProps(props);
    const {
      getRootProps,
      htmlProps: _,
      ...context
    } = useFormControlProvider3(ownProps);
    const className = cx("chakra-form-control", props.className);
    return (0, import_jsx_runtime147.jsx)(FormControlProvider3, { value: context, children: (0, import_jsx_runtime147.jsx)(FormControlStylesProvider3, { value: styles3, children: (0, import_jsx_runtime147.jsx)(
      chakra15.div,
      {
        ...getRootProps({}, ref),
        className,
        __css: styles3["container"]
      }
    ) }) });
  }
);
FormControl4.displayName = "FormControl";
var FormHelperText4 = forwardRef31(
  function FormHelperText23(props, ref) {
    const field = useFormControlContext3();
    const styles3 = useFormControlStyles3();
    const className = cx("chakra-form__helper-text", props.className);
    return (0, import_jsx_runtime147.jsx)(
      chakra15.div,
      {
        ...field == null ? void 0 : field.getHelpTextProps(props, ref),
        __css: styles3.helperText,
        className
      }
    );
  }
);
FormHelperText4.displayName = "FormHelperText";

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
var import_jsx_runtime148 = __toESM(require_jsx_runtime(), 1);
var [FormErrorStylesProvider3, useFormErrorStyles3] = createContext({
  name: `FormErrorStylesContext`,
  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormError />" `
});
var FormErrorMessage3 = forwardRef31(
  (props, ref) => {
    const styles3 = useMultiStyleConfig15("FormError", props);
    const ownProps = omitThemingProps(props);
    const field = useFormControlContext3();
    if (!(field == null ? void 0 : field.isInvalid))
      return null;
    return (0, import_jsx_runtime148.jsx)(FormErrorStylesProvider3, { value: styles3, children: (0, import_jsx_runtime148.jsx)(
      chakra15.div,
      {
        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),
        className: cx("chakra-form__error-message", props.className),
        __css: {
          display: "flex",
          alignItems: "center",
          ...styles3.text
        }
      }
    ) });
  }
);
FormErrorMessage3.displayName = "FormErrorMessage";
var FormErrorIcon3 = forwardRef31((props, ref) => {
  const styles3 = useFormErrorStyles3();
  const field = useFormControlContext3();
  if (!(field == null ? void 0 : field.isInvalid))
    return null;
  const _className = cx("chakra-form__error-icon", props.className);
  return (0, import_jsx_runtime148.jsx)(
    Icon,
    {
      ref,
      "aria-hidden": true,
      ...props,
      __css: styles3.icon,
      className: _className,
      children: (0, import_jsx_runtime148.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        }
      )
    }
  );
});
FormErrorIcon3.displayName = "FormErrorIcon";

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs
init_shim();
var import_jsx_runtime149 = __toESM(require_jsx_runtime(), 1);
var FormLabel4 = forwardRef31(function FormLabel23(passedProps, ref) {
  var _a40;
  const styles3 = useStyleConfig15("FormLabel", passedProps);
  const props = omitThemingProps(passedProps);
  const {
    className,
    children,
    requiredIndicator = (0, import_jsx_runtime149.jsx)(RequiredIndicator4, {}),
    optionalIndicator = null,
    ...rest
  } = props;
  const field = useFormControlContext3();
  const ownProps = (_a40 = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a40 : { ref, ...rest };
  return (0, import_jsx_runtime149.jsxs)(
    chakra15.label,
    {
      ...ownProps,
      className: cx("chakra-form__label", props.className),
      __css: {
        display: "block",
        textAlign: "start",
        ...styles3
      },
      children: [
        children,
        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator
      ]
    }
  );
});
FormLabel4.displayName = "FormLabel";
var RequiredIndicator4 = forwardRef31(
  function RequiredIndicator23(props, ref) {
    const field = useFormControlContext3();
    const styles3 = useFormControlStyles3();
    if (!(field == null ? void 0 : field.isRequired))
      return null;
    const className = cx("chakra-form__required-indicator", props.className);
    return (0, import_jsx_runtime149.jsx)(
      chakra15.span,
      {
        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),
        __css: styles3.requiredIndicator,
        className
      }
    );
  }
);
RequiredIndicator4.displayName = "RequiredIndicator";

// node_modules/@chakra-ui/number-input/node_modules/@chakra-ui/form-control/dist/chunk-IJBC3YLI.mjs
init_shim();
function useFormControlProps3(props) {
  var _a40, _b8, _c5;
  const field = useFormControlContext3();
  const {
    id: id4,
    disabled,
    readOnly,
    required,
    isRequired,
    isInvalid,
    isReadOnly,
    isDisabled: isDisabled26,
    onFocus: onFocus3,
    onBlur: onBlur3,
    ...rest
  } = props;
  const labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {
    labelIds.push(field.feedbackId);
  }
  if (field == null ? void 0 : field.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return {
    ...rest,
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id4 != null ? id4 : field == null ? void 0 : field.id,
    isDisabled: (_a40 = disabled != null ? disabled : isDisabled26) != null ? _a40 : field == null ? void 0 : field.isDisabled,
    isReadOnly: (_b8 = readOnly != null ? readOnly : isReadOnly) != null ? _b8 : field == null ? void 0 : field.isReadOnly,
    isRequired: (_c5 = required != null ? required : isRequired) != null ? _c5 : field == null ? void 0 : field.isRequired,
    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus3),
    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur3)
  };
}

// node_modules/@chakra-ui/number-input/dist/chunk-GIDWA67N.mjs
var import_react310 = __toESM(require_react(), 1);
var import_jsx_runtime150 = __toESM(require_jsx_runtime(), 1);
var [NumberInputStylesProvider, useNumberInputStyles] = createContext({
  name: `NumberInputStylesContext`,
  errorMessage: `useNumberInputStyles returned is 'undefined'. Seems you forgot to wrap the components in "<NumberInput />" `
});
var [NumberInputProvider, useNumberInputContext] = createContext({
  name: "NumberInputContext",
  errorMessage: "useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />"
});
var NumberInput = forwardRef31(
  function NumberInput2(props, ref) {
    const styles3 = useMultiStyleConfig15("NumberInput", props);
    const ownProps = omitThemingProps(props);
    const controlProps = useFormControlProps3(ownProps);
    const { htmlProps, ...context } = useNumberInput(controlProps);
    const ctx = (0, import_react310.useMemo)(() => context, [context]);
    return (0, import_jsx_runtime150.jsx)(NumberInputProvider, { value: ctx, children: (0, import_jsx_runtime150.jsx)(NumberInputStylesProvider, { value: styles3, children: (0, import_jsx_runtime150.jsx)(
      chakra15.div,
      {
        ...htmlProps,
        ref,
        className: cx("chakra-numberinput", props.className),
        __css: {
          position: "relative",
          zIndex: 0,
          ...styles3.root
        }
      }
    ) }) });
  }
);
NumberInput.displayName = "NumberInput";
var NumberInputStepper = forwardRef31(
  function NumberInputStepper2(props, ref) {
    const styles3 = useNumberInputStyles();
    return (0, import_jsx_runtime150.jsx)(
      chakra15.div,
      {
        "aria-hidden": true,
        ref,
        ...props,
        __css: {
          display: "flex",
          flexDirection: "column",
          position: "absolute",
          top: "0",
          insetEnd: "0px",
          margin: "1px",
          height: "calc(100% - 2px)",
          zIndex: 1,
          ...styles3.stepperGroup
        }
      }
    );
  }
);
NumberInputStepper.displayName = "NumberInputStepper";
var NumberInputField = forwardRef31(
  function NumberInputField2(props, ref) {
    const { getInputProps } = useNumberInputContext();
    const input = getInputProps(props, ref);
    const styles3 = useNumberInputStyles();
    return (0, import_jsx_runtime150.jsx)(
      chakra15.input,
      {
        ...input,
        className: cx("chakra-numberinput__field", props.className),
        __css: {
          width: "100%",
          ...styles3.field
        }
      }
    );
  }
);
NumberInputField.displayName = "NumberInputField";
var StyledStepper = chakra15("div", {
  baseStyle: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    transitionProperty: "common",
    transitionDuration: "normal",
    userSelect: "none",
    cursor: "pointer",
    lineHeight: "normal"
  }
});
var NumberDecrementStepper = forwardRef31(function NumberDecrementStepper2(props, ref) {
  var _a40;
  const styles3 = useNumberInputStyles();
  const { getDecrementButtonProps } = useNumberInputContext();
  const decrement = getDecrementButtonProps(props, ref);
  return (0, import_jsx_runtime150.jsx)(StyledStepper, { ...decrement, __css: styles3.stepper, children: (_a40 = props.children) != null ? _a40 : (0, import_jsx_runtime150.jsx)(TriangleDownIcon, {}) });
});
NumberDecrementStepper.displayName = "NumberDecrementStepper";
var NumberIncrementStepper = forwardRef31(function NumberIncrementStepper2(props, ref) {
  var _a40;
  const { getIncrementButtonProps } = useNumberInputContext();
  const increment = getIncrementButtonProps(props, ref);
  const styles3 = useNumberInputStyles();
  return (0, import_jsx_runtime150.jsx)(StyledStepper, { ...increment, __css: styles3.stepper, children: (_a40 = props.children) != null ? _a40 : (0, import_jsx_runtime150.jsx)(TriangleUpIcon, {}) });
});
NumberIncrementStepper.displayName = "NumberIncrementStepper";

// node_modules/@chakra-ui/pin-input/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/dist/chunk-US44V7OZ.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/dist/chunk-E34PQC4X.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/descendant/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/descendant/dist/chunk-D5UZ3RNN.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/descendant/dist/chunk-P6SLLHUK.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/descendant/dist/chunk-N7WDF4QK.mjs
init_shim();
var import_react311 = __toESM(require_react(), 1);
var __defProp5 = Object.defineProperty;
var __defNormalProp5 = (obj, key, value) => key in obj ? __defProp5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField19 = (obj, key, value) => {
  __defNormalProp5(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
function sortNodes3(nodes) {
  return nodes.sort((a, b) => {
    const compare = a.compareDocumentPosition(b);
    if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY) {
      return -1;
    }
    if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS) {
      return 1;
    }
    if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) {
      throw Error("Cannot sort the given nodes.");
    } else {
      return 0;
    }
  });
}
var isElement20 = (el) => typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
function getNextIndex19(current, max, loop) {
  let next = current + 1;
  if (loop && next >= max)
    next = 0;
  return next;
}
function getPrevIndex18(current, max, loop) {
  let next = current - 1;
  if (loop && next < 0)
    next = max;
  return next;
}
var useSafeLayoutEffect5 = typeof window !== "undefined" ? import_react311.useLayoutEffect : import_react311.useEffect;
var cast5 = (value) => value;

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/descendant/dist/chunk-P6SLLHUK.mjs
var DescendantsManager3 = class {
  constructor() {
    __publicField19(this, "descendants", /* @__PURE__ */ new Map());
    __publicField19(this, "register", (nodeOrOptions) => {
      if (nodeOrOptions == null)
        return;
      if (isElement20(nodeOrOptions)) {
        return this.registerNode(nodeOrOptions);
      }
      return (node2) => {
        this.registerNode(node2, nodeOrOptions);
      };
    });
    __publicField19(this, "unregister", (node2) => {
      this.descendants.delete(node2);
      const sorted = sortNodes3(Array.from(this.descendants.keys()));
      this.assignIndex(sorted);
    });
    __publicField19(this, "destroy", () => {
      this.descendants.clear();
    });
    __publicField19(this, "assignIndex", (descendants) => {
      this.descendants.forEach((descendant) => {
        const index = descendants.indexOf(descendant.node);
        descendant.index = index;
        descendant.node.dataset["index"] = descendant.index.toString();
      });
    });
    __publicField19(this, "count", () => this.descendants.size);
    __publicField19(this, "enabledCount", () => this.enabledValues().length);
    __publicField19(this, "values", () => {
      const values = Array.from(this.descendants.values());
      return values.sort((a, b) => a.index - b.index);
    });
    __publicField19(this, "enabledValues", () => {
      return this.values().filter((descendant) => !descendant.disabled);
    });
    __publicField19(this, "item", (index) => {
      if (this.count() === 0)
        return void 0;
      return this.values()[index];
    });
    __publicField19(this, "enabledItem", (index) => {
      if (this.enabledCount() === 0)
        return void 0;
      return this.enabledValues()[index];
    });
    __publicField19(this, "first", () => this.item(0));
    __publicField19(this, "firstEnabled", () => this.enabledItem(0));
    __publicField19(this, "last", () => this.item(this.descendants.size - 1));
    __publicField19(this, "lastEnabled", () => {
      const lastIndex = this.enabledValues().length - 1;
      return this.enabledItem(lastIndex);
    });
    __publicField19(this, "indexOf", (node2) => {
      var _a40, _b8;
      if (!node2)
        return -1;
      return (_b8 = (_a40 = this.descendants.get(node2)) == null ? void 0 : _a40.index) != null ? _b8 : -1;
    });
    __publicField19(this, "enabledIndexOf", (node2) => {
      if (node2 == null)
        return -1;
      return this.enabledValues().findIndex((i) => i.node.isSameNode(node2));
    });
    __publicField19(this, "next", (index, loop = true) => {
      const next = getNextIndex19(index, this.count(), loop);
      return this.item(next);
    });
    __publicField19(this, "nextEnabled", (index, loop = true) => {
      const item = this.item(index);
      if (!item)
        return;
      const enabledIndex = this.enabledIndexOf(item.node);
      const nextEnabledIndex = getNextIndex19(
        enabledIndex,
        this.enabledCount(),
        loop
      );
      return this.enabledItem(nextEnabledIndex);
    });
    __publicField19(this, "prev", (index, loop = true) => {
      const prev = getPrevIndex18(index, this.count() - 1, loop);
      return this.item(prev);
    });
    __publicField19(this, "prevEnabled", (index, loop = true) => {
      const item = this.item(index);
      if (!item)
        return;
      const enabledIndex = this.enabledIndexOf(item.node);
      const prevEnabledIndex = getPrevIndex18(
        enabledIndex,
        this.enabledCount() - 1,
        loop
      );
      return this.enabledItem(prevEnabledIndex);
    });
    __publicField19(this, "registerNode", (node2, options) => {
      if (!node2 || this.descendants.has(node2))
        return;
      const keys2 = Array.from(this.descendants.keys()).concat(node2);
      const sorted = sortNodes3(keys2);
      if (options == null ? void 0 : options.disabled) {
        options.disabled = !!options.disabled;
      }
      const descendant = { node: node2, index: -1, ...options };
      this.descendants.set(node2, descendant);
      this.assignIndex(sorted);
    });
  }
};

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/descendant/dist/chunk-D5UZ3RNN.mjs
var import_react312 = __toESM(require_react(), 1);
function useDescendants3() {
  const descendants = (0, import_react312.useRef)(new DescendantsManager3());
  useSafeLayoutEffect5(() => {
    return () => descendants.current.destroy();
  });
  return descendants.current;
}
var [DescendantsContextProvider3, useDescendantsContext3] = createContext({
  name: "DescendantsProvider",
  errorMessage: "useDescendantsContext must be used within DescendantsProvider"
});
function useDescendant3(options) {
  const descendants = useDescendantsContext3();
  const [index, setIndex] = (0, import_react312.useState)(-1);
  const ref = (0, import_react312.useRef)(null);
  useSafeLayoutEffect5(() => {
    return () => {
      if (!ref.current)
        return;
      descendants.unregister(ref.current);
    };
  }, []);
  useSafeLayoutEffect5(() => {
    if (!ref.current)
      return;
    const dataIndex = Number(ref.current.dataset["index"]);
    if (index != dataIndex && !Number.isNaN(dataIndex)) {
      setIndex(dataIndex);
    }
  });
  const refCallback = options ? cast5(descendants.register(options)) : cast5(descendants.register);
  return {
    descendants,
    index,
    enabledIndex: descendants.enabledIndexOf(ref.current),
    register: mergeRefs4(refCallback, ref)
  };
}
function createDescendantContext3() {
  const ContextProvider = cast5(DescendantsContextProvider3);
  const _useDescendantsContext = () => cast5(useDescendantsContext3());
  const _useDescendant = (options) => useDescendant3(options);
  const _useDescendants = () => useDescendants3();
  return [
    ContextProvider,
    _useDescendantsContext,
    _useDescendants,
    _useDescendant
  ];
}

// node_modules/@chakra-ui/pin-input/dist/chunk-E34PQC4X.mjs
var import_react313 = __toESM(require_react(), 1);
var [
  PinInputDescendantsProvider,
  usePinInputDescendantsContext,
  usePinInputDescendants,
  usePinInputDescendant
] = createDescendantContext3();
var [PinInputProvider, usePinInputContext] = createContext({
  name: "PinInputContext",
  errorMessage: "usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`"
});
var toArray2 = (value) => value == null ? void 0 : value.split("");
function validate(value, type) {
  const NUMERIC_REGEX = /^[0-9]+$/;
  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;
  const regex = type === "alphanumeric" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;
  return regex.test(value);
}
function usePinInput(props = {}) {
  const {
    autoFocus,
    value,
    defaultValue,
    onChange,
    onComplete,
    placeholder = "\u25CB",
    manageFocus = true,
    otp = false,
    id: idProp,
    isDisabled: isDisabled26,
    isInvalid,
    type = "number",
    mask
  } = props;
  const uuid = (0, import_react313.useId)();
  const id4 = idProp != null ? idProp : `pin-input-${uuid}`;
  const descendants = usePinInputDescendants();
  const [moveFocus, setMoveFocus] = (0, import_react313.useState)(true);
  const [focusedIndex, setFocusedIndex] = (0, import_react313.useState)(-1);
  const [values, setValues2] = useControllableState({
    defaultValue: toArray2(defaultValue) || [],
    value: toArray2(value),
    onChange: (values2) => onChange == null ? void 0 : onChange(values2.join(""))
  });
  (0, import_react313.useEffect)(() => {
    if (autoFocus) {
      const first = descendants.first();
      if (first) {
        requestAnimationFrame(() => {
          first.node.focus();
        });
      }
    }
  }, [descendants]);
  const focusNext = (0, import_react313.useCallback)(
    (index) => {
      if (!moveFocus || !manageFocus)
        return;
      const next = descendants.next(index, false);
      if (next) {
        requestAnimationFrame(() => {
          next.node.focus();
        });
      }
    },
    [descendants, moveFocus, manageFocus]
  );
  const setValue = (0, import_react313.useCallback)(
    (value2, index, handleFocus = true) => {
      const nextValues = [...values];
      nextValues[index] = value2;
      setValues2(nextValues);
      const isComplete = value2 !== "" && nextValues.length === descendants.count() && nextValues.every(
        (inputValue) => inputValue != null && inputValue !== ""
      );
      if (isComplete) {
        onComplete == null ? void 0 : onComplete(nextValues.join(""));
      } else {
        if (handleFocus)
          focusNext(index);
      }
    },
    [values, setValues2, focusNext, onComplete, descendants]
  );
  const clear = (0, import_react313.useCallback)(() => {
    var _a40;
    const values2 = Array(descendants.count()).fill("");
    setValues2(values2);
    const first = descendants.first();
    (_a40 = first == null ? void 0 : first.node) == null ? void 0 : _a40.focus();
  }, [descendants, setValues2]);
  const getNextValue = (0, import_react313.useCallback)((value2, eventValue) => {
    let nextValue = eventValue;
    if ((value2 == null ? void 0 : value2.length) > 0) {
      if (value2[0] === eventValue.charAt(0)) {
        nextValue = eventValue.charAt(1);
      } else if (value2[0] === eventValue.charAt(1)) {
        nextValue = eventValue.charAt(0);
      }
    }
    return nextValue;
  }, []);
  const getInputProps = (0, import_react313.useCallback)(
    (props2) => {
      const { index, ...rest } = props2;
      const onChange2 = (event) => {
        const eventValue = event.target.value;
        const currentValue = values[index];
        const nextValue = getNextValue(currentValue, eventValue);
        if (nextValue === "") {
          setValue("", index);
          return;
        }
        if (eventValue.length > 2) {
          if (validate(eventValue, type)) {
            const nextValue2 = eventValue.split("").filter((_, index2) => index2 < descendants.count());
            setValues2(nextValue2);
            if (nextValue2.length === descendants.count()) {
              onComplete == null ? void 0 : onComplete(nextValue2.join(""));
            }
          }
        } else {
          if (validate(nextValue, type)) {
            setValue(nextValue, index);
          }
          setMoveFocus(true);
        }
      };
      const onKeyDown = (event) => {
        var _a40;
        if (event.key === "Backspace" && manageFocus) {
          if (event.target.value === "") {
            const prevInput = descendants.prev(index, false);
            if (prevInput) {
              setValue("", index - 1, false);
              (_a40 = prevInput.node) == null ? void 0 : _a40.focus();
              setMoveFocus(true);
            }
          } else {
            setMoveFocus(false);
          }
        }
      };
      const onFocus3 = () => {
        setFocusedIndex(index);
      };
      const onBlur3 = () => {
        setFocusedIndex(-1);
      };
      const hasFocus = focusedIndex === index;
      const inputType = type === "number" ? "tel" : "text";
      return {
        "aria-label": "Please enter your pin code",
        inputMode: type === "number" ? "numeric" : "text",
        type: mask ? "password" : inputType,
        ...rest,
        id: `${id4}-${index}`,
        disabled: isDisabled26,
        "aria-invalid": ariaAttr(isInvalid),
        onChange: callAllHandlers(rest.onChange, onChange2),
        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),
        onFocus: callAllHandlers(rest.onFocus, onFocus3),
        onBlur: callAllHandlers(rest.onBlur, onBlur3),
        value: values[index] || "",
        autoComplete: otp ? "one-time-code" : "off",
        placeholder: hasFocus ? "" : placeholder
      };
    },
    [
      descendants,
      focusedIndex,
      getNextValue,
      id4,
      isDisabled26,
      mask,
      isInvalid,
      manageFocus,
      onComplete,
      otp,
      placeholder,
      setValue,
      setValues2,
      type,
      values
    ]
  );
  return {
    getInputProps,
    id: id4,
    descendants,
    values,
    setValue,
    setValues: setValues2,
    clear
  };
}
function usePinInputField(props = {}, ref = null) {
  const { getInputProps } = usePinInputContext();
  const { index, register } = usePinInputDescendant();
  return getInputProps({
    ...props,
    ref: mergeRefs4(register, ref),
    index
  });
}

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react315 = __toESM(require_react(), 1);
function useTheme16() {
  const theme3 = (0, import_react315.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra16() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme16();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM16() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser18 = canUseDOM16();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash21 = __toESM(require_lodash(), 1);
function omit20(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get17(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize17 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet17 = memoize17(get17);
function objectFilter16(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined16 = (object2) => objectFilter16(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction19(value) {
  return typeof value === "function";
}
var __DEV__16 = import_process.default.env.NODE_ENV !== "production";
var __TEST__16 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn19(valueOrFn, ...args) {
  return isFunction19(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once16(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn17 = once16((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__16) {
    console.warn(message);
  }
});
var error16 = once16((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__16) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger16 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger16 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep16 = 1 / 60 * 1e3;
var getCurrentTime16 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame16 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime16()), defaultTimestep16);

// node_modules/@chakra-ui/pin-input/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep17(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/pin-input/node_modules/framesync/dist/es/index.mjs
var maxElapsed17 = 40;
var useDefaultElapsed17 = true;
var runNextFrame17 = false;
var isProcessing16 = false;
var frame17 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder17 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps17 = stepsOrder17.reduce((acc, key) => {
  acc[key] = createRenderStep17(() => runNextFrame17 = true);
  return acc;
}, {});
var sync17 = stepsOrder17.reduce((acc, key) => {
  const step = steps17[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame17)
      startLoop17();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync17 = stepsOrder17.reduce((acc, key) => {
  acc[key] = steps17[key].cancel;
  return acc;
}, {});
var flushSync16 = stepsOrder17.reduce((acc, key) => {
  acc[key] = () => steps17[key].process(frame17);
  return acc;
}, {});
var processStep17 = (stepId) => steps17[stepId].process(frame17);
var processFrame17 = (timestamp) => {
  runNextFrame17 = false;
  frame17.delta = useDefaultElapsed17 ? defaultTimestep16 : Math.max(Math.min(timestamp - frame17.timestamp, maxElapsed17), 1);
  frame17.timestamp = timestamp;
  isProcessing16 = true;
  stepsOrder17.forEach(processStep17);
  isProcessing16 = false;
  if (runNextFrame17) {
    useDefaultElapsed17 = false;
    onNextFrame16(processFrame17);
  }
};
var startLoop17 = () => {
  runNextFrame17 = true;
  useDefaultElapsed17 = true;
  if (!isProcessing16)
    onNextFrame16(processFrame17);
};

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints19 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList17 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector17 = focusableElList17.join();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react316 = __toESM(require_react(), 1);
var import_react_fast_compare16 = __toESM(require_react_fast_compare16(), 1);
function useStyleConfigImpl14(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra16();
  const themeStyleConfig = themeKey ? memoizedGet17(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash21.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined16(omit20(rest, ["children"]))
  );
  const stylesRef = (0, import_react316.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare16.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig16(themeKey, props = {}) {
  return useStyleConfigImpl14(themeKey, props);
}

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames16 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps16 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp16(prop) {
  return validHTMLProps16.has(prop) || !allPropNames16.has(prop);
}

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react317 = __toESM(require_react(), 1);
var _a30;
var emotion_styled16 = (_a30 = emotion_styled_browser_esm_default.default) != null ? _a30 : emotion_styled_browser_esm_default;
var toCSSObject16 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter16(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn19(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined16(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled16(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp16;
  }
  const styleObject = toCSSObject16({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled16(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react317.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react317.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory16() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled16, {
    apply(target, thisArg, argArray) {
      return styled16(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled16(element));
      }
      return cache.get(element);
    }
  });
}
var chakra16 = factory16();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react318 = __toESM(require_react(), 1);
function forwardRef32(component) {
  return (0, import_react318.forwardRef)(component);
}

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react319 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react320 = __toESM(require_react(), 1);
function createContext28(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react320.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react320.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react322 = __toESM(require_react(), 1);
var import_jsx_runtime151 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider16, useStyles16] = createContext28({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/pin-input/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/pin-input/dist/chunk-US44V7OZ.mjs
var import_react324 = __toESM(require_react(), 1);
var import_jsx_runtime152 = __toESM(require_jsx_runtime(), 1);
function PinInput(props) {
  const styles3 = useStyleConfig16("PinInput", props);
  const { children, ...rest } = omitThemingProps(props);
  const { descendants, ...context } = usePinInput(rest);
  const clones = getValidChildren6(children).map(
    (child) => (0, import_react324.cloneElement)(child, { __css: styles3 })
  );
  return (0, import_jsx_runtime152.jsx)(PinInputDescendantsProvider, { value: descendants, children: (0, import_jsx_runtime152.jsx)(PinInputProvider, { value: context, children: clones }) });
}
PinInput.displayName = "PinInput";
var PinInputField = forwardRef32(
  function PinInputField2(props, ref) {
    const inputProps = usePinInputField(props, ref);
    return (0, import_jsx_runtime152.jsx)(
      chakra16.input,
      {
        ...inputProps,
        className: cx("chakra-pin-input", props.className)
      }
    );
  }
);
PinInputField.displayName = "PinInputField";

// node_modules/@chakra-ui/popover/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/popover/dist/chunk-BYOOQOH2.mjs
init_shim();

// node_modules/@chakra-ui/popover/dist/chunk-FOAN3JQV.mjs
init_shim();
var [PopoverProvider, usePopoverContext] = createContext({
  name: "PopoverContext",
  errorMessage: "usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`"
});
var [PopoverStylesProvider, usePopoverStyles] = createContext({
  name: `PopoverStylesContext`,
  errorMessage: `usePopoverStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Popover />" `
});

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react326 = __toESM(require_react(), 1);
function useTheme17() {
  const theme3 = (0, import_react326.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra17() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme17();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM17() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser19 = canUseDOM17();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash22 = __toESM(require_lodash(), 1);
function omit21(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get18(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize18 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet18 = memoize18(get18);
function objectFilter17(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined17 = (object2) => objectFilter17(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction20(value) {
  return typeof value === "function";
}
var __DEV__17 = import_process.default.env.NODE_ENV !== "production";
var __TEST__17 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn20(valueOrFn, ...args) {
  return isFunction20(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once17(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn18 = once17((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__17) {
    console.warn(message);
  }
});
var error17 = once17((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__17) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger17 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger17 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep17 = 1 / 60 * 1e3;
var getCurrentTime17 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame17 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime17()), defaultTimestep17);

// node_modules/@chakra-ui/popover/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep18(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/popover/node_modules/framesync/dist/es/index.mjs
var maxElapsed18 = 40;
var useDefaultElapsed18 = true;
var runNextFrame18 = false;
var isProcessing17 = false;
var frame18 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder18 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps18 = stepsOrder18.reduce((acc, key) => {
  acc[key] = createRenderStep18(() => runNextFrame18 = true);
  return acc;
}, {});
var sync18 = stepsOrder18.reduce((acc, key) => {
  const step = steps18[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame18)
      startLoop18();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync18 = stepsOrder18.reduce((acc, key) => {
  acc[key] = steps18[key].cancel;
  return acc;
}, {});
var flushSync17 = stepsOrder18.reduce((acc, key) => {
  acc[key] = () => steps18[key].process(frame18);
  return acc;
}, {});
var processStep18 = (stepId) => steps18[stepId].process(frame18);
var processFrame18 = (timestamp) => {
  runNextFrame18 = false;
  frame18.delta = useDefaultElapsed18 ? defaultTimestep17 : Math.max(Math.min(timestamp - frame18.timestamp, maxElapsed18), 1);
  frame18.timestamp = timestamp;
  isProcessing17 = true;
  stepsOrder18.forEach(processStep18);
  isProcessing17 = false;
  if (runNextFrame18) {
    useDefaultElapsed18 = false;
    onNextFrame17(processFrame18);
  }
};
var startLoop18 = () => {
  runNextFrame18 = true;
  useDefaultElapsed18 = true;
  if (!isProcessing17)
    onNextFrame17(processFrame18);
};

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints20 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList18 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector18 = focusableElList18.join();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react327 = __toESM(require_react(), 1);
var import_react_fast_compare17 = __toESM(require_react_fast_compare17(), 1);
function useStyleConfigImpl15(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra17();
  const themeStyleConfig = themeKey ? memoizedGet18(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash22.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined17(omit21(rest, ["children"]))
  );
  const stylesRef = (0, import_react327.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare17.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig17(themeKey, props = {}) {
  return useStyleConfigImpl15(themeKey, props);
}
function useMultiStyleConfig17(themeKey, props = {}) {
  return useStyleConfigImpl15(themeKey, props);
}

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames17 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps17 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp17(prop) {
  return validHTMLProps17.has(prop) || !allPropNames17.has(prop);
}

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react328 = __toESM(require_react(), 1);
var _a31;
var emotion_styled17 = (_a31 = emotion_styled_browser_esm_default.default) != null ? _a31 : emotion_styled_browser_esm_default;
var toCSSObject17 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter17(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn20(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined17(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled17(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp17;
  }
  const styleObject = toCSSObject17({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled17(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react328.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react328.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory17() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled17, {
    apply(target, thisArg, argArray) {
      return styled17(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled17(element));
      }
      return cache.get(element);
    }
  });
}
var chakra17 = factory17();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react329 = __toESM(require_react(), 1);
function forwardRef33(component) {
  return (0, import_react329.forwardRef)(component);
}

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react330 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react331 = __toESM(require_react(), 1);
function createContext29(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react331.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react331.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react333 = __toESM(require_react(), 1);
var import_jsx_runtime153 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider17, useStyles17] = createContext29({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/popover/dist/chunk-BYOOQOH2.mjs
var import_jsx_runtime154 = __toESM(require_jsx_runtime(), 1);
var PopoverHeader = forwardRef33(
  function PopoverHeader2(props, ref) {
    const { getHeaderProps } = usePopoverContext();
    const styles3 = usePopoverStyles();
    return (0, import_jsx_runtime154.jsx)(
      chakra17.header,
      {
        ...getHeaderProps(props, ref),
        className: cx("chakra-popover__header", props.className),
        __css: styles3.header
      }
    );
  }
);
PopoverHeader.displayName = "PopoverHeader";

// node_modules/@chakra-ui/popover/dist/chunk-3O5UWOX6.mjs
init_shim();
var import_react335 = __toESM(require_react(), 1);
function PopoverTrigger(props) {
  const child = import_react335.Children.only(props.children);
  const { getTriggerProps } = usePopoverContext();
  return (0, import_react335.cloneElement)(child, getTriggerProps(child.props, child.ref));
}
PopoverTrigger.displayName = "PopoverTrigger";

// node_modules/@chakra-ui/popover/dist/chunk-4OGHDZEB.mjs
init_shim();

// node_modules/@chakra-ui/popover/dist/chunk-BOXNG7YC.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/popper/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/popper/dist/chunk-HJWVQQGO.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/popper/dist/chunk-SSFABIB2.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/popper/dist/chunk-QAKUNGSB.mjs
init_shim();
var toVar4 = (value, fallback) => ({
  var: value,
  varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`
});
var cssVars2 = {
  arrowShadowColor: toVar4("--popper-arrow-shadow-color"),
  arrowSize: toVar4("--popper-arrow-size", "8px"),
  arrowSizeHalf: toVar4("--popper-arrow-size-half"),
  arrowBg: toVar4("--popper-arrow-bg"),
  transformOrigin: toVar4("--popper-transform-origin"),
  arrowOffset: toVar4("--popper-arrow-offset")
};
function getBoxShadow2(placement) {
  if (placement.includes("top"))
    return `1px 1px 1px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("bottom"))
    return `-1px -1px 1px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("right"))
    return `-1px 1px 1px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("left"))
    return `1px -1px 1px 0 var(--popper-arrow-shadow-color)`;
}
var transforms2 = {
  top: "bottom center",
  "top-start": "bottom left",
  "top-end": "bottom right",
  bottom: "top center",
  "bottom-start": "top left",
  "bottom-end": "top right",
  left: "right center",
  "left-start": "right top",
  "left-end": "right bottom",
  right: "left center",
  "right-start": "left top",
  "right-end": "left bottom"
};
var toTransformOrigin2 = (placement) => transforms2[placement];
var defaultEventListeners2 = {
  scroll: true,
  resize: true
};
function getEventListenerOptions2(value) {
  let eventListeners;
  if (typeof value === "object") {
    eventListeners = {
      enabled: true,
      options: { ...defaultEventListeners2, ...value }
    };
  } else {
    eventListeners = {
      enabled: value,
      options: defaultEventListeners2
    };
  }
  return eventListeners;
}

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/popper/dist/chunk-SSFABIB2.mjs
var matchWidth2 = {
  name: "matchWidth",
  enabled: true,
  phase: "beforeWrite",
  requires: ["computeStyles"],
  fn: ({ state: state2 }) => {
    state2.styles.popper.width = `${state2.rects.reference.width}px`;
  },
  effect: ({ state: state2 }) => () => {
    const reference = state2.elements.reference;
    state2.elements.popper.style.width = `${reference.offsetWidth}px`;
  }
};
var transformOrigin2 = {
  name: "transformOrigin",
  enabled: true,
  phase: "write",
  fn: ({ state: state2 }) => {
    setTransformOrigin2(state2);
  },
  effect: ({ state: state2 }) => () => {
    setTransformOrigin2(state2);
  }
};
var setTransformOrigin2 = (state2) => {
  state2.elements.popper.style.setProperty(
    cssVars2.transformOrigin.var,
    toTransformOrigin2(state2.placement)
  );
};
var positionArrow2 = {
  name: "positionArrow",
  enabled: true,
  phase: "afterWrite",
  fn: ({ state: state2 }) => {
    setArrowStyles2(state2);
  }
};
var setArrowStyles2 = (state2) => {
  var _a40;
  if (!state2.placement)
    return;
  const overrides = getArrowStyle3(state2.placement);
  if (((_a40 = state2.elements) == null ? void 0 : _a40.arrow) && overrides) {
    Object.assign(state2.elements.arrow.style, {
      [overrides.property]: overrides.value,
      width: cssVars2.arrowSize.varRef,
      height: cssVars2.arrowSize.varRef,
      zIndex: -1
    });
    const vars3 = {
      [cssVars2.arrowSizeHalf.var]: `calc(${cssVars2.arrowSize.varRef} / 2)`,
      [cssVars2.arrowOffset.var]: `calc(${cssVars2.arrowSizeHalf.varRef} * -1)`
    };
    for (const property in vars3) {
      state2.elements.arrow.style.setProperty(property, vars3[property]);
    }
  }
};
var getArrowStyle3 = (placement) => {
  if (placement.startsWith("top")) {
    return { property: "bottom", value: cssVars2.arrowOffset.varRef };
  }
  if (placement.startsWith("bottom")) {
    return { property: "top", value: cssVars2.arrowOffset.varRef };
  }
  if (placement.startsWith("left")) {
    return { property: "right", value: cssVars2.arrowOffset.varRef };
  }
  if (placement.startsWith("right")) {
    return { property: "left", value: cssVars2.arrowOffset.varRef };
  }
};
var innerArrow2 = {
  name: "innerArrow",
  enabled: true,
  phase: "main",
  requires: ["arrow"],
  fn: ({ state: state2 }) => {
    setInnerArrowStyles2(state2);
  },
  effect: ({ state: state2 }) => () => {
    setInnerArrowStyles2(state2);
  }
};
var setInnerArrowStyles2 = (state2) => {
  if (!state2.elements.arrow)
    return;
  const inner = state2.elements.arrow.querySelector(
    "[data-popper-arrow-inner]"
  );
  if (!inner)
    return;
  const boxShadow = getBoxShadow2(state2.placement);
  if (boxShadow) {
    inner.style.setProperty("--popper-arrow-default-shadow", boxShadow);
  }
  Object.assign(inner.style, {
    transform: "rotate(45deg)",
    background: cssVars2.arrowBg.varRef,
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    position: "absolute",
    zIndex: "inherit",
    boxShadow: `var(--popper-arrow-shadow, var(--popper-arrow-default-shadow))`
  });
};

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/popper/dist/chunk-6DG2E3QO.mjs
init_shim();
var logicals2 = {
  "start-start": { ltr: "left-start", rtl: "right-start" },
  "start-end": { ltr: "left-end", rtl: "right-end" },
  "end-start": { ltr: "right-start", rtl: "left-start" },
  "end-end": { ltr: "right-end", rtl: "left-end" },
  start: { ltr: "left", rtl: "right" },
  end: { ltr: "right", rtl: "left" }
};
var opposites2 = {
  "auto-start": "auto-end",
  "auto-end": "auto-start",
  "top-start": "top-end",
  "top-end": "top-start",
  "bottom-start": "bottom-end",
  "bottom-end": "bottom-start"
};
function getPopperPlacement2(placement, dir = "ltr") {
  var _a40, _b8;
  const value = ((_a40 = logicals2[placement]) == null ? void 0 : _a40[dir]) || placement;
  if (dir === "ltr")
    return value;
  return (_b8 = opposites2[placement]) != null ? _b8 : value;
}

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/popper/dist/chunk-HJWVQQGO.mjs
init_lib();
var import_react336 = __toESM(require_react(), 1);
function usePopper2(props = {}) {
  const {
    enabled = true,
    modifiers,
    placement: placementProp = "bottom",
    strategy = "absolute",
    arrowPadding = 8,
    eventListeners = true,
    offset,
    gutter = 8,
    flip = true,
    boundary = "clippingParents",
    preventOverflow = true,
    matchWidth: matchWidth22,
    direction: direction3 = "ltr"
  } = props;
  const reference = (0, import_react336.useRef)(null);
  const popper = (0, import_react336.useRef)(null);
  const instance = (0, import_react336.useRef)(null);
  const placement = getPopperPlacement2(placementProp, direction3);
  const cleanup = (0, import_react336.useRef)(() => {
  });
  const setupPopper = (0, import_react336.useCallback)(() => {
    var _a40;
    if (!enabled || !reference.current || !popper.current)
      return;
    (_a40 = cleanup.current) == null ? void 0 : _a40.call(cleanup);
    instance.current = createPopper(reference.current, popper.current, {
      placement,
      modifiers: [
        innerArrow2,
        positionArrow2,
        transformOrigin2,
        {
          ...matchWidth2,
          enabled: !!matchWidth22
        },
        {
          name: "eventListeners",
          ...getEventListenerOptions2(eventListeners)
        },
        {
          name: "arrow",
          options: { padding: arrowPadding }
        },
        {
          name: "offset",
          options: {
            offset: offset != null ? offset : [0, gutter]
          }
        },
        {
          name: "flip",
          enabled: !!flip,
          options: { padding: 8 }
        },
        {
          name: "preventOverflow",
          enabled: !!preventOverflow,
          options: { boundary }
        },
        ...modifiers != null ? modifiers : []
      ],
      strategy
    });
    instance.current.forceUpdate();
    cleanup.current = instance.current.destroy;
  }, [
    placement,
    enabled,
    modifiers,
    matchWidth22,
    eventListeners,
    arrowPadding,
    offset,
    gutter,
    flip,
    preventOverflow,
    boundary,
    strategy
  ]);
  (0, import_react336.useEffect)(() => {
    return () => {
      var _a40;
      if (!reference.current && !popper.current) {
        (_a40 = instance.current) == null ? void 0 : _a40.destroy();
        instance.current = null;
      }
    };
  }, []);
  const referenceRef = (0, import_react336.useCallback)(
    (node2) => {
      reference.current = node2;
      setupPopper();
    },
    [setupPopper]
  );
  const getReferenceProps = (0, import_react336.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs4(referenceRef, ref)
    }),
    [referenceRef]
  );
  const popperRef = (0, import_react336.useCallback)(
    (node2) => {
      popper.current = node2;
      setupPopper();
    },
    [setupPopper]
  );
  const getPopperProps = (0, import_react336.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs4(popperRef, ref),
      style: {
        ...props2.style,
        position: strategy,
        minWidth: matchWidth22 ? void 0 : "max-content",
        inset: "0 auto auto 0"
      }
    }),
    [strategy, popperRef, matchWidth22]
  );
  const getArrowProps = (0, import_react336.useCallback)((props2 = {}, ref = null) => {
    const { size: size3, shadowColor, bg, style, ...rest } = props2;
    return {
      ...rest,
      ref,
      "data-popper-arrow": "",
      style: getArrowStyle4(props2)
    };
  }, []);
  const getArrowInnerProps = (0, import_react336.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref,
      "data-popper-arrow-inner": ""
    }),
    []
  );
  return {
    update() {
      var _a40;
      (_a40 = instance.current) == null ? void 0 : _a40.update();
    },
    forceUpdate() {
      var _a40;
      (_a40 = instance.current) == null ? void 0 : _a40.forceUpdate();
    },
    transformOrigin: cssVars2.transformOrigin.varRef,
    referenceRef,
    popperRef,
    getPopperProps,
    getArrowProps,
    getArrowInnerProps,
    getReferenceProps
  };
}
function getArrowStyle4(props) {
  const { size: size3, shadowColor, bg, style } = props;
  const computedStyle = { ...style, position: "absolute" };
  if (size3) {
    computedStyle["--popper-arrow-size"] = size3;
  }
  if (shadowColor) {
    computedStyle["--popper-arrow-shadow-color"] = shadowColor;
  }
  if (bg) {
    computedStyle["--popper-arrow-bg"] = bg;
  }
  return computedStyle;
}

// node_modules/@chakra-ui/popover/dist/chunk-BOXNG7YC.mjs
var import_react337 = __toESM(require_react(), 1);
var TRIGGER = {
  click: "click",
  hover: "hover"
};
function usePopover(props = {}) {
  const {
    closeOnBlur = true,
    closeOnEsc = true,
    initialFocusRef,
    id: id4,
    returnFocusOnClose = true,
    autoFocus = true,
    arrowSize,
    arrowShadowColor,
    trigger: trigger2 = TRIGGER.click,
    openDelay = 200,
    closeDelay = 200,
    isLazy,
    lazyBehavior = "unmount",
    computePositionOnMount,
    ...popperProps
  } = props;
  const { isOpen, onClose, onOpen, onToggle } = useDisclosure2(props);
  const anchorRef = (0, import_react337.useRef)(null);
  const triggerRef = (0, import_react337.useRef)(null);
  const popoverRef = (0, import_react337.useRef)(null);
  const isHoveringRef = (0, import_react337.useRef)(false);
  const hasBeenOpened = (0, import_react337.useRef)(false);
  if (isOpen) {
    hasBeenOpened.current = true;
  }
  const [hasHeader, setHasHeader] = (0, import_react337.useState)(false);
  const [hasBody, setHasBody] = (0, import_react337.useState)(false);
  const uuid = (0, import_react337.useId)();
  const uid = id4 != null ? id4 : uuid;
  const [triggerId, popoverId, headerId, bodyId] = [
    "popover-trigger",
    "popover-content",
    "popover-header",
    "popover-body"
  ].map((id22) => `${id22}-${uid}`);
  const {
    referenceRef,
    getArrowProps,
    getPopperProps,
    getArrowInnerProps,
    forceUpdate
  } = usePopper2({
    ...popperProps,
    enabled: isOpen || !!computePositionOnMount
  });
  const animated = useAnimationState2({ isOpen, ref: popoverRef });
  useFocusOnPointerDown({
    enabled: isOpen,
    ref: triggerRef
  });
  useFocusOnHide2(popoverRef, {
    focusRef: triggerRef,
    visible: isOpen,
    shouldFocus: returnFocusOnClose && trigger2 === TRIGGER.click
  });
  useFocusOnShow2(popoverRef, {
    focusRef: initialFocusRef,
    visible: isOpen,
    shouldFocus: autoFocus && trigger2 === TRIGGER.click
  });
  const shouldRenderChildren = lazyDisclosure({
    wasSelected: hasBeenOpened.current,
    enabled: isLazy,
    mode: lazyBehavior,
    isSelected: animated.present
  });
  const getPopoverProps = (0, import_react337.useCallback)(
    (props2 = {}, _ref2 = null) => {
      const popoverProps = {
        ...props2,
        style: {
          ...props2.style,
          transformOrigin: cssVars2.transformOrigin.varRef,
          [cssVars2.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,
          [cssVars2.arrowShadowColor.var]: arrowShadowColor
        },
        ref: mergeRefs4(popoverRef, _ref2),
        children: shouldRenderChildren ? props2.children : null,
        id: popoverId,
        tabIndex: -1,
        role: "dialog",
        onKeyDown: callAllHandlers(props2.onKeyDown, (event) => {
          if (closeOnEsc && event.key === "Escape") {
            onClose();
          }
        }),
        onBlur: callAllHandlers(props2.onBlur, (event) => {
          const relatedTarget = getRelatedTarget18(event);
          const targetIsPopover = contains21(popoverRef.current, relatedTarget);
          const targetIsTrigger = contains21(triggerRef.current, relatedTarget);
          const isValidBlur = !targetIsPopover && !targetIsTrigger;
          if (isOpen && closeOnBlur && isValidBlur) {
            onClose();
          }
        }),
        "aria-labelledby": hasHeader ? headerId : void 0,
        "aria-describedby": hasBody ? bodyId : void 0
      };
      if (trigger2 === TRIGGER.hover) {
        popoverProps.role = "tooltip";
        popoverProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {
          isHoveringRef.current = true;
        });
        popoverProps.onMouseLeave = callAllHandlers(
          props2.onMouseLeave,
          (event) => {
            if (event.nativeEvent.relatedTarget === null) {
              return;
            }
            isHoveringRef.current = false;
            setTimeout(() => onClose(), closeDelay);
          }
        );
      }
      return popoverProps;
    },
    [
      shouldRenderChildren,
      popoverId,
      hasHeader,
      headerId,
      hasBody,
      bodyId,
      trigger2,
      closeOnEsc,
      onClose,
      isOpen,
      closeOnBlur,
      closeDelay,
      arrowShadowColor,
      arrowSize
    ]
  );
  const getPopoverPositionerProps = (0, import_react337.useCallback)(
    (props2 = {}, forwardedRef = null) => getPopperProps(
      {
        ...props2,
        style: {
          visibility: isOpen ? "visible" : "hidden",
          ...props2.style
        }
      },
      forwardedRef
    ),
    [isOpen, getPopperProps]
  );
  const getAnchorProps = (0, import_react337.useCallback)(
    (props2, _ref2 = null) => {
      return {
        ...props2,
        ref: mergeRefs4(_ref2, anchorRef, referenceRef)
      };
    },
    [anchorRef, referenceRef]
  );
  const openTimeout = (0, import_react337.useRef)();
  const closeTimeout = (0, import_react337.useRef)();
  const maybeReferenceRef = (0, import_react337.useCallback)(
    (node2) => {
      if (anchorRef.current == null) {
        referenceRef(node2);
      }
    },
    [referenceRef]
  );
  const getTriggerProps = (0, import_react337.useCallback)(
    (props2 = {}, _ref2 = null) => {
      const triggerProps = {
        ...props2,
        ref: mergeRefs4(triggerRef, _ref2, maybeReferenceRef),
        id: triggerId,
        "aria-haspopup": "dialog",
        "aria-expanded": isOpen,
        "aria-controls": popoverId
      };
      if (trigger2 === TRIGGER.click) {
        triggerProps.onClick = callAllHandlers(props2.onClick, onToggle);
      }
      if (trigger2 === TRIGGER.hover) {
        triggerProps.onFocus = callAllHandlers(props2.onFocus, () => {
          if (openTimeout.current === void 0) {
            onOpen();
          }
        });
        triggerProps.onBlur = callAllHandlers(props2.onBlur, (event) => {
          const relatedTarget = getRelatedTarget18(event);
          const isValidBlur = !contains21(popoverRef.current, relatedTarget);
          if (isOpen && closeOnBlur && isValidBlur) {
            onClose();
          }
        });
        triggerProps.onKeyDown = callAllHandlers(props2.onKeyDown, (event) => {
          if (event.key === "Escape") {
            onClose();
          }
        });
        triggerProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {
          isHoveringRef.current = true;
          openTimeout.current = window.setTimeout(() => onOpen(), openDelay);
        });
        triggerProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, () => {
          isHoveringRef.current = false;
          if (openTimeout.current) {
            clearTimeout(openTimeout.current);
            openTimeout.current = void 0;
          }
          closeTimeout.current = window.setTimeout(() => {
            if (isHoveringRef.current === false) {
              onClose();
            }
          }, closeDelay);
        });
      }
      return triggerProps;
    },
    [
      triggerId,
      isOpen,
      popoverId,
      trigger2,
      maybeReferenceRef,
      onToggle,
      onOpen,
      closeOnBlur,
      onClose,
      openDelay,
      closeDelay
    ]
  );
  (0, import_react337.useEffect)(() => {
    return () => {
      if (openTimeout.current) {
        clearTimeout(openTimeout.current);
      }
      if (closeTimeout.current) {
        clearTimeout(closeTimeout.current);
      }
    };
  }, []);
  const getHeaderProps = (0, import_react337.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      id: headerId,
      ref: mergeRefs4(ref, (node2) => {
        setHasHeader(!!node2);
      })
    }),
    [headerId]
  );
  const getBodyProps = (0, import_react337.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      id: bodyId,
      ref: mergeRefs4(ref, (node2) => {
        setHasBody(!!node2);
      })
    }),
    [bodyId]
  );
  return {
    forceUpdate,
    isOpen,
    onAnimationComplete: animated.onComplete,
    onClose,
    getAnchorProps,
    getArrowProps,
    getArrowInnerProps,
    getPopoverPositionerProps,
    getPopoverProps,
    getTriggerProps,
    getHeaderProps,
    getBodyProps
  };
}
function contains21(parent, child) {
  return parent === child || (parent == null ? void 0 : parent.contains(child));
}
function getRelatedTarget18(event) {
  var _a40;
  const activeEl = event.currentTarget.ownerDocument.activeElement;
  return (_a40 = event.relatedTarget) != null ? _a40 : activeEl;
}

// node_modules/@chakra-ui/popover/dist/chunk-4OGHDZEB.mjs
var import_jsx_runtime155 = __toESM(require_jsx_runtime(), 1);
function Popover(props) {
  const styles3 = useMultiStyleConfig17("Popover", props);
  const { children, ...rest } = omitThemingProps(props);
  const theme3 = useTheme17();
  const context = usePopover({ ...rest, direction: theme3.direction });
  return (0, import_jsx_runtime155.jsx)(PopoverProvider, { value: context, children: (0, import_jsx_runtime155.jsx)(PopoverStylesProvider, { value: styles3, children: runIfFn(children, {
    isOpen: context.isOpen,
    onClose: context.onClose,
    forceUpdate: context.forceUpdate
  }) }) });
}
Popover.displayName = "Popover";

// node_modules/@chakra-ui/popover/dist/chunk-7NBWC5PS.mjs
init_shim();
var import_react338 = __toESM(require_react(), 1);
function PopoverAnchor(props) {
  const child = import_react338.Children.only(props.children);
  const { getAnchorProps } = usePopoverContext();
  return (0, import_react338.cloneElement)(child, getAnchorProps(child.props, child.ref));
}
PopoverAnchor.displayName = "PopoverAnchor";

// node_modules/@chakra-ui/popover/dist/chunk-RACJ2OQY.mjs
init_shim();
var import_jsx_runtime156 = __toESM(require_jsx_runtime(), 1);
function PopoverArrow(props) {
  var _a40;
  const { bg, bgColor, backgroundColor, shadow, boxShadow } = props;
  const { getArrowProps, getArrowInnerProps } = usePopoverContext();
  const styles3 = usePopoverStyles();
  const arrowBg = (_a40 = bg != null ? bg : bgColor) != null ? _a40 : backgroundColor;
  const arrowShadow = shadow != null ? shadow : boxShadow;
  return (0, import_jsx_runtime156.jsx)(
    chakra17.div,
    {
      ...getArrowProps(),
      className: "chakra-popover__arrow-positioner",
      children: (0, import_jsx_runtime156.jsx)(
        chakra17.div,
        {
          className: cx("chakra-popover__arrow", props.className),
          ...getArrowInnerProps(props),
          __css: {
            "--popper-arrow-bg": arrowBg ? `colors.${arrowBg}, ${arrowBg}` : void 0,
            "--popper-arrow-shadow": arrowShadow ? `shadows.${arrowShadow}, ${arrowShadow}` : void 0,
            ...styles3.arrow
          }
        }
      )
    }
  );
}
PopoverArrow.displayName = "PopoverArrow";

// node_modules/@chakra-ui/popover/dist/chunk-3JH7ZFSI.mjs
init_shim();
var import_jsx_runtime157 = __toESM(require_jsx_runtime(), 1);
var PopoverBody = forwardRef33(
  function PopoverBody2(props, ref) {
    const { getBodyProps } = usePopoverContext();
    const styles3 = usePopoverStyles();
    return (0, import_jsx_runtime157.jsx)(
      chakra17.div,
      {
        ...getBodyProps(props, ref),
        className: cx("chakra-popover__body", props.className),
        __css: styles3.body
      }
    );
  }
);
PopoverBody.displayName = "PopoverBody";

// node_modules/@chakra-ui/popover/dist/chunk-THJVJMZP.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/close-button/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/popover/node_modules/@chakra-ui/close-button/dist/chunk-DUEJD2BE.mjs
init_shim();
var import_jsx_runtime158 = __toESM(require_jsx_runtime(), 1);
function CloseIcon3(props) {
  return (0, import_jsx_runtime158.jsx)(Icon, { focusable: "false", "aria-hidden": true, ...props, children: (0, import_jsx_runtime158.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
    }
  ) });
}
var CloseButton4 = forwardRef33(
  function CloseButton23(props, ref) {
    const styles3 = useStyleConfig17("CloseButton", props);
    const { children, isDisabled: isDisabled26, __css, ...rest } = omitThemingProps(props);
    const baseStyle84 = {
      outline: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0
    };
    return (0, import_jsx_runtime158.jsx)(
      chakra17.button,
      {
        type: "button",
        "aria-label": "Close",
        ref,
        disabled: isDisabled26,
        __css: {
          ...baseStyle84,
          ...styles3,
          ...__css
        },
        ...rest,
        children: children || (0, import_jsx_runtime158.jsx)(CloseIcon3, { width: "1em", height: "1em" })
      }
    );
  }
);
CloseButton4.displayName = "CloseButton";

// node_modules/@chakra-ui/popover/dist/chunk-THJVJMZP.mjs
var import_jsx_runtime159 = __toESM(require_jsx_runtime(), 1);
var PopoverCloseButton = forwardRef33(
  function PopoverCloseButton2(props, ref) {
    const { onClose } = usePopoverContext();
    const styles3 = usePopoverStyles();
    return (0, import_jsx_runtime159.jsx)(
      CloseButton4,
      {
        size: "sm",
        onClick: onClose,
        className: cx("chakra-popover__close-btn", props.className),
        __css: styles3.closeButton,
        ref,
        ...props
      }
    );
  }
);
PopoverCloseButton.displayName = "PopoverCloseButton";

// node_modules/@chakra-ui/popover/dist/chunk-KVBLLJMP.mjs
init_shim();

// node_modules/@chakra-ui/popover/dist/chunk-LZVBC5YS.mjs
init_shim();
var import_jsx_runtime160 = __toESM(require_jsx_runtime(), 1);
function mergeVariants(variants40) {
  if (!variants40)
    return;
  return {
    enter: {
      ...variants40.enter,
      visibility: "visible"
    },
    exit: {
      ...variants40.exit,
      transitionEnd: {
        visibility: "hidden"
      }
    }
  };
}
var scaleFade = {
  exit: {
    opacity: 0,
    scale: 0.95,
    transition: {
      duration: 0.1,
      ease: [0.4, 0, 1, 1]
    }
  },
  enter: {
    scale: 1,
    opacity: 1,
    transition: {
      duration: 0.15,
      ease: [0, 0, 0.2, 1]
    }
  }
};
var MotionSection2 = chakra17(motion.section);
var PopoverTransition = forwardRef33(function PopoverTransition2(props, ref) {
  const { variants: variants40 = scaleFade, ...rest } = props;
  const { isOpen } = usePopoverContext();
  return (0, import_jsx_runtime160.jsx)(
    MotionSection2,
    {
      ref,
      variants: mergeVariants(variants40),
      initial: false,
      animate: isOpen ? "enter" : "exit",
      ...rest
    }
  );
});
PopoverTransition.displayName = "PopoverTransition";

// node_modules/@chakra-ui/popover/dist/chunk-KVBLLJMP.mjs
var import_jsx_runtime161 = __toESM(require_jsx_runtime(), 1);
var PopoverContent = forwardRef33(
  function PopoverContent2(props, ref) {
    const { rootProps, motionProps, ...contentProps } = props;
    const { getPopoverProps, getPopoverPositionerProps, onAnimationComplete } = usePopoverContext();
    const styles3 = usePopoverStyles();
    const contentStyles = {
      position: "relative",
      display: "flex",
      flexDirection: "column",
      ...styles3.content
    };
    return (0, import_jsx_runtime161.jsx)(
      chakra17.div,
      {
        ...getPopoverPositionerProps(rootProps),
        __css: styles3.popper,
        className: "chakra-popover__popper",
        children: (0, import_jsx_runtime161.jsx)(
          PopoverTransition,
          {
            ...motionProps,
            ...getPopoverProps(contentProps, ref),
            onAnimationComplete: callAll(
              onAnimationComplete,
              contentProps.onAnimationComplete
            ),
            className: cx("chakra-popover__content", props.className),
            __css: contentStyles
          }
        )
      }
    );
  }
);
PopoverContent.displayName = "PopoverContent";

// node_modules/@chakra-ui/popover/dist/chunk-A3QMTCPA.mjs
init_shim();
var import_jsx_runtime162 = __toESM(require_jsx_runtime(), 1);
function PopoverFooter(props) {
  const styles3 = usePopoverStyles();
  return (0, import_jsx_runtime162.jsx)(
    chakra17.footer,
    {
      ...props,
      className: cx("chakra-popover__footer", props.className),
      __css: styles3.footer
    }
  );
}
PopoverFooter.displayName = "PopoverFooter";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/popper/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/popper/dist/chunk-HJWVQQGO.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/popper/dist/chunk-SSFABIB2.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/popper/dist/chunk-QAKUNGSB.mjs
init_shim();
var toVar5 = (value, fallback) => ({
  var: value,
  varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`
});
var cssVars3 = {
  arrowShadowColor: toVar5("--popper-arrow-shadow-color"),
  arrowSize: toVar5("--popper-arrow-size", "8px"),
  arrowSizeHalf: toVar5("--popper-arrow-size-half"),
  arrowBg: toVar5("--popper-arrow-bg"),
  transformOrigin: toVar5("--popper-transform-origin"),
  arrowOffset: toVar5("--popper-arrow-offset")
};
function getBoxShadow3(placement) {
  if (placement.includes("top"))
    return `1px 1px 1px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("bottom"))
    return `-1px -1px 1px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("right"))
    return `-1px 1px 1px 0 var(--popper-arrow-shadow-color)`;
  if (placement.includes("left"))
    return `1px -1px 1px 0 var(--popper-arrow-shadow-color)`;
}
var transforms3 = {
  top: "bottom center",
  "top-start": "bottom left",
  "top-end": "bottom right",
  bottom: "top center",
  "bottom-start": "top left",
  "bottom-end": "top right",
  left: "right center",
  "left-start": "right top",
  "left-end": "right bottom",
  right: "left center",
  "right-start": "left top",
  "right-end": "left bottom"
};
var toTransformOrigin3 = (placement) => transforms3[placement];
var defaultEventListeners3 = {
  scroll: true,
  resize: true
};
function getEventListenerOptions3(value) {
  let eventListeners;
  if (typeof value === "object") {
    eventListeners = {
      enabled: true,
      options: { ...defaultEventListeners3, ...value }
    };
  } else {
    eventListeners = {
      enabled: value,
      options: defaultEventListeners3
    };
  }
  return eventListeners;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/popper/dist/chunk-SSFABIB2.mjs
var matchWidth3 = {
  name: "matchWidth",
  enabled: true,
  phase: "beforeWrite",
  requires: ["computeStyles"],
  fn: ({ state: state2 }) => {
    state2.styles.popper.width = `${state2.rects.reference.width}px`;
  },
  effect: ({ state: state2 }) => () => {
    const reference = state2.elements.reference;
    state2.elements.popper.style.width = `${reference.offsetWidth}px`;
  }
};
var transformOrigin3 = {
  name: "transformOrigin",
  enabled: true,
  phase: "write",
  fn: ({ state: state2 }) => {
    setTransformOrigin3(state2);
  },
  effect: ({ state: state2 }) => () => {
    setTransformOrigin3(state2);
  }
};
var setTransformOrigin3 = (state2) => {
  state2.elements.popper.style.setProperty(
    cssVars3.transformOrigin.var,
    toTransformOrigin3(state2.placement)
  );
};
var positionArrow3 = {
  name: "positionArrow",
  enabled: true,
  phase: "afterWrite",
  fn: ({ state: state2 }) => {
    setArrowStyles3(state2);
  }
};
var setArrowStyles3 = (state2) => {
  var _a40;
  if (!state2.placement)
    return;
  const overrides = getArrowStyle5(state2.placement);
  if (((_a40 = state2.elements) == null ? void 0 : _a40.arrow) && overrides) {
    Object.assign(state2.elements.arrow.style, {
      [overrides.property]: overrides.value,
      width: cssVars3.arrowSize.varRef,
      height: cssVars3.arrowSize.varRef,
      zIndex: -1
    });
    const vars3 = {
      [cssVars3.arrowSizeHalf.var]: `calc(${cssVars3.arrowSize.varRef} / 2)`,
      [cssVars3.arrowOffset.var]: `calc(${cssVars3.arrowSizeHalf.varRef} * -1)`
    };
    for (const property in vars3) {
      state2.elements.arrow.style.setProperty(property, vars3[property]);
    }
  }
};
var getArrowStyle5 = (placement) => {
  if (placement.startsWith("top")) {
    return { property: "bottom", value: cssVars3.arrowOffset.varRef };
  }
  if (placement.startsWith("bottom")) {
    return { property: "top", value: cssVars3.arrowOffset.varRef };
  }
  if (placement.startsWith("left")) {
    return { property: "right", value: cssVars3.arrowOffset.varRef };
  }
  if (placement.startsWith("right")) {
    return { property: "left", value: cssVars3.arrowOffset.varRef };
  }
};
var innerArrow3 = {
  name: "innerArrow",
  enabled: true,
  phase: "main",
  requires: ["arrow"],
  fn: ({ state: state2 }) => {
    setInnerArrowStyles3(state2);
  },
  effect: ({ state: state2 }) => () => {
    setInnerArrowStyles3(state2);
  }
};
var setInnerArrowStyles3 = (state2) => {
  if (!state2.elements.arrow)
    return;
  const inner = state2.elements.arrow.querySelector(
    "[data-popper-arrow-inner]"
  );
  if (!inner)
    return;
  const boxShadow = getBoxShadow3(state2.placement);
  if (boxShadow) {
    inner.style.setProperty("--popper-arrow-default-shadow", boxShadow);
  }
  Object.assign(inner.style, {
    transform: "rotate(45deg)",
    background: cssVars3.arrowBg.varRef,
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    position: "absolute",
    zIndex: "inherit",
    boxShadow: `var(--popper-arrow-shadow, var(--popper-arrow-default-shadow))`
  });
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/popper/dist/chunk-6DG2E3QO.mjs
init_shim();
var logicals3 = {
  "start-start": { ltr: "left-start", rtl: "right-start" },
  "start-end": { ltr: "left-end", rtl: "right-end" },
  "end-start": { ltr: "right-start", rtl: "left-start" },
  "end-end": { ltr: "right-end", rtl: "left-end" },
  start: { ltr: "left", rtl: "right" },
  end: { ltr: "right", rtl: "left" }
};
var opposites3 = {
  "auto-start": "auto-end",
  "auto-end": "auto-start",
  "top-start": "top-end",
  "top-end": "top-start",
  "bottom-start": "bottom-end",
  "bottom-end": "bottom-start"
};
function getPopperPlacement3(placement, dir = "ltr") {
  var _a40, _b8;
  const value = ((_a40 = logicals3[placement]) == null ? void 0 : _a40[dir]) || placement;
  if (dir === "ltr")
    return value;
  return (_b8 = opposites3[placement]) != null ? _b8 : value;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/popper/dist/chunk-HJWVQQGO.mjs
init_lib();
var import_react339 = __toESM(require_react(), 1);
function usePopper3(props = {}) {
  const {
    enabled = true,
    modifiers,
    placement: placementProp = "bottom",
    strategy = "absolute",
    arrowPadding = 8,
    eventListeners = true,
    offset,
    gutter = 8,
    flip = true,
    boundary = "clippingParents",
    preventOverflow = true,
    matchWidth: matchWidth22,
    direction: direction3 = "ltr"
  } = props;
  const reference = (0, import_react339.useRef)(null);
  const popper = (0, import_react339.useRef)(null);
  const instance = (0, import_react339.useRef)(null);
  const placement = getPopperPlacement3(placementProp, direction3);
  const cleanup = (0, import_react339.useRef)(() => {
  });
  const setupPopper = (0, import_react339.useCallback)(() => {
    var _a40;
    if (!enabled || !reference.current || !popper.current)
      return;
    (_a40 = cleanup.current) == null ? void 0 : _a40.call(cleanup);
    instance.current = createPopper(reference.current, popper.current, {
      placement,
      modifiers: [
        innerArrow3,
        positionArrow3,
        transformOrigin3,
        {
          ...matchWidth3,
          enabled: !!matchWidth22
        },
        {
          name: "eventListeners",
          ...getEventListenerOptions3(eventListeners)
        },
        {
          name: "arrow",
          options: { padding: arrowPadding }
        },
        {
          name: "offset",
          options: {
            offset: offset != null ? offset : [0, gutter]
          }
        },
        {
          name: "flip",
          enabled: !!flip,
          options: { padding: 8 }
        },
        {
          name: "preventOverflow",
          enabled: !!preventOverflow,
          options: { boundary }
        },
        ...modifiers != null ? modifiers : []
      ],
      strategy
    });
    instance.current.forceUpdate();
    cleanup.current = instance.current.destroy;
  }, [
    placement,
    enabled,
    modifiers,
    matchWidth22,
    eventListeners,
    arrowPadding,
    offset,
    gutter,
    flip,
    preventOverflow,
    boundary,
    strategy
  ]);
  (0, import_react339.useEffect)(() => {
    return () => {
      var _a40;
      if (!reference.current && !popper.current) {
        (_a40 = instance.current) == null ? void 0 : _a40.destroy();
        instance.current = null;
      }
    };
  }, []);
  const referenceRef = (0, import_react339.useCallback)(
    (node2) => {
      reference.current = node2;
      setupPopper();
    },
    [setupPopper]
  );
  const getReferenceProps = (0, import_react339.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs4(referenceRef, ref)
    }),
    [referenceRef]
  );
  const popperRef = (0, import_react339.useCallback)(
    (node2) => {
      popper.current = node2;
      setupPopper();
    },
    [setupPopper]
  );
  const getPopperProps = (0, import_react339.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref: mergeRefs4(popperRef, ref),
      style: {
        ...props2.style,
        position: strategy,
        minWidth: matchWidth22 ? void 0 : "max-content",
        inset: "0 auto auto 0"
      }
    }),
    [strategy, popperRef, matchWidth22]
  );
  const getArrowProps = (0, import_react339.useCallback)((props2 = {}, ref = null) => {
    const { size: size3, shadowColor, bg, style, ...rest } = props2;
    return {
      ...rest,
      ref,
      "data-popper-arrow": "",
      style: getArrowStyle6(props2)
    };
  }, []);
  const getArrowInnerProps = (0, import_react339.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref,
      "data-popper-arrow-inner": ""
    }),
    []
  );
  return {
    update() {
      var _a40;
      (_a40 = instance.current) == null ? void 0 : _a40.update();
    },
    forceUpdate() {
      var _a40;
      (_a40 = instance.current) == null ? void 0 : _a40.forceUpdate();
    },
    transformOrigin: cssVars3.transformOrigin.varRef,
    referenceRef,
    popperRef,
    getPopperProps,
    getArrowProps,
    getArrowInnerProps,
    getReferenceProps
  };
}
function getArrowStyle6(props) {
  const { size: size3, shadowColor, bg, style } = props;
  const computedStyle = { ...style, position: "absolute" };
  if (size3) {
    computedStyle["--popper-arrow-size"] = size3;
  }
  if (shadowColor) {
    computedStyle["--popper-arrow-shadow-color"] = shadowColor;
  }
  if (bg) {
    computedStyle["--popper-arrow-bg"] = bg;
  }
  return computedStyle;
}

// node_modules/@chakra-ui/progress/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/progress/dist/chunk-V6BT6UQX.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react341 = __toESM(require_react(), 1);
function useTheme18() {
  const theme3 = (0, import_react341.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra18() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme18();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM18() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser20 = canUseDOM18();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash23 = __toESM(require_lodash(), 1);
function omit22(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get19(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize19 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet19 = memoize19(get19);
function objectFilter18(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined18 = (object2) => objectFilter18(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction21(value) {
  return typeof value === "function";
}
var __DEV__18 = import_process.default.env.NODE_ENV !== "production";
var __TEST__18 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn21(valueOrFn, ...args) {
  return isFunction21(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once18(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn19 = once18((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__18) {
    console.warn(message);
  }
});
var error18 = once18((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__18) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger18 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger18 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep18 = 1 / 60 * 1e3;
var getCurrentTime18 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame18 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime18()), defaultTimestep18);

// node_modules/@chakra-ui/progress/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep19(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/progress/node_modules/framesync/dist/es/index.mjs
var maxElapsed19 = 40;
var useDefaultElapsed19 = true;
var runNextFrame19 = false;
var isProcessing18 = false;
var frame19 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder19 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps19 = stepsOrder19.reduce((acc, key) => {
  acc[key] = createRenderStep19(() => runNextFrame19 = true);
  return acc;
}, {});
var sync19 = stepsOrder19.reduce((acc, key) => {
  const step = steps19[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame19)
      startLoop19();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync19 = stepsOrder19.reduce((acc, key) => {
  acc[key] = steps19[key].cancel;
  return acc;
}, {});
var flushSync18 = stepsOrder19.reduce((acc, key) => {
  acc[key] = () => steps19[key].process(frame19);
  return acc;
}, {});
var processStep19 = (stepId) => steps19[stepId].process(frame19);
var processFrame19 = (timestamp) => {
  runNextFrame19 = false;
  frame19.delta = useDefaultElapsed19 ? defaultTimestep18 : Math.max(Math.min(timestamp - frame19.timestamp, maxElapsed19), 1);
  frame19.timestamp = timestamp;
  isProcessing18 = true;
  stepsOrder19.forEach(processStep19);
  isProcessing18 = false;
  if (runNextFrame19) {
    useDefaultElapsed19 = false;
    onNextFrame18(processFrame19);
  }
};
var startLoop19 = () => {
  runNextFrame19 = true;
  useDefaultElapsed19 = true;
  if (!isProcessing18)
    onNextFrame18(processFrame19);
};

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints21 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList19 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector19 = focusableElList19.join();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react342 = __toESM(require_react(), 1);
var import_react_fast_compare18 = __toESM(require_react_fast_compare18(), 1);
function useStyleConfigImpl16(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra18();
  const themeStyleConfig = themeKey ? memoizedGet19(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash23.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined18(omit22(rest, ["children"]))
  );
  const stylesRef = (0, import_react342.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare18.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useMultiStyleConfig18(themeKey, props = {}) {
  return useStyleConfigImpl16(themeKey, props);
}

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames18 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps18 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp18(prop) {
  return validHTMLProps18.has(prop) || !allPropNames18.has(prop);
}

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react343 = __toESM(require_react(), 1);
var _a33;
var emotion_styled18 = (_a33 = emotion_styled_browser_esm_default.default) != null ? _a33 : emotion_styled_browser_esm_default;
var toCSSObject18 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter18(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn21(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined18(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled18(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp18;
  }
  const styleObject = toCSSObject18({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled18(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react343.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react343.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory18() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled18, {
    apply(target, thisArg, argArray) {
      return styled18(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled18(element));
      }
      return cache.get(element);
    }
  });
}
var chakra18 = factory18();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react344 = __toESM(require_react(), 1);
function forwardRef34(component) {
  return (0, import_react344.forwardRef)(component);
}

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react345 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react346 = __toESM(require_react(), 1);
function createContext30(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react346.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react346.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react348 = __toESM(require_react(), 1);
var import_jsx_runtime163 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider18, useStyles18] = createContext30({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/progress/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/progress/dist/chunk-V6BT6UQX.mjs
var CircularProgressLabel = chakra18("div", {
  baseStyle: {
    fontSize: "0.24em",
    top: "50%",
    left: "50%",
    width: "100%",
    textAlign: "center",
    position: "absolute",
    transform: "translate(-50%, -50%)"
  }
});
CircularProgressLabel.displayName = "CircularProgressLabel";

// node_modules/@chakra-ui/progress/dist/chunk-FQ7BGFQK.mjs
init_shim();

// node_modules/@chakra-ui/progress/dist/chunk-7E427UAG.mjs
init_shim();
var import_jsx_runtime164 = __toESM(require_jsx_runtime(), 1);
var Circle3 = (props) => (0, import_jsx_runtime164.jsx)(chakra18.circle, { cx: 50, cy: 50, r: 42, fill: "transparent", ...props });
Circle3.displayName = "Circle";

// node_modules/@chakra-ui/progress/dist/chunk-TMEF3X4C.mjs
init_shim();

// node_modules/@chakra-ui/progress/dist/chunk-33PGJX5B.mjs
init_shim();
function valueToPercent20(value, min, max) {
  return (value - min) * 100 / (max - min);
}
var spin2 = keyframes({
  "0%": {
    strokeDasharray: "1, 400",
    strokeDashoffset: "0"
  },
  "50%": {
    strokeDasharray: "400, 400",
    strokeDashoffset: "-100"
  },
  "100%": {
    strokeDasharray: "400, 400",
    strokeDashoffset: "-260"
  }
});
var rotate = keyframes({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
var progress2 = keyframes({
  "0%": { left: "-40%" },
  "100%": { left: "100%" }
});
var stripe = keyframes({
  from: { backgroundPosition: "1rem 0" },
  to: { backgroundPosition: "0 0" }
});
function getProgressProps(options) {
  const {
    value = 0,
    min,
    max,
    valueText,
    getValueText,
    isIndeterminate,
    role = "progressbar"
  } = options;
  const percent2 = valueToPercent20(value, min, max);
  const getAriaValueText = () => {
    if (value == null)
      return void 0;
    return typeof getValueText === "function" ? getValueText(value, percent2) : valueText;
  };
  return {
    bind: {
      "data-indeterminate": isIndeterminate ? "" : void 0,
      "aria-valuemax": max,
      "aria-valuemin": min,
      "aria-valuenow": isIndeterminate ? void 0 : value,
      "aria-valuetext": getAriaValueText(),
      role
    },
    percent: percent2,
    value
  };
}

// node_modules/@chakra-ui/progress/dist/chunk-TMEF3X4C.mjs
var import_jsx_runtime165 = __toESM(require_jsx_runtime(), 1);
var Shape = (props) => {
  const { size: size3, isIndeterminate, ...rest } = props;
  return (0, import_jsx_runtime165.jsx)(
    chakra18.svg,
    {
      viewBox: "0 0 100 100",
      __css: {
        width: size3,
        height: size3,
        animation: isIndeterminate ? `${rotate} 2s linear infinite` : void 0
      },
      ...rest
    }
  );
};
Shape.displayName = "Shape";

// node_modules/@chakra-ui/progress/dist/chunk-FQ7BGFQK.mjs
var import_jsx_runtime166 = __toESM(require_jsx_runtime(), 1);
var CircularProgress = forwardRef34(
  (props, ref) => {
    var _a40;
    const {
      size: size3 = "48px",
      max = 100,
      min = 0,
      valueText,
      getValueText,
      value,
      capIsRound,
      children,
      thickness = "10px",
      color: color3 = "#0078d4",
      trackColor = "#edebe9",
      isIndeterminate,
      ...rest
    } = props;
    const progress3 = getProgressProps({
      min,
      max,
      value,
      valueText,
      getValueText,
      isIndeterminate
    });
    const determinant = isIndeterminate ? void 0 : ((_a40 = progress3.percent) != null ? _a40 : 0) * 2.64;
    const strokeDasharray = determinant == null ? void 0 : `${determinant} ${264 - determinant}`;
    const indicatorProps = isIndeterminate ? {
      css: { animation: `${spin2} 1.5s linear infinite` }
    } : {
      strokeDashoffset: 66,
      strokeDasharray,
      transitionProperty: "stroke-dasharray, stroke",
      transitionDuration: "0.6s",
      transitionTimingFunction: "ease"
    };
    const rootStyles3 = {
      display: "inline-block",
      position: "relative",
      verticalAlign: "middle",
      fontSize: size3
    };
    return (0, import_jsx_runtime166.jsxs)(
      chakra18.div,
      {
        ref,
        className: "chakra-progress",
        ...progress3.bind,
        ...rest,
        __css: rootStyles3,
        children: [
          (0, import_jsx_runtime166.jsxs)(Shape, { size: size3, isIndeterminate, children: [
            (0, import_jsx_runtime166.jsx)(
              Circle3,
              {
                stroke: trackColor,
                strokeWidth: thickness,
                className: "chakra-progress__track"
              }
            ),
            (0, import_jsx_runtime166.jsx)(
              Circle3,
              {
                stroke: color3,
                strokeWidth: thickness,
                className: "chakra-progress__indicator",
                strokeLinecap: capIsRound ? "round" : void 0,
                opacity: progress3.value === 0 && !isIndeterminate ? 0 : void 0,
                ...indicatorProps
              }
            )
          ] }),
          children
        ]
      }
    );
  }
);
CircularProgress.displayName = "CircularProgress";

// node_modules/@chakra-ui/progress/dist/chunk-BC4GAYVP.mjs
init_shim();

// node_modules/@chakra-ui/progress/dist/chunk-W6SSP5F2.mjs
init_shim();
var import_jsx_runtime167 = __toESM(require_jsx_runtime(), 1);
var [ProgressStylesProvider, useProgressStyles] = createContext({
  name: `ProgressStylesContext`,
  errorMessage: `useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Progress />" `
});
var ProgressFilledTrack = forwardRef34(
  (props, ref) => {
    const { min, max, value, isIndeterminate, role, ...rest } = props;
    const progress22 = getProgressProps({
      value,
      min,
      max,
      isIndeterminate,
      role
    });
    const styles3 = useProgressStyles();
    const trackStyles = {
      height: "100%",
      ...styles3.filledTrack
    };
    return (0, import_jsx_runtime167.jsx)(
      chakra18.div,
      {
        ref,
        style: { width: `${progress22.percent}%`, ...rest.style },
        ...progress22.bind,
        ...rest,
        __css: trackStyles
      }
    );
  }
);
var Progress = forwardRef34((props, ref) => {
  var _a40;
  const {
    value,
    min = 0,
    max = 100,
    hasStripe,
    isAnimated,
    children,
    borderRadius: propBorderRadius,
    isIndeterminate,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-valuetext": ariaValueText,
    title,
    role,
    ...rest
  } = omitThemingProps(props);
  const styles3 = useMultiStyleConfig18("Progress", props);
  const borderRadius = propBorderRadius != null ? propBorderRadius : (_a40 = styles3.track) == null ? void 0 : _a40.borderRadius;
  const stripeAnimation = { animation: `${stripe} 1s linear infinite` };
  const shouldAddStripe = !isIndeterminate && hasStripe;
  const shouldAnimateStripe = shouldAddStripe && isAnimated;
  const css4 = {
    ...shouldAnimateStripe && stripeAnimation,
    ...isIndeterminate && {
      position: "absolute",
      willChange: "left",
      minWidth: "50%",
      animation: `${progress2} 1s ease infinite normal none running`
    }
  };
  const trackStyles = {
    overflow: "hidden",
    position: "relative",
    ...styles3.track
  };
  return (0, import_jsx_runtime167.jsx)(
    chakra18.div,
    {
      ref,
      borderRadius,
      __css: trackStyles,
      ...rest,
      children: (0, import_jsx_runtime167.jsxs)(ProgressStylesProvider, { value: styles3, children: [
        (0, import_jsx_runtime167.jsx)(
          ProgressFilledTrack,
          {
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabelledBy,
            "aria-valuetext": ariaValueText,
            min,
            max,
            value,
            isIndeterminate,
            css: css4,
            borderRadius,
            title,
            role
          }
        ),
        children
      ] })
    }
  );
});
Progress.displayName = "Progress";

// node_modules/@chakra-ui/progress/dist/chunk-BC4GAYVP.mjs
var import_jsx_runtime168 = __toESM(require_jsx_runtime(), 1);
var ProgressLabel = (props) => {
  const styles3 = useProgressStyles();
  const labelStyles = {
    top: "50%",
    left: "50%",
    width: "100%",
    textAlign: "center",
    position: "absolute",
    transform: "translate(-50%, -50%)",
    ...styles3.label
  };
  return (0, import_jsx_runtime168.jsx)(chakra18.div, { ...props, __css: labelStyles });
};
ProgressLabel.displayName = "ProgressLabel";

// node_modules/@chakra-ui/radio/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/radio/dist/chunk-MEU4ZZ42.mjs
init_shim();

// node_modules/@chakra-ui/radio/dist/chunk-5XCGGO7V.mjs
init_shim();

// node_modules/@chakra-ui/radio/dist/chunk-QUJ23J4G.mjs
init_shim();

// node_modules/@chakra-ui/radio/dist/chunk-ROBJ47HJ.mjs
init_shim();
var import_react350 = __toESM(require_react(), 1);
function isInputEvent20(value) {
  return value && isObject(value) && isObject(value.target);
}
function useRadioGroup(props = {}) {
  const {
    onChange: onChangeProp,
    value: valueProp,
    defaultValue,
    name: nameProp,
    isDisabled: isDisabled26,
    isFocusable: isFocusable26,
    isNative,
    ...htmlProps
  } = props;
  const [valueState, setValue] = (0, import_react350.useState)(defaultValue || "");
  const isControlled = typeof valueProp !== "undefined";
  const value = isControlled ? valueProp : valueState;
  const ref = (0, import_react350.useRef)(null);
  const focus25 = (0, import_react350.useCallback)(() => {
    const rootNode = ref.current;
    if (!rootNode)
      return;
    let query = `input:not(:disabled):checked`;
    const firstEnabledAndCheckedInput = rootNode.querySelector(
      query
    );
    if (firstEnabledAndCheckedInput) {
      firstEnabledAndCheckedInput.focus();
      return;
    }
    query = `input:not(:disabled)`;
    const firstEnabledInput = rootNode.querySelector(query);
    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();
  }, []);
  const uuid = (0, import_react350.useId)();
  const fallbackName = `radio-${uuid}`;
  const name = nameProp || fallbackName;
  const onChange = (0, import_react350.useCallback)(
    (eventOrValue) => {
      const nextValue = isInputEvent20(eventOrValue) ? eventOrValue.target.value : eventOrValue;
      if (!isControlled) {
        setValue(nextValue);
      }
      onChangeProp == null ? void 0 : onChangeProp(String(nextValue));
    },
    [onChangeProp, isControlled]
  );
  const getRootProps = (0, import_react350.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: mergeRefs4(forwardedRef, ref),
      role: "radiogroup"
    }),
    []
  );
  const getRadioProps = (0, import_react350.useCallback)(
    (props2 = {}, ref2 = null) => {
      const checkedKey = isNative ? "checked" : "isChecked";
      return {
        ...props2,
        ref: ref2,
        name,
        [checkedKey]: value != null ? props2.value === value : void 0,
        onChange(event) {
          onChange(event);
        },
        "data-radiogroup": true
      };
    },
    [isNative, name, onChange, value]
  );
  return {
    getRootProps,
    getRadioProps,
    name,
    ref,
    focus: focus25,
    setValue,
    value,
    onChange,
    isDisabled: isDisabled26,
    isFocusable: isFocusable26,
    htmlProps
  };
}

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react352 = __toESM(require_react(), 1);
function useTheme19() {
  const theme3 = (0, import_react352.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra19() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme19();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM19() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser21 = canUseDOM19();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash24 = __toESM(require_lodash(), 1);
function omit23(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get20(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize20 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet20 = memoize20(get20);
function objectFilter19(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined19 = (object2) => objectFilter19(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction22(value) {
  return typeof value === "function";
}
var __DEV__19 = import_process.default.env.NODE_ENV !== "production";
var __TEST__19 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn22(valueOrFn, ...args) {
  return isFunction22(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once19(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn20 = once19((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__19) {
    console.warn(message);
  }
});
var error19 = once19((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__19) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger19 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger19 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep19 = 1 / 60 * 1e3;
var getCurrentTime19 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame19 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime19()), defaultTimestep19);

// node_modules/@chakra-ui/radio/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep20(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/radio/node_modules/framesync/dist/es/index.mjs
var maxElapsed20 = 40;
var useDefaultElapsed20 = true;
var runNextFrame20 = false;
var isProcessing19 = false;
var frame20 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder20 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps20 = stepsOrder20.reduce((acc, key) => {
  acc[key] = createRenderStep20(() => runNextFrame20 = true);
  return acc;
}, {});
var sync20 = stepsOrder20.reduce((acc, key) => {
  const step = steps20[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame20)
      startLoop20();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync20 = stepsOrder20.reduce((acc, key) => {
  acc[key] = steps20[key].cancel;
  return acc;
}, {});
var flushSync19 = stepsOrder20.reduce((acc, key) => {
  acc[key] = () => steps20[key].process(frame20);
  return acc;
}, {});
var processStep20 = (stepId) => steps20[stepId].process(frame20);
var processFrame20 = (timestamp) => {
  runNextFrame20 = false;
  frame20.delta = useDefaultElapsed20 ? defaultTimestep19 : Math.max(Math.min(timestamp - frame20.timestamp, maxElapsed20), 1);
  frame20.timestamp = timestamp;
  isProcessing19 = true;
  stepsOrder20.forEach(processStep20);
  isProcessing19 = false;
  if (runNextFrame20) {
    useDefaultElapsed20 = false;
    onNextFrame19(processFrame20);
  }
};
var startLoop20 = () => {
  runNextFrame20 = true;
  useDefaultElapsed20 = true;
  if (!isProcessing19)
    onNextFrame19(processFrame20);
};

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints22 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList20 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector20 = focusableElList20.join();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react353 = __toESM(require_react(), 1);
var import_react_fast_compare19 = __toESM(require_react_fast_compare19(), 1);
function useStyleConfigImpl17(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra19();
  const themeStyleConfig = themeKey ? memoizedGet20(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash24.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined19(omit23(rest, ["children"]))
  );
  const stylesRef = (0, import_react353.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare19.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig19(themeKey, props = {}) {
  return useStyleConfigImpl17(themeKey, props);
}
function useMultiStyleConfig19(themeKey, props = {}) {
  return useStyleConfigImpl17(themeKey, props);
}

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames19 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps19 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp19(prop) {
  return validHTMLProps19.has(prop) || !allPropNames19.has(prop);
}

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react354 = __toESM(require_react(), 1);
var _a34;
var emotion_styled19 = (_a34 = emotion_styled_browser_esm_default.default) != null ? _a34 : emotion_styled_browser_esm_default;
var toCSSObject19 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter19(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn22(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined19(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled19(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp19;
  }
  const styleObject = toCSSObject19({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled19(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react354.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react354.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory19() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled19, {
    apply(target, thisArg, argArray) {
      return styled19(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled19(element));
      }
      return cache.get(element);
    }
  });
}
var chakra19 = factory19();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react355 = __toESM(require_react(), 1);
function forwardRef35(component) {
  return (0, import_react355.forwardRef)(component);
}

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react356 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react357 = __toESM(require_react(), 1);
function createContext31(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react357.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react357.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react359 = __toESM(require_react(), 1);
var import_jsx_runtime169 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider19, useStyles19] = createContext31({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/radio/dist/chunk-QUJ23J4G.mjs
var import_react361 = __toESM(require_react(), 1);
var import_jsx_runtime170 = __toESM(require_jsx_runtime(), 1);
var [RadioGroupProvider, useRadioGroupContext] = createContext({
  name: "RadioGroupContext",
  strict: false
});
var RadioGroup = forwardRef35((props, ref) => {
  const {
    colorScheme,
    size: size3,
    variant,
    children,
    className,
    isDisabled: isDisabled26,
    isFocusable: isFocusable26,
    ...rest
  } = props;
  const { value, onChange, getRootProps, name, htmlProps } = useRadioGroup(rest);
  const group = (0, import_react361.useMemo)(
    () => ({
      name,
      size: size3,
      onChange,
      colorScheme,
      value,
      variant,
      isDisabled: isDisabled26,
      isFocusable: isFocusable26
    }),
    [
      name,
      size3,
      onChange,
      colorScheme,
      value,
      variant,
      isDisabled26,
      isFocusable26
    ]
  );
  return (0, import_jsx_runtime170.jsx)(RadioGroupProvider, { value: group, children: (0, import_jsx_runtime170.jsx)(
    chakra19.div,
    {
      ...getRootProps(htmlProps, ref),
      className: cx("chakra-radio-group", className),
      children
    }
  ) });
});
RadioGroup.displayName = "RadioGroup";

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/form-control/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
init_shim();

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/form-control/dist/chunk-6ZNYZUDD.mjs
init_shim();
var import_react362 = __toESM(require_react(), 1);
var import_jsx_runtime171 = __toESM(require_jsx_runtime(), 1);
var [FormControlStylesProvider4, useFormControlStyles4] = createContext({
  name: `FormControlStylesContext`,
  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
});
var [FormControlProvider4, useFormControlContext4] = createContext({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider4(props) {
  const {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled: isDisabled26,
    isReadOnly,
    ...htmlProps
  } = props;
  const uuid = (0, import_react362.useId)();
  const id4 = idProp || `field-${uuid}`;
  const labelId = `${id4}-label`;
  const feedbackId = `${id4}-feedback`;
  const helpTextId = `${id4}-helptext`;
  const [hasFeedbackText, setHasFeedbackText] = (0, import_react362.useState)(false);
  const [hasHelpText, setHasHelpText] = (0, import_react362.useState)(false);
  const [isFocused, setFocus2] = (0, import_react362.useState)(false);
  const getHelpTextProps = (0, import_react362.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: helpTextId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasHelpText(true);
      })
    }),
    [helpTextId]
  );
  const getLabelProps = (0, import_react362.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled26),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: props2.id !== void 0 ? props2.id : labelId,
      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id4
    }),
    [id4, isDisabled26, isFocused, isInvalid, isReadOnly, labelId]
  );
  const getErrorMessageProps = (0, import_react362.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: feedbackId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    }),
    [feedbackId]
  );
  const getRootProps = (0, import_react362.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ...htmlProps,
      ref: forwardedRef,
      role: "group"
    }),
    [htmlProps]
  );
  const getRequiredIndicatorProps = (0, import_react362.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    }),
    []
  );
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled26,
    isFocused: !!isFocused,
    onFocus: () => setFocus2(true),
    onBlur: () => setFocus2(false),
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id: id4,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl5 = forwardRef35(
  function FormControl24(props, ref) {
    const styles3 = useMultiStyleConfig19("Form", props);
    const ownProps = omitThemingProps(props);
    const {
      getRootProps,
      htmlProps: _,
      ...context
    } = useFormControlProvider4(ownProps);
    const className = cx("chakra-form-control", props.className);
    return (0, import_jsx_runtime171.jsx)(FormControlProvider4, { value: context, children: (0, import_jsx_runtime171.jsx)(FormControlStylesProvider4, { value: styles3, children: (0, import_jsx_runtime171.jsx)(
      chakra19.div,
      {
        ...getRootProps({}, ref),
        className,
        __css: styles3["container"]
      }
    ) }) });
  }
);
FormControl5.displayName = "FormControl";
var FormHelperText5 = forwardRef35(
  function FormHelperText24(props, ref) {
    const field = useFormControlContext4();
    const styles3 = useFormControlStyles4();
    const className = cx("chakra-form__helper-text", props.className);
    return (0, import_jsx_runtime171.jsx)(
      chakra19.div,
      {
        ...field == null ? void 0 : field.getHelpTextProps(props, ref),
        __css: styles3.helperText,
        className
      }
    );
  }
);
FormHelperText5.displayName = "FormHelperText";

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
var import_jsx_runtime172 = __toESM(require_jsx_runtime(), 1);
var [FormErrorStylesProvider4, useFormErrorStyles4] = createContext({
  name: `FormErrorStylesContext`,
  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormError />" `
});
var FormErrorMessage4 = forwardRef35(
  (props, ref) => {
    const styles3 = useMultiStyleConfig19("FormError", props);
    const ownProps = omitThemingProps(props);
    const field = useFormControlContext4();
    if (!(field == null ? void 0 : field.isInvalid))
      return null;
    return (0, import_jsx_runtime172.jsx)(FormErrorStylesProvider4, { value: styles3, children: (0, import_jsx_runtime172.jsx)(
      chakra19.div,
      {
        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),
        className: cx("chakra-form__error-message", props.className),
        __css: {
          display: "flex",
          alignItems: "center",
          ...styles3.text
        }
      }
    ) });
  }
);
FormErrorMessage4.displayName = "FormErrorMessage";
var FormErrorIcon4 = forwardRef35((props, ref) => {
  const styles3 = useFormErrorStyles4();
  const field = useFormControlContext4();
  if (!(field == null ? void 0 : field.isInvalid))
    return null;
  const _className = cx("chakra-form__error-icon", props.className);
  return (0, import_jsx_runtime172.jsx)(
    Icon,
    {
      ref,
      "aria-hidden": true,
      ...props,
      __css: styles3.icon,
      className: _className,
      children: (0, import_jsx_runtime172.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        }
      )
    }
  );
});
FormErrorIcon4.displayName = "FormErrorIcon";

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs
init_shim();
var import_jsx_runtime173 = __toESM(require_jsx_runtime(), 1);
var FormLabel5 = forwardRef35(function FormLabel24(passedProps, ref) {
  var _a40;
  const styles3 = useStyleConfig19("FormLabel", passedProps);
  const props = omitThemingProps(passedProps);
  const {
    className,
    children,
    requiredIndicator = (0, import_jsx_runtime173.jsx)(RequiredIndicator5, {}),
    optionalIndicator = null,
    ...rest
  } = props;
  const field = useFormControlContext4();
  const ownProps = (_a40 = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a40 : { ref, ...rest };
  return (0, import_jsx_runtime173.jsxs)(
    chakra19.label,
    {
      ...ownProps,
      className: cx("chakra-form__label", props.className),
      __css: {
        display: "block",
        textAlign: "start",
        ...styles3
      },
      children: [
        children,
        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator
      ]
    }
  );
});
FormLabel5.displayName = "FormLabel";
var RequiredIndicator5 = forwardRef35(
  function RequiredIndicator24(props, ref) {
    const field = useFormControlContext4();
    const styles3 = useFormControlStyles4();
    if (!(field == null ? void 0 : field.isRequired))
      return null;
    const className = cx("chakra-form__required-indicator", props.className);
    return (0, import_jsx_runtime173.jsx)(
      chakra19.span,
      {
        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),
        __css: styles3.requiredIndicator,
        className
      }
    );
  }
);
RequiredIndicator5.displayName = "RequiredIndicator";

// node_modules/@chakra-ui/radio/node_modules/@chakra-ui/form-control/dist/chunk-IJBC3YLI.mjs
init_shim();

// node_modules/@chakra-ui/radio/dist/chunk-5XCGGO7V.mjs
var import_react363 = __toESM(require_react(), 1);
var visuallyHiddenStyle2 = {
  border: "0",
  clip: "rect(0, 0, 0, 0)",
  height: "1px",
  width: "1px",
  margin: "-1px",
  padding: "0",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};
function useRadio(props = {}) {
  const {
    defaultChecked,
    isChecked: isCheckedProp,
    isFocusable: isFocusable26,
    isDisabled: isDisabledProp,
    isReadOnly: isReadOnlyProp,
    isRequired: isRequiredProp,
    onChange,
    isInvalid: isInvalidProp,
    name,
    value,
    id: idProp,
    "data-radiogroup": dataRadioGroup,
    "aria-describedby": ariaDescribedBy,
    ...htmlProps
  } = props;
  const uuid = `radio-${(0, import_react363.useId)()}`;
  const formControl = useFormControlContext4();
  const group = useRadioGroupContext();
  const isWithinRadioGroup = !!group || !!dataRadioGroup;
  const isWithinFormControl = !!formControl;
  let id4 = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;
  id4 = idProp != null ? idProp : id4;
  const isDisabled26 = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;
  const isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;
  const isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;
  const isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;
  const [isFocusVisible2, setIsFocusVisible] = (0, import_react363.useState)(false);
  const [isFocused, setFocused] = (0, import_react363.useState)(false);
  const [isHovered, setHovering] = (0, import_react363.useState)(false);
  const [isActive, setActive] = (0, import_react363.useState)(false);
  const [isCheckedState, setChecked] = (0, import_react363.useState)(Boolean(defaultChecked));
  const isControlled = typeof isCheckedProp !== "undefined";
  const isChecked = isControlled ? isCheckedProp : isCheckedState;
  (0, import_react363.useEffect)(() => {
    return trackFocusVisible(setIsFocusVisible);
  }, []);
  const handleChange = (0, import_react363.useCallback)(
    (event) => {
      if (isReadOnly || isDisabled26) {
        event.preventDefault();
        return;
      }
      if (!isControlled) {
        setChecked(event.target.checked);
      }
      onChange == null ? void 0 : onChange(event);
    },
    [isControlled, isDisabled26, isReadOnly, onChange]
  );
  const onKeyDown = (0, import_react363.useCallback)(
    (event) => {
      if (event.key === " ") {
        setActive(true);
      }
    },
    [setActive]
  );
  const onKeyUp = (0, import_react363.useCallback)(
    (event) => {
      if (event.key === " ") {
        setActive(false);
      }
    },
    [setActive]
  );
  const getRadioProps = (0, import_react363.useCallback)(
    (props2 = {}, ref = null) => ({
      ...props2,
      ref,
      "data-active": dataAttr(isActive),
      "data-hover": dataAttr(isHovered),
      "data-disabled": dataAttr(isDisabled26),
      "data-invalid": dataAttr(isInvalid),
      "data-checked": dataAttr(isChecked),
      "data-focus": dataAttr(isFocused),
      "data-focus-visible": dataAttr(isFocused && isFocusVisible2),
      "data-readonly": dataAttr(isReadOnly),
      "aria-hidden": true,
      onMouseDown: callAllHandlers(props2.onMouseDown, () => setActive(true)),
      onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),
      onMouseEnter: callAllHandlers(
        props2.onMouseEnter,
        () => setHovering(true)
      ),
      onMouseLeave: callAllHandlers(
        props2.onMouseLeave,
        () => setHovering(false)
      )
    }),
    [
      isActive,
      isHovered,
      isDisabled26,
      isInvalid,
      isChecked,
      isFocused,
      isReadOnly,
      isFocusVisible2
    ]
  );
  const { onFocus: onFocus3, onBlur: onBlur3 } = formControl != null ? formControl : {};
  const getInputProps = (0, import_react363.useCallback)(
    (props2 = {}, ref = null) => {
      const trulyDisabled = isDisabled26 && !isFocusable26;
      return {
        ...props2,
        id: id4,
        ref,
        type: "radio",
        name,
        value,
        onChange: callAllHandlers(props2.onChange, handleChange),
        onBlur: callAllHandlers(
          onBlur3,
          props2.onBlur,
          () => setFocused(false)
        ),
        onFocus: callAllHandlers(
          onFocus3,
          props2.onFocus,
          () => setFocused(true)
        ),
        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
        onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
        checked: isChecked,
        disabled: trulyDisabled,
        readOnly: isReadOnly,
        required: isRequired,
        "aria-invalid": ariaAttr(isInvalid),
        "aria-disabled": ariaAttr(trulyDisabled),
        "aria-required": ariaAttr(isRequired),
        "data-readonly": dataAttr(isReadOnly),
        "aria-describedby": ariaDescribedBy,
        style: visuallyHiddenStyle2
      };
    },
    [
      isDisabled26,
      isFocusable26,
      id4,
      name,
      value,
      handleChange,
      onBlur3,
      onFocus3,
      onKeyDown,
      onKeyUp,
      isChecked,
      isReadOnly,
      isRequired,
      isInvalid,
      ariaDescribedBy
    ]
  );
  const getLabelProps = (props2 = {}, ref = null) => ({
    ...props2,
    ref,
    onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent2),
    "data-disabled": dataAttr(isDisabled26),
    "data-checked": dataAttr(isChecked),
    "data-invalid": dataAttr(isInvalid)
  });
  const getRootProps = (props2, ref = null) => ({
    ...props2,
    ref,
    "data-disabled": dataAttr(isDisabled26),
    "data-checked": dataAttr(isChecked),
    "data-invalid": dataAttr(isInvalid)
  });
  const state2 = {
    isInvalid,
    isFocused,
    isChecked,
    isActive,
    isHovered,
    isDisabled: isDisabled26,
    isReadOnly,
    isRequired
  };
  return {
    state: state2,
    getCheckboxProps: getRadioProps,
    getRadioProps,
    getInputProps,
    getLabelProps,
    getRootProps,
    htmlProps
  };
}
function stopEvent2(event) {
  event.preventDefault();
  event.stopPropagation();
}

// node_modules/@chakra-ui/radio/dist/chunk-MEU4ZZ42.mjs
var import_jsx_runtime174 = __toESM(require_jsx_runtime(), 1);
function split20(object2, keys2) {
  const picked = {};
  const omitted2 = {};
  for (const [key, value] of Object.entries(object2)) {
    if (keys2.includes(key))
      picked[key] = value;
    else
      omitted2[key] = value;
  }
  return [picked, omitted2];
}
var Radio = forwardRef35((props, ref) => {
  var _a40;
  const group = useRadioGroupContext();
  const { onChange: onChangeProp, value: valueProp } = props;
  const styles3 = useMultiStyleConfig19("Radio", { ...group, ...props });
  const ownProps = omitThemingProps(props);
  const {
    spacing: spacing3 = "0.5rem",
    children,
    isDisabled: isDisabled26 = group == null ? void 0 : group.isDisabled,
    isFocusable: isFocusable26 = group == null ? void 0 : group.isFocusable,
    inputProps: htmlInputProps,
    ...rest
  } = ownProps;
  let isChecked = props.isChecked;
  if ((group == null ? void 0 : group.value) != null && valueProp != null) {
    isChecked = group.value === valueProp;
  }
  let onChange = onChangeProp;
  if ((group == null ? void 0 : group.onChange) && valueProp != null) {
    onChange = callAll(group.onChange, onChangeProp);
  }
  const name = (_a40 = props == null ? void 0 : props.name) != null ? _a40 : group == null ? void 0 : group.name;
  const {
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    getRootProps,
    htmlProps
  } = useRadio({
    ...rest,
    isChecked,
    isFocusable: isFocusable26,
    isDisabled: isDisabled26,
    onChange,
    name
  });
  const [layoutProps, otherProps] = split20(htmlProps, layoutPropNames);
  const checkboxProps = getCheckboxProps(otherProps);
  const inputProps = getInputProps(htmlInputProps, ref);
  const labelProps = getLabelProps();
  const rootProps = Object.assign({}, layoutProps, getRootProps());
  const rootStyles3 = {
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top",
    cursor: "pointer",
    position: "relative",
    ...styles3.container
  };
  const checkboxStyles = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    ...styles3.control
  };
  const labelStyles = {
    userSelect: "none",
    marginStart: spacing3,
    ...styles3.label
  };
  return (0, import_jsx_runtime174.jsxs)(chakra19.label, { className: "chakra-radio", ...rootProps, __css: rootStyles3, children: [
    (0, import_jsx_runtime174.jsx)("input", { className: "chakra-radio__input", ...inputProps }),
    (0, import_jsx_runtime174.jsx)(
      chakra19.span,
      {
        className: "chakra-radio__control",
        ...checkboxProps,
        __css: checkboxStyles
      }
    ),
    children && (0, import_jsx_runtime174.jsx)(
      chakra19.span,
      {
        className: "chakra-radio__label",
        ...labelProps,
        __css: labelStyles,
        children
      }
    )
  ] });
});
Radio.displayName = "Radio";

// node_modules/@chakra-ui/select/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/select/dist/chunk-GJO77I2I.mjs
init_shim();

// node_modules/@chakra-ui/select/dist/chunk-HQIEHZYI.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react365 = __toESM(require_react(), 1);
function useTheme20() {
  const theme3 = (0, import_react365.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra20() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme20();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM20() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser22 = canUseDOM20();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash25 = __toESM(require_lodash(), 1);
function omit24(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get21(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize21 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet21 = memoize21(get21);
function objectFilter20(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined20 = (object2) => objectFilter20(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction23(value) {
  return typeof value === "function";
}
var __DEV__20 = import_process.default.env.NODE_ENV !== "production";
var __TEST__20 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn23(valueOrFn, ...args) {
  return isFunction23(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once20(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn21 = once20((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__20) {
    console.warn(message);
  }
});
var error20 = once20((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__20) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger20 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger20 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep20 = 1 / 60 * 1e3;
var getCurrentTime20 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame20 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime20()), defaultTimestep20);

// node_modules/@chakra-ui/select/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep21(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/select/node_modules/framesync/dist/es/index.mjs
var maxElapsed21 = 40;
var useDefaultElapsed21 = true;
var runNextFrame21 = false;
var isProcessing20 = false;
var frame21 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder21 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps21 = stepsOrder21.reduce((acc, key) => {
  acc[key] = createRenderStep21(() => runNextFrame21 = true);
  return acc;
}, {});
var sync21 = stepsOrder21.reduce((acc, key) => {
  const step = steps21[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame21)
      startLoop21();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync21 = stepsOrder21.reduce((acc, key) => {
  acc[key] = steps21[key].cancel;
  return acc;
}, {});
var flushSync20 = stepsOrder21.reduce((acc, key) => {
  acc[key] = () => steps21[key].process(frame21);
  return acc;
}, {});
var processStep21 = (stepId) => steps21[stepId].process(frame21);
var processFrame21 = (timestamp) => {
  runNextFrame21 = false;
  frame21.delta = useDefaultElapsed21 ? defaultTimestep20 : Math.max(Math.min(timestamp - frame21.timestamp, maxElapsed21), 1);
  frame21.timestamp = timestamp;
  isProcessing20 = true;
  stepsOrder21.forEach(processStep21);
  isProcessing20 = false;
  if (runNextFrame21) {
    useDefaultElapsed21 = false;
    onNextFrame20(processFrame21);
  }
};
var startLoop21 = () => {
  runNextFrame21 = true;
  useDefaultElapsed21 = true;
  if (!isProcessing20)
    onNextFrame20(processFrame21);
};

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints23 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList21 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector21 = focusableElList21.join();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react366 = __toESM(require_react(), 1);
var import_react_fast_compare20 = __toESM(require_react_fast_compare20(), 1);
function useStyleConfigImpl18(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra20();
  const themeStyleConfig = themeKey ? memoizedGet21(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash25.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined20(omit24(rest, ["children"]))
  );
  const stylesRef = (0, import_react366.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare20.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig20(themeKey, props = {}) {
  return useStyleConfigImpl18(themeKey, props);
}
function useMultiStyleConfig20(themeKey, props = {}) {
  return useStyleConfigImpl18(themeKey, props);
}

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames20 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps20 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp20(prop) {
  return validHTMLProps20.has(prop) || !allPropNames20.has(prop);
}

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react367 = __toESM(require_react(), 1);
var _a35;
var emotion_styled20 = (_a35 = emotion_styled_browser_esm_default.default) != null ? _a35 : emotion_styled_browser_esm_default;
var toCSSObject20 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter20(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn23(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined20(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled20(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp20;
  }
  const styleObject = toCSSObject20({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled20(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react367.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react367.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory20() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled20, {
    apply(target, thisArg, argArray) {
      return styled20(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled20(element));
      }
      return cache.get(element);
    }
  });
}
var chakra20 = factory20();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react368 = __toESM(require_react(), 1);
function forwardRef36(component) {
  return (0, import_react368.forwardRef)(component);
}

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react369 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react370 = __toESM(require_react(), 1);
function createContext32(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react370.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react370.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react372 = __toESM(require_react(), 1);
var import_jsx_runtime175 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider20, useStyles20] = createContext32({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/select/dist/chunk-HQIEHZYI.mjs
var import_jsx_runtime176 = __toESM(require_jsx_runtime(), 1);
var SelectField = forwardRef36(
  function SelectField2(props, ref) {
    const { children, placeholder, className, ...rest } = props;
    return (0, import_jsx_runtime176.jsxs)(
      chakra20.select,
      {
        ...rest,
        ref,
        className: cx("chakra-select", className),
        children: [
          placeholder && (0, import_jsx_runtime176.jsx)("option", { value: "", children: placeholder }),
          children
        ]
      }
    );
  }
);
SelectField.displayName = "SelectField";

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/form-control/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
init_shim();

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/form-control/dist/chunk-6ZNYZUDD.mjs
init_shim();
var import_react374 = __toESM(require_react(), 1);
var import_jsx_runtime177 = __toESM(require_jsx_runtime(), 1);
var [FormControlStylesProvider5, useFormControlStyles5] = createContext({
  name: `FormControlStylesContext`,
  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
});
var [FormControlProvider5, useFormControlContext5] = createContext({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider5(props) {
  const {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled: isDisabled26,
    isReadOnly,
    ...htmlProps
  } = props;
  const uuid = (0, import_react374.useId)();
  const id4 = idProp || `field-${uuid}`;
  const labelId = `${id4}-label`;
  const feedbackId = `${id4}-feedback`;
  const helpTextId = `${id4}-helptext`;
  const [hasFeedbackText, setHasFeedbackText] = (0, import_react374.useState)(false);
  const [hasHelpText, setHasHelpText] = (0, import_react374.useState)(false);
  const [isFocused, setFocus2] = (0, import_react374.useState)(false);
  const getHelpTextProps = (0, import_react374.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: helpTextId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasHelpText(true);
      })
    }),
    [helpTextId]
  );
  const getLabelProps = (0, import_react374.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled26),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: props2.id !== void 0 ? props2.id : labelId,
      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id4
    }),
    [id4, isDisabled26, isFocused, isInvalid, isReadOnly, labelId]
  );
  const getErrorMessageProps = (0, import_react374.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: feedbackId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    }),
    [feedbackId]
  );
  const getRootProps = (0, import_react374.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ...htmlProps,
      ref: forwardedRef,
      role: "group"
    }),
    [htmlProps]
  );
  const getRequiredIndicatorProps = (0, import_react374.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    }),
    []
  );
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled26,
    isFocused: !!isFocused,
    onFocus: () => setFocus2(true),
    onBlur: () => setFocus2(false),
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id: id4,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl6 = forwardRef36(
  function FormControl25(props, ref) {
    const styles3 = useMultiStyleConfig20("Form", props);
    const ownProps = omitThemingProps(props);
    const {
      getRootProps,
      htmlProps: _,
      ...context
    } = useFormControlProvider5(ownProps);
    const className = cx("chakra-form-control", props.className);
    return (0, import_jsx_runtime177.jsx)(FormControlProvider5, { value: context, children: (0, import_jsx_runtime177.jsx)(FormControlStylesProvider5, { value: styles3, children: (0, import_jsx_runtime177.jsx)(
      chakra20.div,
      {
        ...getRootProps({}, ref),
        className,
        __css: styles3["container"]
      }
    ) }) });
  }
);
FormControl6.displayName = "FormControl";
var FormHelperText6 = forwardRef36(
  function FormHelperText25(props, ref) {
    const field = useFormControlContext5();
    const styles3 = useFormControlStyles5();
    const className = cx("chakra-form__helper-text", props.className);
    return (0, import_jsx_runtime177.jsx)(
      chakra20.div,
      {
        ...field == null ? void 0 : field.getHelpTextProps(props, ref),
        __css: styles3.helperText,
        className
      }
    );
  }
);
FormHelperText6.displayName = "FormHelperText";

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
var import_jsx_runtime178 = __toESM(require_jsx_runtime(), 1);
var [FormErrorStylesProvider5, useFormErrorStyles5] = createContext({
  name: `FormErrorStylesContext`,
  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormError />" `
});
var FormErrorMessage5 = forwardRef36(
  (props, ref) => {
    const styles3 = useMultiStyleConfig20("FormError", props);
    const ownProps = omitThemingProps(props);
    const field = useFormControlContext5();
    if (!(field == null ? void 0 : field.isInvalid))
      return null;
    return (0, import_jsx_runtime178.jsx)(FormErrorStylesProvider5, { value: styles3, children: (0, import_jsx_runtime178.jsx)(
      chakra20.div,
      {
        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),
        className: cx("chakra-form__error-message", props.className),
        __css: {
          display: "flex",
          alignItems: "center",
          ...styles3.text
        }
      }
    ) });
  }
);
FormErrorMessage5.displayName = "FormErrorMessage";
var FormErrorIcon5 = forwardRef36((props, ref) => {
  const styles3 = useFormErrorStyles5();
  const field = useFormControlContext5();
  if (!(field == null ? void 0 : field.isInvalid))
    return null;
  const _className = cx("chakra-form__error-icon", props.className);
  return (0, import_jsx_runtime178.jsx)(
    Icon,
    {
      ref,
      "aria-hidden": true,
      ...props,
      __css: styles3.icon,
      className: _className,
      children: (0, import_jsx_runtime178.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        }
      )
    }
  );
});
FormErrorIcon5.displayName = "FormErrorIcon";

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs
init_shim();
var import_jsx_runtime179 = __toESM(require_jsx_runtime(), 1);
var FormLabel6 = forwardRef36(function FormLabel25(passedProps, ref) {
  var _a40;
  const styles3 = useStyleConfig20("FormLabel", passedProps);
  const props = omitThemingProps(passedProps);
  const {
    className,
    children,
    requiredIndicator = (0, import_jsx_runtime179.jsx)(RequiredIndicator6, {}),
    optionalIndicator = null,
    ...rest
  } = props;
  const field = useFormControlContext5();
  const ownProps = (_a40 = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a40 : { ref, ...rest };
  return (0, import_jsx_runtime179.jsxs)(
    chakra20.label,
    {
      ...ownProps,
      className: cx("chakra-form__label", props.className),
      __css: {
        display: "block",
        textAlign: "start",
        ...styles3
      },
      children: [
        children,
        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator
      ]
    }
  );
});
FormLabel6.displayName = "FormLabel";
var RequiredIndicator6 = forwardRef36(
  function RequiredIndicator25(props, ref) {
    const field = useFormControlContext5();
    const styles3 = useFormControlStyles5();
    if (!(field == null ? void 0 : field.isRequired))
      return null;
    const className = cx("chakra-form__required-indicator", props.className);
    return (0, import_jsx_runtime179.jsx)(
      chakra20.span,
      {
        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),
        __css: styles3.requiredIndicator,
        className
      }
    );
  }
);
RequiredIndicator6.displayName = "RequiredIndicator";

// node_modules/@chakra-ui/select/node_modules/@chakra-ui/form-control/dist/chunk-IJBC3YLI.mjs
init_shim();
function useFormControl5(props) {
  const { isDisabled: isDisabled26, isInvalid, isReadOnly, isRequired, ...rest } = useFormControlProps5(props);
  return {
    ...rest,
    disabled: isDisabled26,
    readOnly: isReadOnly,
    required: isRequired,
    "aria-invalid": ariaAttr(isInvalid),
    "aria-required": ariaAttr(isRequired),
    "aria-readonly": ariaAttr(isReadOnly)
  };
}
function useFormControlProps5(props) {
  var _a40, _b8, _c5;
  const field = useFormControlContext5();
  const {
    id: id4,
    disabled,
    readOnly,
    required,
    isRequired,
    isInvalid,
    isReadOnly,
    isDisabled: isDisabled26,
    onFocus: onFocus3,
    onBlur: onBlur3,
    ...rest
  } = props;
  const labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {
    labelIds.push(field.feedbackId);
  }
  if (field == null ? void 0 : field.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return {
    ...rest,
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id4 != null ? id4 : field == null ? void 0 : field.id,
    isDisabled: (_a40 = disabled != null ? disabled : isDisabled26) != null ? _a40 : field == null ? void 0 : field.isDisabled,
    isReadOnly: (_b8 = readOnly != null ? readOnly : isReadOnly) != null ? _b8 : field == null ? void 0 : field.isReadOnly,
    isRequired: (_c5 = required != null ? required : isRequired) != null ? _c5 : field == null ? void 0 : field.isRequired,
    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus3),
    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur3)
  };
}

// node_modules/@chakra-ui/select/dist/chunk-GJO77I2I.mjs
var import_react375 = __toESM(require_react(), 1);
var import_jsx_runtime180 = __toESM(require_jsx_runtime(), 1);
function split22(object2, keys2) {
  const picked = {};
  const omitted2 = {};
  for (const [key, value] of Object.entries(object2)) {
    if (keys2.includes(key))
      picked[key] = value;
    else
      omitted2[key] = value;
  }
  return [picked, omitted2];
}
var Select = forwardRef36((props, ref) => {
  var _a40;
  const styles3 = useMultiStyleConfig20("Select", props);
  const {
    rootProps,
    placeholder,
    icon,
    color: color3,
    height,
    h,
    minH,
    minHeight,
    iconColor,
    iconSize,
    ...rest
  } = omitThemingProps(props);
  const [layoutProps, otherProps] = split22(rest, layoutPropNames);
  const ownProps = useFormControl5(otherProps);
  const rootStyles3 = {
    width: "100%",
    height: "fit-content",
    position: "relative",
    color: color3
  };
  const fieldStyles = {
    paddingEnd: "2rem",
    ...styles3.field,
    _focus: {
      zIndex: "unset",
      ...(_a40 = styles3.field) == null ? void 0 : _a40["_focus"]
    }
  };
  return (0, import_jsx_runtime180.jsxs)(
    chakra20.div,
    {
      className: "chakra-select__wrapper",
      __css: rootStyles3,
      ...layoutProps,
      ...rootProps,
      children: [
        (0, import_jsx_runtime180.jsx)(
          SelectField,
          {
            ref,
            height: h != null ? h : height,
            minH: minH != null ? minH : minHeight,
            placeholder,
            ...ownProps,
            __css: fieldStyles,
            children: props.children
          }
        ),
        (0, import_jsx_runtime180.jsx)(
          SelectIcon,
          {
            "data-disabled": dataAttr(ownProps.disabled),
            ...(iconColor || color3) && { color: iconColor || color3 },
            __css: styles3.icon,
            ...iconSize && { fontSize: iconSize },
            children: icon
          }
        )
      ]
    }
  );
});
Select.displayName = "Select";
var DefaultIcon = (props) => (0, import_jsx_runtime180.jsx)("svg", { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime180.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }
) });
var IconWrapper = chakra20("div", {
  baseStyle: {
    position: "absolute",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    pointerEvents: "none",
    top: "50%",
    transform: "translateY(-50%)"
  }
});
var SelectIcon = (props) => {
  const { children = (0, import_jsx_runtime180.jsx)(DefaultIcon, {}), ...rest } = props;
  const clone = (0, import_react375.cloneElement)(children, {
    role: "presentation",
    className: "chakra-select__icon",
    focusable: false,
    "aria-hidden": true,
    style: {
      width: "1em",
      height: "1em",
      color: "currentColor"
    }
  });
  return (0, import_jsx_runtime180.jsx)(IconWrapper, { ...rest, className: "chakra-select__icon-wrapper", children: (0, import_react375.isValidElement)(children) ? clone : null });
};
SelectIcon.displayName = "SelectIcon";

// node_modules/@chakra-ui/skeleton/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/dist/chunk-OJ7ITIQ2.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/dist/chunk-3GRGLNAR.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/dist/chunk-5L3NXCNX.mjs
init_shim();
var import_react376 = __toESM(require_react(), 1);
function useIsFirstRender() {
  const isFirstRender = (0, import_react376.useRef)(true);
  (0, import_react376.useEffect)(() => {
    isFirstRender.current = false;
  }, []);
  return isFirstRender.current;
}

// node_modules/@chakra-ui/react-use-previous/dist/index.mjs
init_shim();
var import_react377 = __toESM(require_react(), 1);
function usePrevious2(value) {
  const ref = (0, import_react377.useRef)();
  (0, import_react377.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react379 = __toESM(require_react(), 1);
function useTheme21() {
  const theme3 = (0, import_react379.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra21() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme21();
  return { ...colorModeResult, theme: theme3 };
}
function getBreakpointValue3(theme3, value, fallback) {
  var _a40, _b8;
  if (value == null)
    return value;
  const getValue2 = (val) => {
    var _a210, _b23;
    return (_b23 = (_a210 = theme3.__breakpoints) == null ? void 0 : _a210.asArray) == null ? void 0 : _b23[val];
  };
  return (_b8 = (_a40 = getValue2(value)) != null ? _a40 : getValue2(fallback)) != null ? _b8 : fallback;
}
function getTokenValue3(theme3, value, fallback) {
  var _a40, _b8;
  if (value == null)
    return value;
  const getValue2 = (val) => {
    var _a210, _b23;
    return (_b23 = (_a210 = theme3.__cssMap) == null ? void 0 : _a210[val]) == null ? void 0 : _b23.value;
  };
  return (_b8 = (_a40 = getValue2(value)) != null ? _a40 : getValue2(fallback)) != null ? _b8 : fallback;
}
function useToken21(scale3, token, fallback) {
  const theme3 = useTheme21();
  return getToken21(scale3, token, fallback)(theme3);
}
function getToken21(scale3, token, fallback) {
  const _token = Array.isArray(token) ? token : [token];
  const _fallback = Array.isArray(fallback) ? fallback : [fallback];
  return (theme3) => {
    const fallbackArr = _fallback.filter(Boolean);
    const result = _token.map((token2, index) => {
      var _a40, _b8;
      if (scale3 === "breakpoints") {
        return getBreakpointValue3(theme3, token2, (_a40 = fallbackArr[index]) != null ? _a40 : token2);
      }
      const path = `${scale3}.${token2}`;
      return getTokenValue3(theme3, path, (_b8 = fallbackArr[index]) != null ? _b8 : token2);
    });
    return Array.isArray(token) ? result : result[0];
  };
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM21() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser23 = canUseDOM21();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash26 = __toESM(require_lodash(), 1);
function omit25(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get22(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize22 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet22 = memoize22(get22);
function objectFilter21(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined21 = (object2) => objectFilter21(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction24(value) {
  return typeof value === "function";
}
var __DEV__21 = import_process.default.env.NODE_ENV !== "production";
var __TEST__21 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn24(valueOrFn, ...args) {
  return isFunction24(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once21(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn22 = once21((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__21) {
    console.warn(message);
  }
});
var error21 = once21((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__21) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger21 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger21 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep21 = 1 / 60 * 1e3;
var getCurrentTime21 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame21 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime21()), defaultTimestep21);

// node_modules/@chakra-ui/skeleton/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep22(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/skeleton/node_modules/framesync/dist/es/index.mjs
var maxElapsed22 = 40;
var useDefaultElapsed22 = true;
var runNextFrame22 = false;
var isProcessing21 = false;
var frame22 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder22 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps22 = stepsOrder22.reduce((acc, key) => {
  acc[key] = createRenderStep22(() => runNextFrame22 = true);
  return acc;
}, {});
var sync22 = stepsOrder22.reduce((acc, key) => {
  const step = steps22[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame22)
      startLoop22();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync22 = stepsOrder22.reduce((acc, key) => {
  acc[key] = steps22[key].cancel;
  return acc;
}, {});
var flushSync21 = stepsOrder22.reduce((acc, key) => {
  acc[key] = () => steps22[key].process(frame22);
  return acc;
}, {});
var processStep22 = (stepId) => steps22[stepId].process(frame22);
var processFrame22 = (timestamp) => {
  runNextFrame22 = false;
  frame22.delta = useDefaultElapsed22 ? defaultTimestep21 : Math.max(Math.min(timestamp - frame22.timestamp, maxElapsed22), 1);
  frame22.timestamp = timestamp;
  isProcessing21 = true;
  stepsOrder22.forEach(processStep22);
  isProcessing21 = false;
  if (runNextFrame22) {
    useDefaultElapsed22 = false;
    onNextFrame21(processFrame22);
  }
};
var startLoop22 = () => {
  runNextFrame22 = true;
  useDefaultElapsed22 = true;
  if (!isProcessing21)
    onNextFrame21(processFrame22);
};

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints24 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList22 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector22 = focusableElList22.join();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react380 = __toESM(require_react(), 1);
var import_react_fast_compare21 = __toESM(require_react_fast_compare21(), 1);
function useStyleConfigImpl19(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra21();
  const themeStyleConfig = themeKey ? memoizedGet22(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash26.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined21(omit25(rest, ["children"]))
  );
  const stylesRef = (0, import_react380.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare21.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig21(themeKey, props = {}) {
  return useStyleConfigImpl19(themeKey, props);
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames21 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps21 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp21(prop) {
  return validHTMLProps21.has(prop) || !allPropNames21.has(prop);
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react381 = __toESM(require_react(), 1);
var _a36;
var emotion_styled21 = (_a36 = emotion_styled_browser_esm_default.default) != null ? _a36 : emotion_styled_browser_esm_default;
var toCSSObject21 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter21(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn24(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined21(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled21(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp21;
  }
  const styleObject = toCSSObject21({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled21(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react381.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react381.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory21() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled21, {
    apply(target, thisArg, argArray) {
      return styled21(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled21(element));
      }
      return cache.get(element);
    }
  });
}
var chakra21 = factory21();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react382 = __toESM(require_react(), 1);
function forwardRef37(component) {
  return (0, import_react382.forwardRef)(component);
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react383 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react384 = __toESM(require_react(), 1);
function createContext33(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react384.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react384.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react386 = __toESM(require_react(), 1);
var import_jsx_runtime181 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider21, useStyles21] = createContext33({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/dist/chunk-3GRGLNAR.mjs
var import_jsx_runtime182 = __toESM(require_jsx_runtime(), 1);
var StyledSkeleton = chakra21("div", {
  baseStyle: {
    boxShadow: "none",
    backgroundClip: "padding-box",
    cursor: "default",
    color: "transparent",
    pointerEvents: "none",
    userSelect: "none",
    "&::before, &::after, *": {
      visibility: "hidden"
    }
  }
});
var $startColor3 = cssVar("skeleton-start-color");
var $endColor3 = cssVar("skeleton-end-color");
var fade = keyframes({
  from: { opacity: 0 },
  to: { opacity: 1 }
});
var bgFade = keyframes({
  from: {
    borderColor: $startColor3.reference,
    background: $startColor3.reference
  },
  to: {
    borderColor: $endColor3.reference,
    background: $endColor3.reference
  }
});
var Skeleton = forwardRef37((props, ref) => {
  const skeletonProps = {
    ...props,
    fadeDuration: typeof props.fadeDuration === "number" ? props.fadeDuration : 0.4,
    speed: typeof props.speed === "number" ? props.speed : 0.8
  };
  const styles3 = useStyleConfig21("Skeleton", skeletonProps);
  const isFirstRender = useIsFirstRender();
  const {
    startColor = "",
    endColor = "",
    isLoaded,
    fadeDuration,
    speed,
    className,
    fitContent,
    ...rest
  } = omitThemingProps(skeletonProps);
  const [startColorVar, endColorVar] = useToken21("colors", [
    startColor,
    endColor
  ]);
  const wasPreviouslyLoaded = usePrevious2(isLoaded);
  const _className = cx("chakra-skeleton", className);
  const cssVarStyles = {
    ...startColorVar && { [$startColor3.variable]: startColorVar },
    ...endColorVar && { [$endColor3.variable]: endColorVar }
  };
  if (isLoaded) {
    const animation = isFirstRender || wasPreviouslyLoaded ? "none" : `${fade} ${fadeDuration}s`;
    return (0, import_jsx_runtime182.jsx)(
      chakra21.div,
      {
        ref,
        className: _className,
        __css: { animation },
        ...rest
      }
    );
  }
  return (0, import_jsx_runtime182.jsx)(
    StyledSkeleton,
    {
      ref,
      className: _className,
      ...rest,
      __css: {
        width: fitContent ? "fit-content" : void 0,
        ...styles3,
        ...cssVarStyles,
        _dark: { ...styles3["_dark"], ...cssVarStyles },
        animation: `${speed}s linear infinite alternate ${bgFade}`
      }
    }
  );
});
Skeleton.displayName = "Skeleton";

// node_modules/@chakra-ui/skeleton/dist/chunk-OJ7ITIQ2.mjs
var import_jsx_runtime183 = __toESM(require_jsx_runtime(), 1);
var SkeletonCircle = ({
  size: size3 = "2rem",
  ...rest
}) => (0, import_jsx_runtime183.jsx)(Skeleton, { borderRadius: "full", boxSize: size3, ...rest });
SkeletonCircle.displayName = "SkeletonCircle";

// node_modules/@chakra-ui/skeleton/dist/chunk-QTKSMHLN.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-VVU6AIWW.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-DZU5YH7Z.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-MG6WC47T.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/react-env/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/react-env/dist/chunk-23XYWYLU.mjs
init_shim();
var import_react388 = __toESM(require_react(), 1);
var import_jsx_runtime184 = __toESM(require_jsx_runtime(), 1);
var EnvironmentContext3 = (0, import_react388.createContext)({
  getDocument() {
    return document;
  },
  getWindow() {
    return window;
  }
});
EnvironmentContext3.displayName = "EnvironmentContext";
function useEnvironment3({ defer } = {}) {
  const [, forceUpdate] = (0, import_react388.useReducer)((c) => c + 1, 0);
  useSafeLayoutEffect(() => {
    if (!defer)
      return;
    forceUpdate();
  }, [defer]);
  return (0, import_react388.useContext)(EnvironmentContext3);
}
function EnvironmentProvider3(props) {
  const { children, environment: environmentProp, disabled } = props;
  const ref = (0, import_react388.useRef)(null);
  const context = (0, import_react388.useMemo)(() => {
    if (environmentProp)
      return environmentProp;
    return {
      getDocument: () => {
        var _a40, _b8;
        return (_b8 = (_a40 = ref.current) == null ? void 0 : _a40.ownerDocument) != null ? _b8 : document;
      },
      getWindow: () => {
        var _a40, _b8;
        return (_b8 = (_a40 = ref.current) == null ? void 0 : _a40.ownerDocument.defaultView) != null ? _b8 : window;
      }
    };
  }, [environmentProp]);
  const showSpan = !disabled || !environmentProp;
  return (0, import_jsx_runtime184.jsxs)(EnvironmentContext3.Provider, { value: context, children: [
    children,
    showSpan && (0, import_jsx_runtime184.jsx)("span", { id: "__chakra_env", hidden: true, ref })
  ] });
}
EnvironmentProvider3.displayName = "EnvironmentProvider";

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-MG6WC47T.mjs
var import_react389 = __toESM(require_react(), 1);
function useMediaQuery2(query, options = {}) {
  const { ssr = true, fallback } = options;
  const { getWindow } = useEnvironment3();
  const queries = Array.isArray(query) ? query : [query];
  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];
  fallbackValues = fallbackValues.filter((v) => v != null);
  const [value, setValue] = (0, import_react389.useState)(() => {
    return queries.map((query2, index) => ({
      media: query2,
      matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches
    }));
  });
  (0, import_react389.useEffect)(() => {
    const win = getWindow();
    setValue(
      queries.map((query2) => ({
        media: query2,
        matches: win.matchMedia(query2).matches
      }))
    );
    const mql = queries.map((query2) => win.matchMedia(query2));
    const handler = (evt) => {
      setValue((prev) => {
        return prev.slice().map((item) => {
          if (item.media === evt.media)
            return { ...item, matches: evt.matches };
          return item;
        });
      });
    };
    mql.forEach((mql2) => {
      if (typeof mql2.addListener === "function") {
        mql2.addListener(handler);
      } else {
        mql2.addEventListener("change", handler);
      }
    });
    return () => {
      mql.forEach((mql2) => {
        if (typeof mql2.removeListener === "function") {
          mql2.removeListener(handler);
        } else {
          mql2.removeEventListener("change", handler);
        }
      });
    };
  }, [getWindow]);
  return value.map((item) => item.matches);
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-DZU5YH7Z.mjs
function Visibility2(props) {
  const { breakpoint, hide, children, ssr } = props;
  const [show] = useMediaQuery2(breakpoint, { ssr });
  const isVisible3 = hide ? !show : show;
  const rendered = isVisible3 ? children : null;
  return rendered;
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-R3K6W4OF.mjs
init_shim();
var getBreakpoint2 = (theme3, value) => {
  var _a40, _b8;
  return (_b8 = (_a40 = theme3 == null ? void 0 : theme3.breakpoints) == null ? void 0 : _a40[value]) != null ? _b8 : value;
};
function useQuery2(props) {
  const { breakpoint = "", below, above } = props;
  const theme3 = useTheme21();
  const bpBelow = getBreakpoint2(theme3, below);
  const bpAbove = getBreakpoint2(theme3, above);
  let query = breakpoint;
  if (bpBelow) {
    query = `(max-width: ${bpBelow})`;
  } else if (bpAbove) {
    query = `(min-width: ${bpAbove})`;
  }
  return query;
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-VVU6AIWW.mjs
var import_jsx_runtime185 = __toESM(require_jsx_runtime(), 1);
function Hide2(props) {
  const { children, ssr } = props;
  const query = useQuery2(props);
  return (0, import_jsx_runtime185.jsx)(Visibility2, { breakpoint: query, hide: true, ssr, children });
}
Hide2.displayName = "Hide";

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-VNAUZPVA.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-OLSEFBIG.mjs
init_shim();
var import_jsx_runtime186 = __toESM(require_jsx_runtime(), 1);
function Show2(props) {
  const { children, ssr } = props;
  const query = useQuery2(props);
  return (0, import_jsx_runtime186.jsx)(Visibility2, { breakpoint: query, ssr, children });
}
Show2.displayName = "Show";

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-KSQA4OTT.mjs
init_shim();

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-G4WB2JLN.mjs
init_shim();
function getClosestValue2(values, breakpoint, breakpoints28 = breakpoints15) {
  let index = Object.keys(values).indexOf(breakpoint);
  if (index !== -1) {
    return values[breakpoint];
  }
  let stopIndex = breakpoints28.indexOf(breakpoint);
  while (stopIndex >= 0) {
    const key = breakpoints28[stopIndex];
    if (values.hasOwnProperty(key)) {
      index = stopIndex;
      break;
    }
    stopIndex -= 1;
  }
  if (index !== -1) {
    const key = breakpoints28[index];
    return values[key];
  }
  return void 0;
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-CI3LDA6F.mjs
init_shim();
function useBreakpoint2(arg) {
  var _a40, _b8;
  const opts = isObject(arg) ? arg : { fallback: arg != null ? arg : "base" };
  const theme3 = useTheme21();
  const breakpoints28 = theme3.__breakpoints.details.map(
    ({ minMaxQuery, breakpoint }) => ({
      breakpoint,
      query: minMaxQuery.replace("@media screen and ", "")
    })
  );
  const fallback = breakpoints28.map((bp) => bp.breakpoint === opts.fallback);
  const values = useMediaQuery2(
    breakpoints28.map((bp) => bp.query),
    { fallback, ssr: opts.ssr }
  );
  const index = values.findIndex((value) => value == true);
  return (_b8 = (_a40 = breakpoints28[index]) == null ? void 0 : _a40.breakpoint) != null ? _b8 : opts.fallback;
}

// node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/media-query/dist/chunk-KSQA4OTT.mjs
function useBreakpointValue2(values, arg) {
  var _a40;
  const opts = isObject(arg) ? arg : { fallback: arg != null ? arg : "base" };
  const breakpoint = useBreakpoint2(opts);
  const theme3 = useTheme21();
  if (!breakpoint)
    return;
  const breakpoints28 = Array.from(((_a40 = theme3.__breakpoints) == null ? void 0 : _a40.keys) || []);
  const obj = Array.isArray(values) ? Object.fromEntries(
    Object.entries(arrayToObjectNotation13(values, breakpoints28)).map(
      ([key, value]) => [key, value]
    )
  ) : values;
  return getClosestValue2(obj, breakpoint, breakpoints28);
}

// node_modules/@chakra-ui/skeleton/dist/chunk-QTKSMHLN.mjs
var import_jsx_runtime187 = __toESM(require_jsx_runtime(), 1);
function range(count) {
  return Array(count).fill(1).map((_, index) => index + 1);
}
var defaultNoOfLines = 3;
var SkeletonText = (props) => {
  const {
    noOfLines = defaultNoOfLines,
    spacing: spacing3 = "0.5rem",
    skeletonHeight = "0.5rem",
    className,
    startColor,
    endColor,
    isLoaded,
    fadeDuration,
    speed,
    variant,
    size: size3,
    colorScheme,
    children,
    ...rest
  } = props;
  const noOfLinesValue = useBreakpointValue2(
    typeof noOfLines === "number" ? [noOfLines] : noOfLines
  ) || defaultNoOfLines;
  const numbers = range(noOfLinesValue);
  const getWidth = (index) => {
    if (noOfLinesValue > 1) {
      return index === numbers.length ? "80%" : "100%";
    }
    return "100%";
  };
  const _className = cx("chakra-skeleton__group", className);
  return (0, import_jsx_runtime187.jsx)(chakra21.div, { className: _className, ...rest, children: numbers.map((number2, index) => {
    if (isLoaded && index > 0) {
      return null;
    }
    const sizeProps = isLoaded ? null : {
      mb: number2 === numbers.length ? "0" : spacing3,
      width: getWidth(number2),
      height: skeletonHeight
    };
    return (0, import_jsx_runtime187.jsx)(
      Skeleton,
      {
        startColor,
        endColor,
        isLoaded,
        fadeDuration,
        speed,
        variant,
        size: size3,
        colorScheme,
        ...sizeProps,
        children: index === 0 ? children : void 0
      },
      numbers.length.toString() + number2
    );
  }) });
};
SkeletonText.displayName = "SkeletonText";

// node_modules/@chakra-ui/slider/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/slider/dist/chunk-MGDSBG3R.mjs
init_shim();

// node_modules/@chakra-ui/slider/dist/chunk-URECC76Z.mjs
init_shim();

// node_modules/@chakra-ui/slider/dist/chunk-XYDKRZ3V.mjs
init_shim();
var dataAttr23 = (condition) => condition ? "" : void 0;
var ariaAttr23 = (condition) => condition ? true : void 0;
var cx23 = (...classNames2) => classNames2.filter(Boolean).join(" ");
function callAllHandlers23(...fns) {
  return function func2(event) {
    fns.some((fn) => {
      fn == null ? void 0 : fn(event);
      return event == null ? void 0 : event.defaultPrevented;
    });
  };
}

// node_modules/@chakra-ui/slider/dist/chunk-VWAPXGBD.mjs
init_shim();
function getIds(id4) {
  return {
    root: `slider-root-${id4}`,
    getThumb: (i) => `slider-thumb-${id4}-${i}`,
    getInput: (i) => `slider-input-${id4}-${i}`,
    track: `slider-track-${id4}`,
    innerTrack: `slider-filled-track-${id4}`,
    getMarker: (i) => `slider-marker-${id4}-${i}`,
    output: `slider-output-${id4}`
  };
}
function orient3(options) {
  const { orientation, vertical, horizontal } = options;
  return orientation === "vertical" ? vertical : horizontal;
}
var zeroSize = { width: 0, height: 0 };
var normalize3 = (a) => a || zeroSize;
function getStyles(options) {
  const { orientation, thumbPercents, thumbRects, isReversed } = options;
  const getThumbStyle = (i) => {
    var _a40;
    const rect = (_a40 = thumbRects[i]) != null ? _a40 : zeroSize;
    return {
      position: "absolute",
      userSelect: "none",
      WebkitUserSelect: "none",
      MozUserSelect: "none",
      msUserSelect: "none",
      touchAction: "none",
      ...orient3({
        orientation,
        vertical: {
          bottom: `calc(${thumbPercents[i]}% - ${rect.height / 2}px)`
        },
        horizontal: {
          left: `calc(${thumbPercents[i]}% - ${rect.width / 2}px)`
        }
      })
    };
  };
  const size3 = orientation === "vertical" ? thumbRects.reduce(
    (a, b) => normalize3(a).height > normalize3(b).height ? a : b,
    zeroSize
  ) : thumbRects.reduce(
    (a, b) => normalize3(a).width > normalize3(b).width ? a : b,
    zeroSize
  );
  const rootStyle = {
    position: "relative",
    touchAction: "none",
    WebkitTapHighlightColor: "rgba(0,0,0,0)",
    userSelect: "none",
    outline: 0,
    ...orient3({
      orientation,
      vertical: size3 ? {
        paddingLeft: size3.width / 2,
        paddingRight: size3.width / 2
      } : {},
      horizontal: size3 ? {
        paddingTop: size3.height / 2,
        paddingBottom: size3.height / 2
      } : {}
    })
  };
  const trackStyle = {
    position: "absolute",
    ...orient3({
      orientation,
      vertical: {
        left: "50%",
        transform: "translateX(-50%)",
        height: "100%"
      },
      horizontal: {
        top: "50%",
        transform: "translateY(-50%)",
        width: "100%"
      }
    })
  };
  const isSingleThumb = thumbPercents.length === 1;
  const fallback = [0, isReversed ? 100 - thumbPercents[0] : thumbPercents[0]];
  const range2 = isSingleThumb ? fallback : thumbPercents;
  let start = range2[0];
  if (!isSingleThumb && isReversed) {
    start = 100 - start;
  }
  const percent2 = Math.abs(range2[range2.length - 1] - range2[0]);
  const innerTrackStyle = {
    ...trackStyle,
    ...orient3({
      orientation,
      vertical: isReversed ? { height: `${percent2}%`, top: `${start}%` } : { height: `${percent2}%`, bottom: `${start}%` },
      horizontal: isReversed ? { width: `${percent2}%`, right: `${start}%` } : { width: `${percent2}%`, left: `${start}%` }
    })
  };
  return { trackStyle, innerTrackStyle, rootStyle, getThumbStyle };
}
function getIsReversed(options) {
  const { isReversed, direction: direction3, orientation } = options;
  if (direction3 === "ltr" || orientation === "vertical") {
    return isReversed;
  }
  return !isReversed;
}

// node_modules/@chakra-ui/react-use-pan-event/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react-use-pan-event/dist/chunk-VOTNCFOA.mjs
init_shim();

// node_modules/@chakra-ui/react-use-pan-event/dist/chunk-OT5ZKXS2.mjs
init_shim();

// node_modules/@chakra-ui/event-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/event-utils/dist/chunk-KDLSVIYE.mjs
init_shim();

// node_modules/@chakra-ui/event-utils/dist/chunk-6K7SS4J6.mjs
init_shim();
function addDomEvent23(target, eventName, handler, options) {
  target.addEventListener(eventName, handler, options);
  return () => {
    target.removeEventListener(eventName, handler, options);
  };
}

// node_modules/@chakra-ui/event-utils/dist/chunk-6FBKF3LK.mjs
init_shim();

// node_modules/@chakra-ui/event-utils/dist/chunk-B7KYFEHM.mjs
init_shim();
function isMouseEvent22(event) {
  const win = getEventWindow23(event);
  if (typeof win.PointerEvent !== "undefined" && event instanceof win.PointerEvent) {
    return !!(event.pointerType === "mouse");
  }
  return event instanceof win.MouseEvent;
}
function isTouchEvent22(event) {
  const hasTouches = !!event.touches;
  return hasTouches;
}
function isMultiTouchEvent22(event) {
  return isTouchEvent22(event) && event.touches.length > 1;
}
function getEventWindow23(event) {
  var _a40;
  return (_a40 = event.view) != null ? _a40 : window;
}

// node_modules/@chakra-ui/event-utils/dist/chunk-6FBKF3LK.mjs
function pointFromTouch2(e, type = "page") {
  const point = e.touches[0] || e.changedTouches[0];
  return { x: point[`${type}X`], y: point[`${type}Y`] };
}
function pointFromMouse2(point, type = "page") {
  return {
    x: point[`${type}X`],
    y: point[`${type}Y`]
  };
}
function getEventPoint(event, type = "page") {
  return isTouchEvent22(event) ? pointFromTouch2(event, type) : pointFromMouse2(event, type);
}

// node_modules/@chakra-ui/event-utils/dist/chunk-KDLSVIYE.mjs
function filter3(cb) {
  return (event) => {
    const isMouse = isMouseEvent22(event);
    if (!isMouse || isMouse && event.button === 0) {
      cb(event);
    }
  };
}
function wrap3(cb, filterPrimary = false) {
  function listener(event) {
    cb(event, { point: getEventPoint(event) });
  }
  const fn = filterPrimary ? filter3(listener) : listener;
  return fn;
}
function addPointerEvent23(target, type, cb, options) {
  return addDomEvent23(target, type, wrap3(cb, type === "pointerdown"), options);
}

// node_modules/@chakra-ui/react-use-pan-event/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/react-use-pan-event/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep22 = 1 / 60 * 1e3;
var getCurrentTime22 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame22 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime22()), defaultTimestep22);

// node_modules/@chakra-ui/react-use-pan-event/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep23(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/react-use-pan-event/node_modules/framesync/dist/es/index.mjs
var maxElapsed23 = 40;
var useDefaultElapsed23 = true;
var runNextFrame23 = false;
var isProcessing22 = false;
var frame23 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder23 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps23 = stepsOrder23.reduce((acc, key) => {
  acc[key] = createRenderStep23(() => runNextFrame23 = true);
  return acc;
}, {});
var sync23 = stepsOrder23.reduce((acc, key) => {
  const step = steps23[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame23)
      startLoop23();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync23 = stepsOrder23.reduce((acc, key) => {
  acc[key] = steps23[key].cancel;
  return acc;
}, {});
var flushSync22 = stepsOrder23.reduce((acc, key) => {
  acc[key] = () => steps23[key].process(frame23);
  return acc;
}, {});
var processStep23 = (stepId) => steps23[stepId].process(frame23);
var processFrame23 = (timestamp) => {
  runNextFrame23 = false;
  frame23.delta = useDefaultElapsed23 ? defaultTimestep22 : Math.max(Math.min(timestamp - frame23.timestamp, maxElapsed23), 1);
  frame23.timestamp = timestamp;
  isProcessing22 = true;
  stepsOrder23.forEach(processStep23);
  isProcessing22 = false;
  if (runNextFrame23) {
    useDefaultElapsed23 = false;
    onNextFrame22(processFrame23);
  }
};
var startLoop23 = () => {
  runNextFrame23 = true;
  useDefaultElapsed23 = true;
  if (!isProcessing22)
    onNextFrame22(processFrame23);
};
var getFrameData22 = () => frame23;
var es_default22 = sync23;

// node_modules/@chakra-ui/react-use-pan-event/dist/chunk-OT5ZKXS2.mjs
var __defProp6 = Object.defineProperty;
var __defNormalProp6 = (obj, key, value) => key in obj ? __defProp6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField26 = (obj, key, value) => {
  __defNormalProp6(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var PanEvent = class {
  constructor(event, handlers2, threshold) {
    __publicField26(this, "history", []);
    __publicField26(this, "startEvent", null);
    __publicField26(this, "lastEvent", null);
    __publicField26(this, "lastEventInfo", null);
    __publicField26(this, "handlers", {});
    __publicField26(this, "removeListeners", () => {
    });
    __publicField26(this, "threshold", 3);
    __publicField26(this, "win");
    __publicField26(this, "updatePoint", () => {
      if (!(this.lastEvent && this.lastEventInfo))
        return;
      const info2 = getPanInfo3(this.lastEventInfo, this.history);
      const isPanStarted = this.startEvent !== null;
      const isDistancePastThreshold = distance23(info2.offset, { x: 0, y: 0 }) >= this.threshold;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      const { timestamp: timestamp2 } = getFrameData22();
      this.history.push({ ...info2.point, timestamp: timestamp2 });
      const { onStart, onMove } = this.handlers;
      if (!isPanStarted) {
        onStart == null ? void 0 : onStart(this.lastEvent, info2);
        this.startEvent = this.lastEvent;
      }
      onMove == null ? void 0 : onMove(this.lastEvent, info2);
    });
    __publicField26(this, "onPointerMove", (event2, info2) => {
      this.lastEvent = event2;
      this.lastEventInfo = info2;
      es_default22.update(this.updatePoint, true);
    });
    __publicField26(this, "onPointerUp", (event2, info2) => {
      const panInfo = getPanInfo3(info2, this.history);
      const { onEnd, onSessionEnd } = this.handlers;
      onSessionEnd == null ? void 0 : onSessionEnd(event2, panInfo);
      this.end();
      if (!onEnd || !this.startEvent)
        return;
      onEnd == null ? void 0 : onEnd(event2, panInfo);
    });
    var _a40;
    this.win = (_a40 = event.view) != null ? _a40 : window;
    if (isMultiTouchEvent22(event))
      return;
    this.handlers = handlers2;
    if (threshold) {
      this.threshold = threshold;
    }
    event.stopPropagation();
    event.preventDefault();
    const info = { point: getEventPoint(event) };
    const { timestamp } = getFrameData22();
    this.history = [{ ...info.point, timestamp }];
    const { onSessionStart } = handlers2;
    onSessionStart == null ? void 0 : onSessionStart(event, getPanInfo3(info, this.history));
    this.removeListeners = pipe26(
      addPointerEvent23(this.win, "pointermove", this.onPointerMove),
      addPointerEvent23(this.win, "pointerup", this.onPointerUp),
      addPointerEvent23(this.win, "pointercancel", this.onPointerUp)
    );
  }
  updateHandlers(handlers2) {
    this.handlers = handlers2;
  }
  end() {
    var _a40;
    (_a40 = this.removeListeners) == null ? void 0 : _a40.call(this);
    cancelSync23.update(this.updatePoint);
  }
};
function subtract5(a, b) {
  return { x: a.x - b.x, y: a.y - b.y };
}
function getPanInfo3(info, history) {
  return {
    point: info.point,
    delta: subtract5(info.point, history[history.length - 1]),
    offset: subtract5(info.point, history[0]),
    velocity: getVelocity4(history, 0.1)
  };
}
var toMilliseconds2 = (v) => v * 1e3;
function getVelocity4(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  let i = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = history[history.length - 1];
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds2(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
  if (time === 0) {
    return { x: 0, y: 0 };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time,
    y: (lastPoint.y - timestampedPoint.y) / time
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}
function pipe26(...fns) {
  return (v) => fns.reduce((a, b) => b(a), v);
}
function distance1D2(a, b) {
  return Math.abs(a - b);
}
function isPoint2(point) {
  return "x" in point && "y" in point;
}
function distance23(a, b) {
  if (typeof a === "number" && typeof b === "number") {
    return distance1D2(a, b);
  }
  if (isPoint2(a) && isPoint2(b)) {
    const xDelta = distance1D2(a.x, b.x);
    const yDelta = distance1D2(a.y, b.y);
    return Math.sqrt(xDelta ** 2 + yDelta ** 2);
  }
  return 0;
}

// node_modules/@chakra-ui/react-use-latest-ref/dist/index.mjs
init_shim();
var import_react390 = __toESM(require_react(), 1);
function useLatestRef2(value) {
  const ref = (0, import_react390.useRef)(null);
  ref.current = value;
  return ref;
}

// node_modules/@chakra-ui/react-use-pan-event/dist/chunk-VOTNCFOA.mjs
var import_react391 = __toESM(require_react(), 1);
function usePanEvent(ref, options) {
  const {
    onPan,
    onPanStart,
    onPanEnd,
    onPanSessionStart,
    onPanSessionEnd,
    threshold
  } = options;
  const hasPanEvents = Boolean(
    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd
  );
  const panSession = (0, import_react391.useRef)(null);
  const handlersRef = useLatestRef2({
    onSessionStart: onPanSessionStart,
    onSessionEnd: onPanSessionEnd,
    onStart: onPanStart,
    onMove: onPan,
    onEnd(event, info) {
      panSession.current = null;
      onPanEnd == null ? void 0 : onPanEnd(event, info);
    }
  });
  (0, import_react391.useEffect)(() => {
    var _a40;
    (_a40 = panSession.current) == null ? void 0 : _a40.updateHandlers(handlersRef.current);
  });
  (0, import_react391.useEffect)(() => {
    const node2 = ref.current;
    if (!node2 || !hasPanEvents)
      return;
    function onPointerDown(event) {
      panSession.current = new PanEvent(event, handlersRef.current, threshold);
    }
    return addPointerEvent23(node2, "pointerdown", onPointerDown);
  }, [ref, hasPanEvents, handlersRef, threshold]);
  (0, import_react391.useEffect)(() => {
    return () => {
      var _a40;
      (_a40 = panSession.current) == null ? void 0 : _a40.end();
      panSession.current = null;
    };
  }, []);
}

// node_modules/@chakra-ui/slider/dist/chunk-URECC76Z.mjs
var import_react393 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/react-use-size/dist/index.mjs
init_shim();

// node_modules/@zag-js/element-size/dist/index.mjs
init_shim();

// node_modules/@zag-js/element-size/dist/chunk-4XR3BY45.mjs
init_shim();

// node_modules/@zag-js/element-size/dist/chunk-FW3ST7OM.mjs
init_shim();
function trackElementSize(element, callback) {
  var _a40;
  if (!element) {
    callback(void 0);
    return;
  }
  callback({ width: element.offsetWidth, height: element.offsetHeight });
  const win = (_a40 = element.ownerDocument.defaultView) != null ? _a40 : window;
  const observer = new win.ResizeObserver((entries) => {
    if (!Array.isArray(entries) || !entries.length)
      return;
    const [entry] = entries;
    let width;
    let height;
    if ("borderBoxSize" in entry) {
      const borderSizeEntry = entry["borderBoxSize"];
      const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
      width = borderSize["inlineSize"];
      height = borderSize["blockSize"];
    } else {
      width = element.offsetWidth;
      height = element.offsetHeight;
    }
    callback({ width, height });
  });
  observer.observe(element, { box: "border-box" });
  return () => observer.unobserve(element);
}

// node_modules/@chakra-ui/react-use-size/dist/index.mjs
var import_react392 = __toESM(require_react(), 1);
var useSafeLayoutEffect6 = Boolean(globalThis == null ? void 0 : globalThis.document) ? import_react392.useLayoutEffect : import_react392.useEffect;
function trackMutation(el, cb) {
  var _a40, _b8;
  if (!el || !el.parentElement)
    return;
  const win = (_b8 = (_a40 = el.ownerDocument) == null ? void 0 : _a40.defaultView) != null ? _b8 : window;
  const observer = new win.MutationObserver(() => {
    cb();
  });
  observer.observe(el.parentElement, { childList: true });
  return () => {
    observer.disconnect();
  };
}
function useSizes({
  getNodes,
  observeMutation = true
}) {
  const [sizes47, setSizes] = (0, import_react392.useState)([]);
  const [count, setCount] = (0, import_react392.useState)(0);
  useSafeLayoutEffect6(() => {
    const elements = getNodes();
    const cleanups = elements.map(
      (element, index) => trackElementSize(element, (size3) => {
        setSizes((sizes210) => {
          return [
            ...sizes210.slice(0, index),
            size3,
            ...sizes210.slice(index + 1)
          ];
        });
      })
    );
    if (observeMutation) {
      const firstNode = elements[0];
      cleanups.push(
        trackMutation(firstNode, () => {
          setCount((count2) => count2 + 1);
        })
      );
    }
    return () => {
      cleanups.forEach((cleanup) => {
        cleanup == null ? void 0 : cleanup();
      });
    };
  }, [count]);
  return sizes47;
}
function isRef(ref) {
  return typeof ref === "object" && ref !== null && "current" in ref;
}
function useSize(subject) {
  const [size3] = useSizes({
    observeMutation: false,
    getNodes() {
      const node2 = isRef(subject) ? subject.current : subject;
      return [node2];
    }
  });
  return size3;
}

// node_modules/@chakra-ui/slider/dist/chunk-URECC76Z.mjs
function useRangeSlider(props) {
  const {
    min = 0,
    max = 100,
    onChange,
    value: valueProp,
    defaultValue,
    isReversed: isReversedProp,
    direction: direction3 = "ltr",
    orientation = "horizontal",
    id: idProp,
    isDisabled: isDisabled26,
    isReadOnly,
    onChangeStart: onChangeStartProp,
    onChangeEnd: onChangeEndProp,
    step = 1,
    getAriaValueText: getAriaValueTextProp,
    "aria-valuetext": ariaValueText,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    name,
    focusThumbOnChange = true,
    minStepsBetweenThumbs = 0,
    ...htmlProps
  } = props;
  const onChangeStart = useCallbackRef(onChangeStartProp);
  const onChangeEnd = useCallbackRef(onChangeEndProp);
  const getAriaValueText = useCallbackRef(getAriaValueTextProp);
  const isReversed = getIsReversed({
    isReversed: isReversedProp,
    direction: direction3,
    orientation
  });
  const [valueState, setValue] = useControllableState({
    value: valueProp,
    defaultValue: defaultValue != null ? defaultValue : [25, 75],
    onChange
  });
  if (!Array.isArray(valueState)) {
    throw new TypeError(
      `[range-slider] You passed an invalid value for \`value\` or \`defaultValue\`, expected \`Array\` but got \`${typeof valueState}\``
    );
  }
  const [isDragging, setDragging] = (0, import_react393.useState)(false);
  const [isFocused, setFocused] = (0, import_react393.useState)(false);
  const [activeIndex, setActiveIndex] = (0, import_react393.useState)(-1);
  const isInteractive = !(isDisabled26 || isReadOnly);
  const initialValue = (0, import_react393.useRef)(valueState);
  const value = valueState.map((val) => clampValue10(val, min, max));
  const spacing3 = minStepsBetweenThumbs * step;
  const valueBounds = getValueBounds(value, min, max, spacing3);
  const stateRef = (0, import_react393.useRef)({
    eventSource: null,
    value: [],
    valueBounds: []
  });
  stateRef.current.value = value;
  stateRef.current.valueBounds = valueBounds;
  const reversedValue = value.map((val) => max - val + min);
  const thumbValues = isReversed ? reversedValue : value;
  const thumbPercents = thumbValues.map((val) => valueToPercent10(val, min, max));
  const isVertical = orientation === "vertical";
  const trackRef = (0, import_react393.useRef)(null);
  const rootRef = (0, import_react393.useRef)(null);
  const thumbRects = useSizes({
    getNodes() {
      const rootNode = rootRef.current;
      const thumbNodes = rootNode == null ? void 0 : rootNode.querySelectorAll("[role=slider]");
      return thumbNodes ? Array.from(thumbNodes) : [];
    }
  });
  const reactId = (0, import_react393.useId)();
  const uuid = idProp != null ? idProp : reactId;
  const ids = getIds(uuid);
  const getValueFromPointer = (0, import_react393.useCallback)(
    (event) => {
      var _a40, _b8;
      if (!trackRef.current)
        return;
      stateRef.current.eventSource = "pointer";
      const rect = trackRef.current.getBoundingClientRect();
      const { clientX, clientY } = (_b8 = (_a40 = event.touches) == null ? void 0 : _a40[0]) != null ? _b8 : event;
      const diff = isVertical ? rect.bottom - clientY : clientX - rect.left;
      const length = isVertical ? rect.height : rect.width;
      let percent2 = diff / length;
      if (isReversed)
        percent2 = 1 - percent2;
      return percentToValue10(percent2, min, max);
    },
    [isVertical, isReversed, max, min]
  );
  const tenSteps = (max - min) / 10;
  const oneStep = step || (max - min) / 100;
  const actions = (0, import_react393.useMemo)(
    () => ({
      setValueAtIndex(index, val) {
        if (!isInteractive)
          return;
        const bounds = stateRef.current.valueBounds[index];
        val = parseFloat(roundValueToStep10(val, bounds.min, oneStep));
        val = clampValue10(val, bounds.min, bounds.max);
        const next = [...stateRef.current.value];
        next[index] = val;
        setValue(next);
      },
      setActiveIndex,
      stepUp(index, step2 = oneStep) {
        const valueAtIndex = stateRef.current.value[index];
        const next = isReversed ? valueAtIndex - step2 : valueAtIndex + step2;
        actions.setValueAtIndex(index, next);
      },
      stepDown(index, step2 = oneStep) {
        const valueAtIndex = stateRef.current.value[index];
        const next = isReversed ? valueAtIndex + step2 : valueAtIndex - step2;
        actions.setValueAtIndex(index, next);
      },
      reset() {
        setValue(initialValue.current);
      }
    }),
    [oneStep, isReversed, setValue, isInteractive]
  );
  const onKeyDown = (0, import_react393.useCallback)(
    (event) => {
      const eventKey = event.key;
      const keyMap = {
        ArrowRight: () => actions.stepUp(activeIndex),
        ArrowUp: () => actions.stepUp(activeIndex),
        ArrowLeft: () => actions.stepDown(activeIndex),
        ArrowDown: () => actions.stepDown(activeIndex),
        PageUp: () => actions.stepUp(activeIndex, tenSteps),
        PageDown: () => actions.stepDown(activeIndex, tenSteps),
        Home: () => {
          const { min: value2 } = valueBounds[activeIndex];
          actions.setValueAtIndex(activeIndex, value2);
        },
        End: () => {
          const { max: value2 } = valueBounds[activeIndex];
          actions.setValueAtIndex(activeIndex, value2);
        }
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        event.stopPropagation();
        action(event);
        stateRef.current.eventSource = "keyboard";
      }
    },
    [actions, activeIndex, tenSteps, valueBounds]
  );
  const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } = (0, import_react393.useMemo)(
    () => getStyles({
      isReversed,
      orientation,
      thumbRects,
      thumbPercents
    }),
    [isReversed, orientation, thumbPercents, thumbRects]
  );
  const focusThumb = (0, import_react393.useCallback)(
    (index) => {
      var _a40;
      const idx = index != null ? index : activeIndex;
      if (idx !== -1 && focusThumbOnChange) {
        const id4 = ids.getThumb(idx);
        const thumb = (_a40 = rootRef.current) == null ? void 0 : _a40.ownerDocument.getElementById(id4);
        if (thumb) {
          setTimeout(() => thumb.focus());
        }
      }
    },
    [focusThumbOnChange, activeIndex, ids]
  );
  useUpdateEffect(() => {
    if (stateRef.current.eventSource === "keyboard") {
      onChangeEnd == null ? void 0 : onChangeEnd(stateRef.current.value);
    }
  }, [value, onChangeEnd]);
  const onPanSessionStart = (event) => {
    const pointValue = getValueFromPointer(event) || 0;
    const distances = stateRef.current.value.map(
      (val) => Math.abs(val - pointValue)
    );
    const closest25 = Math.min(...distances);
    let index = distances.indexOf(closest25);
    const thumbsAtPosition = distances.filter(
      (distance27) => distance27 === closest25
    );
    const isThumbStacked = thumbsAtPosition.length > 1;
    if (isThumbStacked && pointValue > stateRef.current.value[index]) {
      index = index + thumbsAtPosition.length - 1;
    }
    setActiveIndex(index);
    actions.setValueAtIndex(index, pointValue);
    focusThumb(index);
  };
  const onPan = (event) => {
    if (activeIndex == -1)
      return;
    const pointValue = getValueFromPointer(event) || 0;
    setActiveIndex(activeIndex);
    actions.setValueAtIndex(activeIndex, pointValue);
    focusThumb(activeIndex);
  };
  usePanEvent(rootRef, {
    onPanSessionStart(event) {
      if (!isInteractive)
        return;
      setDragging(true);
      onPanSessionStart(event);
      onChangeStart == null ? void 0 : onChangeStart(stateRef.current.value);
    },
    onPanSessionEnd() {
      if (!isInteractive)
        return;
      setDragging(false);
      onChangeEnd == null ? void 0 : onChangeEnd(stateRef.current.value);
    },
    onPan(event) {
      if (!isInteractive)
        return;
      onPan(event);
    }
  });
  const getRootProps = (0, import_react393.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ...htmlProps,
        id: ids.root,
        ref: mergeRefs4(ref, rootRef),
        tabIndex: -1,
        "aria-disabled": ariaAttr23(isDisabled26),
        "data-focused": dataAttr23(isFocused),
        style: { ...props2.style, ...rootStyle }
      };
    },
    [htmlProps, isDisabled26, isFocused, rootStyle, ids]
  );
  const getTrackProps = (0, import_react393.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref: mergeRefs4(ref, trackRef),
        id: ids.track,
        "data-disabled": dataAttr23(isDisabled26),
        style: { ...props2.style, ...trackStyle }
      };
    },
    [isDisabled26, trackStyle, ids]
  );
  const getInnerTrackProps = (0, import_react393.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref,
        id: ids.innerTrack,
        style: {
          ...props2.style,
          ...innerTrackStyle
        }
      };
    },
    [innerTrackStyle, ids]
  );
  const getThumbProps = (0, import_react393.useCallback)(
    (props2, ref = null) => {
      var _a40;
      const { index, ...rest } = props2;
      const valueAtIndex = value[index];
      if (valueAtIndex == null) {
        throw new TypeError(
          `[range-slider > thumb] Cannot find value at index \`${index}\`. The \`value\` or \`defaultValue\` length is : ${value.length}`
        );
      }
      const bounds = valueBounds[index];
      return {
        ...rest,
        ref,
        role: "slider",
        tabIndex: isInteractive ? 0 : void 0,
        id: ids.getThumb(index),
        "data-active": dataAttr23(isDragging && activeIndex === index),
        "aria-valuetext": (_a40 = getAriaValueText == null ? void 0 : getAriaValueText(valueAtIndex)) != null ? _a40 : ariaValueText == null ? void 0 : ariaValueText[index],
        "aria-valuemin": bounds.min,
        "aria-valuemax": bounds.max,
        "aria-valuenow": valueAtIndex,
        "aria-orientation": orientation,
        "aria-disabled": ariaAttr23(isDisabled26),
        "aria-readonly": ariaAttr23(isReadOnly),
        "aria-label": ariaLabel == null ? void 0 : ariaLabel[index],
        "aria-labelledby": (ariaLabel == null ? void 0 : ariaLabel[index]) ? void 0 : ariaLabelledBy == null ? void 0 : ariaLabelledBy[index],
        style: { ...props2.style, ...getThumbStyle(index) },
        onKeyDown: callAllHandlers23(props2.onKeyDown, onKeyDown),
        onFocus: callAllHandlers23(props2.onFocus, () => {
          setFocused(true);
          setActiveIndex(index);
        }),
        onBlur: callAllHandlers23(props2.onBlur, () => {
          setFocused(false);
          setActiveIndex(-1);
        })
      };
    },
    [
      ids,
      value,
      valueBounds,
      isInteractive,
      isDragging,
      activeIndex,
      getAriaValueText,
      ariaValueText,
      orientation,
      isDisabled26,
      isReadOnly,
      ariaLabel,
      ariaLabelledBy,
      getThumbStyle,
      onKeyDown,
      setFocused
    ]
  );
  const getOutputProps = (0, import_react393.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref,
        id: ids.output,
        htmlFor: value.map((v, i) => ids.getThumb(i)).join(" "),
        "aria-live": "off"
      };
    },
    [ids, value]
  );
  const getMarkerProps = (0, import_react393.useCallback)(
    (props2, ref = null) => {
      const { value: v, ...rest } = props2;
      const isInRange = !(v < min || v > max);
      const isHighlighted = v >= value[0] && v <= value[value.length - 1];
      let percent2 = valueToPercent10(v, min, max);
      percent2 = isReversed ? 100 - percent2 : percent2;
      const markerStyle = {
        position: "absolute",
        pointerEvents: "none",
        ...orient3({
          orientation,
          vertical: { bottom: `${percent2}%` },
          horizontal: { left: `${percent2}%` }
        })
      };
      return {
        ...rest,
        ref,
        id: ids.getMarker(props2.value),
        role: "presentation",
        "aria-hidden": true,
        "data-disabled": dataAttr23(isDisabled26),
        "data-invalid": dataAttr23(!isInRange),
        "data-highlighted": dataAttr23(isHighlighted),
        style: {
          ...props2.style,
          ...markerStyle
        }
      };
    },
    [isDisabled26, isReversed, max, min, orientation, value, ids]
  );
  const getInputProps = (0, import_react393.useCallback)(
    (props2, ref = null) => {
      const { index, ...rest } = props2;
      return {
        ...rest,
        ref,
        id: ids.getInput(index),
        type: "hidden",
        value: value[index],
        name: Array.isArray(name) ? name[index] : `${name}-${index}`
      };
    },
    [name, value, ids]
  );
  const state2 = {
    value,
    isFocused,
    isDragging,
    getThumbPercent: (index) => thumbPercents[index],
    getThumbMinValue: (index) => valueBounds[index].min,
    getThumbMaxValue: (index) => valueBounds[index].max
  };
  return {
    state: state2,
    actions,
    getRootProps,
    getTrackProps,
    getInnerTrackProps,
    getThumbProps,
    getMarkerProps,
    getInputProps,
    getOutputProps
  };
}
function getValueBounds(arr, min, max, spacing3) {
  return arr.map((v, i) => {
    const _min = i === 0 ? min : arr[i - 1] + spacing3;
    const _max = i === arr.length - 1 ? max : arr[i + 1] - spacing3;
    return { min: _min, max: _max };
  });
}

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react395 = __toESM(require_react(), 1);
function useTheme22() {
  const theme3 = (0, import_react395.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra22() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme22();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM22() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser24 = canUseDOM22();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash27 = __toESM(require_lodash(), 1);
function omit26(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get23(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize23 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet23 = memoize23(get23);
function objectFilter22(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined22 = (object2) => objectFilter22(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction25(value) {
  return typeof value === "function";
}
var __DEV__22 = import_process.default.env.NODE_ENV !== "production";
var __TEST__22 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn25(valueOrFn, ...args) {
  return isFunction25(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once22(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn23 = once22((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__22) {
    console.warn(message);
  }
});
var error22 = once22((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__22) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger22 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger22 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep23 = 1 / 60 * 1e3;
var getCurrentTime23 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame23 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime23()), defaultTimestep23);

// node_modules/@chakra-ui/slider/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep24(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/slider/node_modules/framesync/dist/es/index.mjs
var maxElapsed24 = 40;
var useDefaultElapsed24 = true;
var runNextFrame24 = false;
var isProcessing23 = false;
var frame24 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder24 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps24 = stepsOrder24.reduce((acc, key) => {
  acc[key] = createRenderStep24(() => runNextFrame24 = true);
  return acc;
}, {});
var sync24 = stepsOrder24.reduce((acc, key) => {
  const step = steps24[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame24)
      startLoop24();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync24 = stepsOrder24.reduce((acc, key) => {
  acc[key] = steps24[key].cancel;
  return acc;
}, {});
var flushSync23 = stepsOrder24.reduce((acc, key) => {
  acc[key] = () => steps24[key].process(frame24);
  return acc;
}, {});
var processStep24 = (stepId) => steps24[stepId].process(frame24);
var processFrame24 = (timestamp) => {
  runNextFrame24 = false;
  frame24.delta = useDefaultElapsed24 ? defaultTimestep23 : Math.max(Math.min(timestamp - frame24.timestamp, maxElapsed24), 1);
  frame24.timestamp = timestamp;
  isProcessing23 = true;
  stepsOrder24.forEach(processStep24);
  isProcessing23 = false;
  if (runNextFrame24) {
    useDefaultElapsed24 = false;
    onNextFrame23(processFrame24);
  }
};
var startLoop24 = () => {
  runNextFrame24 = true;
  useDefaultElapsed24 = true;
  if (!isProcessing23)
    onNextFrame23(processFrame24);
};

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints25 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList23 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector23 = focusableElList23.join();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react396 = __toESM(require_react(), 1);
var import_react_fast_compare22 = __toESM(require_react_fast_compare22(), 1);
function useStyleConfigImpl20(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra22();
  const themeStyleConfig = themeKey ? memoizedGet23(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash27.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined22(omit26(rest, ["children"]))
  );
  const stylesRef = (0, import_react396.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare22.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useMultiStyleConfig22(themeKey, props = {}) {
  return useStyleConfigImpl20(themeKey, props);
}

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames22 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps22 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp22(prop) {
  return validHTMLProps22.has(prop) || !allPropNames22.has(prop);
}

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react397 = __toESM(require_react(), 1);
var _a37;
var emotion_styled22 = (_a37 = emotion_styled_browser_esm_default.default) != null ? _a37 : emotion_styled_browser_esm_default;
var toCSSObject22 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter22(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn25(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined22(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled22(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp22;
  }
  const styleObject = toCSSObject22({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled22(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react397.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react397.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory22() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled22, {
    apply(target, thisArg, argArray) {
      return styled22(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled22(element));
      }
      return cache.get(element);
    }
  });
}
var chakra22 = factory22();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react398 = __toESM(require_react(), 1);
function forwardRef38(component) {
  return (0, import_react398.forwardRef)(component);
}

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react399 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react400 = __toESM(require_react(), 1);
function createContext35(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react400.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react400.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react402 = __toESM(require_react(), 1);
var import_jsx_runtime188 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider22, useStyles22] = createContext35({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/slider/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/slider/dist/chunk-MGDSBG3R.mjs
var import_react404 = __toESM(require_react(), 1);
var import_jsx_runtime189 = __toESM(require_jsx_runtime(), 1);
var [RangeSliderProvider, useRangeSliderContext] = createContext({
  name: "SliderContext",
  errorMessage: "useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />"
});
var [RangeSliderStylesProvider, useRangeSliderStyles] = createContext({
  name: `RangeSliderStylesContext`,
  errorMessage: `useRangeSliderStyles returned is 'undefined'. Seems you forgot to wrap the components in "<RangeSlider />" `
});
var RangeSlider = forwardRef38(
  function RangeSlider2(props, ref) {
    const sliderProps = {
      orientation: "horizontal",
      ...props
    };
    const styles3 = useMultiStyleConfig22("Slider", sliderProps);
    const ownProps = omitThemingProps(sliderProps);
    const { direction: direction3 } = useTheme22();
    ownProps.direction = direction3;
    const { getRootProps, ...context } = useRangeSlider(ownProps);
    const ctx = (0, import_react404.useMemo)(
      () => ({ ...context, name: sliderProps.name }),
      [context, sliderProps.name]
    );
    return (0, import_jsx_runtime189.jsx)(RangeSliderProvider, { value: ctx, children: (0, import_jsx_runtime189.jsx)(RangeSliderStylesProvider, { value: styles3, children: (0, import_jsx_runtime189.jsx)(
      chakra22.div,
      {
        ...getRootProps({}, ref),
        className: "chakra-slider",
        __css: styles3.container,
        children: sliderProps.children
      }
    ) }) });
  }
);
RangeSlider.displayName = "RangeSlider";
var RangeSliderThumb = forwardRef38(
  function RangeSliderThumb2(props, ref) {
    const { getThumbProps, getInputProps, name } = useRangeSliderContext();
    const styles3 = useRangeSliderStyles();
    const thumbProps = getThumbProps(props, ref);
    return (0, import_jsx_runtime189.jsxs)(
      chakra22.div,
      {
        ...thumbProps,
        className: cx23("chakra-slider__thumb", props.className),
        __css: styles3.thumb,
        children: [
          thumbProps.children,
          name && (0, import_jsx_runtime189.jsx)("input", { ...getInputProps({ index: props.index }) })
        ]
      }
    );
  }
);
RangeSliderThumb.displayName = "RangeSliderThumb";
var RangeSliderTrack = forwardRef38(
  function RangeSliderTrack2(props, ref) {
    const { getTrackProps } = useRangeSliderContext();
    const styles3 = useRangeSliderStyles();
    const trackProps = getTrackProps(props, ref);
    return (0, import_jsx_runtime189.jsx)(
      chakra22.div,
      {
        ...trackProps,
        className: cx23("chakra-slider__track", props.className),
        __css: styles3.track,
        "data-testid": "chakra-range-slider-track"
      }
    );
  }
);
RangeSliderTrack.displayName = "RangeSliderTrack";
var RangeSliderFilledTrack = forwardRef38(function RangeSliderFilledTrack2(props, ref) {
  const { getInnerTrackProps } = useRangeSliderContext();
  const styles3 = useRangeSliderStyles();
  const trackProps = getInnerTrackProps(props, ref);
  return (0, import_jsx_runtime189.jsx)(
    chakra22.div,
    {
      ...trackProps,
      className: "chakra-slider__filled-track",
      __css: styles3.filledTrack
    }
  );
});
RangeSliderFilledTrack.displayName = "RangeSliderFilledTrack";
var RangeSliderMark = forwardRef38(
  function RangeSliderMark2(props, ref) {
    const { getMarkerProps } = useRangeSliderContext();
    const markProps = getMarkerProps(props, ref);
    return (0, import_jsx_runtime189.jsx)(
      chakra22.div,
      {
        ...markProps,
        className: cx23("chakra-slider__marker", props.className)
      }
    );
  }
);
RangeSliderMark.displayName = "RangeSliderMark";

// node_modules/@chakra-ui/slider/dist/chunk-N22PRFAW.mjs
init_shim();

// node_modules/@chakra-ui/slider/dist/chunk-RO527DKG.mjs
init_shim();
var import_react405 = __toESM(require_react(), 1);
function useSlider(props) {
  var _a40;
  const {
    min = 0,
    max = 100,
    onChange,
    value: valueProp,
    defaultValue,
    isReversed: isReversedProp,
    direction: direction3 = "ltr",
    orientation = "horizontal",
    id: idProp,
    isDisabled: isDisabled26,
    isReadOnly,
    onChangeStart: onChangeStartProp,
    onChangeEnd: onChangeEndProp,
    step = 1,
    getAriaValueText: getAriaValueTextProp,
    "aria-valuetext": ariaValueText,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    name,
    focusThumbOnChange = true,
    ...htmlProps
  } = props;
  const onChangeStart = useCallbackRef(onChangeStartProp);
  const onChangeEnd = useCallbackRef(onChangeEndProp);
  const getAriaValueText = useCallbackRef(getAriaValueTextProp);
  const isReversed = getIsReversed({
    isReversed: isReversedProp,
    direction: direction3,
    orientation
  });
  const [computedValue, setValue] = useControllableState({
    value: valueProp,
    defaultValue: defaultValue != null ? defaultValue : getDefaultValue(min, max),
    onChange
  });
  const [isDragging, setDragging] = (0, import_react405.useState)(false);
  const [isFocused, setFocused] = (0, import_react405.useState)(false);
  const isInteractive = !(isDisabled26 || isReadOnly);
  const tenSteps = (max - min) / 10;
  const oneStep = step || (max - min) / 100;
  const value = clampValue10(computedValue, min, max);
  const reversedValue = max - value + min;
  const trackValue = isReversed ? reversedValue : value;
  const thumbPercent = valueToPercent10(trackValue, min, max);
  const isVertical = orientation === "vertical";
  const stateRef = useLatestRef2({
    min,
    max,
    step,
    isDisabled: isDisabled26,
    value,
    isInteractive,
    isReversed,
    isVertical,
    eventSource: null,
    focusThumbOnChange,
    orientation
  });
  const trackRef = (0, import_react405.useRef)(null);
  const thumbRef = (0, import_react405.useRef)(null);
  const rootRef = (0, import_react405.useRef)(null);
  const reactId = (0, import_react405.useId)();
  const uuid = idProp != null ? idProp : reactId;
  const [thumbId, trackId] = [`slider-thumb-${uuid}`, `slider-track-${uuid}`];
  const getValueFromPointer = (0, import_react405.useCallback)(
    (event) => {
      var _a210, _b8;
      if (!trackRef.current)
        return;
      const state22 = stateRef.current;
      state22.eventSource = "pointer";
      const trackRect = trackRef.current.getBoundingClientRect();
      const { clientX, clientY } = (_b8 = (_a210 = event.touches) == null ? void 0 : _a210[0]) != null ? _b8 : event;
      const diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;
      const length = isVertical ? trackRect.height : trackRect.width;
      let percent2 = diff / length;
      if (isReversed) {
        percent2 = 1 - percent2;
      }
      let nextValue = percentToValue10(percent2, state22.min, state22.max);
      if (state22.step) {
        nextValue = parseFloat(
          roundValueToStep10(nextValue, state22.min, state22.step)
        );
      }
      nextValue = clampValue10(nextValue, state22.min, state22.max);
      return nextValue;
    },
    [isVertical, isReversed, stateRef]
  );
  const constrain = (0, import_react405.useCallback)(
    (value2) => {
      const state22 = stateRef.current;
      if (!state22.isInteractive)
        return;
      value2 = parseFloat(roundValueToStep10(value2, state22.min, oneStep));
      value2 = clampValue10(value2, state22.min, state22.max);
      setValue(value2);
    },
    [oneStep, setValue, stateRef]
  );
  const actions = (0, import_react405.useMemo)(
    () => ({
      stepUp(step2 = oneStep) {
        const next = isReversed ? value - step2 : value + step2;
        constrain(next);
      },
      stepDown(step2 = oneStep) {
        const next = isReversed ? value + step2 : value - step2;
        constrain(next);
      },
      reset() {
        constrain(defaultValue || 0);
      },
      stepTo(value2) {
        constrain(value2);
      }
    }),
    [constrain, isReversed, value, oneStep, defaultValue]
  );
  const onKeyDown = (0, import_react405.useCallback)(
    (event) => {
      const state22 = stateRef.current;
      const keyMap = {
        ArrowRight: () => actions.stepUp(),
        ArrowUp: () => actions.stepUp(),
        ArrowLeft: () => actions.stepDown(),
        ArrowDown: () => actions.stepDown(),
        PageUp: () => actions.stepUp(tenSteps),
        PageDown: () => actions.stepDown(tenSteps),
        Home: () => constrain(state22.min),
        End: () => constrain(state22.max)
      };
      const action = keyMap[event.key];
      if (action) {
        event.preventDefault();
        event.stopPropagation();
        action(event);
        state22.eventSource = "keyboard";
      }
    },
    [actions, constrain, tenSteps, stateRef]
  );
  const valueText = (_a40 = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _a40 : ariaValueText;
  const thumbSize = useSize(thumbRef);
  const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } = (0, import_react405.useMemo)(() => {
    const state22 = stateRef.current;
    const thumbRect = thumbSize != null ? thumbSize : { width: 0, height: 0 };
    return getStyles({
      isReversed,
      orientation: state22.orientation,
      thumbRects: [thumbRect],
      thumbPercents: [thumbPercent]
    });
  }, [isReversed, thumbSize, thumbPercent, stateRef]);
  const focusThumb = (0, import_react405.useCallback)(() => {
    const state22 = stateRef.current;
    if (state22.focusThumbOnChange) {
      setTimeout(() => {
        var _a210;
        return (_a210 = thumbRef.current) == null ? void 0 : _a210.focus();
      });
    }
  }, [stateRef]);
  useUpdateEffect(() => {
    const state22 = stateRef.current;
    focusThumb();
    if (state22.eventSource === "keyboard") {
      onChangeEnd == null ? void 0 : onChangeEnd(state22.value);
    }
  }, [value, onChangeEnd]);
  function setValueFromPointer(event) {
    const nextValue = getValueFromPointer(event);
    if (nextValue != null && nextValue !== stateRef.current.value) {
      setValue(nextValue);
    }
  }
  usePanEvent(rootRef, {
    onPanSessionStart(event) {
      const state22 = stateRef.current;
      if (!state22.isInteractive)
        return;
      setDragging(true);
      focusThumb();
      setValueFromPointer(event);
      onChangeStart == null ? void 0 : onChangeStart(state22.value);
    },
    onPanSessionEnd() {
      const state22 = stateRef.current;
      if (!state22.isInteractive)
        return;
      setDragging(false);
      onChangeEnd == null ? void 0 : onChangeEnd(state22.value);
    },
    onPan(event) {
      const state22 = stateRef.current;
      if (!state22.isInteractive)
        return;
      setValueFromPointer(event);
    }
  });
  const getRootProps = (0, import_react405.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ...htmlProps,
        ref: mergeRefs4(ref, rootRef),
        tabIndex: -1,
        "aria-disabled": ariaAttr23(isDisabled26),
        "data-focused": dataAttr23(isFocused),
        style: {
          ...props2.style,
          ...rootStyle
        }
      };
    },
    [htmlProps, isDisabled26, isFocused, rootStyle]
  );
  const getTrackProps = (0, import_react405.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref: mergeRefs4(ref, trackRef),
        id: trackId,
        "data-disabled": dataAttr23(isDisabled26),
        style: {
          ...props2.style,
          ...trackStyle
        }
      };
    },
    [isDisabled26, trackId, trackStyle]
  );
  const getInnerTrackProps = (0, import_react405.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref,
        style: {
          ...props2.style,
          ...innerTrackStyle
        }
      };
    },
    [innerTrackStyle]
  );
  const getThumbProps = (0, import_react405.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref: mergeRefs4(ref, thumbRef),
        role: "slider",
        tabIndex: isInteractive ? 0 : void 0,
        id: thumbId,
        "data-active": dataAttr23(isDragging),
        "aria-valuetext": valueText,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": value,
        "aria-orientation": orientation,
        "aria-disabled": ariaAttr23(isDisabled26),
        "aria-readonly": ariaAttr23(isReadOnly),
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabel ? void 0 : ariaLabelledBy,
        style: {
          ...props2.style,
          ...getThumbStyle(0)
        },
        onKeyDown: callAllHandlers23(props2.onKeyDown, onKeyDown),
        onFocus: callAllHandlers23(props2.onFocus, () => setFocused(true)),
        onBlur: callAllHandlers23(props2.onBlur, () => setFocused(false))
      };
    },
    [
      isInteractive,
      thumbId,
      isDragging,
      valueText,
      min,
      max,
      value,
      orientation,
      isDisabled26,
      isReadOnly,
      ariaLabel,
      ariaLabelledBy,
      getThumbStyle,
      onKeyDown
    ]
  );
  const getMarkerProps = (0, import_react405.useCallback)(
    (props2, ref = null) => {
      const isInRange = !(props2.value < min || props2.value > max);
      const isHighlighted = value >= props2.value;
      const markerPercent = valueToPercent10(props2.value, min, max);
      const markerStyle = {
        position: "absolute",
        pointerEvents: "none",
        ...orient4({
          orientation,
          vertical: {
            bottom: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`
          },
          horizontal: {
            left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`
          }
        })
      };
      return {
        ...props2,
        ref,
        role: "presentation",
        "aria-hidden": true,
        "data-disabled": dataAttr23(isDisabled26),
        "data-invalid": dataAttr23(!isInRange),
        "data-highlighted": dataAttr23(isHighlighted),
        style: {
          ...props2.style,
          ...markerStyle
        }
      };
    },
    [isDisabled26, isReversed, max, min, orientation, value]
  );
  const getInputProps = (0, import_react405.useCallback)(
    (props2 = {}, ref = null) => {
      return {
        ...props2,
        ref,
        type: "hidden",
        value,
        name
      };
    },
    [name, value]
  );
  const state2 = { value, isFocused, isDragging };
  return {
    state: state2,
    actions,
    getRootProps,
    getTrackProps,
    getInnerTrackProps,
    getThumbProps,
    getMarkerProps,
    getInputProps
  };
}
function orient4(options) {
  const { orientation, vertical, horizontal } = options;
  return orientation === "vertical" ? vertical : horizontal;
}
function getDefaultValue(min, max) {
  return max < min ? min : min + (max - min) / 2;
}

// node_modules/@chakra-ui/slider/dist/chunk-N22PRFAW.mjs
var import_jsx_runtime190 = __toESM(require_jsx_runtime(), 1);
var [SliderProvider, useSliderContext] = createContext({
  name: "SliderContext",
  hookName: "useSliderContext",
  providerName: "<Slider />"
});
var [SliderStylesProvider, useSliderStyles] = createContext({
  name: `SliderStylesContext`,
  hookName: `useSliderStyles`,
  providerName: "<Slider />"
});
var Slider = forwardRef38((props, ref) => {
  const sliderProps = {
    orientation: "horizontal",
    ...props
  };
  const styles3 = useMultiStyleConfig22("Slider", sliderProps);
  const ownProps = omitThemingProps(sliderProps);
  const { direction: direction3 } = useTheme22();
  ownProps.direction = direction3;
  const { getInputProps, getRootProps, ...context } = useSlider(ownProps);
  const rootProps = getRootProps();
  const inputProps = getInputProps({}, ref);
  return (0, import_jsx_runtime190.jsx)(SliderProvider, { value: context, children: (0, import_jsx_runtime190.jsx)(SliderStylesProvider, { value: styles3, children: (0, import_jsx_runtime190.jsxs)(
    chakra22.div,
    {
      ...rootProps,
      className: cx23("chakra-slider", sliderProps.className),
      __css: styles3.container,
      children: [
        sliderProps.children,
        (0, import_jsx_runtime190.jsx)("input", { ...inputProps })
      ]
    }
  ) }) });
});
Slider.displayName = "Slider";
var SliderThumb = forwardRef38((props, ref) => {
  const { getThumbProps } = useSliderContext();
  const styles3 = useSliderStyles();
  const thumbProps = getThumbProps(props, ref);
  return (0, import_jsx_runtime190.jsx)(
    chakra22.div,
    {
      ...thumbProps,
      className: cx23("chakra-slider__thumb", props.className),
      __css: styles3.thumb
    }
  );
});
SliderThumb.displayName = "SliderThumb";
var SliderTrack = forwardRef38((props, ref) => {
  const { getTrackProps } = useSliderContext();
  const styles3 = useSliderStyles();
  const trackProps = getTrackProps(props, ref);
  return (0, import_jsx_runtime190.jsx)(
    chakra22.div,
    {
      ...trackProps,
      className: cx23("chakra-slider__track", props.className),
      __css: styles3.track
    }
  );
});
SliderTrack.displayName = "SliderTrack";
var SliderFilledTrack = forwardRef38(
  (props, ref) => {
    const { getInnerTrackProps } = useSliderContext();
    const styles3 = useSliderStyles();
    const trackProps = getInnerTrackProps(props, ref);
    return (0, import_jsx_runtime190.jsx)(
      chakra22.div,
      {
        ...trackProps,
        className: cx23("chakra-slider__filled-track", props.className),
        __css: styles3.filledTrack
      }
    );
  }
);
SliderFilledTrack.displayName = "SliderFilledTrack";
var SliderMark = forwardRef38((props, ref) => {
  const { getMarkerProps } = useSliderContext();
  const styles3 = useSliderStyles();
  const markProps = getMarkerProps(props, ref);
  return (0, import_jsx_runtime190.jsx)(
    chakra22.div,
    {
      ...markProps,
      className: cx23("chakra-slider__marker", props.className),
      __css: styles3.mark
    }
  );
});
SliderMark.displayName = "SliderMark";

// node_modules/@chakra-ui/stat/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/stat/dist/chunk-P7HN4X7G.mjs
init_shim();

// node_modules/@chakra-ui/stat/dist/chunk-RQ72AXHY.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react407 = __toESM(require_react(), 1);
function useTheme23() {
  const theme3 = (0, import_react407.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra23() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme23();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM23() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser25 = canUseDOM23();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash28 = __toESM(require_lodash(), 1);
function omit27(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get24(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize24 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet24 = memoize24(get24);
function objectFilter23(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined23 = (object2) => objectFilter23(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction26(value) {
  return typeof value === "function";
}
var __DEV__23 = import_process.default.env.NODE_ENV !== "production";
var __TEST__23 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn26(valueOrFn, ...args) {
  return isFunction26(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once23(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn24 = once23((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__23) {
    console.warn(message);
  }
});
var error23 = once23((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__23) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger23 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger23 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep24 = 1 / 60 * 1e3;
var getCurrentTime24 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame24 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime24()), defaultTimestep24);

// node_modules/@chakra-ui/stat/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep25(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/stat/node_modules/framesync/dist/es/index.mjs
var maxElapsed25 = 40;
var useDefaultElapsed25 = true;
var runNextFrame25 = false;
var isProcessing24 = false;
var frame25 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder25 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps25 = stepsOrder25.reduce((acc, key) => {
  acc[key] = createRenderStep25(() => runNextFrame25 = true);
  return acc;
}, {});
var sync25 = stepsOrder25.reduce((acc, key) => {
  const step = steps25[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame25)
      startLoop25();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync25 = stepsOrder25.reduce((acc, key) => {
  acc[key] = steps25[key].cancel;
  return acc;
}, {});
var flushSync24 = stepsOrder25.reduce((acc, key) => {
  acc[key] = () => steps25[key].process(frame25);
  return acc;
}, {});
var processStep25 = (stepId) => steps25[stepId].process(frame25);
var processFrame25 = (timestamp) => {
  runNextFrame25 = false;
  frame25.delta = useDefaultElapsed25 ? defaultTimestep24 : Math.max(Math.min(timestamp - frame25.timestamp, maxElapsed25), 1);
  frame25.timestamp = timestamp;
  isProcessing24 = true;
  stepsOrder25.forEach(processStep25);
  isProcessing24 = false;
  if (runNextFrame25) {
    useDefaultElapsed25 = false;
    onNextFrame24(processFrame25);
  }
};
var startLoop25 = () => {
  runNextFrame25 = true;
  useDefaultElapsed25 = true;
  if (!isProcessing24)
    onNextFrame24(processFrame25);
};

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints26 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList24 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector24 = focusableElList24.join();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react408 = __toESM(require_react(), 1);
var import_react_fast_compare23 = __toESM(require_react_fast_compare23(), 1);
function useStyleConfigImpl21(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra23();
  const themeStyleConfig = themeKey ? memoizedGet24(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash28.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined23(omit27(rest, ["children"]))
  );
  const stylesRef = (0, import_react408.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare23.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useMultiStyleConfig23(themeKey, props = {}) {
  return useStyleConfigImpl21(themeKey, props);
}

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames23 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps23 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp23(prop) {
  return validHTMLProps23.has(prop) || !allPropNames23.has(prop);
}

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react409 = __toESM(require_react(), 1);
var _a38;
var emotion_styled23 = (_a38 = emotion_styled_browser_esm_default.default) != null ? _a38 : emotion_styled_browser_esm_default;
var toCSSObject23 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter23(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn26(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined23(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled23(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp23;
  }
  const styleObject = toCSSObject23({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled23(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react409.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react409.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory23() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled23, {
    apply(target, thisArg, argArray) {
      return styled23(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled23(element));
      }
      return cache.get(element);
    }
  });
}
var chakra23 = factory23();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react410 = __toESM(require_react(), 1);
function forwardRef39(component) {
  return (0, import_react410.forwardRef)(component);
}

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react411 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react412 = __toESM(require_react(), 1);
function createContext36(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react412.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react412.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react414 = __toESM(require_react(), 1);
var import_jsx_runtime191 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider23, useStyles23] = createContext36({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/stat/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/stat/dist/chunk-RQ72AXHY.mjs
var import_jsx_runtime192 = __toESM(require_jsx_runtime(), 1);
var [StatStylesProvider, useStatStyles] = createContext({
  name: `StatStylesContext`,
  errorMessage: `useStatStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Stat />" `
});
var Stat = forwardRef39(function Stat2(props, ref) {
  const styles3 = useMultiStyleConfig23("Stat", props);
  const statStyles = {
    position: "relative",
    flex: "1 1 0%",
    ...styles3.container
  };
  const { className, children, ...rest } = omitThemingProps(props);
  return (0, import_jsx_runtime192.jsx)(StatStylesProvider, { value: styles3, children: (0, import_jsx_runtime192.jsx)(
    chakra23.div,
    {
      ref,
      ...rest,
      className: cx("chakra-stat", className),
      __css: statStyles,
      children: (0, import_jsx_runtime192.jsx)("dl", { children })
    }
  ) });
});
Stat.displayName = "Stat";

// node_modules/@chakra-ui/stat/dist/chunk-P7HN4X7G.mjs
var import_jsx_runtime193 = __toESM(require_jsx_runtime(), 1);
var StatDownArrow = (props) => (0, import_jsx_runtime193.jsx)(Icon, { color: "red.400", ...props, children: (0, import_jsx_runtime193.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
  }
) });
StatDownArrow.displayName = "StatDownArrow";
function StatUpArrow(props) {
  return (0, import_jsx_runtime193.jsx)(Icon, { color: "green.400", ...props, children: (0, import_jsx_runtime193.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
    }
  ) });
}
StatUpArrow.displayName = "StatUpArrow";
function StatArrow(props) {
  const { type, "aria-label": ariaLabel, ...rest } = props;
  const styles3 = useStatStyles();
  const BaseIcon = type === "increase" ? StatUpArrow : StatDownArrow;
  const defaultAriaLabel = type === "increase" ? "increased by" : "decreased by";
  const label = ariaLabel || defaultAriaLabel;
  return (0, import_jsx_runtime193.jsxs)(import_jsx_runtime193.Fragment, { children: [
    (0, import_jsx_runtime193.jsx)(chakra23.span, { srOnly: true, children: label }),
    (0, import_jsx_runtime193.jsx)(BaseIcon, { "aria-hidden": true, ...rest, __css: styles3.icon })
  ] });
}
StatArrow.displayName = "StatArrow";

// node_modules/@chakra-ui/stat/dist/chunk-CU33DNCY.mjs
init_shim();
var import_jsx_runtime194 = __toESM(require_jsx_runtime(), 1);
var StatGroup = forwardRef39(function StatGroup2(props, ref) {
  return (0, import_jsx_runtime194.jsx)(
    chakra23.div,
    {
      ...props,
      ref,
      role: "group",
      className: cx("chakra-stat__group", props.className),
      __css: {
        display: "flex",
        flexWrap: "wrap",
        justifyContent: "space-around",
        alignItems: "flex-start"
      }
    }
  );
});
StatGroup.displayName = "StatGroup";

// node_modules/@chakra-ui/stat/dist/chunk-2THWWZP3.mjs
init_shim();
var import_jsx_runtime195 = __toESM(require_jsx_runtime(), 1);
var StatHelpText = forwardRef39(
  function StatHelpText2(props, ref) {
    const styles3 = useStatStyles();
    return (0, import_jsx_runtime195.jsx)(
      chakra23.dd,
      {
        ref,
        ...props,
        className: cx("chakra-stat__help-text", props.className),
        __css: styles3.helpText
      }
    );
  }
);
StatHelpText.displayName = "StatHelpText";

// node_modules/@chakra-ui/stat/dist/chunk-S22BHKCQ.mjs
init_shim();
var import_jsx_runtime196 = __toESM(require_jsx_runtime(), 1);
var StatLabel = forwardRef39(function StatLabel2(props, ref) {
  const styles3 = useStatStyles();
  return (0, import_jsx_runtime196.jsx)(
    chakra23.dt,
    {
      ref,
      ...props,
      className: cx("chakra-stat__label", props.className),
      __css: styles3.label
    }
  );
});
StatLabel.displayName = "StatLabel";

// node_modules/@chakra-ui/stat/dist/chunk-7LNWOFRF.mjs
init_shim();
var import_jsx_runtime197 = __toESM(require_jsx_runtime(), 1);
var StatNumber = forwardRef39(function StatNumber2(props, ref) {
  const styles3 = useStatStyles();
  return (0, import_jsx_runtime197.jsx)(
    chakra23.dd,
    {
      ref,
      ...props,
      className: cx("chakra-stat__number", props.className),
      __css: {
        ...styles3.number,
        fontFeatureSettings: "pnum",
        fontVariantNumeric: "proportional-nums"
      }
    }
  );
});
StatNumber.displayName = "StatNumber";

// node_modules/@chakra-ui/switch/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/switch/dist/chunk-B22GDMVL.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/chunk-Y65KPFRX.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/chunk-6XFPBTDN.mjs
init_shim();
var [CheckboxGroupProvider2, useCheckboxGroupContext2] = createContext({
  name: "CheckboxGroupContext",
  strict: false
});

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/chunk-5F7ST2TT.mjs
init_shim();
var import_react416 = __toESM(require_react(), 1);
function isInputEvent26(value) {
  return value && isObject(value) && isObject(value.target);
}
function useCheckboxGroup2(props = {}) {
  const {
    defaultValue,
    value: valueProp,
    onChange,
    isDisabled: isDisabled26,
    isNative
  } = props;
  const onChangeProp = useCallbackRef(onChange);
  const [value, setValue] = useControllableState({
    value: valueProp,
    defaultValue: defaultValue || [],
    onChange: onChangeProp
  });
  const handleChange = (0, import_react416.useCallback)(
    (eventOrValue) => {
      if (!value)
        return;
      const isChecked = isInputEvent26(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);
      const selectedValue = isInputEvent26(eventOrValue) ? eventOrValue.target.value : eventOrValue;
      const nextValue = isChecked ? [...value, selectedValue] : value.filter((v) => String(v) !== String(selectedValue));
      setValue(nextValue);
    },
    [setValue, value]
  );
  const getCheckboxProps = (0, import_react416.useCallback)(
    (props2 = {}) => {
      const checkedKey = isNative ? "checked" : "isChecked";
      return {
        ...props2,
        [checkedKey]: value.some((val) => String(props2.value) === String(val)),
        onChange: handleChange
      };
    },
    [handleChange, isNative, value]
  );
  return {
    value,
    isDisabled: isDisabled26,
    onChange: handleChange,
    setValue,
    getCheckboxProps
  };
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/chunk-Y65KPFRX.mjs
var import_react417 = __toESM(require_react(), 1);
var import_jsx_runtime198 = __toESM(require_jsx_runtime(), 1);
function CheckboxGroup2(props) {
  const { colorScheme, size: size3, variant, children, isDisabled: isDisabled26 } = props;
  const { value, onChange } = useCheckboxGroup2(props);
  const group = (0, import_react417.useMemo)(
    () => ({
      size: size3,
      onChange,
      colorScheme,
      value,
      variant,
      isDisabled: isDisabled26
    }),
    [size3, onChange, colorScheme, value, variant, isDisabled26]
  );
  return (0, import_jsx_runtime198.jsx)(CheckboxGroupProvider2, { value: group, children });
}
CheckboxGroup2.displayName = "CheckboxGroup";

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/chunk-RVJOM3YK.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/chunk-DFEUIRKX.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
init_shim();
var import_react419 = __toESM(require_react(), 1);
function useTheme24() {
  const theme3 = (0, import_react419.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
function useChakra24() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme24();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-DGFLLHTM.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
init_shim();
function canUseDOM24() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser26 = canUseDOM24();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-DVFODTG7.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
init_shim();
var import_lodash29 = __toESM(require_lodash(), 1);
function omit28(object2, keys2) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object2[key];
  });
  return result;
}
function get25(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize25 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet25 = memoize25(get25);
function objectFilter24(object2, fn) {
  const result = {};
  Object.keys(object2).forEach((key) => {
    const value = object2[key];
    const shouldPass = fn(value, key, object2);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined24 = (object2) => objectFilter24(object2, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
init_shim();
function isFunction27(value) {
  return typeof value === "function";
}
var __DEV__24 = import_process.default.env.NODE_ENV !== "production";
var __TEST__24 = import_process.default.env.NODE_ENV === "test";

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-XHETS734.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
init_shim();
function runIfFn27(valueOrFn, ...args) {
  return isFunction27(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once24(fn) {
  let result;
  return function func2(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn25 = once24((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__24) {
    console.warn(message);
  }
});
var error24 = once24((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__24) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger24 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger24 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-SV3JYFGC.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-LCE7F24A.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-NHABU752.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/framesync/dist/es/index.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/framesync/dist/es/on-next-frame.mjs
init_shim();
var defaultTimestep25 = 1 / 60 * 1e3;
var getCurrentTime25 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame25 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime25()), defaultTimestep25);

// node_modules/@chakra-ui/switch/node_modules/framesync/dist/es/create-render-step.mjs
init_shim();
function createRenderStep26(runNextFrame27) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing26 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing26;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing26)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index = toRunNextFrame.indexOf(callback);
      if (index !== -1)
        toRunNextFrame.splice(index, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData2) => {
      if (isProcessing26) {
        flushNextFrame = true;
        return;
      }
      isProcessing26 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame27();
          }
        }
      }
      isProcessing26 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/@chakra-ui/switch/node_modules/framesync/dist/es/index.mjs
var maxElapsed26 = 40;
var useDefaultElapsed26 = true;
var runNextFrame26 = false;
var isProcessing25 = false;
var frame26 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder26 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps26 = stepsOrder26.reduce((acc, key) => {
  acc[key] = createRenderStep26(() => runNextFrame26 = true);
  return acc;
}, {});
var sync26 = stepsOrder26.reduce((acc, key) => {
  const step = steps26[key];
  acc[key] = (process, keepAlive = false, immediate = false) => {
    if (!runNextFrame26)
      startLoop26();
    return step.schedule(process, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync26 = stepsOrder26.reduce((acc, key) => {
  acc[key] = steps26[key].cancel;
  return acc;
}, {});
var flushSync25 = stepsOrder26.reduce((acc, key) => {
  acc[key] = () => steps26[key].process(frame26);
  return acc;
}, {});
var processStep26 = (stepId) => steps26[stepId].process(frame26);
var processFrame26 = (timestamp) => {
  runNextFrame26 = false;
  frame26.delta = useDefaultElapsed26 ? defaultTimestep25 : Math.max(Math.min(timestamp - frame26.timestamp, maxElapsed26), 1);
  frame26.timestamp = timestamp;
  isProcessing25 = true;
  stepsOrder26.forEach(processStep26);
  isProcessing25 = false;
  if (runNextFrame26) {
    useDefaultElapsed26 = false;
    onNextFrame25(processFrame26);
  }
};
var startLoop26 = () => {
  runNextFrame26 = true;
  useDefaultElapsed26 = true;
  if (!isProcessing25)
    onNextFrame25(processFrame26);
};

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-YTAYUX3P.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints27 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-FDX7JCYE.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-P6S57EDQ.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList25 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector25 = focusableElList25.join();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-W5Y7LCVY.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/chunk-QKXRP2IX.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/utils/dist/index.mjs
init_css_box_model_esm();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
var import_react420 = __toESM(require_react(), 1);
var import_react_fast_compare24 = __toESM(require_react_fast_compare24(), 1);
function useStyleConfigImpl22(themeKey, props = {}) {
  var _a40;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra24();
  const themeStyleConfig = themeKey ? memoizedGet25(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash29.default)(
    { theme: theme3, colorMode },
    (_a40 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a40 : {},
    filterUndefined24(omit28(rest, ["children"]))
  );
  const stylesRef = (0, import_react420.useRef)({});
  if (styleConfig) {
    const getStyles2 = resolveStyleConfig(styleConfig);
    const styles3 = getStyles2(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare24.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig24(themeKey, props = {}) {
  return useStyleConfigImpl22(themeKey, props);
}
function useMultiStyleConfig24(themeKey, props = {}) {
  return useStyleConfigImpl22(themeKey, props);
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
init_shim();
var allPropNames24 = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps24 = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp24(prop) {
  return validHTMLProps24.has(prop) || !allPropNames24.has(prop);
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
var import_react421 = __toESM(require_react(), 1);
var _a39;
var emotion_styled24 = (_a39 = emotion_styled_browser_esm_default.default) != null ? _a39 : emotion_styled_browser_esm_default;
var toCSSObject24 = ({ baseStyle: baseStyle84 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps2 = objectFilter24(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn27(baseStyle84, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined24(styleProps2),
    sx
  );
  const computedCSS = css2(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled24(component, options) {
  const { baseStyle: baseStyle84, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp24;
  }
  const styleObject = toCSSObject24({ baseStyle: baseStyle84 });
  const Component2 = emotion_styled24(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react421.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react421.default.createElement(Component2, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
function factory24() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled24, {
    apply(target, thisArg, argArray) {
      return styled24(...argArray);
    },
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled24(element));
      }
      return cache.get(element);
    }
  });
}
var chakra24 = factory24();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
init_shim();
var import_react422 = __toESM(require_react(), 1);
function forwardRef40(component) {
  return (0, import_react422.forwardRef)(component);
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/react-utils/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
init_shim();
var import_react423 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
init_shim();
var import_react424 = __toESM(require_react(), 1);
function createContext37(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react424.createContext)(void 0);
  Context.displayName = name;
  function useContext44() {
    var _a40;
    const context = (0, import_react424.useContext)(Context);
    if (!context && strict) {
      const error25 = new Error(errorMessage);
      error25.name = "ContextError";
      (_a40 = Error.captureStackTrace) == null ? void 0 : _a40.call(Error, error25, useContext44);
      throw error25;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext44,
    Context
  ];
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/react-utils/dist/chunk-WBQAMGXK.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
var import_react426 = __toESM(require_react(), 1);
var import_jsx_runtime199 = __toESM(require_jsx_runtime(), 1);
var [StylesProvider24, useStyles24] = createContext37({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/system/dist/chunk-WBEJV2FA.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/chunk-DFEUIRKX.mjs
var import_jsx_runtime200 = __toESM(require_jsx_runtime(), 1);
function CheckIcon4(props) {
  return (0, import_jsx_runtime200.jsx)(
    chakra24.svg,
    {
      width: "1.2em",
      viewBox: "0 0 12 10",
      style: {
        fill: "none",
        strokeWidth: 2,
        stroke: "currentColor",
        strokeDasharray: 16
      },
      ...props,
      children: (0, import_jsx_runtime200.jsx)("polyline", { points: "1.5 6 4.5 9 10.5 1" })
    }
  );
}
function IndeterminateIcon2(props) {
  return (0, import_jsx_runtime200.jsx)(
    chakra24.svg,
    {
      width: "1.2em",
      viewBox: "0 0 24 24",
      style: { stroke: "currentColor", strokeWidth: 4 },
      ...props,
      children: (0, import_jsx_runtime200.jsx)("line", { x1: "21", x2: "3", y1: "12", y2: "12" })
    }
  );
}
function CheckboxIcon2(props) {
  const { isIndeterminate, isChecked, ...rest } = props;
  const BaseIcon = isIndeterminate ? IndeterminateIcon2 : CheckIcon4;
  return isChecked || isIndeterminate ? (0, import_jsx_runtime200.jsx)(
    chakra24.div,
    {
      style: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        height: "100%"
      },
      children: (0, import_jsx_runtime200.jsx)(BaseIcon, { ...rest })
    }
  ) : null;
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/chunk-H6UVDIE7.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/form-control/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/form-control/dist/chunk-6ZNYZUDD.mjs
init_shim();
var import_react428 = __toESM(require_react(), 1);
var import_jsx_runtime201 = __toESM(require_jsx_runtime(), 1);
var [FormControlStylesProvider6, useFormControlStyles6] = createContext({
  name: `FormControlStylesContext`,
  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
});
var [FormControlProvider6, useFormControlContext6] = createContext({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider6(props) {
  const {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled: isDisabled26,
    isReadOnly,
    ...htmlProps
  } = props;
  const uuid = (0, import_react428.useId)();
  const id4 = idProp || `field-${uuid}`;
  const labelId = `${id4}-label`;
  const feedbackId = `${id4}-feedback`;
  const helpTextId = `${id4}-helptext`;
  const [hasFeedbackText, setHasFeedbackText] = (0, import_react428.useState)(false);
  const [hasHelpText, setHasHelpText] = (0, import_react428.useState)(false);
  const [isFocused, setFocus2] = (0, import_react428.useState)(false);
  const getHelpTextProps = (0, import_react428.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: helpTextId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasHelpText(true);
      })
    }),
    [helpTextId]
  );
  const getLabelProps = (0, import_react428.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled26),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: props2.id !== void 0 ? props2.id : labelId,
      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id4
    }),
    [id4, isDisabled26, isFocused, isInvalid, isReadOnly, labelId]
  );
  const getErrorMessageProps = (0, import_react428.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      id: feedbackId,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    }),
    [feedbackId]
  );
  const getRootProps = (0, import_react428.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ...htmlProps,
      ref: forwardedRef,
      role: "group"
    }),
    [htmlProps]
  );
  const getRequiredIndicatorProps = (0, import_react428.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    }),
    []
  );
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled26,
    isFocused: !!isFocused,
    onFocus: () => setFocus2(true),
    onBlur: () => setFocus2(false),
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id: id4,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl7 = forwardRef40(
  function FormControl26(props, ref) {
    const styles3 = useMultiStyleConfig24("Form", props);
    const ownProps = omitThemingProps(props);
    const {
      getRootProps,
      htmlProps: _,
      ...context
    } = useFormControlProvider6(ownProps);
    const className = cx("chakra-form-control", props.className);
    return (0, import_jsx_runtime201.jsx)(FormControlProvider6, { value: context, children: (0, import_jsx_runtime201.jsx)(FormControlStylesProvider6, { value: styles3, children: (0, import_jsx_runtime201.jsx)(
      chakra24.div,
      {
        ...getRootProps({}, ref),
        className,
        __css: styles3["container"]
      }
    ) }) });
  }
);
FormControl7.displayName = "FormControl";
var FormHelperText7 = forwardRef40(
  function FormHelperText26(props, ref) {
    const field = useFormControlContext6();
    const styles3 = useFormControlStyles6();
    const className = cx("chakra-form__helper-text", props.className);
    return (0, import_jsx_runtime201.jsx)(
      chakra24.div,
      {
        ...field == null ? void 0 : field.getHelpTextProps(props, ref),
        __css: styles3.helperText,
        className
      }
    );
  }
);
FormHelperText7.displayName = "FormHelperText";

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs
var import_jsx_runtime202 = __toESM(require_jsx_runtime(), 1);
var [FormErrorStylesProvider6, useFormErrorStyles6] = createContext({
  name: `FormErrorStylesContext`,
  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormError />" `
});
var FormErrorMessage6 = forwardRef40(
  (props, ref) => {
    const styles3 = useMultiStyleConfig24("FormError", props);
    const ownProps = omitThemingProps(props);
    const field = useFormControlContext6();
    if (!(field == null ? void 0 : field.isInvalid))
      return null;
    return (0, import_jsx_runtime202.jsx)(FormErrorStylesProvider6, { value: styles3, children: (0, import_jsx_runtime202.jsx)(
      chakra24.div,
      {
        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),
        className: cx("chakra-form__error-message", props.className),
        __css: {
          display: "flex",
          alignItems: "center",
          ...styles3.text
        }
      }
    ) });
  }
);
FormErrorMessage6.displayName = "FormErrorMessage";
var FormErrorIcon6 = forwardRef40((props, ref) => {
  const styles3 = useFormErrorStyles6();
  const field = useFormControlContext6();
  if (!(field == null ? void 0 : field.isInvalid))
    return null;
  const _className = cx("chakra-form__error-icon", props.className);
  return (0, import_jsx_runtime202.jsx)(
    Icon,
    {
      ref,
      "aria-hidden": true,
      ...props,
      __css: styles3.icon,
      className: _className,
      children: (0, import_jsx_runtime202.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
        }
      )
    }
  );
});
FormErrorIcon6.displayName = "FormErrorIcon";

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs
init_shim();
var import_jsx_runtime203 = __toESM(require_jsx_runtime(), 1);
var FormLabel7 = forwardRef40(function FormLabel26(passedProps, ref) {
  var _a40;
  const styles3 = useStyleConfig24("FormLabel", passedProps);
  const props = omitThemingProps(passedProps);
  const {
    className,
    children,
    requiredIndicator = (0, import_jsx_runtime203.jsx)(RequiredIndicator7, {}),
    optionalIndicator = null,
    ...rest
  } = props;
  const field = useFormControlContext6();
  const ownProps = (_a40 = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a40 : { ref, ...rest };
  return (0, import_jsx_runtime203.jsxs)(
    chakra24.label,
    {
      ...ownProps,
      className: cx("chakra-form__label", props.className),
      __css: {
        display: "block",
        textAlign: "start",
        ...styles3
      },
      children: [
        children,
        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator
      ]
    }
  );
});
FormLabel7.displayName = "FormLabel";
var RequiredIndicator7 = forwardRef40(
  function RequiredIndicator26(props, ref) {
    const field = useFormControlContext6();
    const styles3 = useFormControlStyles6();
    if (!(field == null ? void 0 : field.isRequired))
      return null;
    const className = cx("chakra-form__required-indicator", props.className);
    return (0, import_jsx_runtime203.jsx)(
      chakra24.span,
      {
        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),
        __css: styles3.requiredIndicator,
        className
      }
    );
  }
);
RequiredIndicator7.displayName = "RequiredIndicator";

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/form-control/dist/chunk-IJBC3YLI.mjs
init_shim();
function useFormControlProps6(props) {
  var _a40, _b8, _c5;
  const field = useFormControlContext6();
  const {
    id: id4,
    disabled,
    readOnly,
    required,
    isRequired,
    isInvalid,
    isReadOnly,
    isDisabled: isDisabled26,
    onFocus: onFocus3,
    onBlur: onBlur3,
    ...rest
  } = props;
  const labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {
    labelIds.push(field.feedbackId);
  }
  if (field == null ? void 0 : field.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return {
    ...rest,
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id4 != null ? id4 : field == null ? void 0 : field.id,
    isDisabled: (_a40 = disabled != null ? disabled : isDisabled26) != null ? _a40 : field == null ? void 0 : field.isDisabled,
    isReadOnly: (_b8 = readOnly != null ? readOnly : isReadOnly) != null ? _b8 : field == null ? void 0 : field.isReadOnly,
    isRequired: (_c5 = required != null ? required : isRequired) != null ? _c5 : field == null ? void 0 : field.isRequired,
    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus3),
    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur3)
  };
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/visually-hidden/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/visually-hidden/dist/chunk-74U3PXFJ.mjs
init_shim();

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/visually-hidden/dist/chunk-RSUMUOHR.mjs
init_shim();
var visuallyHiddenStyle3 = {
  border: "0",
  clip: "rect(0, 0, 0, 0)",
  height: "1px",
  width: "1px",
  margin: "-1px",
  padding: "0",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/visually-hidden/dist/chunk-74U3PXFJ.mjs
var VisuallyHidden2 = chakra24("span", {
  baseStyle: visuallyHiddenStyle3
});
VisuallyHidden2.displayName = "VisuallyHidden";
var VisuallyHiddenInput2 = chakra24("input", {
  baseStyle: visuallyHiddenStyle3
});
VisuallyHiddenInput2.displayName = "VisuallyHiddenInput";

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/chunk-H6UVDIE7.mjs
var import_react429 = __toESM(require_react(), 1);
function omit29(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key of keysToOmit) {
    if (key in clone) {
      delete clone[key];
    }
  }
  return clone;
}
function useCheckbox2(props = {}) {
  const formControlProps = useFormControlProps6(props);
  const {
    isDisabled: isDisabled26,
    isReadOnly,
    isRequired,
    isInvalid,
    id: id4,
    onBlur: onBlur3,
    onFocus: onFocus3,
    "aria-describedby": ariaDescribedBy
  } = formControlProps;
  const {
    defaultChecked,
    isChecked: checkedProp,
    isFocusable: isFocusable26,
    onChange,
    isIndeterminate,
    name,
    value,
    tabIndex = void 0,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-invalid": ariaInvalid,
    ...rest
  } = props;
  const htmlProps = omit29(rest, [
    "isDisabled",
    "isReadOnly",
    "isRequired",
    "isInvalid",
    "id",
    "onBlur",
    "onFocus",
    "aria-describedby"
  ]);
  const onChangeProp = useCallbackRef(onChange);
  const onBlurProp = useCallbackRef(onBlur3);
  const onFocusProp = useCallbackRef(onFocus3);
  const [isFocusVisible2, setIsFocusVisible] = (0, import_react429.useState)(false);
  const [isFocused, setFocused] = (0, import_react429.useState)(false);
  const [isHovered, setHovered] = (0, import_react429.useState)(false);
  const [isActive, setActive] = (0, import_react429.useState)(false);
  (0, import_react429.useEffect)(() => {
    return trackFocusVisible(setIsFocusVisible);
  }, []);
  const inputRef = (0, import_react429.useRef)(null);
  const [rootIsLabelElement, setRootIsLabelElement] = (0, import_react429.useState)(true);
  const [checkedState, setCheckedState] = (0, import_react429.useState)(!!defaultChecked);
  const isControlled = checkedProp !== void 0;
  const isChecked = isControlled ? checkedProp : checkedState;
  const handleChange = (0, import_react429.useCallback)(
    (event) => {
      if (isReadOnly || isDisabled26) {
        event.preventDefault();
        return;
      }
      if (!isControlled) {
        if (isChecked) {
          setCheckedState(event.target.checked);
        } else {
          setCheckedState(isIndeterminate ? true : event.target.checked);
        }
      }
      onChangeProp == null ? void 0 : onChangeProp(event);
    },
    [
      isReadOnly,
      isDisabled26,
      isChecked,
      isControlled,
      isIndeterminate,
      onChangeProp
    ]
  );
  useSafeLayoutEffect(() => {
    if (inputRef.current) {
      inputRef.current.indeterminate = Boolean(isIndeterminate);
    }
  }, [isIndeterminate]);
  useUpdateEffect(() => {
    if (isDisabled26) {
      setFocused(false);
    }
  }, [isDisabled26, setFocused]);
  useSafeLayoutEffect(() => {
    const el = inputRef.current;
    if (!(el == null ? void 0 : el.form))
      return;
    el.form.onreset = () => {
      setCheckedState(!!defaultChecked);
    };
  }, []);
  const trulyDisabled = isDisabled26 && !isFocusable26;
  const onKeyDown = (0, import_react429.useCallback)(
    (event) => {
      if (event.key === " ") {
        setActive(true);
      }
    },
    [setActive]
  );
  const onKeyUp = (0, import_react429.useCallback)(
    (event) => {
      if (event.key === " ") {
        setActive(false);
      }
    },
    [setActive]
  );
  useSafeLayoutEffect(() => {
    if (!inputRef.current)
      return;
    const notInSync = inputRef.current.checked !== isChecked;
    if (notInSync) {
      setCheckedState(inputRef.current.checked);
    }
  }, [inputRef.current]);
  const getCheckboxProps = (0, import_react429.useCallback)(
    (props2 = {}, forwardedRef = null) => {
      const onPressDown = (event) => {
        if (isFocused) {
          event.preventDefault();
        }
        setActive(true);
      };
      return {
        ...props2,
        ref: forwardedRef,
        "data-active": dataAttr(isActive),
        "data-hover": dataAttr(isHovered),
        "data-checked": dataAttr(isChecked),
        "data-focus": dataAttr(isFocused),
        "data-focus-visible": dataAttr(isFocused && isFocusVisible2),
        "data-indeterminate": dataAttr(isIndeterminate),
        "data-disabled": dataAttr(isDisabled26),
        "data-invalid": dataAttr(isInvalid),
        "data-readonly": dataAttr(isReadOnly),
        "aria-hidden": true,
        onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),
        onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),
        onMouseEnter: callAllHandlers(
          props2.onMouseEnter,
          () => setHovered(true)
        ),
        onMouseLeave: callAllHandlers(
          props2.onMouseLeave,
          () => setHovered(false)
        )
      };
    },
    [
      isActive,
      isChecked,
      isDisabled26,
      isFocused,
      isFocusVisible2,
      isHovered,
      isIndeterminate,
      isInvalid,
      isReadOnly
    ]
  );
  const getRootProps = (0, import_react429.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...htmlProps,
      ...props2,
      ref: mergeRefs4(forwardedRef, (node2) => {
        if (!node2)
          return;
        setRootIsLabelElement(node2.tagName === "LABEL");
      }),
      onClick: callAllHandlers(props2.onClick, () => {
        var _a40;
        if (!rootIsLabelElement) {
          (_a40 = inputRef.current) == null ? void 0 : _a40.click();
          requestAnimationFrame(() => {
            var _a210;
            (_a210 = inputRef.current) == null ? void 0 : _a210.focus();
          });
        }
      }),
      "data-disabled": dataAttr(isDisabled26),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    }),
    [htmlProps, isDisabled26, isChecked, isInvalid, rootIsLabelElement]
  );
  const getInputProps = (0, import_react429.useCallback)(
    (props2 = {}, forwardedRef = null) => {
      return {
        ...props2,
        ref: mergeRefs4(inputRef, forwardedRef),
        type: "checkbox",
        name,
        value,
        id: id4,
        tabIndex,
        onChange: callAllHandlers(props2.onChange, handleChange),
        onBlur: callAllHandlers(
          props2.onBlur,
          onBlurProp,
          () => setFocused(false)
        ),
        onFocus: callAllHandlers(
          props2.onFocus,
          onFocusProp,
          () => setFocused(true)
        ),
        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
        onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
        required: isRequired,
        checked: isChecked,
        disabled: trulyDisabled,
        readOnly: isReadOnly,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        "aria-invalid": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,
        "aria-describedby": ariaDescribedBy,
        "aria-disabled": isDisabled26,
        style: visuallyHiddenStyle3
      };
    },
    [
      name,
      value,
      id4,
      handleChange,
      onBlurProp,
      onFocusProp,
      onKeyDown,
      onKeyUp,
      isRequired,
      isChecked,
      trulyDisabled,
      isReadOnly,
      ariaLabel,
      ariaLabelledBy,
      ariaInvalid,
      isInvalid,
      ariaDescribedBy,
      isDisabled26,
      tabIndex
    ]
  );
  const getLabelProps = (0, import_react429.useCallback)(
    (props2 = {}, forwardedRef = null) => ({
      ...props2,
      ref: forwardedRef,
      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent3),
      "data-disabled": dataAttr(isDisabled26),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    }),
    [isChecked, isDisabled26, isInvalid]
  );
  const state2 = {
    isInvalid,
    isFocused,
    isChecked,
    isActive,
    isHovered,
    isIndeterminate,
    isDisabled: isDisabled26,
    isReadOnly,
    isRequired
  };
  return {
    state: state2,
    getRootProps,
    getCheckboxProps,
    getInputProps,
    getLabelProps,
    htmlProps
  };
}
function stopEvent3(event) {
  event.preventDefault();
  event.stopPropagation();
}

// node_modules/@chakra-ui/switch/node_modules/@chakra-ui/checkbox/dist/chunk-RVJOM3YK.mjs
var import_react430 = __toESM(require_react(), 1);
var import_jsx_runtime204 = __toESM(require_jsx_runtime(), 1);
var controlStyles2 = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  verticalAlign: "top",
  userSelect: "none",
  flexShrink: 0
};
var rootStyles2 = {
  cursor: "pointer",
  display: "inline-flex",
  alignItems: "center",
  verticalAlign: "top",
  position: "relative"
};
var checkAnim2 = keyframes({
  from: {
    opacity: 0,
    strokeDashoffset: 16,
    transform: "scale(0.95)"
  },
  to: {
    opacity: 1,
    strokeDashoffset: 0,
    transform: "scale(1)"
  }
});
var indeterminateOpacityAnim2 = keyframes({
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
});
var indeterminateScaleAnim2 = keyframes({
  from: {
    transform: "scaleX(0.65)"
  },
  to: {
    transform: "scaleX(1)"
  }
});
var Checkbox3 = forwardRef40(function Checkbox22(props, ref) {
  const group = useCheckboxGroupContext2();
  const mergedProps = { ...group, ...props };
  const styles3 = useMultiStyleConfig24("Checkbox", mergedProps);
  const ownProps = omitThemingProps(props);
  const {
    spacing: spacing3 = "0.5rem",
    className,
    children,
    iconColor,
    iconSize,
    icon = (0, import_jsx_runtime204.jsx)(CheckboxIcon2, {}),
    isChecked: isCheckedProp,
    isDisabled: isDisabled26 = group == null ? void 0 : group.isDisabled,
    onChange: onChangeProp,
    inputProps,
    ...rest
  } = ownProps;
  let isChecked = isCheckedProp;
  if ((group == null ? void 0 : group.value) && ownProps.value) {
    isChecked = group.value.includes(ownProps.value);
  }
  let onChange = onChangeProp;
  if ((group == null ? void 0 : group.onChange) && ownProps.value) {
    onChange = callAll(group.onChange, onChangeProp);
  }
  const {
    state: state2,
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    getRootProps
  } = useCheckbox2({
    ...rest,
    isDisabled: isDisabled26,
    isChecked,
    onChange
  });
  const iconStyles = (0, import_react430.useMemo)(
    () => ({
      animation: state2.isIndeterminate ? `${indeterminateOpacityAnim2} 20ms linear, ${indeterminateScaleAnim2} 200ms linear` : `${checkAnim2} 200ms linear`,
      fontSize: iconSize,
      color: iconColor,
      ...styles3.icon
    }),
    [iconColor, iconSize, state2.isIndeterminate, styles3.icon]
  );
  const clonedIcon = (0, import_react430.cloneElement)(icon, {
    __css: iconStyles,
    isIndeterminate: state2.isIndeterminate,
    isChecked: state2.isChecked
  });
  return (0, import_jsx_runtime204.jsxs)(
    chakra24.label,
    {
      __css: { ...rootStyles2, ...styles3.container },
      className: cx("chakra-checkbox", className),
      ...getRootProps(),
      children: [
        (0, import_jsx_runtime204.jsx)(
          "input",
          {
            className: "chakra-checkbox__input",
            ...getInputProps(inputProps, ref)
          }
        ),
        (0, import_jsx_runtime204.jsx)(
          chakra24.span,
          {
            __css: { ...controlStyles2, ...styles3.control },
            className: "chakra-checkbox__control",
            ...getCheckboxProps(),
            children: clonedIcon
          }
        ),
        children && (0, import_jsx_runtime204.jsx)(
          chakra24.span,
          {
            className: "chakra-checkbox__label",
            ...getLabelProps(),
            __css: {
              marginStart: spacing3,
              ...styles3.label
            },
            children
          }
        )
      ]
    }
  );
});
Checkbox3.displayName = "Checkbox";

// node_modules/@chakra-ui/switch/dist/chunk-B22GDMVL.mjs
var import_react431 = __toESM(require_react(), 1);
var import_jsx_runtime205 = __toESM(require_jsx_runtime(), 1);
var Switch = forwardRef40(function Switch2(props, ref) {
  const styles3 = useMultiStyleConfig24("Switch", props);
  const { spacing: spacing3 = "0.5rem", children, ...ownProps } = omitThemingProps(props);
  const {
    state: state2,
    getInputProps,
    getCheckboxProps,
    getRootProps,
    getLabelProps
  } = useCheckbox2(ownProps);
  const containerStyles = (0, import_react431.useMemo)(
    () => ({
      display: "inline-block",
      position: "relative",
      verticalAlign: "middle",
      lineHeight: 0,
      ...styles3.container
    }),
    [styles3.container]
  );
  const trackStyles = (0, import_react431.useMemo)(
    () => ({
      display: "inline-flex",
      flexShrink: 0,
      justifyContent: "flex-start",
      boxSizing: "content-box",
      cursor: "pointer",
      ...styles3.track
    }),
    [styles3.track]
  );
  const labelStyles = (0, import_react431.useMemo)(
    () => ({
      userSelect: "none",
      marginStart: spacing3,
      ...styles3.label
    }),
    [spacing3, styles3.label]
  );
  return (0, import_jsx_runtime205.jsxs)(
    chakra24.label,
    {
      ...getRootProps(),
      className: cx("chakra-switch", props.className),
      __css: containerStyles,
      children: [
        (0, import_jsx_runtime205.jsx)("input", { className: "chakra-switch__input", ...getInputProps({}, ref) }),
        (0, import_jsx_runtime205.jsx)(
          chakra24.span,
          {
            ...getCheckboxProps(),
            className: "chakra-switch__track",
            __css: trackStyles,
            children: (0, import_jsx_runtime205.jsx)(
              chakra24.span,
              {
                __css: styles3.thumb,
                className: "chakra-switch__thumb",
                "data-checked": dataAttr(state2.isChecked),
                "data-hover": dataAttr(state2.isHovered)
              }
            )
          }
        ),
        children && (0, import_jsx_runtime205.jsx)(
          chakra24.span,
          {
            className: "chakra-switch__label",
            ...getLabelProps(),
            __css: labelStyles,
            children
          }
        )
      ]
    }
  );
});
Switch.displayName = "Switch";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chunk-DJP6PLAX.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chunk-B3MS3L3D.mjs
init_shim();
var import_jsx_runtime206 = __toESM(require_jsx_runtime(), 1);
var [TableStylesProvider, useTableStyles] = createContext({
  name: `TableStylesContext`,
  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Table />" `
});
var Table = forwardRef5((props, ref) => {
  const styles3 = useMultiStyleConfig2("Table", props);
  const { className, layout: layout3, ...tableProps } = omitThemingProps(props);
  return (0, import_jsx_runtime206.jsx)(TableStylesProvider, { value: styles3, children: (0, import_jsx_runtime206.jsx)(
    chakra2.table,
    {
      ref,
      __css: { tableLayout: layout3, ...styles3.table },
      className: cx("chakra-table", className),
      ...tableProps
    }
  ) });
});
Table.displayName = "Table";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chunk-DJP6PLAX.mjs
var import_jsx_runtime207 = __toESM(require_jsx_runtime(), 1);
var Thead = forwardRef5((props, ref) => {
  const styles3 = useTableStyles();
  return (0, import_jsx_runtime207.jsx)(chakra2.thead, { ...props, ref, __css: styles3.thead });
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chunk-L7UVV2ML.mjs
init_shim();
var import_jsx_runtime208 = __toESM(require_jsx_runtime(), 1);
var Tr = forwardRef5((props, ref) => {
  const styles3 = useTableStyles();
  return (0, import_jsx_runtime208.jsx)(chakra2.tr, { ...props, ref, __css: styles3.tr });
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chunk-V3BNVYZO.mjs
init_shim();
var import_jsx_runtime209 = __toESM(require_jsx_runtime(), 1);
var TableCaption = forwardRef5(
  (props, ref) => {
    const { placement = "bottom", ...rest } = props;
    const styles3 = useTableStyles();
    return (0, import_jsx_runtime209.jsx)(
      chakra2.caption,
      {
        ...rest,
        ref,
        __css: {
          ...styles3.caption,
          captionSide: placement
        }
      }
    );
  }
);
TableCaption.displayName = "TableCaption";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chunk-7FCBKWFD.mjs
init_shim();
var import_jsx_runtime210 = __toESM(require_jsx_runtime(), 1);
var TableContainer = forwardRef5(
  (props, ref) => {
    var _a40;
    const { overflow, overflowX, className, ...rest } = props;
    return (0, import_jsx_runtime210.jsx)(
      chakra2.div,
      {
        ref,
        className: cx("chakra-table__container", className),
        ...rest,
        __css: {
          display: "block",
          whiteSpace: "nowrap",
          WebkitOverflowScrolling: "touch",
          overflowX: (_a40 = overflow != null ? overflow : overflowX) != null ? _a40 : "auto",
          overflowY: "hidden",
          maxWidth: "100%"
        }
      }
    );
  }
);

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chunk-D3HTYHQX.mjs
init_shim();
var import_jsx_runtime211 = __toESM(require_jsx_runtime(), 1);
var Tbody = forwardRef5((props, ref) => {
  const styles3 = useTableStyles();
  return (0, import_jsx_runtime211.jsx)(chakra2.tbody, { ...props, ref, __css: styles3.tbody });
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chunk-BLRPLYZO.mjs
init_shim();
var import_jsx_runtime212 = __toESM(require_jsx_runtime(), 1);
var Td = forwardRef5(
  ({ isNumeric: isNumeric28, ...rest }, ref) => {
    const styles3 = useTableStyles();
    return (0, import_jsx_runtime212.jsx)(
      chakra2.td,
      {
        ...rest,
        ref,
        __css: styles3.td,
        "data-is-numeric": isNumeric28
      }
    );
  }
);

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chunk-PEV6T2J3.mjs
init_shim();
var import_jsx_runtime213 = __toESM(require_jsx_runtime(), 1);
var Tfoot = forwardRef5((props, ref) => {
  const styles3 = useTableStyles();
  return (0, import_jsx_runtime213.jsx)(chakra2.tfoot, { ...props, ref, __css: styles3.tfoot });
});

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/table/dist/chunk-Z3IFIKNA.mjs
init_shim();
var import_jsx_runtime214 = __toESM(require_jsx_runtime(), 1);
var Th = forwardRef5(
  ({ isNumeric: isNumeric28, ...rest }, ref) => {
    const styles3 = useTableStyles();
    return (0, import_jsx_runtime214.jsx)(
      chakra2.th,
      {
        ...rest,
        ref,
        __css: styles3.th,
        "data-is-numeric": isNumeric28
      }
    );
  }
);

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/chunk-UCTXUILV.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/chunk-ZWUY3VWT.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/chunk-ROBISDLO.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/clickable/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/clickable/dist/chunk-XHZNOLJR.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/clickable/dist/chunk-YGQKU5RK.mjs
init_shim();
var import_react432 = __toESM(require_react(), 1);
function useEventListeners2() {
  const listeners = (0, import_react432.useRef)(/* @__PURE__ */ new Map());
  const currentListeners = listeners.current;
  const add4 = (0, import_react432.useCallback)((el, type, listener, options) => {
    listeners.current.set(listener, { type, el, options });
    el.addEventListener(type, listener, options);
  }, []);
  const remove = (0, import_react432.useCallback)(
    (el, type, listener, options) => {
      el.removeEventListener(type, listener, options);
      listeners.current.delete(listener);
    },
    []
  );
  (0, import_react432.useEffect)(
    () => () => {
      currentListeners.forEach((value, key) => {
        remove(value.el, value.type, key, value.options);
      });
    },
    [remove, currentListeners]
  );
  return { add: add4, remove };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/clickable/dist/chunk-XHZNOLJR.mjs
var import_react433 = __toESM(require_react(), 1);
function isValidElement32(event) {
  const element = event.target;
  const { tagName, isContentEditable: isContentEditable26 } = element;
  return tagName !== "INPUT" && tagName !== "TEXTAREA" && isContentEditable26 !== true;
}
function useClickable2(props = {}) {
  const {
    ref: htmlRef,
    isDisabled: isDisabled26,
    isFocusable: isFocusable26,
    clickOnEnter = true,
    clickOnSpace = true,
    onMouseDown,
    onMouseUp,
    onClick,
    onKeyDown,
    onKeyUp,
    tabIndex: tabIndexProp,
    onMouseOver,
    onMouseLeave,
    ...htmlProps
  } = props;
  const [isButton, setIsButton] = (0, import_react433.useState)(true);
  const [isPressed, setIsPressed] = (0, import_react433.useState)(false);
  const listeners = useEventListeners2();
  const refCallback = (node2) => {
    if (!node2)
      return;
    if (node2.tagName !== "BUTTON") {
      setIsButton(false);
    }
  };
  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;
  const trulyDisabled = isDisabled26 && !isFocusable26;
  const handleClick = (0, import_react433.useCallback)(
    (event) => {
      if (isDisabled26) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }
      const self = event.currentTarget;
      self.focus();
      onClick == null ? void 0 : onClick(event);
    },
    [isDisabled26, onClick]
  );
  const onDocumentKeyUp = (0, import_react433.useCallback)(
    (e) => {
      if (isPressed && isValidElement32(e)) {
        e.preventDefault();
        e.stopPropagation();
        setIsPressed(false);
        listeners.remove(document, "keyup", onDocumentKeyUp, false);
      }
    },
    [isPressed, listeners]
  );
  const handleKeyDown = (0, import_react433.useCallback)(
    (event) => {
      onKeyDown == null ? void 0 : onKeyDown(event);
      if (isDisabled26 || event.defaultPrevented || event.metaKey) {
        return;
      }
      if (!isValidElement32(event.nativeEvent) || isButton)
        return;
      const shouldClickOnEnter = clickOnEnter && event.key === "Enter";
      const shouldClickOnSpace = clickOnSpace && event.key === " ";
      if (shouldClickOnSpace) {
        event.preventDefault();
        setIsPressed(true);
      }
      if (shouldClickOnEnter) {
        event.preventDefault();
        const self = event.currentTarget;
        self.click();
      }
      listeners.add(document, "keyup", onDocumentKeyUp, false);
    },
    [
      isDisabled26,
      isButton,
      onKeyDown,
      clickOnEnter,
      clickOnSpace,
      listeners,
      onDocumentKeyUp
    ]
  );
  const handleKeyUp = (0, import_react433.useCallback)(
    (event) => {
      onKeyUp == null ? void 0 : onKeyUp(event);
      if (isDisabled26 || event.defaultPrevented || event.metaKey)
        return;
      if (!isValidElement32(event.nativeEvent) || isButton)
        return;
      const shouldClickOnSpace = clickOnSpace && event.key === " ";
      if (shouldClickOnSpace) {
        event.preventDefault();
        setIsPressed(false);
        const self = event.currentTarget;
        self.click();
      }
    },
    [clickOnSpace, isButton, isDisabled26, onKeyUp]
  );
  const onDocumentMouseUp = (0, import_react433.useCallback)(
    (event) => {
      if (event.button !== 0)
        return;
      setIsPressed(false);
      listeners.remove(document, "mouseup", onDocumentMouseUp, false);
    },
    [listeners]
  );
  const handleMouseDown = (0, import_react433.useCallback)(
    (event) => {
      if (event.button !== 0)
        return;
      if (isDisabled26) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }
      if (!isButton) {
        setIsPressed(true);
      }
      const target = event.currentTarget;
      target.focus({ preventScroll: true });
      listeners.add(document, "mouseup", onDocumentMouseUp, false);
      onMouseDown == null ? void 0 : onMouseDown(event);
    },
    [isDisabled26, isButton, onMouseDown, listeners, onDocumentMouseUp]
  );
  const handleMouseUp = (0, import_react433.useCallback)(
    (event) => {
      if (event.button !== 0)
        return;
      if (!isButton) {
        setIsPressed(false);
      }
      onMouseUp == null ? void 0 : onMouseUp(event);
    },
    [onMouseUp, isButton]
  );
  const handleMouseOver = (0, import_react433.useCallback)(
    (event) => {
      if (isDisabled26) {
        event.preventDefault();
        return;
      }
      onMouseOver == null ? void 0 : onMouseOver(event);
    },
    [isDisabled26, onMouseOver]
  );
  const handleMouseLeave = (0, import_react433.useCallback)(
    (event) => {
      if (isPressed) {
        event.preventDefault();
        setIsPressed(false);
      }
      onMouseLeave == null ? void 0 : onMouseLeave(event);
    },
    [isPressed, onMouseLeave]
  );
  const ref = mergeRefs4(htmlRef, refCallback);
  if (isButton) {
    return {
      ...htmlProps,
      ref,
      type: "button",
      "aria-disabled": trulyDisabled ? void 0 : isDisabled26,
      disabled: trulyDisabled,
      onClick: handleClick,
      onMouseDown,
      onMouseUp,
      onKeyUp,
      onKeyDown,
      onMouseOver,
      onMouseLeave
    };
  }
  return {
    ...htmlProps,
    ref,
    role: "button",
    "data-active": dataAttr(isPressed),
    "aria-disabled": isDisabled26 ? "true" : void 0,
    tabIndex: trulyDisabled ? void 0 : tabIndex,
    onClick: handleClick,
    onMouseDown: handleMouseDown,
    onMouseUp: handleMouseUp,
    onKeyUp: handleKeyUp,
    onKeyDown: handleKeyDown,
    onMouseOver: handleMouseOver,
    onMouseLeave: handleMouseLeave
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/descendant/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/descendant/dist/chunk-D5UZ3RNN.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/descendant/dist/chunk-P6SLLHUK.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/descendant/dist/chunk-N7WDF4QK.mjs
init_shim();
var import_react434 = __toESM(require_react(), 1);
var __defProp7 = Object.defineProperty;
var __defNormalProp7 = (obj, key, value) => key in obj ? __defProp7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField30 = (obj, key, value) => {
  __defNormalProp7(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
function sortNodes4(nodes) {
  return nodes.sort((a, b) => {
    const compare = a.compareDocumentPosition(b);
    if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY) {
      return -1;
    }
    if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS) {
      return 1;
    }
    if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) {
      throw Error("Cannot sort the given nodes.");
    } else {
      return 0;
    }
  });
}
var isElement30 = (el) => typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
function getNextIndex29(current, max, loop) {
  let next = current + 1;
  if (loop && next >= max)
    next = 0;
  return next;
}
function getPrevIndex28(current, max, loop) {
  let next = current - 1;
  if (loop && next < 0)
    next = max;
  return next;
}
var useSafeLayoutEffect7 = typeof window !== "undefined" ? import_react434.useLayoutEffect : import_react434.useEffect;
var cast6 = (value) => value;

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/descendant/dist/chunk-P6SLLHUK.mjs
var DescendantsManager4 = class {
  constructor() {
    __publicField30(this, "descendants", /* @__PURE__ */ new Map());
    __publicField30(this, "register", (nodeOrOptions) => {
      if (nodeOrOptions == null)
        return;
      if (isElement30(nodeOrOptions)) {
        return this.registerNode(nodeOrOptions);
      }
      return (node2) => {
        this.registerNode(node2, nodeOrOptions);
      };
    });
    __publicField30(this, "unregister", (node2) => {
      this.descendants.delete(node2);
      const sorted = sortNodes4(Array.from(this.descendants.keys()));
      this.assignIndex(sorted);
    });
    __publicField30(this, "destroy", () => {
      this.descendants.clear();
    });
    __publicField30(this, "assignIndex", (descendants) => {
      this.descendants.forEach((descendant) => {
        const index = descendants.indexOf(descendant.node);
        descendant.index = index;
        descendant.node.dataset["index"] = descendant.index.toString();
      });
    });
    __publicField30(this, "count", () => this.descendants.size);
    __publicField30(this, "enabledCount", () => this.enabledValues().length);
    __publicField30(this, "values", () => {
      const values = Array.from(this.descendants.values());
      return values.sort((a, b) => a.index - b.index);
    });
    __publicField30(this, "enabledValues", () => {
      return this.values().filter((descendant) => !descendant.disabled);
    });
    __publicField30(this, "item", (index) => {
      if (this.count() === 0)
        return void 0;
      return this.values()[index];
    });
    __publicField30(this, "enabledItem", (index) => {
      if (this.enabledCount() === 0)
        return void 0;
      return this.enabledValues()[index];
    });
    __publicField30(this, "first", () => this.item(0));
    __publicField30(this, "firstEnabled", () => this.enabledItem(0));
    __publicField30(this, "last", () => this.item(this.descendants.size - 1));
    __publicField30(this, "lastEnabled", () => {
      const lastIndex = this.enabledValues().length - 1;
      return this.enabledItem(lastIndex);
    });
    __publicField30(this, "indexOf", (node2) => {
      var _a40, _b8;
      if (!node2)
        return -1;
      return (_b8 = (_a40 = this.descendants.get(node2)) == null ? void 0 : _a40.index) != null ? _b8 : -1;
    });
    __publicField30(this, "enabledIndexOf", (node2) => {
      if (node2 == null)
        return -1;
      return this.enabledValues().findIndex((i) => i.node.isSameNode(node2));
    });
    __publicField30(this, "next", (index, loop = true) => {
      const next = getNextIndex29(index, this.count(), loop);
      return this.item(next);
    });
    __publicField30(this, "nextEnabled", (index, loop = true) => {
      const item = this.item(index);
      if (!item)
        return;
      const enabledIndex = this.enabledIndexOf(item.node);
      const nextEnabledIndex = getNextIndex29(
        enabledIndex,
        this.enabledCount(),
        loop
      );
      return this.enabledItem(nextEnabledIndex);
    });
    __publicField30(this, "prev", (index, loop = true) => {
      const prev = getPrevIndex28(index, this.count() - 1, loop);
      return this.item(prev);
    });
    __publicField30(this, "prevEnabled", (index, loop = true) => {
      const item = this.item(index);
      if (!item)
        return;
      const enabledIndex = this.enabledIndexOf(item.node);
      const prevEnabledIndex = getPrevIndex28(
        enabledIndex,
        this.enabledCount() - 1,
        loop
      );
      return this.enabledItem(prevEnabledIndex);
    });
    __publicField30(this, "registerNode", (node2, options) => {
      if (!node2 || this.descendants.has(node2))
        return;
      const keys2 = Array.from(this.descendants.keys()).concat(node2);
      const sorted = sortNodes4(keys2);
      if (options == null ? void 0 : options.disabled) {
        options.disabled = !!options.disabled;
      }
      const descendant = { node: node2, index: -1, ...options };
      this.descendants.set(node2, descendant);
      this.assignIndex(sorted);
    });
  }
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/descendant/dist/chunk-D5UZ3RNN.mjs
var import_react435 = __toESM(require_react(), 1);
function useDescendants4() {
  const descendants = (0, import_react435.useRef)(new DescendantsManager4());
  useSafeLayoutEffect7(() => {
    return () => descendants.current.destroy();
  });
  return descendants.current;
}
var [DescendantsContextProvider4, useDescendantsContext4] = createContext({
  name: "DescendantsProvider",
  errorMessage: "useDescendantsContext must be used within DescendantsProvider"
});
function useDescendant4(options) {
  const descendants = useDescendantsContext4();
  const [index, setIndex] = (0, import_react435.useState)(-1);
  const ref = (0, import_react435.useRef)(null);
  useSafeLayoutEffect7(() => {
    return () => {
      if (!ref.current)
        return;
      descendants.unregister(ref.current);
    };
  }, []);
  useSafeLayoutEffect7(() => {
    if (!ref.current)
      return;
    const dataIndex = Number(ref.current.dataset["index"]);
    if (index != dataIndex && !Number.isNaN(dataIndex)) {
      setIndex(dataIndex);
    }
  });
  const refCallback = options ? cast6(descendants.register(options)) : cast6(descendants.register);
  return {
    descendants,
    index,
    enabledIndex: descendants.enabledIndexOf(ref.current),
    register: mergeRefs4(refCallback, ref)
  };
}
function createDescendantContext4() {
  const ContextProvider = cast6(DescendantsContextProvider4);
  const _useDescendantsContext = () => cast6(useDescendantsContext4());
  const _useDescendant = (options) => useDescendant4(options);
  const _useDescendants = () => useDescendants4();
  return [
    ContextProvider,
    _useDescendantsContext,
    _useDescendants,
    _useDescendant
  ];
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/chunk-ROBISDLO.mjs
var import_react436 = __toESM(require_react(), 1);
var [
  TabsDescendantsProvider,
  useTabsDescendantsContext,
  useTabsDescendants,
  useTabsDescendant
] = createDescendantContext4();
function useTabs(props) {
  var _a40;
  const {
    defaultIndex,
    onChange,
    index,
    isManual,
    isLazy,
    lazyBehavior = "unmount",
    orientation = "horizontal",
    direction: direction3 = "ltr",
    ...htmlProps
  } = props;
  const [focusedIndex, setFocusedIndex] = (0, import_react436.useState)(defaultIndex != null ? defaultIndex : 0);
  const [selectedIndex, setSelectedIndex] = useControllableState({
    defaultValue: defaultIndex != null ? defaultIndex : 0,
    value: index,
    onChange
  });
  (0, import_react436.useEffect)(() => {
    if (index != null) {
      setFocusedIndex(index);
    }
  }, [index]);
  const descendants = useTabsDescendants();
  const uuid = (0, import_react436.useId)();
  const uid = (_a40 = props.id) != null ? _a40 : uuid;
  const id4 = `tabs-${uid}`;
  return {
    id: id4,
    selectedIndex,
    focusedIndex,
    setSelectedIndex,
    setFocusedIndex,
    isManual,
    isLazy,
    lazyBehavior,
    orientation,
    descendants,
    direction: direction3,
    htmlProps
  };
}
var [TabsProvider, useTabsContext] = createContext({
  name: "TabsContext",
  errorMessage: "useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />"
});
function useTabList(props) {
  const { focusedIndex, orientation, direction: direction3 } = useTabsContext();
  const descendants = useTabsDescendantsContext();
  const onKeyDown = (0, import_react436.useCallback)(
    (event) => {
      const nextTab = () => {
        var _a40;
        const next = descendants.nextEnabled(focusedIndex);
        if (next)
          (_a40 = next.node) == null ? void 0 : _a40.focus();
      };
      const prevTab = () => {
        var _a40;
        const prev = descendants.prevEnabled(focusedIndex);
        if (prev)
          (_a40 = prev.node) == null ? void 0 : _a40.focus();
      };
      const firstTab = () => {
        var _a40;
        const first = descendants.firstEnabled();
        if (first)
          (_a40 = first.node) == null ? void 0 : _a40.focus();
      };
      const lastTab = () => {
        var _a40;
        const last = descendants.lastEnabled();
        if (last)
          (_a40 = last.node) == null ? void 0 : _a40.focus();
      };
      const isHorizontal = orientation === "horizontal";
      const isVertical = orientation === "vertical";
      const eventKey = event.key;
      const ArrowStart = direction3 === "ltr" ? "ArrowLeft" : "ArrowRight";
      const ArrowEnd = direction3 === "ltr" ? "ArrowRight" : "ArrowLeft";
      const keyMap = {
        [ArrowStart]: () => isHorizontal && prevTab(),
        [ArrowEnd]: () => isHorizontal && nextTab(),
        ArrowDown: () => isVertical && nextTab(),
        ArrowUp: () => isVertical && prevTab(),
        Home: firstTab,
        End: lastTab
      };
      const action = keyMap[eventKey];
      if (action) {
        event.preventDefault();
        action(event);
      }
    },
    [descendants, focusedIndex, orientation, direction3]
  );
  return {
    ...props,
    role: "tablist",
    "aria-orientation": orientation,
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  };
}
function useTab(props) {
  const { isDisabled: isDisabled26, isFocusable: isFocusable26, ...htmlProps } = props;
  const { setSelectedIndex, isManual, id: id4, setFocusedIndex, selectedIndex } = useTabsContext();
  const { index, register } = useTabsDescendant({
    disabled: isDisabled26 && !isFocusable26
  });
  const isSelected = index === selectedIndex;
  const onClick = () => {
    setSelectedIndex(index);
  };
  const onFocus3 = () => {
    setFocusedIndex(index);
    const isDisabledButFocusable = isDisabled26 && isFocusable26;
    const shouldSelect = !isManual && !isDisabledButFocusable;
    if (shouldSelect) {
      setSelectedIndex(index);
    }
  };
  const clickableProps = useClickable2({
    ...htmlProps,
    ref: mergeRefs4(register, props.ref),
    isDisabled: isDisabled26,
    isFocusable: isFocusable26,
    onClick: callAllHandlers(props.onClick, onClick)
  });
  const type = "button";
  return {
    ...clickableProps,
    id: makeTabId(id4, index),
    role: "tab",
    tabIndex: isSelected ? 0 : -1,
    type,
    "aria-selected": isSelected,
    "aria-controls": makeTabPanelId(id4, index),
    onFocus: isDisabled26 ? void 0 : callAllHandlers(props.onFocus, onFocus3)
  };
}
var [TabPanelProvider, useTabPanelContext] = createContext({});
function useTabPanels(props) {
  const context = useTabsContext();
  const { id: id4, selectedIndex } = context;
  const validChildren = getValidChildren6(props.children);
  const children = validChildren.map(
    (child, index) => (0, import_react436.createElement)(
      TabPanelProvider,
      {
        key: index,
        value: {
          isSelected: index === selectedIndex,
          id: makeTabPanelId(id4, index),
          tabId: makeTabId(id4, index),
          selectedIndex
        }
      },
      child
    )
  );
  return { ...props, children };
}
function useTabPanel(props) {
  const { children, ...htmlProps } = props;
  const { isLazy, lazyBehavior } = useTabsContext();
  const { isSelected, id: id4, tabId } = useTabPanelContext();
  const hasBeenSelected = (0, import_react436.useRef)(false);
  if (isSelected) {
    hasBeenSelected.current = true;
  }
  const shouldRenderChildren = lazyDisclosure({
    wasSelected: hasBeenSelected.current,
    isSelected,
    enabled: isLazy,
    mode: lazyBehavior
  });
  return {
    tabIndex: 0,
    ...htmlProps,
    children: shouldRenderChildren ? children : null,
    role: "tabpanel",
    "aria-labelledby": tabId,
    hidden: !isSelected,
    id: id4
  };
}
function useTabIndicator() {
  const context = useTabsContext();
  const descendants = useTabsDescendantsContext();
  const { selectedIndex, orientation } = context;
  const isHorizontal = orientation === "horizontal";
  const isVertical = orientation === "vertical";
  const [rect, setRect] = (0, import_react436.useState)(() => {
    if (isHorizontal)
      return { left: 0, width: 0 };
    if (isVertical)
      return { top: 0, height: 0 };
    return void 0;
  });
  const [hasMeasured, setHasMeasured] = (0, import_react436.useState)(false);
  useSafeLayoutEffect(() => {
    if (selectedIndex == null)
      return;
    const tab = descendants.item(selectedIndex);
    if (tab == null)
      return;
    if (isHorizontal) {
      setRect({ left: tab.node.offsetLeft, width: tab.node.offsetWidth });
    }
    if (isVertical) {
      setRect({ top: tab.node.offsetTop, height: tab.node.offsetHeight });
    }
    const id4 = requestAnimationFrame(() => {
      setHasMeasured(true);
    });
    return () => {
      if (id4) {
        cancelAnimationFrame(id4);
      }
    };
  }, [selectedIndex, isHorizontal, isVertical, descendants]);
  return {
    position: "absolute",
    transitionProperty: "left, right, top, bottom, height, width",
    transitionDuration: hasMeasured ? "200ms" : "0ms",
    transitionTimingFunction: "cubic-bezier(0, 0, 0.2, 1)",
    ...rect
  };
}
function makeTabId(id4, index) {
  return `${id4}--tab-${index}`;
}
function makeTabPanelId(id4, index) {
  return `${id4}--tabpanel-${index}`;
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/chunk-ZWUY3VWT.mjs
var import_react437 = __toESM(require_react(), 1);
var import_jsx_runtime215 = __toESM(require_jsx_runtime(), 1);
var [TabsStylesProvider, useTabsStyles] = createContext({
  name: `TabsStylesContext`,
  errorMessage: `useTabsStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Tabs />" `
});
var Tabs = forwardRef5(function Tabs2(props, ref) {
  const styles3 = useMultiStyleConfig2("Tabs", props);
  const { children, className, ...rest } = omitThemingProps(props);
  const { htmlProps, descendants, ...ctx } = useTabs(rest);
  const context = (0, import_react437.useMemo)(() => ctx, [ctx]);
  const { isFitted: _, ...rootProps } = htmlProps;
  return (0, import_jsx_runtime215.jsx)(TabsDescendantsProvider, { value: descendants, children: (0, import_jsx_runtime215.jsx)(TabsProvider, { value: context, children: (0, import_jsx_runtime215.jsx)(TabsStylesProvider, { value: styles3, children: (0, import_jsx_runtime215.jsx)(
    chakra2.div,
    {
      className: cx("chakra-tabs", className),
      ref,
      ...rootProps,
      __css: styles3.root,
      children
    }
  ) }) }) });
});
Tabs.displayName = "Tabs";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/chunk-UCTXUILV.mjs
var import_jsx_runtime216 = __toESM(require_jsx_runtime(), 1);
var TabIndicator = forwardRef5(
  function TabIndicator2(props, ref) {
    const indicatorStyle = useTabIndicator();
    const style = {
      ...props.style,
      ...indicatorStyle
    };
    const styles3 = useTabsStyles();
    return (0, import_jsx_runtime216.jsx)(
      chakra2.div,
      {
        ref,
        ...props,
        className: cx("chakra-tabs__tab-indicator", props.className),
        style,
        __css: styles3.indicator
      }
    );
  }
);
TabIndicator.displayName = "TabIndicator";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/chunk-ZWLVZLKQ.mjs
init_shim();
var import_jsx_runtime217 = __toESM(require_jsx_runtime(), 1);
var TabList = forwardRef5(function TabList2(props, ref) {
  const tablistProps = useTabList({ ...props, ref });
  const styles3 = useTabsStyles();
  const tablistStyles = {
    display: "flex",
    ...styles3.tablist
  };
  return (0, import_jsx_runtime217.jsx)(
    chakra2.div,
    {
      ...tablistProps,
      className: cx("chakra-tabs__tablist", props.className),
      __css: tablistStyles
    }
  );
});
TabList.displayName = "TabList";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/chunk-7W5ZCZ76.mjs
init_shim();
var import_jsx_runtime218 = __toESM(require_jsx_runtime(), 1);
var TabPanel = forwardRef5(function TabPanel2(props, ref) {
  const panelProps = useTabPanel({ ...props, ref });
  const styles3 = useTabsStyles();
  return (0, import_jsx_runtime218.jsx)(
    chakra2.div,
    {
      outline: "0",
      ...panelProps,
      className: cx("chakra-tabs__tab-panel", props.className),
      __css: styles3.tabpanel
    }
  );
});
TabPanel.displayName = "TabPanel";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/chunk-45U2LZ4E.mjs
init_shim();
var import_jsx_runtime219 = __toESM(require_jsx_runtime(), 1);
var TabPanels = forwardRef5(function TabPanels2(props, ref) {
  const panelsProps = useTabPanels(props);
  const styles3 = useTabsStyles();
  return (0, import_jsx_runtime219.jsx)(
    chakra2.div,
    {
      ...panelsProps,
      width: "100%",
      ref,
      className: cx("chakra-tabs__tab-panels", props.className),
      __css: styles3.tabpanels
    }
  );
});
TabPanels.displayName = "TabPanels";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tabs/dist/chunk-TPBRUKW6.mjs
init_shim();
var import_jsx_runtime220 = __toESM(require_jsx_runtime(), 1);
var Tab = forwardRef5(function Tab2(props, ref) {
  const styles3 = useTabsStyles();
  const tabProps = useTab({ ...props, ref });
  const tabStyles = {
    outline: "0",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    ...styles3.tab
  };
  return (0, import_jsx_runtime220.jsx)(
    chakra2.button,
    {
      ...tabProps,
      className: cx("chakra-tabs__tab", props.className),
      __css: tabStyles
    }
  );
});
Tab.displayName = "Tab";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tag/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tag/dist/chunk-IXKZFKRY.mjs
init_shim();
var import_jsx_runtime221 = __toESM(require_jsx_runtime(), 1);
var [TagStylesProvider, useTagStyles] = createContext({
  name: `TagStylesContext`,
  errorMessage: `useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Tag />" `
});
var Tag = forwardRef5((props, ref) => {
  const styles3 = useMultiStyleConfig2("Tag", props);
  const ownProps = omitThemingProps(props);
  const containerStyles = {
    display: "inline-flex",
    verticalAlign: "top",
    alignItems: "center",
    maxWidth: "100%",
    ...styles3.container
  };
  return (0, import_jsx_runtime221.jsx)(TagStylesProvider, { value: styles3, children: (0, import_jsx_runtime221.jsx)(chakra2.span, { ref, ...ownProps, __css: containerStyles }) });
});
Tag.displayName = "Tag";
var TagLabel = forwardRef5((props, ref) => {
  const styles3 = useTagStyles();
  return (0, import_jsx_runtime221.jsx)(chakra2.span, { ref, noOfLines: 1, ...props, __css: styles3.label });
});
TagLabel.displayName = "TagLabel";
var TagLeftIcon = forwardRef5((props, ref) => (0, import_jsx_runtime221.jsx)(Icon, { ref, verticalAlign: "top", marginEnd: "0.5rem", ...props }));
TagLeftIcon.displayName = "TagLeftIcon";
var TagRightIcon = forwardRef5((props, ref) => (0, import_jsx_runtime221.jsx)(Icon, { ref, verticalAlign: "top", marginStart: "0.5rem", ...props }));
TagRightIcon.displayName = "TagRightIcon";
var TagCloseIcon = (props) => (0, import_jsx_runtime221.jsx)(Icon, { verticalAlign: "inherit", viewBox: "0 0 512 512", ...props, children: (0, import_jsx_runtime221.jsx)(
  "path",
  {
    fill: "currentColor",
    d: "M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z"
  }
) });
TagCloseIcon.displayName = "TagCloseIcon";
var TagCloseButton = forwardRef5(
  (props, ref) => {
    const { isDisabled: isDisabled26, children, ...rest } = props;
    const styles3 = useTagStyles();
    const btnStyles = {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      outline: "0",
      ...styles3.closeButton
    };
    return (0, import_jsx_runtime221.jsx)(
      chakra2.button,
      {
        ref,
        "aria-label": "close",
        ...rest,
        type: "button",
        disabled: isDisabled26,
        __css: btnStyles,
        children: children || (0, import_jsx_runtime221.jsx)(TagCloseIcon, {})
      }
    );
  }
);
TagCloseButton.displayName = "TagCloseButton";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/textarea/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/textarea/dist/chunk-OEQDSMWZ.mjs
init_shim();
var import_jsx_runtime222 = __toESM(require_jsx_runtime(), 1);
function omit30(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key of keysToOmit) {
    if (key in clone) {
      delete clone[key];
    }
  }
  return clone;
}
var omitted = ["h", "minH", "height", "minHeight"];
var Textarea = forwardRef5((props, ref) => {
  const styles3 = useStyleConfig2("Textarea", props);
  const { className, rows, ...rest } = omitThemingProps(props);
  const textareaProps = useFormControl(rest);
  const textareaStyles = rows ? omit30(styles3, omitted) : styles3;
  return (0, import_jsx_runtime222.jsx)(
    chakra2.textarea,
    {
      ref,
      rows,
      ...textareaProps,
      className: cx("chakra-textarea", className),
      __css: textareaStyles
    }
  );
});
Textarea.displayName = "Textarea";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tooltip/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tooltip/dist/chunk-OMHV467B.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tooltip/dist/chunk-UNJFLZPD.mjs
init_shim();
var scale2 = {
  exit: {
    scale: 0.85,
    opacity: 0,
    transition: {
      opacity: { duration: 0.15, easings: "easeInOut" },
      scale: { duration: 0.2, easings: "easeInOut" }
    }
  },
  enter: {
    scale: 1,
    opacity: 1,
    transition: {
      opacity: { easings: "easeOut", duration: 0.2 },
      scale: { duration: 0.2, ease: [0.175, 0.885, 0.4, 1.1] }
    }
  }
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tooltip/dist/chunk-GOQMVUD7.mjs
init_shim();
var import_react438 = __toESM(require_react(), 1);
var getDoc = (ref) => {
  var _a40;
  return ((_a40 = ref.current) == null ? void 0 : _a40.ownerDocument) || document;
};
var getWin = (ref) => {
  var _a40, _b8;
  return ((_b8 = (_a40 = ref.current) == null ? void 0 : _a40.ownerDocument) == null ? void 0 : _b8.defaultView) || window;
};
function useTooltip(props = {}) {
  const {
    openDelay = 0,
    closeDelay = 0,
    closeOnClick = true,
    closeOnMouseDown,
    closeOnScroll,
    closeOnPointerDown = closeOnMouseDown,
    closeOnEsc = true,
    onOpen: onOpenProp,
    onClose: onCloseProp,
    placement,
    id: id4,
    isOpen: isOpenProp,
    defaultIsOpen,
    arrowSize = 10,
    arrowShadowColor,
    arrowPadding,
    modifiers,
    isDisabled: isDisabled26,
    gutter,
    offset,
    direction: direction3,
    ...htmlProps
  } = props;
  const { isOpen, onOpen, onClose } = useDisclosure2({
    isOpen: isOpenProp,
    defaultIsOpen,
    onOpen: onOpenProp,
    onClose: onCloseProp
  });
  const { referenceRef, getPopperProps, getArrowInnerProps, getArrowProps } = usePopper3({
    enabled: isOpen,
    placement,
    arrowPadding,
    modifiers,
    gutter,
    offset,
    direction: direction3
  });
  const uuid = (0, import_react438.useId)();
  const uid = id4 != null ? id4 : uuid;
  const tooltipId = `tooltip-${uid}`;
  const ref = (0, import_react438.useRef)(null);
  const enterTimeout = (0, import_react438.useRef)();
  const clearEnterTimeout = (0, import_react438.useCallback)(() => {
    if (enterTimeout.current) {
      clearTimeout(enterTimeout.current);
      enterTimeout.current = void 0;
    }
  }, []);
  const exitTimeout = (0, import_react438.useRef)();
  const clearExitTimeout = (0, import_react438.useCallback)(() => {
    if (exitTimeout.current) {
      clearTimeout(exitTimeout.current);
      exitTimeout.current = void 0;
    }
  }, []);
  const closeNow = (0, import_react438.useCallback)(() => {
    clearExitTimeout();
    onClose();
  }, [onClose, clearExitTimeout]);
  const dispatchCloseEvent = useCloseEvent(ref, closeNow);
  const openWithDelay = (0, import_react438.useCallback)(() => {
    if (!isDisabled26 && !enterTimeout.current) {
      dispatchCloseEvent();
      const win = getWin(ref);
      enterTimeout.current = win.setTimeout(onOpen, openDelay);
    }
  }, [dispatchCloseEvent, isDisabled26, onOpen, openDelay]);
  const closeWithDelay = (0, import_react438.useCallback)(() => {
    clearEnterTimeout();
    const win = getWin(ref);
    exitTimeout.current = win.setTimeout(closeNow, closeDelay);
  }, [closeDelay, closeNow, clearEnterTimeout]);
  const onClick = (0, import_react438.useCallback)(() => {
    if (isOpen && closeOnClick) {
      closeWithDelay();
    }
  }, [closeOnClick, closeWithDelay, isOpen]);
  const onPointerDown = (0, import_react438.useCallback)(() => {
    if (isOpen && closeOnPointerDown) {
      closeWithDelay();
    }
  }, [closeOnPointerDown, closeWithDelay, isOpen]);
  const onKeyDown = (0, import_react438.useCallback)(
    (event) => {
      if (isOpen && event.key === "Escape") {
        closeWithDelay();
      }
    },
    [isOpen, closeWithDelay]
  );
  useEventListener(
    () => getDoc(ref),
    "keydown",
    closeOnEsc ? onKeyDown : void 0
  );
  useEventListener(
    () => getDoc(ref),
    "scroll",
    () => {
      if (isOpen && closeOnScroll) {
        closeNow();
      }
    }
  );
  (0, import_react438.useEffect)(() => {
    if (!isDisabled26)
      return;
    clearEnterTimeout();
    if (isOpen)
      onClose();
  }, [isDisabled26, isOpen, onClose, clearEnterTimeout]);
  (0, import_react438.useEffect)(
    () => () => {
      clearEnterTimeout();
      clearExitTimeout();
    },
    [clearEnterTimeout, clearExitTimeout]
  );
  useEventListener(() => ref.current, "pointerleave", closeWithDelay);
  const getTriggerProps = (0, import_react438.useCallback)(
    (props2 = {}, _ref2 = null) => {
      const triggerProps = {
        ...props2,
        ref: mergeRefs4(ref, _ref2, referenceRef),
        onPointerEnter: callAllHandlers(props2.onPointerEnter, (e) => {
          if (e.pointerType === "touch")
            return;
          openWithDelay();
        }),
        onClick: callAllHandlers(props2.onClick, onClick),
        onPointerDown: callAllHandlers(props2.onPointerDown, onPointerDown),
        onFocus: callAllHandlers(props2.onFocus, openWithDelay),
        onBlur: callAllHandlers(props2.onBlur, closeWithDelay),
        "aria-describedby": isOpen ? tooltipId : void 0
      };
      return triggerProps;
    },
    [
      openWithDelay,
      closeWithDelay,
      onPointerDown,
      isOpen,
      tooltipId,
      onClick,
      referenceRef
    ]
  );
  const getTooltipPositionerProps = (0, import_react438.useCallback)(
    (props2 = {}, forwardedRef = null) => getPopperProps(
      {
        ...props2,
        style: {
          ...props2.style,
          [cssVars3.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,
          [cssVars3.arrowShadowColor.var]: arrowShadowColor
        }
      },
      forwardedRef
    ),
    [getPopperProps, arrowSize, arrowShadowColor]
  );
  const getTooltipProps = (0, import_react438.useCallback)(
    (props2 = {}, ref2 = null) => {
      const styles3 = {
        ...props2.style,
        position: "relative",
        transformOrigin: cssVars3.transformOrigin.varRef
      };
      return {
        ref: ref2,
        ...htmlProps,
        ...props2,
        id: tooltipId,
        role: "tooltip",
        style: styles3
      };
    },
    [htmlProps, tooltipId]
  );
  return {
    isOpen,
    show: openWithDelay,
    hide: closeWithDelay,
    getTriggerProps,
    getTooltipProps,
    getTooltipPositionerProps,
    getArrowProps,
    getArrowInnerProps
  };
}
var closeEventName = "chakra-ui:close-tooltip";
function useCloseEvent(ref, close) {
  (0, import_react438.useEffect)(() => {
    const doc = getDoc(ref);
    doc.addEventListener(closeEventName, close);
    return () => doc.removeEventListener(closeEventName, close);
  }, [close, ref]);
  return () => {
    const doc = getDoc(ref);
    const win = getWin(ref);
    doc.dispatchEvent(new win.CustomEvent(closeEventName));
  };
}

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/tooltip/dist/chunk-OMHV467B.mjs
var import_react439 = __toESM(require_react(), 1);
var import_jsx_runtime223 = __toESM(require_jsx_runtime(), 1);
function omit31(object2, keysToOmit = []) {
  const clone = Object.assign({}, object2);
  for (const key of keysToOmit) {
    if (key in clone) {
      delete clone[key];
    }
  }
  return clone;
}
function pick26(object2, keysToPick) {
  const result = {};
  for (const key of keysToPick) {
    if (key in object2) {
      result[key] = object2[key];
    }
  }
  return result;
}
var MotionDiv3 = chakra2(motion.div);
var Tooltip = forwardRef5((props, ref) => {
  var _a40, _b8;
  const styles3 = useStyleConfig2("Tooltip", props);
  const ownProps = omitThemingProps(props);
  const theme3 = useTheme2();
  const {
    children,
    label,
    shouldWrapChildren,
    "aria-label": ariaLabel,
    hasArrow,
    bg,
    portalProps,
    background: background2,
    backgroundColor,
    bgColor,
    motionProps,
    ...rest
  } = ownProps;
  const userDefinedBg = (_b8 = (_a40 = background2 != null ? background2 : backgroundColor) != null ? _a40 : bg) != null ? _b8 : bgColor;
  if (userDefinedBg) {
    styles3.bg = userDefinedBg;
    const bgVar = getCSSVar(theme3, "colors", userDefinedBg);
    styles3[cssVars3.arrowBg.var] = bgVar;
  }
  const tooltip = useTooltip({ ...rest, direction: theme3.direction });
  const shouldWrap = typeof children === "string" || shouldWrapChildren;
  let trigger2;
  if (shouldWrap) {
    trigger2 = (0, import_jsx_runtime223.jsx)(
      chakra2.span,
      {
        display: "inline-block",
        tabIndex: 0,
        ...tooltip.getTriggerProps(),
        children
      }
    );
  } else {
    const child = import_react439.Children.only(children);
    trigger2 = (0, import_react439.cloneElement)(
      child,
      tooltip.getTriggerProps(child.props, child.ref)
    );
  }
  const hasAriaLabel = !!ariaLabel;
  const _tooltipProps = tooltip.getTooltipProps({}, ref);
  const tooltipProps = hasAriaLabel ? omit31(_tooltipProps, ["role", "id"]) : _tooltipProps;
  const srOnlyProps = pick26(_tooltipProps, ["role", "id"]);
  if (!label) {
    return (0, import_jsx_runtime223.jsx)(import_jsx_runtime223.Fragment, { children });
  }
  return (0, import_jsx_runtime223.jsxs)(import_jsx_runtime223.Fragment, { children: [
    trigger2,
    (0, import_jsx_runtime223.jsx)(AnimatePresence, { children: tooltip.isOpen && (0, import_jsx_runtime223.jsx)(Portal, { ...portalProps, children: (0, import_jsx_runtime223.jsx)(
      chakra2.div,
      {
        ...tooltip.getTooltipPositionerProps(),
        __css: {
          zIndex: styles3.zIndex,
          pointerEvents: "none"
        },
        children: (0, import_jsx_runtime223.jsxs)(
          MotionDiv3,
          {
            variants: scale2,
            initial: "exit",
            animate: "enter",
            exit: "exit",
            ...motionProps,
            ...tooltipProps,
            __css: styles3,
            children: [
              label,
              hasAriaLabel && (0, import_jsx_runtime223.jsx)(chakra2.span, { srOnly: true, ...srOnlyProps, children: ariaLabel }),
              hasArrow && (0, import_jsx_runtime223.jsx)(
                chakra2.div,
                {
                  "data-popper-arrow": true,
                  className: "chakra-tooltip__arrow-wrapper",
                  children: (0, import_jsx_runtime223.jsx)(
                    chakra2.div,
                    {
                      "data-popper-arrow-inner": true,
                      className: "chakra-tooltip__arrow",
                      __css: { bg: styles3.bg }
                    }
                  )
                }
              )
            ]
          }
        )
      }
    ) }) })
  ] });
});
Tooltip.displayName = "Tooltip";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/transition/dist/index.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/transition/dist/chunk-LRMLOJAR.mjs
init_shim();

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/transition/dist/chunk-LB6CWFOC.mjs
init_shim();
var TRANSITION_EASINGS3 = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
var TRANSITION_VARIANTS3 = {
  scale: {
    enter: { scale: 1 },
    exit: { scale: 0.95 }
  },
  fade: {
    enter: { opacity: 1 },
    exit: { opacity: 0 }
  },
  pushLeft: {
    enter: { x: "100%" },
    exit: { x: "-30%" }
  },
  pushRight: {
    enter: { x: "-100%" },
    exit: { x: "30%" }
  },
  pushUp: {
    enter: { y: "100%" },
    exit: { y: "-30%" }
  },
  pushDown: {
    enter: { y: "-100%" },
    exit: { y: "30%" }
  },
  slideLeft: {
    position: { left: 0, top: 0, bottom: 0, width: "100%" },
    enter: { x: 0, y: 0 },
    exit: { x: "-100%", y: 0 }
  },
  slideRight: {
    position: { right: 0, top: 0, bottom: 0, width: "100%" },
    enter: { x: 0, y: 0 },
    exit: { x: "100%", y: 0 }
  },
  slideUp: {
    position: { top: 0, left: 0, right: 0, maxWidth: "100vw" },
    enter: { x: 0, y: 0 },
    exit: { x: 0, y: "-100%" }
  },
  slideDown: {
    position: { bottom: 0, left: 0, right: 0, maxWidth: "100vw" },
    enter: { x: 0, y: 0 },
    exit: { x: 0, y: "100%" }
  }
};
function getSlideTransition3(options) {
  var _a40;
  const side = (_a40 = options == null ? void 0 : options.direction) != null ? _a40 : "right";
  switch (side) {
    case "right":
      return TRANSITION_VARIANTS3.slideRight;
    case "left":
      return TRANSITION_VARIANTS3.slideLeft;
    case "bottom":
      return TRANSITION_VARIANTS3.slideDown;
    case "top":
      return TRANSITION_VARIANTS3.slideUp;
    default:
      return TRANSITION_VARIANTS3.slideRight;
  }
}
var TRANSITION_DEFAULTS3 = {
  enter: {
    duration: 0.2,
    ease: TRANSITION_EASINGS3.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TRANSITION_EASINGS3.easeIn
  }
};
var withDelay3 = {
  enter: (transition4, delay2) => ({
    ...transition4,
    delay: typeof delay2 === "number" ? delay2 : delay2 == null ? void 0 : delay2["enter"]
  }),
  exit: (transition4, delay2) => ({
    ...transition4,
    delay: typeof delay2 === "number" ? delay2 : delay2 == null ? void 0 : delay2["exit"]
  })
};

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/transition/dist/chunk-LRMLOJAR.mjs
var import_react440 = __toESM(require_react(), 1);
var import_jsx_runtime224 = __toESM(require_jsx_runtime(), 1);
var isNumeric27 = (value) => value != null && parseInt(value.toString(), 10) > 0;
var defaultTransitions3 = {
  exit: {
    height: { duration: 0.2, ease: TRANSITION_EASINGS3.ease },
    opacity: { duration: 0.3, ease: TRANSITION_EASINGS3.ease }
  },
  enter: {
    height: { duration: 0.3, ease: TRANSITION_EASINGS3.ease },
    opacity: { duration: 0.4, ease: TRANSITION_EASINGS3.ease }
  }
};
var variants35 = {
  exit: ({
    animateOpacity,
    startingHeight,
    transition: transition4,
    transitionEnd,
    delay: delay2
  }) => {
    var _a40;
    return {
      ...animateOpacity && { opacity: isNumeric27(startingHeight) ? 1 : 0 },
      height: startingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay3.exit(defaultTransitions3.exit, delay2)
    };
  },
  enter: ({
    animateOpacity,
    endingHeight,
    transition: transition4,
    transitionEnd,
    delay: delay2
  }) => {
    var _a40;
    return {
      ...animateOpacity && { opacity: 1 },
      height: endingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay3.enter(defaultTransitions3.enter, delay2)
    };
  }
};
var Collapse3 = (0, import_react440.forwardRef)(
  (props, ref) => {
    const {
      in: isOpen,
      unmountOnExit,
      animateOpacity = true,
      startingHeight = 0,
      endingHeight = "auto",
      style,
      className,
      transition: transition4,
      transitionEnd,
      ...rest
    } = props;
    const [mounted, setMounted] = (0, import_react440.useState)(false);
    (0, import_react440.useEffect)(() => {
      const timeout = setTimeout(() => {
        setMounted(true);
      });
      return () => clearTimeout(timeout);
    }, []);
    warn({
      condition: Number(startingHeight) > 0 && !!unmountOnExit,
      message: `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`
    });
    const hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
    const custom = {
      startingHeight,
      endingHeight,
      animateOpacity,
      transition: !mounted ? { enter: { duration: 0 } } : transition4,
      transitionEnd: {
        enter: transitionEnd == null ? void 0 : transitionEnd.enter,
        exit: unmountOnExit ? transitionEnd == null ? void 0 : transitionEnd.exit : {
          ...transitionEnd == null ? void 0 : transitionEnd.exit,
          display: hasStartingHeight ? "block" : "none"
        }
      }
    };
    const show = unmountOnExit ? isOpen : true;
    const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
    return (0, import_jsx_runtime224.jsx)(AnimatePresence, { initial: false, custom, children: show && (0, import_jsx_runtime224.jsx)(
      motion.div,
      {
        ref,
        ...rest,
        className: cx("chakra-collapse", className),
        style: {
          overflow: "hidden",
          display: "block",
          ...style
        },
        custom,
        variants: variants35,
        initial: unmountOnExit ? "exit" : false,
        animate: animate2,
        exit: "exit"
      }
    ) });
  }
);
Collapse3.displayName = "Collapse";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/transition/dist/chunk-NBEP2PWU.mjs
init_shim();
var import_react441 = __toESM(require_react(), 1);
var import_jsx_runtime225 = __toESM(require_jsx_runtime(), 1);
var variants36 = {
  enter: ({ transition: transition4, transitionEnd, delay: delay2 } = {}) => {
    var _a40;
    return {
      opacity: 1,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay3.enter(TRANSITION_DEFAULTS3.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: ({ transition: transition4, transitionEnd, delay: delay2 } = {}) => {
    var _a40;
    return {
      opacity: 0,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay3.exit(TRANSITION_DEFAULTS3.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  }
};
var fadeConfig3 = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants36
};
var Fade4 = (0, import_react441.forwardRef)(function Fade23(props, ref) {
  const {
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition4,
    transitionEnd,
    delay: delay2,
    ...rest
  } = props;
  const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const custom = { transition: transition4, transitionEnd, delay: delay2 };
  return (0, import_jsx_runtime225.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime225.jsx)(
    motion.div,
    {
      ref,
      className: cx("chakra-fade", className),
      custom,
      ...fadeConfig3,
      animate: animate2,
      ...rest
    }
  ) });
});
Fade4.displayName = "Fade";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/transition/dist/chunk-462CPKWM.mjs
init_shim();
var import_react442 = __toESM(require_react(), 1);
var import_jsx_runtime226 = __toESM(require_jsx_runtime(), 1);
var variants37 = {
  exit: ({ reverse, initialScale, transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 0,
      ...reverse ? { scale: initialScale, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { scale: initialScale, ...transitionEnd == null ? void 0 : transitionEnd.exit } },
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay3.exit(TRANSITION_DEFAULTS3.exit, delay2)
    };
  },
  enter: ({ transitionEnd, transition: transition4, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 1,
      scale: 1,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay3.enter(TRANSITION_DEFAULTS3.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var scaleFadeConfig3 = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants37
};
var ScaleFade4 = (0, import_react442.forwardRef)(
  function ScaleFade23(props, ref) {
    const {
      unmountOnExit,
      in: isOpen,
      reverse = true,
      initialScale = 0.95,
      className,
      transition: transition4,
      transitionEnd,
      delay: delay2,
      ...rest
    } = props;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = { initialScale, reverse, transition: transition4, transitionEnd, delay: delay2 };
    return (0, import_jsx_runtime226.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime226.jsx)(
      motion.div,
      {
        ref,
        className: cx("chakra-offset-slide", className),
        ...scaleFadeConfig3,
        animate: animate2,
        custom,
        ...rest
      }
    ) });
  }
);
ScaleFade4.displayName = "ScaleFade";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/transition/dist/chunk-Z2TCYYTS.mjs
init_shim();
var import_react443 = __toESM(require_react(), 1);
var import_jsx_runtime227 = __toESM(require_jsx_runtime(), 1);
var variants38 = {
  initial: ({ offsetX, offsetY, transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 0,
      x: offsetX,
      y: offsetY,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay3.exit(TRANSITION_DEFAULTS3.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: ({ transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    return {
      opacity: 1,
      x: 0,
      y: 0,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay3.enter(TRANSITION_DEFAULTS3.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: ({ offsetY, offsetX, transition: transition4, transitionEnd, reverse, delay: delay2 }) => {
    var _a40;
    const offset = { x: offsetX, y: offsetY };
    return {
      opacity: 0,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay3.exit(TRANSITION_DEFAULTS3.exit, delay2),
      ...reverse ? { ...offset, transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit } : { transitionEnd: { ...offset, ...transitionEnd == null ? void 0 : transitionEnd.exit } }
    };
  }
};
var slideFadeConfig3 = {
  initial: "initial",
  animate: "enter",
  exit: "exit",
  variants: variants38
};
var SlideFade4 = (0, import_react443.forwardRef)(
  function SlideFade23(props, ref) {
    const {
      unmountOnExit,
      in: isOpen,
      reverse = true,
      className,
      offsetX = 0,
      offsetY = 8,
      transition: transition4,
      transitionEnd,
      delay: delay2,
      ...rest
    } = props;
    const show = unmountOnExit ? isOpen && unmountOnExit : true;
    const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
    const custom = {
      offsetX,
      offsetY,
      reverse,
      transition: transition4,
      transitionEnd,
      delay: delay2
    };
    return (0, import_jsx_runtime227.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime227.jsx)(
      motion.div,
      {
        ref,
        className: cx("chakra-offset-slide", className),
        custom,
        ...slideFadeConfig3,
        animate: animate2,
        ...rest
      }
    ) });
  }
);
SlideFade4.displayName = "SlideFade";

// node_modules/@chakra-ui/react/node_modules/@chakra-ui/transition/dist/chunk-D35G6FNO.mjs
init_shim();
var import_react444 = __toESM(require_react(), 1);
var import_jsx_runtime228 = __toESM(require_jsx_runtime(), 1);
var defaultTransition3 = {
  exit: {
    duration: 0.15,
    ease: TRANSITION_EASINGS3.easeInOut
  },
  enter: {
    type: "spring",
    damping: 25,
    stiffness: 180
  }
};
var variants39 = {
  exit: ({ direction: direction3, transition: transition4, transitionEnd, delay: delay2 }) => {
    var _a40;
    const { exit: exitStyles } = getSlideTransition3({ direction: direction3 });
    return {
      ...exitStyles,
      transition: (_a40 = transition4 == null ? void 0 : transition4.exit) != null ? _a40 : withDelay3.exit(defaultTransition3.exit, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: ({ direction: direction3, transitionEnd, transition: transition4, delay: delay2 }) => {
    var _a40;
    const { enter: enterStyles } = getSlideTransition3({ direction: direction3 });
    return {
      ...enterStyles,
      transition: (_a40 = transition4 == null ? void 0 : transition4.enter) != null ? _a40 : withDelay3.enter(defaultTransition3.enter, delay2),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var Slide4 = (0, import_react444.forwardRef)(function Slide23(props, ref) {
  const {
    direction: direction3 = "right",
    style,
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition4,
    transitionEnd,
    delay: delay2,
    motionProps,
    ...rest
  } = props;
  const transitionStyles = getSlideTransition3({ direction: direction3 });
  const computedStyle = Object.assign(
    { position: "fixed" },
    transitionStyles.position,
    style
  );
  const show = unmountOnExit ? isOpen && unmountOnExit : true;
  const animate2 = isOpen || unmountOnExit ? "enter" : "exit";
  const custom = { transitionEnd, transition: transition4, direction: direction3, delay: delay2 };
  return (0, import_jsx_runtime228.jsx)(AnimatePresence, { custom, children: show && (0, import_jsx_runtime228.jsx)(
    motion.div,
    {
      ...rest,
      ref,
      initial: "exit",
      className: cx("chakra-slide", className),
      animate: animate2,
      exit: "exit",
      custom,
      variants: variants39,
      style: computedStyle,
      ...motionProps
    }
  ) });
});
Slide4.displayName = "Slide";
export {
  AbsoluteCenter,
  Accordion,
  AccordionButton,
  AccordionIcon,
  AccordionItem,
  AccordionPanel,
  AccordionProvider,
  Alert,
  AlertDescription,
  AlertDialog,
  ModalBody as AlertDialogBody,
  ModalCloseButton as AlertDialogCloseButton,
  AlertDialogContent,
  ModalFooter as AlertDialogFooter,
  ModalHeader as AlertDialogHeader,
  ModalOverlay as AlertDialogOverlay,
  AlertIcon,
  AlertTitle,
  AspectRatio,
  Avatar,
  AvatarBadge,
  AvatarGroup,
  Badge,
  Box,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbSeparator,
  Button,
  ButtonGroup,
  ButtonSpinner,
  CSSPolyfill2 as CSSPolyfill,
  CSSReset2 as CSSReset,
  CSSVars2 as CSSVars,
  Card,
  CardBody,
  CardFooter,
  CardHeader,
  Center,
  ChakraBaseProvider,
  ChakraProvider2 as ChakraProvider,
  Checkbox,
  CheckboxGroup,
  CheckboxIcon,
  Circle,
  CircularProgress,
  CircularProgressLabel,
  CloseButton,
  Code,
  Collapse3 as Collapse,
  ColorModeContext,
  ColorModeProvider,
  ColorModeScript,
  Container2 as Container,
  ControlBox,
  DarkMode,
  Divider,
  Drawer,
  ModalBody as DrawerBody,
  ModalCloseButton as DrawerCloseButton,
  DrawerContent,
  ModalFooter as DrawerFooter,
  ModalHeader as DrawerHeader,
  ModalOverlay as DrawerOverlay,
  TRANSITION_EASINGS3 as EASINGS,
  Editable,
  EditableInput,
  EditablePreview,
  EditableTextarea,
  EnvironmentProvider2 as EnvironmentProvider,
  Fade4 as Fade,
  Flex,
  FocusLock2 as FocusLock,
  FormControl,
  FormErrorIcon,
  FormErrorMessage,
  FormHelperText,
  FormLabel,
  GenericAvatarIcon,
  GlobalStyle2 as GlobalStyle,
  Grid,
  GridItem,
  HStack,
  Heading,
  Hide,
  Highlight,
  Icon,
  IconButton,
  Image3 as Image,
  Img2 as Img,
  Input,
  InputAddon,
  InputGroup,
  InputLeftAddon,
  InputLeftElement,
  InputRightAddon,
  InputRightElement,
  Kbd,
  LightMode,
  Link,
  LinkBox,
  LinkOverlay,
  List,
  ListIcon,
  ListItem,
  Mark,
  Menu,
  MenuButton,
  MenuCommand,
  MenuDescendantsProvider,
  MenuDivider,
  MenuGroup,
  MenuIcon,
  MenuItem,
  MenuItemOption,
  MenuList,
  MenuOptionGroup,
  MenuProvider,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalContextProvider,
  ModalFocusScope,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  NumberDecrementStepper,
  NumberIncrementStepper,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  OrderedList,
  PinInput,
  PinInputDescendantsProvider,
  PinInputField,
  PinInputProvider,
  Popover,
  PopoverAnchor,
  PopoverArrow,
  PopoverBody,
  PopoverCloseButton,
  PopoverContent,
  PopoverFooter,
  PopoverHeader,
  PopoverTrigger,
  Portal,
  PortalManager,
  Progress,
  ProgressLabel,
  Radio,
  RadioGroup,
  RangeSlider,
  RangeSliderFilledTrack,
  RangeSliderMark,
  RangeSliderProvider,
  RangeSliderThumb,
  RangeSliderTrack,
  RequiredIndicator,
  ScaleFade4 as ScaleFade,
  Select,
  SelectField,
  Show,
  SimpleGrid,
  Skeleton,
  SkeletonCircle,
  SkeletonText,
  Slide4 as Slide,
  SlideFade4 as SlideFade,
  Slider,
  SliderFilledTrack,
  SliderMark,
  SliderProvider,
  SliderThumb,
  SliderTrack,
  Spacer,
  Spinner,
  Square,
  Stack,
  StackDivider,
  StackItem,
  Stat,
  StatArrow,
  StatDownArrow,
  StatGroup,
  StatHelpText,
  StatLabel,
  StatNumber,
  StatUpArrow,
  StylesProvider2 as StylesProvider,
  Switch,
  Tab,
  TabIndicator,
  TabList,
  TabPanel,
  TabPanels,
  Table,
  TableCaption,
  TableContainer,
  Tabs,
  TabsDescendantsProvider,
  TabsProvider,
  Tag,
  TagCloseButton,
  TagLabel,
  TagLeftIcon,
  TagRightIcon,
  Tbody,
  Td,
  Text,
  Textarea,
  Tfoot,
  Th,
  Thead,
  ThemeProvider3 as ThemeProvider,
  Toast,
  ToastOptionProvider,
  ToastProvider,
  Tooltip,
  Tr,
  UnorderedList,
  VStack,
  VisuallyHidden,
  VisuallyHiddenInput,
  Wrap,
  WrapItem,
  addPrefix,
  assignRef12 as assignRef,
  background,
  baseTheme2 as baseTheme,
  border,
  calc,
  chakra2 as chakra,
  color,
  cookieStorageManager,
  cookieStorageManagerSSR,
  createCookieStorageManager,
  createIcon,
  createLocalStorageManager,
  createMultiStyleConfigHelpers,
  createRenderToast,
  createStandaloneToast,
  createStylesContext2 as createStylesContext,
  createToastFn,
  css2 as css,
  cssVar,
  defineCssVars,
  defineStyle,
  defineStyleConfig,
  effect,
  extendBaseTheme,
  extendTheme,
  fadeConfig3 as fadeConfig,
  filter,
  flatten,
  flattenTokens,
  flexbox,
  forwardRef5 as forwardRef,
  getCSSVar,
  getCss,
  getScriptSrc,
  getSlideTransition3 as getSlideTransition,
  getToastPlacement,
  getToken2 as getToken,
  grid,
  interactivity,
  isChakraTheme2 as isChakraTheme,
  isStyleProp,
  keyframes,
  layout,
  layoutPropNames,
  list,
  localStorageManager,
  mergeThemeOverride,
  omitThemingProps,
  others,
  cssVars3 as popperCSSVars,
  position,
  propNames,
  pseudoPropNames,
  pseudoSelectors,
  requiredChakraThemeKeys2 as requiredChakraThemeKeys,
  resolveStyleConfig,
  ring,
  scaleFadeConfig3 as scaleFadeConfig,
  scroll,
  shouldForwardProp2 as shouldForwardProp,
  slideFadeConfig3 as slideFadeConfig,
  space,
  styled2 as styled,
  systemProps,
  textDecoration,
  theme2 as theme,
  toCSSObject2 as toCSSObject,
  toCSSVar,
  toVarDefinition,
  toVarReference,
  tokenToCSSVar,
  transform,
  transition,
  typography,
  useAccordion,
  useAccordionContext,
  useAccordionItem,
  useAccordionItemState,
  useAccordionStyles,
  useAlertStyles,
  useAnimationState,
  useAvatarStyles,
  useBoolean,
  useBreadcrumbStyles,
  useBreakpoint,
  useBreakpointValue,
  useButtonGroup,
  useCallbackRef2 as useCallbackRef,
  useCardStyles,
  useChakra2 as useChakra,
  useCheckbox,
  useCheckboxGroup,
  useClipboard,
  useColorMode,
  useColorModePreference,
  useColorModeValue,
  useComponentStyles__unstable2 as useComponentStyles__unstable,
  useConst,
  useControllableProp,
  useControllableState2 as useControllableState,
  useCounter,
  useDimensions,
  useDisclosure,
  useDrawerContext,
  useEditable,
  useEditableContext,
  useEditableControls,
  useEditableState,
  useEditableStyles,
  useEnvironment2 as useEnvironment,
  useEventListener2 as useEventListener,
  useEventListenerMap,
  useFocusEffect,
  useFocusOnHide,
  useFocusOnPointerDown2 as useFocusOnPointerDown,
  useFocusOnShow,
  useForceUpdate2 as useForceUpdate,
  useFormControl,
  useFormControlContext,
  useFormControlProps,
  useFormControlStyles,
  useFormErrorStyles,
  useHighlight,
  useId6 as useId,
  useIds,
  useImage2 as useImage,
  useInputGroupStyles,
  useInterval,
  useLatestRef,
  useListStyles,
  useMediaQuery,
  useMenu,
  useMenuButton,
  useMenuContext,
  useMenuDescendant,
  useMenuDescendants,
  useMenuDescendantsContext,
  useMenuItem,
  useMenuList,
  useMenuOption,
  useMenuOptionGroup,
  useMenuPositioner,
  useMenuState,
  useMenuStyles,
  useMergeRefs3 as useMergeRefs,
  useModal,
  useModalContext,
  useModalStyles,
  useMouseDownRef,
  useMultiStyleConfig2 as useMultiStyleConfig,
  useNumberInput,
  useNumberInputStyles,
  useOptionalPart,
  useOutsideClick,
  usePanGesture,
  usePinInput,
  usePinInputContext,
  usePinInputField,
  usePointerEvent,
  usePopover,
  usePopoverContext,
  usePopoverStyles,
  usePopper3 as usePopper,
  usePortalManager,
  usePrefersReducedMotion,
  usePrevious,
  useProgressStyles,
  useQuery,
  useRadio,
  useRadioGroup,
  useRadioGroupContext,
  useRangeSlider,
  useRangeSliderContext,
  useRangeSliderStyles,
  useSafeLayoutEffect3 as useSafeLayoutEffect,
  useShortcut,
  useSlider,
  useSliderContext,
  useSliderStyles,
  useStatStyles,
  useStyleConfig2 as useStyleConfig,
  useStyles2 as useStyles,
  useTab,
  useTabIndicator,
  useTabList,
  useTabPanel,
  useTabPanels,
  useTableStyles,
  useTabs,
  useTabsContext,
  useTabsDescendant,
  useTabsDescendants,
  useTabsDescendantsContext,
  useTabsStyles,
  useTagStyles,
  useTheme2 as useTheme,
  useTimeout2 as useTimeout,
  useToast,
  useToken2 as useToken,
  useTooltip,
  useUnmountEffect2 as useUnmountEffect,
  useUpdateEffect2 as useUpdateEffect,
  useWhyDidYouUpdate,
  visuallyHiddenStyle,
  withDefaultColorScheme,
  withDefaultProps,
  withDefaultSize,
  withDefaultVariant,
  withDelay3 as withDelay
};
//# sourceMappingURL=@chakra-ui_react.js.map
